using System;
using System.Collections.Generic;
using RestSharp;
using IO.Swagger.Client;
using samsara.Model;

namespace samsara.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFleetApi
    {
        /// <summary>
        /// /fleet/add_address This method adds an address book entry to the specified group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="addressParam"></param>
        /// <returns></returns>
        void AddFleetAddress (string accessToken, AddressParam addressParam);
        /// <summary>
        /// /addresses Add one or more addresses to the organization
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="addresses">List of addresses/geofences to add. Geofences can be circular or a polygon.  For each address, only one of &#39;circle&#39; or &#39;polygon&#39; should be provided. If both are provided, the geofence will be saved as a polygon.</param>
        /// <returns>List&lt;Address&gt;</returns>
        List<Address> AddOrganizationAddresses (string accessToken, Addresses addresses);
        /// <summary>
        /// /fleet/dispatch/routes Create a new dispatch route.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="createDispatchRouteParams"></param>
        /// <returns>DispatchRoute</returns>
        DispatchRoute CreateDispatchRoute (string accessToken, DispatchRouteCreate createDispatchRouteParams);
        /// <summary>
        /// /fleet/drivers/create Create a new driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="createDriverParam">Driver creation body</param>
        /// <returns>Driver</returns>
        Driver CreateDriver (string accessToken, DriverForCreate createDriverParam);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes Create a new dispatch route for the driver with driver_id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverId">ID of the driver with the associated routes.</param>
        /// <param name="createDispatchRouteParams"></param>
        /// <returns>DispatchRoute</returns>
        DispatchRoute CreateDriverDispatchRoute (string accessToken, long? driverId, DispatchRouteCreate createDispatchRouteParams);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/documents Create a driver document for the given driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverId">ID of the driver for whom the document is created.</param>
        /// <param name="createDocumentParams">To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.</param>
        /// <returns>Document</returns>
        Document CreateDriverDocument (string accessToken, long? driverId, DocumentCreate createDocumentParams);
        /// <summary>
        /// /fleet/maintenance/dvirs Create a new dvir, marking a vehicle or trailer safe or unsafe.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="createDvirParam">DVIR creation body</param>
        /// <returns>DvirBase</returns>
        DvirBase CreateDvir (string accessToken, CreateDvirParam createDvirParam);
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes Create a new dispatch route for the vehicle with vehicle_id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="vehicleId">ID of the vehicle with the associated routes.</param>
        /// <param name="createDispatchRouteParams"></param>
        /// <returns>DispatchRoute</returns>
        DispatchRoute CreateVehicleDispatchRoute (string accessToken, long? vehicleId, DispatchRouteCreate createDispatchRouteParams);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Deactivate a driver with the given id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <returns></returns>
        void DeactivateDriver (string accessToken, string driverIdOrExternalId);
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+}/ Delete a dispatch route and its associated jobs.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="routeId">ID of the dispatch route.</param>
        /// <returns></returns>
        void DeleteDispatchRouteById (string accessToken, long? routeId);
        /// <summary>
        /// /addresses/{addressId} Delete an address.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="addressId">ID of the address/geofence</param>
        /// <returns></returns>
        void DeleteOrganizationAddress (string accessToken, long? addressId);
        /// <summary>
        /// /fleet/dispatch/routes Fetch all of the dispatch routes for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <param name="endTime">Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.</param>
        /// <param name="duration">Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.</param>
        /// <returns>DispatchRoutes</returns>
        DispatchRoutes FetchAllDispatchRoutes (string accessToken, long? groupId, long? endTime, long? duration);
        /// <summary>
        /// /fleet/dispatch/routes/job_updates Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <param name="sequenceId">Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.</param>
        /// <param name="include">Optionally set include&#x3D;route to include route object in response payload.</param>
        /// <returns>AllRouteJobUpdates</returns>
        AllRouteJobUpdates FetchAllRouteJobUpdates (string accessToken, long? groupId, string sequenceId, string include);
        /// <summary>
        /// /fleet/assets/locations Fetch current locations of all assets for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetAllAssetCurrentLocations (string accessToken, long? groupId);
        /// <summary>
        /// /fleet/assets Fetch all of the assets for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetAllAssets (string accessToken, long? groupId);
        /// <summary>
        /// /fleet/drivers/inactive Fetch all deactivated drivers for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <returns>List&lt;Driver&gt;</returns>
        List<Driver> GetAllDeactivatedDrivers (string accessToken, long? groupId);
        /// <summary>
        /// /fleet/assets/{assetId:[0-9]+}/locations Fetch the historical locations for the asset.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="assetId">ID of the asset</param>
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param>
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param>
        /// <returns>AssetLocationResponse</returns>
        AssetLocationResponse GetAssetLocation (string accessToken, long? assetId, long? startMs, long? endMs);
        /// <summary>
        /// /fleet/assets/{assetId:[0-9]+}/reefer Fetch the reefer-specific stats of an asset.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="assetId">ID of the asset</param>
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param>
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param>
        /// <returns>AssetReeferResponse</returns>
        AssetReeferResponse GetAssetReefer (string accessToken, long? assetId, long? startMs, long? endMs);
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch deactivated driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <returns>Driver</returns>
        Driver GetDeactivatedDriverById (string accessToken, string driverIdOrExternalId);
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+} Fetch a dispatch route by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="routeId">ID of the dispatch route.</param>
        /// <returns>DispatchRoute</returns>
        DispatchRoute GetDispatchRouteById (string accessToken, long? routeId);
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+}/history Fetch the history of a dispatch route.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="routeId">ID of the route with history.</param>
        /// <param name="startTime">Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.</param>
        /// <param name="endTime">Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.</param>
        /// <returns>DispatchRouteHistory</returns>
        DispatchRouteHistory GetDispatchRouteHistory (string accessToken, long? routeId, long? startTime, long? endTime);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes Fetch all of the dispatch routes for a given driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverId">ID of the driver with the associated routes.</param>
        /// <param name="endTime">Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.</param>
        /// <param name="duration">Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.</param>
        /// <returns>DispatchRoutes</returns>
        DispatchRoutes GetDispatchRoutesByDriverId (string accessToken, long? driverId, long? endTime, long? duration);
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes Fetch all of the dispatch routes for a given vehicle.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="vehicleId">ID of the vehicle with the associated routes.</param>
        /// <param name="endTime">Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.</param>
        /// <param name="duration">Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.</param>
        /// <returns>DispatchRoutes</returns>
        DispatchRoutes GetDispatchRoutesByVehicleId (string accessToken, long? vehicleId, long? endTime, long? duration);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <returns>CurrentDriver</returns>
        CurrentDriver GetDriverById (string accessToken, string driverIdOrExternalId);
        /// <summary>
        /// /fleet/drivers/document_types Fetch all of the document types.
        /// </summary>
        /// <returns>DocumentTypes</returns>
        DocumentTypes GetDriverDocumentTypesByOrgId ();
        /// <summary>
        /// /fleet/drivers/documents Fetch all of the documents.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="endMs">Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.</param>
        /// <param name="durationMs">Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.</param>
        /// <returns>Documents</returns>
        Documents GetDriverDocumentsByOrgId (string accessToken, long? endMs, long? durationMs);
        /// <summary>
        /// /fleet/drivers/{driverId:[0-9]+}/safety/score Fetch the safety score for the driver.
        /// </summary>
        /// <param name="driverId">ID of the driver</param>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param>
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param>
        /// <returns>DriverSafetyScoreResponse</returns>
        DriverSafetyScoreResponse GetDriverSafetyScore (long? driverId, string accessToken, long? startMs, long? endMs);
        /// <summary>
        /// /fleet/maintenance/dvirs Get DVIRs for the org within provided time constraints
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="endMs">time in millis until the last dvir log.</param>
        /// <param name="durationMs">time in millis which corresponds to the duration before the end_ms.</param>
        /// <param name="groupId">Group ID to query.</param>
        /// <returns>DvirListResponse</returns>
        DvirListResponse GetDvirs (string accessToken, int? endMs, int? durationMs, int? groupId);
        /// <summary>
        /// /fleet/drivers Get all the drivers for the specified group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupDriversParam"></param>
        /// <returns>DriversResponse</returns>
        DriversResponse GetFleetDrivers (string accessToken, GroupDriversParam groupDriversParam);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs Get summarized daily HOS charts for a specified driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverId">ID of the driver with HOS logs.</param>
        /// <param name="hosLogsParam"></param>
        /// <returns>DriverDailyLogResponse</returns>
        DriverDailyLogResponse GetFleetDriversHosDailyLogs (string accessToken, long? driverId, HosLogsParam hosLogsParam);
        /// <summary>
        /// /fleet/drivers/summary Get the distance and time each driver in an organization has driven in a given time period.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driversSummaryParam">Org ID and time range to query.</param>
        /// <param name="snapToDayBounds">Snap query result to HOS day boundaries.</param>
        /// <returns>DriversSummaryResponse</returns>
        DriversSummaryResponse GetFleetDriversSummary (string accessToken, DriversSummaryParam driversSummaryParam, bool? snapToDayBounds);
        /// <summary>
        /// /fleet/hos_authentication_logs Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="hosAuthenticationLogsParam"></param>
        /// <returns>HosAuthenticationLogsResponse</returns>
        HosAuthenticationLogsResponse GetFleetHosAuthenticationLogs (string accessToken, HosAuthenticationLogsParam hosAuthenticationLogsParam);
        /// <summary>
        /// /fleet/hos_logs Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="hosLogsParam"></param>
        /// <returns>HosLogsResponse</returns>
        HosLogsResponse GetFleetHosLogs (string accessToken, HosLogsParam1 hosLogsParam);
        /// <summary>
        /// /fleet/hos_logs_summary Get the current HOS status for all drivers in the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="hosLogsParam"></param>
        /// <returns>HosLogsSummaryResponse</returns>
        HosLogsSummaryResponse GetFleetHosLogsSummary (string accessToken, HosLogsParam2 hosLogsParam);
        /// <summary>
        /// /fleet/locations Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupParam">Group ID to query.</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetFleetLocations (string accessToken, GroupParam groupParam);
        /// <summary>
        /// /fleet/maintenance/list Get list of the vehicles with any engine faults or check light data.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupParam">Group ID to query.</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetFleetMaintenanceList (string accessToken, GroupParam groupParam);
        /// <summary>
        /// /fleet/trips Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="tripsParam">Group ID, vehicle ID and time range to query.</param>
        /// <returns>TripResponse</returns>
        TripResponse GetFleetTrips (string accessToken, TripsParam tripsParam);
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Gets a specific vehicle.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="vehicleIdOrExternalId">ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.</param>
        /// <returns>FleetVehicleResponse</returns>
        FleetVehicleResponse GetFleetVehicle (string accessToken, string vehicleIdOrExternalId);
        /// <summary>
        /// /addresses/{addressId} Fetch an address by its id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="addressId">ID of the address/geofence</param>
        /// <returns>Address</returns>
        Address GetOrganizationAddress (string accessToken, long? addressId);
        /// <summary>
        /// /addresses Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <returns>List&lt;Address&gt;</returns>
        List<Address> GetOrganizationAddresses (string accessToken);
        /// <summary>
        /// /contacts/{contact_id} Fetch a contact by its id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="contactId">ID of the contact</param>
        /// <returns>Contact</returns>
        Contact GetOrganizationContact (string accessToken, long? contactId);
        /// <summary>
        /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event Fetch harsh event details for a vehicle.
        /// </summary>
        /// <param name="vehicleId">ID of the vehicle</param>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="timestamp">Timestamp in milliseconds representing the timestamp of a harsh event.</param>
        /// <returns>VehicleHarshEventResponse</returns>
        VehicleHarshEventResponse GetVehicleHarshEvent (long? vehicleId, string accessToken, long? timestamp);
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+}/locations Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="vehicleId">ID of the vehicle with the associated routes.</param>
        /// <param name="startMs">Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)</param>
        /// <param name="endMs">Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)</param>
        /// <returns>FleetVehicleLocations</returns>
        FleetVehicleLocations GetVehicleLocations (string accessToken, long? vehicleId, long? startMs, long? endMs);
        /// <summary>
        /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/score Fetch the safety score for the vehicle.
        /// </summary>
        /// <param name="vehicleId">ID of the vehicle</param>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param>
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param>
        /// <returns>VehicleSafetyScoreResponse</returns>
        VehicleSafetyScoreResponse GetVehicleSafetyScore (long? vehicleId, string accessToken, long? startMs, long? endMs);
        /// <summary>
        /// /fleet/vehicles/stats Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="startMs">Time in Unix epoch milliseconds for the start of the query.</param>
        /// <param name="endMs">Time in Unix epoch milliseconds for the end of the query.</param>
        /// <param name="series">Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2</param>
        /// <param name="tagIds">Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3</param>
        /// <param name="startingAfter">Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.</param>
        /// <param name="endingBefore">Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.</param>
        /// <param name="limit">Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetVehicleStats (string accessToken, int? startMs, int? endMs, string series, string tagIds, string startingAfter, string endingBefore, long? limit);
        /// <summary>
        /// /fleet/vehicles/locations Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="startMs">Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)</param>
        /// <param name="endMs">Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)</param>
        /// <returns>FleetVehiclesLocations</returns>
        FleetVehiclesLocations GetVehiclesLocations (string accessToken, int? startMs, int? endMs);
        /// <summary>
        /// /contacts Fetch all contacts for the organization.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <returns>List&lt;Contact&gt;</returns>
        List<Contact> ListContacts (string accessToken);
        /// <summary>
        /// /fleet/list Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupParam">Group ID to query.</param>
        /// <param name="startingAfter">Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.</param>
        /// <param name="endingBefore">Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.</param>
        /// <param name="limit">Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 ListFleet (string accessToken, GroupParam groupParam, string startingAfter, string endingBefore, long? limit);
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="vehicleIdOrExternalId">ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.</param>
        /// <param name="data"></param>
        /// <returns>FleetVehicleResponse</returns>
        FleetVehicleResponse PatchFleetVehicle (string accessToken, string vehicleIdOrExternalId, Data data);
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Reactivate the inactive driver having id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <param name="reactivateDriverParam">Driver reactivation body</param>
        /// <returns>CurrentDriver</returns>
        CurrentDriver ReactivateDriverById (string accessToken, string driverIdOrExternalId, ReactivateDriverParam reactivateDriverParam);
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+}/ Update a dispatch route and its associated jobs.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="routeId">ID of the dispatch route.</param>
        /// <param name="updateDispatchRouteParams"></param>
        /// <returns>DispatchRoute</returns>
        DispatchRoute UpdateDispatchRouteById (string accessToken, long? routeId, DispatchRoute updateDispatchRouteParams);
        /// <summary>
        /// /addresses/{addressId} Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="address">Update parts of an address&#39;s value. If the geofence &#39;circle&#39; or &#39;polygon&#39; key is specified, the update will change the type of geofence accordingly.</param>
        /// <param name="addressId">ID of the address/geofence</param>
        /// <returns></returns>
        void UpdateOrganizationAddress (string accessToken, Address address, long? addressId);
        /// <summary>
        /// /fleet/set_data This method enables the mutation of metadata for vehicles in the Samsara Cloud.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="vehicleUpdateParam"></param>
        /// <returns></returns>
        void UpdateVehicles (string accessToken, VehicleUpdateParam vehicleUpdateParam);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FleetApi : IFleetApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public FleetApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FleetApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// /fleet/add_address This method adds an address book entry to the specified group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="addressParam"></param> 
        /// <returns></returns>            
        public void AddFleetAddress (string accessToken, AddressParam addressParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling AddFleetAddress");
            
            // verify the required parameter 'addressParam' is set
            if (addressParam == null) throw new ApiException(400, "Missing required parameter 'addressParam' when calling AddFleetAddress");
            
    
            var path = "/fleet/add_address";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(addressParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling AddFleetAddress: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling AddFleetAddress: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// /addresses Add one or more addresses to the organization
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="addresses">List of addresses/geofences to add. Geofences can be circular or a polygon.  For each address, only one of &#39;circle&#39; or &#39;polygon&#39; should be provided. If both are provided, the geofence will be saved as a polygon.</param> 
        /// <returns>List&lt;Address&gt;</returns>            
        public List<Address> AddOrganizationAddresses (string accessToken, Addresses addresses)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling AddOrganizationAddresses");
            
            // verify the required parameter 'addresses' is set
            if (addresses == null) throw new ApiException(400, "Missing required parameter 'addresses' when calling AddOrganizationAddresses");
            
    
            var path = "/addresses";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(addresses); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling AddOrganizationAddresses: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling AddOrganizationAddresses: " + response.ErrorMessage, response.ErrorMessage);
    
            return (List<Address>) ApiClient.Deserialize(response.Content, typeof(List<Address>), response.Headers);
        }
    
        /// <summary>
        /// /fleet/dispatch/routes Create a new dispatch route.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="createDispatchRouteParams"></param> 
        /// <returns>DispatchRoute</returns>            
        public DispatchRoute CreateDispatchRoute (string accessToken, DispatchRouteCreate createDispatchRouteParams)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateDispatchRoute");
            
            // verify the required parameter 'createDispatchRouteParams' is set
            if (createDispatchRouteParams == null) throw new ApiException(400, "Missing required parameter 'createDispatchRouteParams' when calling CreateDispatchRoute");
            
    
            var path = "/fleet/dispatch/routes";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDispatchRouteParams); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDispatchRoute: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDispatchRoute: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoute) ApiClient.Deserialize(response.Content, typeof(DispatchRoute), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/create Create a new driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="createDriverParam">Driver creation body</param> 
        /// <returns>Driver</returns>            
        public Driver CreateDriver (string accessToken, DriverForCreate createDriverParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateDriver");
            
            // verify the required parameter 'createDriverParam' is set
            if (createDriverParam == null) throw new ApiException(400, "Missing required parameter 'createDriverParam' when calling CreateDriver");
            
    
            var path = "/fleet/drivers/create";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDriverParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriver: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Driver) ApiClient.Deserialize(response.Content, typeof(Driver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes Create a new dispatch route for the driver with driver_id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverId">ID of the driver with the associated routes.</param> 
        /// <param name="createDispatchRouteParams"></param> 
        /// <returns>DispatchRoute</returns>            
        public DispatchRoute CreateDriverDispatchRoute (string accessToken, long? driverId, DispatchRouteCreate createDispatchRouteParams)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateDriverDispatchRoute");
            
            // verify the required parameter 'driverId' is set
            if (driverId == null) throw new ApiException(400, "Missing required parameter 'driverId' when calling CreateDriverDispatchRoute");
            
            // verify the required parameter 'createDispatchRouteParams' is set
            if (createDispatchRouteParams == null) throw new ApiException(400, "Missing required parameter 'createDispatchRouteParams' when calling CreateDriverDispatchRoute");
            
    
            var path = "/fleet/drivers/{driver_id}/dispatch/routes";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id" + "}", ApiClient.ParameterToString(driverId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDispatchRouteParams); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriverDispatchRoute: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriverDispatchRoute: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoute) ApiClient.Deserialize(response.Content, typeof(DispatchRoute), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/documents Create a driver document for the given driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverId">ID of the driver for whom the document is created.</param> 
        /// <param name="createDocumentParams">To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.</param> 
        /// <returns>Document</returns>            
        public Document CreateDriverDocument (string accessToken, long? driverId, DocumentCreate createDocumentParams)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateDriverDocument");
            
            // verify the required parameter 'driverId' is set
            if (driverId == null) throw new ApiException(400, "Missing required parameter 'driverId' when calling CreateDriverDocument");
            
            // verify the required parameter 'createDocumentParams' is set
            if (createDocumentParams == null) throw new ApiException(400, "Missing required parameter 'createDocumentParams' when calling CreateDriverDocument");
            
    
            var path = "/fleet/drivers/{driver_id}/documents";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id" + "}", ApiClient.ParameterToString(driverId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDocumentParams); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriverDocument: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriverDocument: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Document) ApiClient.Deserialize(response.Content, typeof(Document), response.Headers);
        }
    
        /// <summary>
        /// /fleet/maintenance/dvirs Create a new dvir, marking a vehicle or trailer safe or unsafe.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="createDvirParam">DVIR creation body</param> 
        /// <returns>DvirBase</returns>            
        public DvirBase CreateDvir (string accessToken, CreateDvirParam createDvirParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateDvir");
            
            // verify the required parameter 'createDvirParam' is set
            if (createDvirParam == null) throw new ApiException(400, "Missing required parameter 'createDvirParam' when calling CreateDvir");
            
    
            var path = "/fleet/maintenance/dvirs";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDvirParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDvir: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDvir: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DvirBase) ApiClient.Deserialize(response.Content, typeof(DvirBase), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes Create a new dispatch route for the vehicle with vehicle_id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="vehicleId">ID of the vehicle with the associated routes.</param> 
        /// <param name="createDispatchRouteParams"></param> 
        /// <returns>DispatchRoute</returns>            
        public DispatchRoute CreateVehicleDispatchRoute (string accessToken, long? vehicleId, DispatchRouteCreate createDispatchRouteParams)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateVehicleDispatchRoute");
            
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null) throw new ApiException(400, "Missing required parameter 'vehicleId' when calling CreateVehicleDispatchRoute");
            
            // verify the required parameter 'createDispatchRouteParams' is set
            if (createDispatchRouteParams == null) throw new ApiException(400, "Missing required parameter 'createDispatchRouteParams' when calling CreateVehicleDispatchRoute");
            
    
            var path = "/fleet/vehicles/{vehicle_id}/dispatch/routes";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicle_id" + "}", ApiClient.ParameterToString(vehicleId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDispatchRouteParams); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateVehicleDispatchRoute: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateVehicleDispatchRoute: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoute) ApiClient.Deserialize(response.Content, typeof(DispatchRoute), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Deactivate a driver with the given id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <returns></returns>            
        public void DeactivateDriver (string accessToken, string driverIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling DeactivateDriver");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling DeactivateDriver");
            
    
            var path = "/fleet/drivers/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeactivateDriver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeactivateDriver: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+}/ Delete a dispatch route and its associated jobs.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="routeId">ID of the dispatch route.</param> 
        /// <returns></returns>            
        public void DeleteDispatchRouteById (string accessToken, long? routeId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling DeleteDispatchRouteById");
            
            // verify the required parameter 'routeId' is set
            if (routeId == null) throw new ApiException(400, "Missing required parameter 'routeId' when calling DeleteDispatchRouteById");
            
    
            var path = "/fleet/dispatch/routes/{route_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "route_id" + "}", ApiClient.ParameterToString(routeId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteDispatchRouteById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteDispatchRouteById: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// /addresses/{addressId} Delete an address.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="addressId">ID of the address/geofence</param> 
        /// <returns></returns>            
        public void DeleteOrganizationAddress (string accessToken, long? addressId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling DeleteOrganizationAddress");
            
            // verify the required parameter 'addressId' is set
            if (addressId == null) throw new ApiException(400, "Missing required parameter 'addressId' when calling DeleteOrganizationAddress");
            
    
            var path = "/addresses/{addressId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "addressId" + "}", ApiClient.ParameterToString(addressId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteOrganizationAddress: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteOrganizationAddress: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// /fleet/dispatch/routes Fetch all of the dispatch routes for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param> 
        /// <param name="endTime">Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.</param> 
        /// <param name="duration">Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.</param> 
        /// <returns>DispatchRoutes</returns>            
        public DispatchRoutes FetchAllDispatchRoutes (string accessToken, long? groupId, long? endTime, long? duration)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling FetchAllDispatchRoutes");
            
    
            var path = "/fleet/dispatch/routes";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
 if (endTime != null) queryParams.Add("end_time", ApiClient.ParameterToString(endTime)); // query parameter
 if (duration != null) queryParams.Add("duration", ApiClient.ParameterToString(duration)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling FetchAllDispatchRoutes: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling FetchAllDispatchRoutes: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoutes) ApiClient.Deserialize(response.Content, typeof(DispatchRoutes), response.Headers);
        }
    
        /// <summary>
        /// /fleet/dispatch/routes/job_updates Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param> 
        /// <param name="sequenceId">Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.</param> 
        /// <param name="include">Optionally set include&#x3D;route to include route object in response payload.</param> 
        /// <returns>AllRouteJobUpdates</returns>            
        public AllRouteJobUpdates FetchAllRouteJobUpdates (string accessToken, long? groupId, string sequenceId, string include)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling FetchAllRouteJobUpdates");
            
    
            var path = "/fleet/dispatch/routes/job_updates";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
 if (sequenceId != null) queryParams.Add("sequence_id", ApiClient.ParameterToString(sequenceId)); // query parameter
 if (include != null) queryParams.Add("include", ApiClient.ParameterToString(include)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling FetchAllRouteJobUpdates: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling FetchAllRouteJobUpdates: " + response.ErrorMessage, response.ErrorMessage);
    
            return (AllRouteJobUpdates) ApiClient.Deserialize(response.Content, typeof(AllRouteJobUpdates), response.Headers);
        }
    
        /// <summary>
        /// /fleet/assets/locations Fetch current locations of all assets for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param> 
        /// <returns>InlineResponse2001</returns>            
        public InlineResponse2001 GetAllAssetCurrentLocations (string accessToken, long? groupId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetAllAssetCurrentLocations");
            
    
            var path = "/fleet/assets/locations";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllAssetCurrentLocations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllAssetCurrentLocations: " + response.ErrorMessage, response.ErrorMessage);
    
            return (InlineResponse2001) ApiClient.Deserialize(response.Content, typeof(InlineResponse2001), response.Headers);
        }
    
        /// <summary>
        /// /fleet/assets Fetch all of the assets for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param> 
        /// <returns>InlineResponse200</returns>            
        public InlineResponse200 GetAllAssets (string accessToken, long? groupId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetAllAssets");
            
    
            var path = "/fleet/assets";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllAssets: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllAssets: " + response.ErrorMessage, response.ErrorMessage);
    
            return (InlineResponse200) ApiClient.Deserialize(response.Content, typeof(InlineResponse200), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/inactive Fetch all deactivated drivers for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param> 
        /// <returns>List&lt;Driver&gt;</returns>            
        public List<Driver> GetAllDeactivatedDrivers (string accessToken, long? groupId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetAllDeactivatedDrivers");
            
    
            var path = "/fleet/drivers/inactive";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllDeactivatedDrivers: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllDeactivatedDrivers: " + response.ErrorMessage, response.ErrorMessage);
    
            return (List<Driver>) ApiClient.Deserialize(response.Content, typeof(List<Driver>), response.Headers);
        }
    
        /// <summary>
        /// /fleet/assets/{assetId:[0-9]+}/locations Fetch the historical locations for the asset.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="assetId">ID of the asset</param> 
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param> 
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param> 
        /// <returns>AssetLocationResponse</returns>            
        public AssetLocationResponse GetAssetLocation (string accessToken, long? assetId, long? startMs, long? endMs)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetAssetLocation");
            
            // verify the required parameter 'assetId' is set
            if (assetId == null) throw new ApiException(400, "Missing required parameter 'assetId' when calling GetAssetLocation");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetAssetLocation");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetAssetLocation");
            
    
            var path = "/fleet/assets/{asset_id}/locations";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "asset_id" + "}", ApiClient.ParameterToString(assetId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAssetLocation: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAssetLocation: " + response.ErrorMessage, response.ErrorMessage);
    
            return (AssetLocationResponse) ApiClient.Deserialize(response.Content, typeof(AssetLocationResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/assets/{assetId:[0-9]+}/reefer Fetch the reefer-specific stats of an asset.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="assetId">ID of the asset</param> 
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param> 
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param> 
        /// <returns>AssetReeferResponse</returns>            
        public AssetReeferResponse GetAssetReefer (string accessToken, long? assetId, long? startMs, long? endMs)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetAssetReefer");
            
            // verify the required parameter 'assetId' is set
            if (assetId == null) throw new ApiException(400, "Missing required parameter 'assetId' when calling GetAssetReefer");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetAssetReefer");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetAssetReefer");
            
    
            var path = "/fleet/assets/{asset_id}/reefer";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "asset_id" + "}", ApiClient.ParameterToString(assetId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAssetReefer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAssetReefer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (AssetReeferResponse) ApiClient.Deserialize(response.Content, typeof(AssetReeferResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch deactivated driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <returns>Driver</returns>            
        public Driver GetDeactivatedDriverById (string accessToken, string driverIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDeactivatedDriverById");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling GetDeactivatedDriverById");
            
    
            var path = "/fleet/drivers/inactive/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDeactivatedDriverById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDeactivatedDriverById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Driver) ApiClient.Deserialize(response.Content, typeof(Driver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+} Fetch a dispatch route by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="routeId">ID of the dispatch route.</param> 
        /// <returns>DispatchRoute</returns>            
        public DispatchRoute GetDispatchRouteById (string accessToken, long? routeId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDispatchRouteById");
            
            // verify the required parameter 'routeId' is set
            if (routeId == null) throw new ApiException(400, "Missing required parameter 'routeId' when calling GetDispatchRouteById");
            
    
            var path = "/fleet/dispatch/routes/{route_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "route_id" + "}", ApiClient.ParameterToString(routeId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRouteById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRouteById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoute) ApiClient.Deserialize(response.Content, typeof(DispatchRoute), response.Headers);
        }
    
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+}/history Fetch the history of a dispatch route.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="routeId">ID of the route with history.</param> 
        /// <param name="startTime">Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.</param> 
        /// <param name="endTime">Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.</param> 
        /// <returns>DispatchRouteHistory</returns>            
        public DispatchRouteHistory GetDispatchRouteHistory (string accessToken, long? routeId, long? startTime, long? endTime)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDispatchRouteHistory");
            
            // verify the required parameter 'routeId' is set
            if (routeId == null) throw new ApiException(400, "Missing required parameter 'routeId' when calling GetDispatchRouteHistory");
            
    
            var path = "/fleet/dispatch/routes/{route_id}/history";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "route_id" + "}", ApiClient.ParameterToString(routeId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startTime != null) queryParams.Add("start_time", ApiClient.ParameterToString(startTime)); // query parameter
 if (endTime != null) queryParams.Add("end_time", ApiClient.ParameterToString(endTime)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRouteHistory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRouteHistory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRouteHistory) ApiClient.Deserialize(response.Content, typeof(DispatchRouteHistory), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes Fetch all of the dispatch routes for a given driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverId">ID of the driver with the associated routes.</param> 
        /// <param name="endTime">Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.</param> 
        /// <param name="duration">Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.</param> 
        /// <returns>DispatchRoutes</returns>            
        public DispatchRoutes GetDispatchRoutesByDriverId (string accessToken, long? driverId, long? endTime, long? duration)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDispatchRoutesByDriverId");
            
            // verify the required parameter 'driverId' is set
            if (driverId == null) throw new ApiException(400, "Missing required parameter 'driverId' when calling GetDispatchRoutesByDriverId");
            
    
            var path = "/fleet/drivers/{driver_id}/dispatch/routes";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id" + "}", ApiClient.ParameterToString(driverId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (endTime != null) queryParams.Add("end_time", ApiClient.ParameterToString(endTime)); // query parameter
 if (duration != null) queryParams.Add("duration", ApiClient.ParameterToString(duration)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRoutesByDriverId: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRoutesByDriverId: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoutes) ApiClient.Deserialize(response.Content, typeof(DispatchRoutes), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes Fetch all of the dispatch routes for a given vehicle.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="vehicleId">ID of the vehicle with the associated routes.</param> 
        /// <param name="endTime">Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.</param> 
        /// <param name="duration">Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.</param> 
        /// <returns>DispatchRoutes</returns>            
        public DispatchRoutes GetDispatchRoutesByVehicleId (string accessToken, long? vehicleId, long? endTime, long? duration)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDispatchRoutesByVehicleId");
            
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null) throw new ApiException(400, "Missing required parameter 'vehicleId' when calling GetDispatchRoutesByVehicleId");
            
    
            var path = "/fleet/vehicles/{vehicle_id}/dispatch/routes";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicle_id" + "}", ApiClient.ParameterToString(vehicleId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (endTime != null) queryParams.Add("end_time", ApiClient.ParameterToString(endTime)); // query parameter
 if (duration != null) queryParams.Add("duration", ApiClient.ParameterToString(duration)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRoutesByVehicleId: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDispatchRoutesByVehicleId: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoutes) ApiClient.Deserialize(response.Content, typeof(DispatchRoutes), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <returns>CurrentDriver</returns>            
        public CurrentDriver GetDriverById (string accessToken, string driverIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDriverById");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling GetDriverById");
            
    
            var path = "/fleet/drivers/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (CurrentDriver) ApiClient.Deserialize(response.Content, typeof(CurrentDriver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/document_types Fetch all of the document types.
        /// </summary>
        /// <returns>DocumentTypes</returns>            
        public DocumentTypes GetDriverDocumentTypesByOrgId ()
        {
            
    
            var path = "/fleet/drivers/document_types";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverDocumentTypesByOrgId: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverDocumentTypesByOrgId: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DocumentTypes) ApiClient.Deserialize(response.Content, typeof(DocumentTypes), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/documents Fetch all of the documents.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="endMs">Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.</param> 
        /// <param name="durationMs">Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.</param> 
        /// <returns>Documents</returns>            
        public Documents GetDriverDocumentsByOrgId (string accessToken, long? endMs, long? durationMs)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDriverDocumentsByOrgId");
            
    
            var path = "/fleet/drivers/documents";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
 if (durationMs != null) queryParams.Add("durationMs", ApiClient.ParameterToString(durationMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverDocumentsByOrgId: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverDocumentsByOrgId: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Documents) ApiClient.Deserialize(response.Content, typeof(Documents), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driverId:[0-9]+}/safety/score Fetch the safety score for the driver.
        /// </summary>
        /// <param name="driverId">ID of the driver</param> 
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param> 
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param> 
        /// <returns>DriverSafetyScoreResponse</returns>            
        public DriverSafetyScoreResponse GetDriverSafetyScore (long? driverId, string accessToken, long? startMs, long? endMs)
        {
            
            // verify the required parameter 'driverId' is set
            if (driverId == null) throw new ApiException(400, "Missing required parameter 'driverId' when calling GetDriverSafetyScore");
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDriverSafetyScore");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetDriverSafetyScore");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetDriverSafetyScore");
            
    
            var path = "/fleet/drivers/{driverId}/safety/score";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driverId" + "}", ApiClient.ParameterToString(driverId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverSafetyScore: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverSafetyScore: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DriverSafetyScoreResponse) ApiClient.Deserialize(response.Content, typeof(DriverSafetyScoreResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/maintenance/dvirs Get DVIRs for the org within provided time constraints
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="endMs">time in millis until the last dvir log.</param> 
        /// <param name="durationMs">time in millis which corresponds to the duration before the end_ms.</param> 
        /// <param name="groupId">Group ID to query.</param> 
        /// <returns>DvirListResponse</returns>            
        public DvirListResponse GetDvirs (string accessToken, int? endMs, int? durationMs, int? groupId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDvirs");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetDvirs");
            
            // verify the required parameter 'durationMs' is set
            if (durationMs == null) throw new ApiException(400, "Missing required parameter 'durationMs' when calling GetDvirs");
            
    
            var path = "/fleet/maintenance/dvirs";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (endMs != null) queryParams.Add("end_ms", ApiClient.ParameterToString(endMs)); // query parameter
 if (durationMs != null) queryParams.Add("duration_ms", ApiClient.ParameterToString(durationMs)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDvirs: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDvirs: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DvirListResponse) ApiClient.Deserialize(response.Content, typeof(DvirListResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers Get all the drivers for the specified group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupDriversParam"></param> 
        /// <returns>DriversResponse</returns>            
        public DriversResponse GetFleetDrivers (string accessToken, GroupDriversParam groupDriversParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetDrivers");
            
            // verify the required parameter 'groupDriversParam' is set
            if (groupDriversParam == null) throw new ApiException(400, "Missing required parameter 'groupDriversParam' when calling GetFleetDrivers");
            
    
            var path = "/fleet/drivers";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(groupDriversParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetDrivers: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetDrivers: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DriversResponse) ApiClient.Deserialize(response.Content, typeof(DriversResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs Get summarized daily HOS charts for a specified driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverId">ID of the driver with HOS logs.</param> 
        /// <param name="hosLogsParam"></param> 
        /// <returns>DriverDailyLogResponse</returns>            
        public DriverDailyLogResponse GetFleetDriversHosDailyLogs (string accessToken, long? driverId, HosLogsParam hosLogsParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetDriversHosDailyLogs");
            
            // verify the required parameter 'driverId' is set
            if (driverId == null) throw new ApiException(400, "Missing required parameter 'driverId' when calling GetFleetDriversHosDailyLogs");
            
            // verify the required parameter 'hosLogsParam' is set
            if (hosLogsParam == null) throw new ApiException(400, "Missing required parameter 'hosLogsParam' when calling GetFleetDriversHosDailyLogs");
            
    
            var path = "/fleet/drivers/{driver_id}/hos_daily_logs";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id" + "}", ApiClient.ParameterToString(driverId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(hosLogsParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetDriversHosDailyLogs: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetDriversHosDailyLogs: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DriverDailyLogResponse) ApiClient.Deserialize(response.Content, typeof(DriverDailyLogResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/summary Get the distance and time each driver in an organization has driven in a given time period.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driversSummaryParam">Org ID and time range to query.</param> 
        /// <param name="snapToDayBounds">Snap query result to HOS day boundaries.</param> 
        /// <returns>DriversSummaryResponse</returns>            
        public DriversSummaryResponse GetFleetDriversSummary (string accessToken, DriversSummaryParam driversSummaryParam, bool? snapToDayBounds)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetDriversSummary");
            
            // verify the required parameter 'driversSummaryParam' is set
            if (driversSummaryParam == null) throw new ApiException(400, "Missing required parameter 'driversSummaryParam' when calling GetFleetDriversSummary");
            
    
            var path = "/fleet/drivers/summary";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (snapToDayBounds != null) queryParams.Add("snap_to_day_bounds", ApiClient.ParameterToString(snapToDayBounds)); // query parameter
                                    postBody = ApiClient.Serialize(driversSummaryParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetDriversSummary: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetDriversSummary: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DriversSummaryResponse) ApiClient.Deserialize(response.Content, typeof(DriversSummaryResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/hos_authentication_logs Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="hosAuthenticationLogsParam"></param> 
        /// <returns>HosAuthenticationLogsResponse</returns>            
        public HosAuthenticationLogsResponse GetFleetHosAuthenticationLogs (string accessToken, HosAuthenticationLogsParam hosAuthenticationLogsParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetHosAuthenticationLogs");
            
            // verify the required parameter 'hosAuthenticationLogsParam' is set
            if (hosAuthenticationLogsParam == null) throw new ApiException(400, "Missing required parameter 'hosAuthenticationLogsParam' when calling GetFleetHosAuthenticationLogs");
            
    
            var path = "/fleet/hos_authentication_logs";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(hosAuthenticationLogsParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetHosAuthenticationLogs: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetHosAuthenticationLogs: " + response.ErrorMessage, response.ErrorMessage);
    
            return (HosAuthenticationLogsResponse) ApiClient.Deserialize(response.Content, typeof(HosAuthenticationLogsResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/hos_logs Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="hosLogsParam"></param> 
        /// <returns>HosLogsResponse</returns>            
        public HosLogsResponse GetFleetHosLogs (string accessToken, HosLogsParam1 hosLogsParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetHosLogs");
            
            // verify the required parameter 'hosLogsParam' is set
            if (hosLogsParam == null) throw new ApiException(400, "Missing required parameter 'hosLogsParam' when calling GetFleetHosLogs");
            
    
            var path = "/fleet/hos_logs";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(hosLogsParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetHosLogs: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetHosLogs: " + response.ErrorMessage, response.ErrorMessage);
    
            return (HosLogsResponse) ApiClient.Deserialize(response.Content, typeof(HosLogsResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/hos_logs_summary Get the current HOS status for all drivers in the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="hosLogsParam"></param> 
        /// <returns>HosLogsSummaryResponse</returns>            
        public HosLogsSummaryResponse GetFleetHosLogsSummary (string accessToken, HosLogsParam2 hosLogsParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetHosLogsSummary");
            
            // verify the required parameter 'hosLogsParam' is set
            if (hosLogsParam == null) throw new ApiException(400, "Missing required parameter 'hosLogsParam' when calling GetFleetHosLogsSummary");
            
    
            var path = "/fleet/hos_logs_summary";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(hosLogsParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetHosLogsSummary: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetHosLogsSummary: " + response.ErrorMessage, response.ErrorMessage);
    
            return (HosLogsSummaryResponse) ApiClient.Deserialize(response.Content, typeof(HosLogsSummaryResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/locations Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupParam">Group ID to query.</param> 
        /// <returns>InlineResponse2003</returns>            
        public InlineResponse2003 GetFleetLocations (string accessToken, GroupParam groupParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetLocations");
            
            // verify the required parameter 'groupParam' is set
            if (groupParam == null) throw new ApiException(400, "Missing required parameter 'groupParam' when calling GetFleetLocations");
            
    
            var path = "/fleet/locations";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(groupParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetLocations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetLocations: " + response.ErrorMessage, response.ErrorMessage);
    
            return (InlineResponse2003) ApiClient.Deserialize(response.Content, typeof(InlineResponse2003), response.Headers);
        }
    
        /// <summary>
        /// /fleet/maintenance/list Get list of the vehicles with any engine faults or check light data.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupParam">Group ID to query.</param> 
        /// <returns>InlineResponse2004</returns>            
        public InlineResponse2004 GetFleetMaintenanceList (string accessToken, GroupParam groupParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetMaintenanceList");
            
            // verify the required parameter 'groupParam' is set
            if (groupParam == null) throw new ApiException(400, "Missing required parameter 'groupParam' when calling GetFleetMaintenanceList");
            
    
            var path = "/fleet/maintenance/list";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(groupParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetMaintenanceList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetMaintenanceList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (InlineResponse2004) ApiClient.Deserialize(response.Content, typeof(InlineResponse2004), response.Headers);
        }
    
        /// <summary>
        /// /fleet/trips Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="tripsParam">Group ID, vehicle ID and time range to query.</param> 
        /// <returns>TripResponse</returns>            
        public TripResponse GetFleetTrips (string accessToken, TripsParam tripsParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetTrips");
            
            // verify the required parameter 'tripsParam' is set
            if (tripsParam == null) throw new ApiException(400, "Missing required parameter 'tripsParam' when calling GetFleetTrips");
            
    
            var path = "/fleet/trips";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(tripsParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetTrips: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetTrips: " + response.ErrorMessage, response.ErrorMessage);
    
            return (TripResponse) ApiClient.Deserialize(response.Content, typeof(TripResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Gets a specific vehicle.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="vehicleIdOrExternalId">ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.</param> 
        /// <returns>FleetVehicleResponse</returns>            
        public FleetVehicleResponse GetFleetVehicle (string accessToken, string vehicleIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetFleetVehicle");
            
            // verify the required parameter 'vehicleIdOrExternalId' is set
            if (vehicleIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'vehicleIdOrExternalId' when calling GetFleetVehicle");
            
    
            var path = "/fleet/vehicles/{vehicle_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicle_id_or_external_id" + "}", ApiClient.ParameterToString(vehicleIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetVehicle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetFleetVehicle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (FleetVehicleResponse) ApiClient.Deserialize(response.Content, typeof(FleetVehicleResponse), response.Headers);
        }
    
        /// <summary>
        /// /addresses/{addressId} Fetch an address by its id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="addressId">ID of the address/geofence</param> 
        /// <returns>Address</returns>            
        public Address GetOrganizationAddress (string accessToken, long? addressId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetOrganizationAddress");
            
            // verify the required parameter 'addressId' is set
            if (addressId == null) throw new ApiException(400, "Missing required parameter 'addressId' when calling GetOrganizationAddress");
            
    
            var path = "/addresses/{addressId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "addressId" + "}", ApiClient.ParameterToString(addressId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetOrganizationAddress: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetOrganizationAddress: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Address) ApiClient.Deserialize(response.Content, typeof(Address), response.Headers);
        }
    
        /// <summary>
        /// /addresses Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <returns>List&lt;Address&gt;</returns>            
        public List<Address> GetOrganizationAddresses (string accessToken)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetOrganizationAddresses");
            
    
            var path = "/addresses";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetOrganizationAddresses: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetOrganizationAddresses: " + response.ErrorMessage, response.ErrorMessage);
    
            return (List<Address>) ApiClient.Deserialize(response.Content, typeof(List<Address>), response.Headers);
        }
    
        /// <summary>
        /// /contacts/{contact_id} Fetch a contact by its id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="contactId">ID of the contact</param> 
        /// <returns>Contact</returns>            
        public Contact GetOrganizationContact (string accessToken, long? contactId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetOrganizationContact");
            
            // verify the required parameter 'contactId' is set
            if (contactId == null) throw new ApiException(400, "Missing required parameter 'contactId' when calling GetOrganizationContact");
            
    
            var path = "/contacts/{contact_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "contact_id" + "}", ApiClient.ParameterToString(contactId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetOrganizationContact: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetOrganizationContact: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Contact) ApiClient.Deserialize(response.Content, typeof(Contact), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event Fetch harsh event details for a vehicle.
        /// </summary>
        /// <param name="vehicleId">ID of the vehicle</param> 
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="timestamp">Timestamp in milliseconds representing the timestamp of a harsh event.</param> 
        /// <returns>VehicleHarshEventResponse</returns>            
        public VehicleHarshEventResponse GetVehicleHarshEvent (long? vehicleId, string accessToken, long? timestamp)
        {
            
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null) throw new ApiException(400, "Missing required parameter 'vehicleId' when calling GetVehicleHarshEvent");
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetVehicleHarshEvent");
            
            // verify the required parameter 'timestamp' is set
            if (timestamp == null) throw new ApiException(400, "Missing required parameter 'timestamp' when calling GetVehicleHarshEvent");
            
    
            var path = "/fleet/vehicles/{vehicleId}/safety/harsh_event";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicleId" + "}", ApiClient.ParameterToString(vehicleId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (timestamp != null) queryParams.Add("timestamp", ApiClient.ParameterToString(timestamp)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleHarshEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleHarshEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (VehicleHarshEventResponse) ApiClient.Deserialize(response.Content, typeof(VehicleHarshEventResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+}/locations Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="vehicleId">ID of the vehicle with the associated routes.</param> 
        /// <param name="startMs">Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)</param> 
        /// <param name="endMs">Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)</param> 
        /// <returns>FleetVehicleLocations</returns>            
        public FleetVehicleLocations GetVehicleLocations (string accessToken, long? vehicleId, long? startMs, long? endMs)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetVehicleLocations");
            
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null) throw new ApiException(400, "Missing required parameter 'vehicleId' when calling GetVehicleLocations");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetVehicleLocations");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetVehicleLocations");
            
    
            var path = "/fleet/vehicles/{vehicle_id}/locations";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicle_id" + "}", ApiClient.ParameterToString(vehicleId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleLocations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleLocations: " + response.ErrorMessage, response.ErrorMessage);
    
            return (FleetVehicleLocations) ApiClient.Deserialize(response.Content, typeof(FleetVehicleLocations), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/score Fetch the safety score for the vehicle.
        /// </summary>
        /// <param name="vehicleId">ID of the vehicle</param> 
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="startMs">Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.</param> 
        /// <param name="endMs">Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.</param> 
        /// <returns>VehicleSafetyScoreResponse</returns>            
        public VehicleSafetyScoreResponse GetVehicleSafetyScore (long? vehicleId, string accessToken, long? startMs, long? endMs)
        {
            
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null) throw new ApiException(400, "Missing required parameter 'vehicleId' when calling GetVehicleSafetyScore");
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetVehicleSafetyScore");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetVehicleSafetyScore");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetVehicleSafetyScore");
            
    
            var path = "/fleet/vehicles/{vehicleId}/safety/score";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicleId" + "}", ApiClient.ParameterToString(vehicleId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleSafetyScore: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleSafetyScore: " + response.ErrorMessage, response.ErrorMessage);
    
            return (VehicleSafetyScoreResponse) ApiClient.Deserialize(response.Content, typeof(VehicleSafetyScoreResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/stats Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="startMs">Time in Unix epoch milliseconds for the start of the query.</param> 
        /// <param name="endMs">Time in Unix epoch milliseconds for the end of the query.</param> 
        /// <param name="series">Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2</param> 
        /// <param name="tagIds">Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3</param> 
        /// <param name="startingAfter">Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.</param> 
        /// <param name="endingBefore">Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.</param> 
        /// <param name="limit">Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.</param> 
        /// <returns>InlineResponse2005</returns>            
        public InlineResponse2005 GetVehicleStats (string accessToken, int? startMs, int? endMs, string series, string tagIds, string startingAfter, string endingBefore, long? limit)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetVehicleStats");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetVehicleStats");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetVehicleStats");
            
    
            var path = "/fleet/vehicles/stats";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
 if (series != null) queryParams.Add("series", ApiClient.ParameterToString(series)); // query parameter
 if (tagIds != null) queryParams.Add("tagIds", ApiClient.ParameterToString(tagIds)); // query parameter
 if (startingAfter != null) queryParams.Add("startingAfter", ApiClient.ParameterToString(startingAfter)); // query parameter
 if (endingBefore != null) queryParams.Add("endingBefore", ApiClient.ParameterToString(endingBefore)); // query parameter
 if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleStats: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehicleStats: " + response.ErrorMessage, response.ErrorMessage);
    
            return (InlineResponse2005) ApiClient.Deserialize(response.Content, typeof(InlineResponse2005), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/locations Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="startMs">Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)</param> 
        /// <param name="endMs">Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)</param> 
        /// <returns>FleetVehiclesLocations</returns>            
        public FleetVehiclesLocations GetVehiclesLocations (string accessToken, int? startMs, int? endMs)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetVehiclesLocations");
            
            // verify the required parameter 'startMs' is set
            if (startMs == null) throw new ApiException(400, "Missing required parameter 'startMs' when calling GetVehiclesLocations");
            
            // verify the required parameter 'endMs' is set
            if (endMs == null) throw new ApiException(400, "Missing required parameter 'endMs' when calling GetVehiclesLocations");
            
    
            var path = "/fleet/vehicles/locations";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startMs != null) queryParams.Add("startMs", ApiClient.ParameterToString(startMs)); // query parameter
 if (endMs != null) queryParams.Add("endMs", ApiClient.ParameterToString(endMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehiclesLocations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetVehiclesLocations: " + response.ErrorMessage, response.ErrorMessage);
    
            return (FleetVehiclesLocations) ApiClient.Deserialize(response.Content, typeof(FleetVehiclesLocations), response.Headers);
        }
    
        /// <summary>
        /// /contacts Fetch all contacts for the organization.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <returns>List&lt;Contact&gt;</returns>            
        public List<Contact> ListContacts (string accessToken)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling ListContacts");
            
    
            var path = "/contacts";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListContacts: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListContacts: " + response.ErrorMessage, response.ErrorMessage);
    
            return (List<Contact>) ApiClient.Deserialize(response.Content, typeof(List<Contact>), response.Headers);
        }
    
        /// <summary>
        /// /fleet/list Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupParam">Group ID to query.</param> 
        /// <param name="startingAfter">Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.</param> 
        /// <param name="endingBefore">Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.</param> 
        /// <param name="limit">Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.</param> 
        /// <returns>InlineResponse2002</returns>            
        public InlineResponse2002 ListFleet (string accessToken, GroupParam groupParam, string startingAfter, string endingBefore, long? limit)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling ListFleet");
            
            // verify the required parameter 'groupParam' is set
            if (groupParam == null) throw new ApiException(400, "Missing required parameter 'groupParam' when calling ListFleet");
            
    
            var path = "/fleet/list";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (startingAfter != null) queryParams.Add("startingAfter", ApiClient.ParameterToString(startingAfter)); // query parameter
 if (endingBefore != null) queryParams.Add("endingBefore", ApiClient.ParameterToString(endingBefore)); // query parameter
 if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
                                    postBody = ApiClient.Serialize(groupParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListFleet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListFleet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (InlineResponse2002) ApiClient.Deserialize(response.Content, typeof(InlineResponse2002), response.Headers);
        }
    
        /// <summary>
        /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="vehicleIdOrExternalId">ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.</param> 
        /// <param name="data"></param> 
        /// <returns>FleetVehicleResponse</returns>            
        public FleetVehicleResponse PatchFleetVehicle (string accessToken, string vehicleIdOrExternalId, Data data)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling PatchFleetVehicle");
            
            // verify the required parameter 'vehicleIdOrExternalId' is set
            if (vehicleIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'vehicleIdOrExternalId' when calling PatchFleetVehicle");
            
            // verify the required parameter 'data' is set
            if (data == null) throw new ApiException(400, "Missing required parameter 'data' when calling PatchFleetVehicle");
            
    
            var path = "/fleet/vehicles/{vehicle_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "vehicle_id_or_external_id" + "}", ApiClient.ParameterToString(vehicleIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(data); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchFleetVehicle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchFleetVehicle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (FleetVehicleResponse) ApiClient.Deserialize(response.Content, typeof(FleetVehicleResponse), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Reactivate the inactive driver having id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <param name="reactivateDriverParam">Driver reactivation body</param> 
        /// <returns>CurrentDriver</returns>            
        public CurrentDriver ReactivateDriverById (string accessToken, string driverIdOrExternalId, ReactivateDriverParam reactivateDriverParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling ReactivateDriverById");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling ReactivateDriverById");
            
            // verify the required parameter 'reactivateDriverParam' is set
            if (reactivateDriverParam == null) throw new ApiException(400, "Missing required parameter 'reactivateDriverParam' when calling ReactivateDriverById");
            
    
            var path = "/fleet/drivers/inactive/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(reactivateDriverParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReactivateDriverById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReactivateDriverById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (CurrentDriver) ApiClient.Deserialize(response.Content, typeof(CurrentDriver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/dispatch/routes/{route_id:[0-9]+}/ Update a dispatch route and its associated jobs.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="routeId">ID of the dispatch route.</param> 
        /// <param name="updateDispatchRouteParams"></param> 
        /// <returns>DispatchRoute</returns>            
        public DispatchRoute UpdateDispatchRouteById (string accessToken, long? routeId, DispatchRoute updateDispatchRouteParams)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling UpdateDispatchRouteById");
            
            // verify the required parameter 'routeId' is set
            if (routeId == null) throw new ApiException(400, "Missing required parameter 'routeId' when calling UpdateDispatchRouteById");
            
            // verify the required parameter 'updateDispatchRouteParams' is set
            if (updateDispatchRouteParams == null) throw new ApiException(400, "Missing required parameter 'updateDispatchRouteParams' when calling UpdateDispatchRouteById");
            
    
            var path = "/fleet/dispatch/routes/{route_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "route_id" + "}", ApiClient.ParameterToString(routeId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(updateDispatchRouteParams); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateDispatchRouteById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateDispatchRouteById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (DispatchRoute) ApiClient.Deserialize(response.Content, typeof(DispatchRoute), response.Headers);
        }
    
        /// <summary>
        /// /addresses/{addressId} Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="address">Update parts of an address&#39;s value. If the geofence &#39;circle&#39; or &#39;polygon&#39; key is specified, the update will change the type of geofence accordingly.</param> 
        /// <param name="addressId">ID of the address/geofence</param> 
        /// <returns></returns>            
        public void UpdateOrganizationAddress (string accessToken, Address address, long? addressId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling UpdateOrganizationAddress");
            
            // verify the required parameter 'address' is set
            if (address == null) throw new ApiException(400, "Missing required parameter 'address' when calling UpdateOrganizationAddress");
            
            // verify the required parameter 'addressId' is set
            if (addressId == null) throw new ApiException(400, "Missing required parameter 'addressId' when calling UpdateOrganizationAddress");
            
    
            var path = "/addresses/{addressId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "addressId" + "}", ApiClient.ParameterToString(addressId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(address); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateOrganizationAddress: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateOrganizationAddress: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// /fleet/set_data This method enables the mutation of metadata for vehicles in the Samsara Cloud.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="vehicleUpdateParam"></param> 
        /// <returns></returns>            
        public void UpdateVehicles (string accessToken, VehicleUpdateParam vehicleUpdateParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling UpdateVehicles");
            
            // verify the required parameter 'vehicleUpdateParam' is set
            if (vehicleUpdateParam == null) throw new ApiException(400, "Missing required parameter 'vehicleUpdateParam' when calling UpdateVehicles");
            
    
            var path = "/fleet/set_data";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(vehicleUpdateParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateVehicles: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateVehicles: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
    }
}
