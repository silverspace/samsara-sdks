using System;
using System.Collections.Generic;
using RestSharp;
using IO.Swagger.Client;
using samsara.Model;

namespace samsara.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDriversApi
    {
        /// <summary>
        /// /fleet/drivers/create Create a new driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="createDriverParam">Driver creation body</param>
        /// <returns>Driver</returns>
        Driver CreateDriver (string accessToken, DriverForCreate createDriverParam);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Deactivate a driver with the given id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <returns></returns>
        void DeactivateDriver (string accessToken, string driverIdOrExternalId);
        /// <summary>
        /// /fleet/drivers/inactive Fetch all deactivated drivers for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <returns>List&lt;Driver&gt;</returns>
        List<Driver> GetAllDeactivatedDrivers (string accessToken, long? groupId);
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch deactivated driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <returns>Driver</returns>
        Driver GetDeactivatedDriverById (string accessToken, string driverIdOrExternalId);
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <returns>CurrentDriver</returns>
        CurrentDriver GetDriverById (string accessToken, string driverIdOrExternalId);
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Reactivate the inactive driver having id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param>
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param>
        /// <param name="reactivateDriverParam">Driver reactivation body</param>
        /// <returns>CurrentDriver</returns>
        CurrentDriver ReactivateDriverById (string accessToken, string driverIdOrExternalId, ReactivateDriverParam reactivateDriverParam);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DriversApi : IDriversApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DriversApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public DriversApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DriversApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DriversApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// /fleet/drivers/create Create a new driver.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="createDriverParam">Driver creation body</param> 
        /// <returns>Driver</returns>            
        public Driver CreateDriver (string accessToken, DriverForCreate createDriverParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling CreateDriver");
            
            // verify the required parameter 'createDriverParam' is set
            if (createDriverParam == null) throw new ApiException(400, "Missing required parameter 'createDriverParam' when calling CreateDriver");
            
    
            var path = "/fleet/drivers/create";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(createDriverParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDriver: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Driver) ApiClient.Deserialize(response.Content, typeof(Driver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Deactivate a driver with the given id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <returns></returns>            
        public void DeactivateDriver (string accessToken, string driverIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling DeactivateDriver");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling DeactivateDriver");
            
    
            var path = "/fleet/drivers/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeactivateDriver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeactivateDriver: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// /fleet/drivers/inactive Fetch all deactivated drivers for the group.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="groupId">Optional group ID if the organization has multiple groups (uncommon).</param> 
        /// <returns>List&lt;Driver&gt;</returns>            
        public List<Driver> GetAllDeactivatedDrivers (string accessToken, long? groupId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetAllDeactivatedDrivers");
            
    
            var path = "/fleet/drivers/inactive";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
 if (groupId != null) queryParams.Add("group_id", ApiClient.ParameterToString(groupId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllDeactivatedDrivers: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAllDeactivatedDrivers: " + response.ErrorMessage, response.ErrorMessage);
    
            return (List<Driver>) ApiClient.Deserialize(response.Content, typeof(List<Driver>), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch deactivated driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <returns>Driver</returns>            
        public Driver GetDeactivatedDriverById (string accessToken, string driverIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDeactivatedDriverById");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling GetDeactivatedDriverById");
            
    
            var path = "/fleet/drivers/inactive/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDeactivatedDriverById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDeactivatedDriverById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Driver) ApiClient.Deserialize(response.Content, typeof(Driver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Fetch driver by id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <returns>CurrentDriver</returns>            
        public CurrentDriver GetDriverById (string accessToken, string driverIdOrExternalId)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling GetDriverById");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling GetDriverById");
            
    
            var path = "/fleet/drivers/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDriverById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (CurrentDriver) ApiClient.Deserialize(response.Content, typeof(CurrentDriver), response.Headers);
        }
    
        /// <summary>
        /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+} Reactivate the inactive driver having id.
        /// </summary>
        /// <param name="accessToken">Samsara API access token.</param> 
        /// <param name="driverIdOrExternalId">ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.</param> 
        /// <param name="reactivateDriverParam">Driver reactivation body</param> 
        /// <returns>CurrentDriver</returns>            
        public CurrentDriver ReactivateDriverById (string accessToken, string driverIdOrExternalId, ReactivateDriverParam reactivateDriverParam)
        {
            
            // verify the required parameter 'accessToken' is set
            if (accessToken == null) throw new ApiException(400, "Missing required parameter 'accessToken' when calling ReactivateDriverById");
            
            // verify the required parameter 'driverIdOrExternalId' is set
            if (driverIdOrExternalId == null) throw new ApiException(400, "Missing required parameter 'driverIdOrExternalId' when calling ReactivateDriverById");
            
            // verify the required parameter 'reactivateDriverParam' is set
            if (reactivateDriverParam == null) throw new ApiException(400, "Missing required parameter 'reactivateDriverParam' when calling ReactivateDriverById");
            
    
            var path = "/fleet/drivers/inactive/{driver_id_or_external_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "driver_id_or_external_id" + "}", ApiClient.ParameterToString(driverIdOrExternalId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (accessToken != null) queryParams.Add("access_token", ApiClient.ParameterToString(accessToken)); // query parameter
                                    postBody = ApiClient.Serialize(reactivateDriverParam); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReactivateDriverById: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReactivateDriverById: " + response.ErrorMessage, response.ErrorMessage);
    
            return (CurrentDriver) ApiClient.Deserialize(response.Content, typeof(CurrentDriver), response.Headers);
        }
    
    }
}
