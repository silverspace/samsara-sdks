package io.swagger.api;

import io.swagger.api.*;
import io.swagger.model.*;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;

import io.swagger.model.AddressParam;
import io.swagger.model.AllRouteJobUpdates;
import io.swagger.model.AssetLocationResponse;
import io.swagger.model.AssetReeferResponse;
import io.swagger.model.CreateDvirParam;
import io.swagger.model.CurrentDriver;
import io.swagger.model.Data;
import io.swagger.model.DispatchRoute;
import io.swagger.model.DispatchRouteCreate;
import io.swagger.model.DispatchRouteHistory;
import io.swagger.model.DispatchRoutes;
import io.swagger.model.Document;
import io.swagger.model.DocumentCreate;
import io.swagger.model.DocumentTypes;
import io.swagger.model.Documents;
import io.swagger.model.Driver;
import io.swagger.model.DriverDailyLogResponse;
import io.swagger.model.DriverForCreate;
import io.swagger.model.DriverSafetyScoreResponse;
import io.swagger.model.DriversResponse;
import io.swagger.model.DriversSummaryParam;
import io.swagger.model.DriversSummaryResponse;
import io.swagger.model.DvirBase;
import io.swagger.model.DvirListResponse;
import io.swagger.model.FleetVehicleLocations;
import io.swagger.model.FleetVehicleResponse;
import io.swagger.model.FleetVehiclesLocations;
import io.swagger.model.GroupDriversParam;
import io.swagger.model.GroupParam;
import io.swagger.model.HosAuthenticationLogsParam;
import io.swagger.model.HosAuthenticationLogsResponse;
import io.swagger.model.HosLogsParam;
import io.swagger.model.HosLogsParam1;
import io.swagger.model.HosLogsParam2;
import io.swagger.model.HosLogsResponse;
import io.swagger.model.HosLogsSummaryResponse;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.InlineResponse2002;
import io.swagger.model.InlineResponse2003;
import io.swagger.model.InlineResponse2004;
import io.swagger.model.InlineResponse2005;
import io.swagger.model.ReactivateDriverParam;
import io.swagger.model.TripResponse;
import io.swagger.model.TripsParam;
import io.swagger.model.VehicleHarshEventResponse;
import io.swagger.model.VehicleSafetyScoreResponse;
import io.swagger.model.VehicleUpdateParam;

import java.util.List;
import io.swagger.api.NotFoundException;

import java.io.InputStream;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.validation.constraints.*;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2019-03-01T04:29:05.032Z")
public abstract class FleetApiService {
    public abstract Response addFleetAddress( @NotNull String accessToken,AddressParam addressParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response createDispatchRoute( @NotNull String accessToken,DispatchRouteCreate createDispatchRouteParams,SecurityContext securityContext) throws NotFoundException;
    public abstract Response createDriver( @NotNull String accessToken,DriverForCreate createDriverParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response createDriverDispatchRoute( @NotNull String accessToken,Long driverId,DispatchRouteCreate createDispatchRouteParams,SecurityContext securityContext) throws NotFoundException;
    public abstract Response createDriverDocument( @NotNull String accessToken,Long driverId,DocumentCreate createDocumentParams,SecurityContext securityContext) throws NotFoundException;
    public abstract Response createDvir( @NotNull String accessToken,CreateDvirParam createDvirParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response createVehicleDispatchRoute( @NotNull String accessToken,Long vehicleId,DispatchRouteCreate createDispatchRouteParams,SecurityContext securityContext) throws NotFoundException;
    public abstract Response deactivateDriver( @NotNull String accessToken,String driverIdOrExternalId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response deleteDispatchRouteById( @NotNull String accessToken,Long routeId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response fetchAllDispatchRoutes( @NotNull String accessToken, Long groupId, Long endTime, Long duration,SecurityContext securityContext) throws NotFoundException;
    public abstract Response fetchAllRouteJobUpdates( @NotNull String accessToken, Long groupId, String sequenceId, String include,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getAllAssetCurrentLocations( @NotNull String accessToken, Long groupId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getAllAssets( @NotNull String accessToken, Long groupId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getAllDeactivatedDrivers( @NotNull String accessToken, Long groupId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getAssetLocation( @NotNull String accessToken,Long assetId, @NotNull Long startMs, @NotNull Long endMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getAssetReefer( @NotNull String accessToken,Long assetId, @NotNull Long startMs, @NotNull Long endMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDeactivatedDriverById( @NotNull String accessToken,String driverIdOrExternalId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDispatchRouteById( @NotNull String accessToken,Long routeId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDispatchRouteHistory( @NotNull String accessToken,Long routeId, Long startTime, Long endTime,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDispatchRoutesByDriverId( @NotNull String accessToken,Long driverId, Long endTime, Long duration,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDispatchRoutesByVehicleId( @NotNull String accessToken,Long vehicleId, Long endTime, Long duration,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDriverById( @NotNull String accessToken,String driverIdOrExternalId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDriverDocumentTypesByOrgId(SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDriverDocumentsByOrgId( @NotNull String accessToken, Long endMs, Long durationMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDriverSafetyScore(Long driverId, @NotNull String accessToken, @NotNull Long startMs, @NotNull Long endMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getDvirs( @NotNull String accessToken, @NotNull Integer endMs, @NotNull Integer durationMs, Integer groupId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetDrivers( @NotNull String accessToken,GroupDriversParam groupDriversParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetDriversHosDailyLogs( @NotNull String accessToken,Long driverId,HosLogsParam hosLogsParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetDriversSummary( @NotNull String accessToken,DriversSummaryParam driversSummaryParam, Boolean snapToDayBounds,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetHosAuthenticationLogs( @NotNull String accessToken,HosAuthenticationLogsParam hosAuthenticationLogsParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetHosLogs( @NotNull String accessToken,HosLogsParam1 hosLogsParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetHosLogsSummary( @NotNull String accessToken,HosLogsParam2 hosLogsParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetLocations( @NotNull String accessToken,GroupParam groupParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetMaintenanceList( @NotNull String accessToken,GroupParam groupParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetTrips( @NotNull String accessToken,TripsParam tripsParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getFleetVehicle( @NotNull String accessToken,String vehicleIdOrExternalId,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getVehicleHarshEvent(Long vehicleId, @NotNull String accessToken, @NotNull Long timestamp,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getVehicleLocations( @NotNull String accessToken,Long vehicleId, @NotNull Long startMs, @NotNull Long endMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getVehicleSafetyScore(Long vehicleId, @NotNull String accessToken, @NotNull Long startMs, @NotNull Long endMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getVehicleStats( @NotNull String accessToken, @NotNull Integer startMs, @NotNull Integer endMs, String series, String tagIds, String startingAfter, String endingBefore, Long limit,SecurityContext securityContext) throws NotFoundException;
    public abstract Response getVehiclesLocations( @NotNull String accessToken, @NotNull Integer startMs, @NotNull Integer endMs,SecurityContext securityContext) throws NotFoundException;
    public abstract Response listFleet( @NotNull String accessToken,GroupParam groupParam, String startingAfter, String endingBefore, Long limit,SecurityContext securityContext) throws NotFoundException;
    public abstract Response patchFleetVehicle( @NotNull String accessToken,String vehicleIdOrExternalId,Data data,SecurityContext securityContext) throws NotFoundException;
    public abstract Response reactivateDriverById( @NotNull String accessToken,String driverIdOrExternalId,ReactivateDriverParam reactivateDriverParam,SecurityContext securityContext) throws NotFoundException;
    public abstract Response updateDispatchRouteById( @NotNull String accessToken,Long routeId,DispatchRoute updateDispatchRouteParams,SecurityContext securityContext) throws NotFoundException;
    public abstract Response updateVehicles( @NotNull String accessToken,VehicleUpdateParam vehicleUpdateParam,SecurityContext securityContext) throws NotFoundException;
}
