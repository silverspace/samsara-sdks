//
// RoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RoutesAPI {
    /**
     /fleet/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDispatchRoute(accessToken: String, createDispatchRouteParams: DispatchRouteCreate, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        createDispatchRouteWithRequestBuilder(accessToken: accessToken, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes
     - POST /fleet/dispatch/routes
     - Create a new dispatch route.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func createDispatchRouteWithRequestBuilder(accessToken: String, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        let path = "/fleet/dispatch/routes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDriverDispatchRoute(accessToken: String, driverId: Int64, createDispatchRouteParams: DispatchRouteCreate, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        createDriverDispatchRouteWithRequestBuilder(accessToken: accessToken, driverId: driverId, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     - POST /fleet/drivers/{driver_id}/dispatch/routes
     - Create a new dispatch route for the driver with driver_id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func createDriverDispatchRouteWithRequestBuilder(accessToken: String, driverId: Int64, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/drivers/{driver_id}/dispatch/routes"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createVehicleDispatchRoute(accessToken: String, vehicleId: Int64, createDispatchRouteParams: DispatchRouteCreate, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        createVehicleDispatchRouteWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     - POST /fleet/vehicles/{vehicle_id}/dispatch/routes
     - Create a new dispatch route for the vehicle with vehicle_id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func createVehicleDispatchRouteWithRequestBuilder(accessToken: String, vehicleId: Int64, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/vehicles/{vehicle_id}/dispatch/routes"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDispatchRouteById(accessToken: String, routeId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     - DELETE /fleet/dispatch/routes/{route_id}
     - Delete a dispatch route and its associated jobs.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDispatchRouteByIdWithRequestBuilder(accessToken: String, routeId: Int64) -> RequestBuilder<Void> {
        var path = "/fleet/dispatch/routes/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllDispatchRoutes(accessToken: String, groupId: Int64? = nil, endTime: Int64? = nil, duration: Int64? = nil, completion: @escaping ((_ data: DispatchRoutes?,_ error: Error?) -> Void)) {
        fetchAllDispatchRoutesWithRequestBuilder(accessToken: accessToken, groupId: groupId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes
     - GET /fleet/dispatch/routes
     - Fetch all of the dispatch routes for the group.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<DispatchRoutes> 
     */
    open class func fetchAllDispatchRoutesWithRequestBuilder(accessToken: String, groupId: Int64? = nil, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<DispatchRoutes> {
        let path = "/fleet/dispatch/routes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON(), 
            "end_time": endTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/job_updates
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter sequenceId: (query) Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours. (optional)
     - parameter include: (query) Optionally set include&#x3D;route to include route object in response payload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllRouteJobUpdates(accessToken: String, groupId: Int64? = nil, sequenceId: String? = nil, include: String? = nil, completion: @escaping ((_ data: AllRouteJobUpdates?,_ error: Error?) -> Void)) {
        fetchAllRouteJobUpdatesWithRequestBuilder(accessToken: accessToken, groupId: groupId, sequenceId: sequenceId, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/job_updates
     - GET /fleet/dispatch/routes/job_updates
     - Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
     - examples: [{example={
  "job_updates" : [ {
    "prev_job_state" : "JobState_EnRoute",
    "route_id" : 556,
    "route" : "",
    "changed_at_ms" : 1462881998034,
    "job_state" : "JobState_Arrived",
    "job_id" : 773
  }, {
    "prev_job_state" : "JobState_EnRoute",
    "route_id" : 556,
    "route" : "",
    "changed_at_ms" : 1462881998034,
    "job_state" : "JobState_Arrived",
    "job_id" : 773
  } ],
  "sequence_id" : "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter sequenceId: (query) Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours. (optional)
     - parameter include: (query) Optionally set include&#x3D;route to include route object in response payload. (optional)

     - returns: RequestBuilder<AllRouteJobUpdates> 
     */
    open class func fetchAllRouteJobUpdatesWithRequestBuilder(accessToken: String, groupId: Int64? = nil, sequenceId: String? = nil, include: String? = nil) -> RequestBuilder<AllRouteJobUpdates> {
        let path = "/fleet/dispatch/routes/job_updates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON(), 
            "sequence_id": sequenceId, 
            "include": include
        ])

        let requestBuilder: RequestBuilder<AllRouteJobUpdates>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRouteById(accessToken: String, routeId: Int64, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        getDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}
     - GET /fleet/dispatch/routes/{route_id}
     - Fetch a dispatch route by id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func getDispatchRouteByIdWithRequestBuilder(accessToken: String, routeId: Int64) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/dispatch/routes/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/history
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the route with history. 
     - parameter startTime: (query) Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0. (optional)
     - parameter endTime: (query) Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRouteHistory(accessToken: String, routeId: Int64, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: DispatchRouteHistory?,_ error: Error?) -> Void)) {
        getDispatchRouteHistoryWithRequestBuilder(accessToken: accessToken, routeId: routeId, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/history
     - GET /fleet/dispatch/routes/{route_id}/history
     - Fetch the history of a dispatch route.
     - examples: [{example={
  "history" : [ {
    "route" : "",
    "changed_at_ms" : 1499411220000
  }, {
    "route" : "",
    "changed_at_ms" : 1499411220000
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the route with history. 
     - parameter startTime: (query) Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0. (optional)
     - parameter endTime: (query) Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs. (optional)

     - returns: RequestBuilder<DispatchRouteHistory> 
     */
    open class func getDispatchRouteHistoryWithRequestBuilder(accessToken: String, routeId: Int64, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<DispatchRouteHistory> {
        var path = "/fleet/dispatch/routes/{route_id}/history"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "start_time": startTime?.encodeToJSON(), 
            "end_time": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRouteHistory>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRoutesByDriverId(accessToken: String, driverId: Int64, endTime: Int64? = nil, duration: Int64? = nil, completion: @escaping ((_ data: DispatchRoutes?,_ error: Error?) -> Void)) {
        getDispatchRoutesByDriverIdWithRequestBuilder(accessToken: accessToken, driverId: driverId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     - GET /fleet/drivers/{driver_id}/dispatch/routes
     - Fetch all of the dispatch routes for a given driver.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<DispatchRoutes> 
     */
    open class func getDispatchRoutesByDriverIdWithRequestBuilder(accessToken: String, driverId: Int64, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<DispatchRoutes> {
        var path = "/fleet/drivers/{driver_id}/dispatch/routes"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "end_time": endTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRoutesByVehicleId(accessToken: String, vehicleId: Int64, endTime: Int64? = nil, duration: Int64? = nil, completion: @escaping ((_ data: DispatchRoutes?,_ error: Error?) -> Void)) {
        getDispatchRoutesByVehicleIdWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     - GET /fleet/vehicles/{vehicle_id}/dispatch/routes
     - Fetch all of the dispatch routes for a given vehicle.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<DispatchRoutes> 
     */
    open class func getDispatchRoutesByVehicleIdWithRequestBuilder(accessToken: String, vehicleId: Int64, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<DispatchRoutes> {
        var path = "/fleet/vehicles/{vehicle_id}/dispatch/routes"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "end_time": endTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter updateDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDispatchRouteById(accessToken: String, routeId: Int64, updateDispatchRouteParams: DispatchRoute, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        updateDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId, updateDispatchRouteParams: updateDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     - PUT /fleet/dispatch/routes/{route_id}
     - Update a dispatch route and its associated jobs.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter updateDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func updateDispatchRouteByIdWithRequestBuilder(accessToken: String, routeId: Int64, updateDispatchRouteParams: DispatchRoute) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/dispatch/routes/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
