//
// FleetAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FleetAPI {
    /**
     /fleet/add_address
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFleetAddress(accessToken: String, addressParam: AddressParam, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addFleetAddressWithRequestBuilder(accessToken: accessToken, addressParam: addressParam).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /fleet/add_address
     - POST /fleet/add_address
     - This method adds an address book entry to the specified group.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressParam: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func addFleetAddressWithRequestBuilder(accessToken: String, addressParam: AddressParam) -> RequestBuilder<Void> {
        let path = "/fleet/add_address"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addressParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /addresses
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addresses: (body) List of addresses/geofences to add. Geofences can be circular or a polygon.  For each address, only one of &#39;circle&#39; or &#39;polygon&#39; should be provided. If both are provided, the geofence will be saved as a polygon. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addOrganizationAddresses(accessToken: String, addresses: Addresses, completion: @escaping ((_ data: [Address]?,_ error: Error?) -> Void)) {
        addOrganizationAddressesWithRequestBuilder(accessToken: accessToken, addresses: addresses).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /addresses
     - POST /addresses
     - Add one or more addresses to the organization
     - examples: [{example=[ {
  "tags" : [ {
    "id" : 12345,
    "name" : "Broken Vehicles"
  }, {
    "id" : 12345,
    "name" : "Broken Vehicles"
  } ],
  "id" : 123,
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      }, {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      } ]
    },
    "circle" : {
      "radiusMeters" : 250,
      "longitude" : -122.403098,
      "latitude" : 37.765363
    }
  },
  "name" : "Samsara HQ",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "notes" : "Delivery site 1",
  "contacts" : [ {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  }, {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  } ]
}, {
  "tags" : [ {
    "id" : 12345,
    "name" : "Broken Vehicles"
  }, {
    "id" : 12345,
    "name" : "Broken Vehicles"
  } ],
  "id" : 123,
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      }, {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      } ]
    },
    "circle" : {
      "radiusMeters" : 250,
      "longitude" : -122.403098,
      "latitude" : 37.765363
    }
  },
  "name" : "Samsara HQ",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "notes" : "Delivery site 1",
  "contacts" : [ {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  }, {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  } ]
} ], contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addresses: (body) List of addresses/geofences to add. Geofences can be circular or a polygon.  For each address, only one of &#39;circle&#39; or &#39;polygon&#39; should be provided. If both are provided, the geofence will be saved as a polygon. 

     - returns: RequestBuilder<[Address]> 
     */
    open class func addOrganizationAddressesWithRequestBuilder(accessToken: String, addresses: Addresses) -> RequestBuilder<[Address]> {
        let path = "/addresses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addresses)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<[Address]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDispatchRoute(accessToken: String, createDispatchRouteParams: DispatchRouteCreate, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        createDispatchRouteWithRequestBuilder(accessToken: accessToken, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes
     - POST /fleet/dispatch/routes
     - Create a new dispatch route.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func createDispatchRouteWithRequestBuilder(accessToken: String, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        let path = "/fleet/dispatch/routes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/create
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDriverParam: (body) Driver creation body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDriver(accessToken: String, createDriverParam: DriverForCreate, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        createDriverWithRequestBuilder(accessToken: accessToken, createDriverParam: createDriverParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/create
     - POST /fleet/drivers/create
     - Create a new driver.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDriverParam: (body) Driver creation body 

     - returns: RequestBuilder<Driver> 
     */
    open class func createDriverWithRequestBuilder(accessToken: String, createDriverParam: DriverForCreate) -> RequestBuilder<Driver> {
        let path = "/fleet/drivers/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDriverParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDriverDispatchRoute(accessToken: String, driverId: Int64, createDispatchRouteParams: DispatchRouteCreate, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        createDriverDispatchRouteWithRequestBuilder(accessToken: accessToken, driverId: driverId, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     - POST /fleet/drivers/{driver_id}/dispatch/routes
     - Create a new dispatch route for the driver with driver_id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func createDriverDispatchRouteWithRequestBuilder(accessToken: String, driverId: Int64, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/drivers/{driver_id}/dispatch/routes"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/documents
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver for whom the document is created. 
     - parameter createDocumentParams: (body) To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDriverDocument(accessToken: String, driverId: Int64, createDocumentParams: DocumentCreate, completion: @escaping ((_ data: Document?,_ error: Error?) -> Void)) {
        createDriverDocumentWithRequestBuilder(accessToken: accessToken, driverId: driverId, createDocumentParams: createDocumentParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/documents
     - POST /fleet/drivers/{driver_id}/documents
     - Create a driver document for the given driver.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver for whom the document is created. 
     - parameter createDocumentParams: (body) To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_. 

     - returns: RequestBuilder<Document> 
     */
    open class func createDriverDocumentWithRequestBuilder(accessToken: String, driverId: Int64, createDocumentParams: DocumentCreate) -> RequestBuilder<Document> {
        var path = "/fleet/drivers/{driver_id}/documents"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDocumentParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Document>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/maintenance/dvirs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDvirParam: (body) DVIR creation body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDvir(accessToken: String, createDvirParam: CreateDvirParam, completion: @escaping ((_ data: DvirBase?,_ error: Error?) -> Void)) {
        createDvirWithRequestBuilder(accessToken: accessToken, createDvirParam: createDvirParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/maintenance/dvirs
     - POST /fleet/maintenance/dvirs
     - Create a new dvir, marking a vehicle or trailer safe or unsafe.
     - examples: [{example={
  "vehicleDefects" : [ {
    "defectType" : "Air Compressor",
    "comment" : "Air Compressor not working"
  }, {
    "defectType" : "Air Compressor",
    "comment" : "Air Compressor not working"
  } ],
  "defectsNeedNotBeCorrected" : false,
  "authorSignature" : {
    "username" : "jsmith",
    "mechanicUserId" : 14849,
    "email" : "j.smith@yahoo.com",
    "signedAt" : 12535500000,
    "name" : "John Smith",
    "driverId" : 2581,
    "type" : "driver"
  },
  "inspectionType" : "pre trip",
  "odometerMiles" : 49912,
  "vehicle" : {
    "id" : 19,
    "name" : "Storer's vehicle 19"
  },
  "timeMs" : 1453449599999,
  "defectsCorrected" : true,
  "mechanicNotes" : "The vehicle is now safe.",
  "id" : 19,
  "nextDriverSignature" : {
    "username" : "jsmith",
    "email" : "j.smith@yahoo.com",
    "signedAt" : 12535500000,
    "name" : "John Smith",
    "driverId" : 2581,
    "type" : "driver"
  },
  "trailerName" : "Storer's Trailer 19",
  "vehicleCondition" : "SATISFACTORY",
  "mechanicOrAgentSignature" : {
    "username" : "jsmith",
    "mechanicUserId" : 14849,
    "email" : "j.smith@yahoo.com",
    "signedAt" : 12535500000,
    "name" : "John Smith",
    "driverId" : 2581,
    "type" : "driver"
  },
  "trailerDefects" : [ {
    "defectType" : "Air Compressor",
    "comment" : "Air Compressor not working"
  }, {
    "defectType" : "Air Compressor",
    "comment" : "Air Compressor not working"
  } ],
  "trailerId" : 19
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDvirParam: (body) DVIR creation body 

     - returns: RequestBuilder<DvirBase> 
     */
    open class func createDvirWithRequestBuilder(accessToken: String, createDvirParam: CreateDvirParam) -> RequestBuilder<DvirBase> {
        let path = "/fleet/maintenance/dvirs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDvirParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DvirBase>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createVehicleDispatchRoute(accessToken: String, vehicleId: Int64, createDispatchRouteParams: DispatchRouteCreate, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        createVehicleDispatchRouteWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     - POST /fleet/vehicles/{vehicle_id}/dispatch/routes
     - Create a new dispatch route for the vehicle with vehicle_id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func createVehicleDispatchRouteWithRequestBuilder(accessToken: String, vehicleId: Int64, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/vehicles/{vehicle_id}/dispatch/routes"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateDriver(accessToken: String, driverIdOrExternalId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deactivateDriverWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - DELETE /fleet/drivers/{driver_id_or_external_id}
     - Deactivate a driver with the given id.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Void> 
     */
    open class func deactivateDriverWithRequestBuilder(accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Void> {
        var path = "/fleet/drivers/{driver_id_or_external_id}"
        let driverIdOrExternalIdPreEscape = "\(driverIdOrExternalId)"
        let driverIdOrExternalIdPostEscape = driverIdOrExternalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id_or_external_id}", with: driverIdOrExternalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDispatchRouteById(accessToken: String, routeId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     - DELETE /fleet/dispatch/routes/{route_id}
     - Delete a dispatch route and its associated jobs.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDispatchRouteByIdWithRequestBuilder(accessToken: String, routeId: Int64) -> RequestBuilder<Void> {
        var path = "/fleet/dispatch/routes/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /addresses/{addressId}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrganizationAddress(accessToken: String, addressId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteOrganizationAddressWithRequestBuilder(accessToken: accessToken, addressId: addressId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /addresses/{addressId}
     - DELETE /addresses/{addressId}
     - Delete an address.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrganizationAddressWithRequestBuilder(accessToken: String, addressId: Int64) -> RequestBuilder<Void> {
        var path = "/addresses/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllDispatchRoutes(accessToken: String, groupId: Int64? = nil, endTime: Int64? = nil, duration: Int64? = nil, completion: @escaping ((_ data: DispatchRoutes?,_ error: Error?) -> Void)) {
        fetchAllDispatchRoutesWithRequestBuilder(accessToken: accessToken, groupId: groupId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes
     - GET /fleet/dispatch/routes
     - Fetch all of the dispatch routes for the group.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<DispatchRoutes> 
     */
    open class func fetchAllDispatchRoutesWithRequestBuilder(accessToken: String, groupId: Int64? = nil, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<DispatchRoutes> {
        let path = "/fleet/dispatch/routes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON(), 
            "end_time": endTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/job_updates
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter sequenceId: (query) Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours. (optional)
     - parameter include: (query) Optionally set include&#x3D;route to include route object in response payload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllRouteJobUpdates(accessToken: String, groupId: Int64? = nil, sequenceId: String? = nil, include: String? = nil, completion: @escaping ((_ data: AllRouteJobUpdates?,_ error: Error?) -> Void)) {
        fetchAllRouteJobUpdatesWithRequestBuilder(accessToken: accessToken, groupId: groupId, sequenceId: sequenceId, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/job_updates
     - GET /fleet/dispatch/routes/job_updates
     - Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
     - examples: [{example={
  "job_updates" : [ {
    "prev_job_state" : "JobState_EnRoute",
    "route_id" : 556,
    "route" : "",
    "changed_at_ms" : 1462881998034,
    "job_state" : "JobState_Arrived",
    "job_id" : 773
  }, {
    "prev_job_state" : "JobState_EnRoute",
    "route_id" : 556,
    "route" : "",
    "changed_at_ms" : 1462881998034,
    "job_state" : "JobState_Arrived",
    "job_id" : 773
  } ],
  "sequence_id" : "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter sequenceId: (query) Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours. (optional)
     - parameter include: (query) Optionally set include&#x3D;route to include route object in response payload. (optional)

     - returns: RequestBuilder<AllRouteJobUpdates> 
     */
    open class func fetchAllRouteJobUpdatesWithRequestBuilder(accessToken: String, groupId: Int64? = nil, sequenceId: String? = nil, include: String? = nil) -> RequestBuilder<AllRouteJobUpdates> {
        let path = "/fleet/dispatch/routes/job_updates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON(), 
            "sequence_id": sequenceId, 
            "include": include
        ])

        let requestBuilder: RequestBuilder<AllRouteJobUpdates>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllAssetCurrentLocations(accessToken: String, groupId: Int64? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        getAllAssetCurrentLocationsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets/locations
     - GET /fleet/assets/locations
     - Fetch current locations of all assets for the group.
     - examples: [{example={
  "assets" : [ {
    "id" : 1,
    "engineHours" : 104,
    "location" : [ {
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "latitude" : 37.0,
      "timeMs" : 12314151
    }, {
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "latitude" : 37.0,
      "timeMs" : 12314151
    } ],
    "name" : "Trailer 123",
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  }, {
    "id" : 1,
    "engineHours" : 104,
    "location" : [ {
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "latitude" : 37.0,
      "timeMs" : 12314151
    }, {
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "latitude" : 37.0,
      "timeMs" : 12314151
    } ],
    "name" : "Trailer 123",
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getAllAssetCurrentLocationsWithRequestBuilder(accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/fleet/assets/locations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllAssets(accessToken: String, groupId: Int64? = nil, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getAllAssetsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets
     - GET /fleet/assets
     - Fetch all of the assets for the group.
     - examples: [{example={
  "assets" : [ {
    "id" : 1,
    "assetSerialNumber" : "SNTEST123",
    "engineHours" : 104,
    "name" : "Trailer 123",
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  }, {
    "id" : 1,
    "assetSerialNumber" : "SNTEST123",
    "engineHours" : 104,
    "name" : "Trailer 123",
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getAllAssetsWithRequestBuilder(accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/fleet/assets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllDeactivatedDrivers(accessToken: String, groupId: Int64? = nil, completion: @escaping ((_ data: [Driver]?,_ error: Error?) -> Void)) {
        getAllDeactivatedDriversWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/inactive
     - GET /fleet/drivers/inactive
     - Fetch all deactivated drivers for the group.
     - examples: [{example=[ "", "" ], contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<[Driver]> 
     */
    open class func getAllDeactivatedDriversWithRequestBuilder(accessToken: String, groupId: Int64? = nil) -> RequestBuilder<[Driver]> {
        let path = "/fleet/drivers/inactive"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Driver]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets/{assetId:[0-9]+}/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssetLocation(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: AssetLocationResponse?,_ error: Error?) -> Void)) {
        getAssetLocationWithRequestBuilder(accessToken: accessToken, assetId: assetId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets/{assetId:[0-9]+}/locations
     - GET /fleet/assets/{asset_id}/locations
     - Fetch the historical locations for the asset.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<AssetLocationResponse> 
     */
    open class func getAssetLocationWithRequestBuilder(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<AssetLocationResponse> {
        var path = "/fleet/assets/{asset_id}/locations"
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AssetLocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets/{assetId:[0-9]+}/reefer
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssetReefer(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: AssetReeferResponse?,_ error: Error?) -> Void)) {
        getAssetReeferWithRequestBuilder(accessToken: accessToken, assetId: assetId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets/{assetId:[0-9]+}/reefer
     - GET /fleet/assets/{asset_id}/reefer
     - Fetch the reefer-specific stats of an asset.
     - examples: [{example={
  "id" : 1,
  "reeferStats" : {
    "powerStatus" : [ {
      "status" : "Active (Continuous)",
      "changedAtMs" : 1453449599999
    }, {
      "status" : "Active (Continuous)",
      "changedAtMs" : 1453449599999
    } ],
    "engineHours" : [ {
      "engineHours" : 1200,
      "changedAtMs" : 1453449599999
    }, {
      "engineHours" : 1200,
      "changedAtMs" : 1453449599999
    } ],
    "returnAirTemp" : [ {
      "changedAtMs" : 1453449599999,
      "tempInMilliC" : 31110
    }, {
      "changedAtMs" : 1453449599999,
      "tempInMilliC" : 31110
    } ],
    "fuelPercentage" : [ {
      "fuelPercentage" : 99,
      "changedAtMs" : 1453449599999
    }, {
      "fuelPercentage" : 99,
      "changedAtMs" : 1453449599999
    } ],
    "setPoint" : [ {
      "changedAtMs" : 1453449599999,
      "tempInMilliC" : 31110
    }, {
      "changedAtMs" : 1453449599999,
      "tempInMilliC" : 31110
    } ],
    "alarms" : [ {
      "changedAtMs" : 1453449599999,
      "alarms" : [ {
        "description" : "Check Return Air Sensor",
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "alarmCode" : 102
      }, {
        "description" : "Check Return Air Sensor",
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "alarmCode" : 102
      } ]
    }, {
      "changedAtMs" : 1453449599999,
      "alarms" : [ {
        "description" : "Check Return Air Sensor",
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "alarmCode" : 102
      }, {
        "description" : "Check Return Air Sensor",
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "alarmCode" : 102
      } ]
    } ]
  },
  "assetType" : "Reefer (Thermo King)",
  "name" : "Reefer 123"
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<AssetReeferResponse> 
     */
    open class func getAssetReeferWithRequestBuilder(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<AssetReeferResponse> {
        var path = "/fleet/assets/{asset_id}/reefer"
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AssetReeferResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeactivatedDriverById(accessToken: String, driverIdOrExternalId: String, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        getDeactivatedDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/drivers/inactive/{driver_id_or_external_id}
     - Fetch deactivated driver by id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Driver> 
     */
    open class func getDeactivatedDriverByIdWithRequestBuilder(accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/inactive/{driver_id_or_external_id}"
        let driverIdOrExternalIdPreEscape = "\(driverIdOrExternalId)"
        let driverIdOrExternalIdPostEscape = driverIdOrExternalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id_or_external_id}", with: driverIdOrExternalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRouteById(accessToken: String, routeId: Int64, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        getDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}
     - GET /fleet/dispatch/routes/{route_id}
     - Fetch a dispatch route by id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func getDispatchRouteByIdWithRequestBuilder(accessToken: String, routeId: Int64) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/dispatch/routes/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/history
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the route with history. 
     - parameter startTime: (query) Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0. (optional)
     - parameter endTime: (query) Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRouteHistory(accessToken: String, routeId: Int64, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: DispatchRouteHistory?,_ error: Error?) -> Void)) {
        getDispatchRouteHistoryWithRequestBuilder(accessToken: accessToken, routeId: routeId, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/history
     - GET /fleet/dispatch/routes/{route_id}/history
     - Fetch the history of a dispatch route.
     - examples: [{example={
  "history" : [ {
    "route" : "",
    "changed_at_ms" : 1499411220000
  }, {
    "route" : "",
    "changed_at_ms" : 1499411220000
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the route with history. 
     - parameter startTime: (query) Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0. (optional)
     - parameter endTime: (query) Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs. (optional)

     - returns: RequestBuilder<DispatchRouteHistory> 
     */
    open class func getDispatchRouteHistoryWithRequestBuilder(accessToken: String, routeId: Int64, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<DispatchRouteHistory> {
        var path = "/fleet/dispatch/routes/{route_id}/history"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "start_time": startTime?.encodeToJSON(), 
            "end_time": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRouteHistory>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRoutesByDriverId(accessToken: String, driverId: Int64, endTime: Int64? = nil, duration: Int64? = nil, completion: @escaping ((_ data: DispatchRoutes?,_ error: Error?) -> Void)) {
        getDispatchRoutesByDriverIdWithRequestBuilder(accessToken: accessToken, driverId: driverId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     - GET /fleet/drivers/{driver_id}/dispatch/routes
     - Fetch all of the dispatch routes for a given driver.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<DispatchRoutes> 
     */
    open class func getDispatchRoutesByDriverIdWithRequestBuilder(accessToken: String, driverId: Int64, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<DispatchRoutes> {
        var path = "/fleet/drivers/{driver_id}/dispatch/routes"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "end_time": endTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDispatchRoutesByVehicleId(accessToken: String, vehicleId: Int64, endTime: Int64? = nil, duration: Int64? = nil, completion: @escaping ((_ data: DispatchRoutes?,_ error: Error?) -> Void)) {
        getDispatchRoutesByVehicleIdWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     - GET /fleet/vehicles/{vehicle_id}/dispatch/routes
     - Fetch all of the dispatch routes for a given vehicle.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<DispatchRoutes> 
     */
    open class func getDispatchRoutesByVehicleIdWithRequestBuilder(accessToken: String, vehicleId: Int64, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<DispatchRoutes> {
        var path = "/fleet/vehicles/{vehicle_id}/dispatch/routes"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "end_time": endTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DispatchRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDriverById(accessToken: String, driverIdOrExternalId: String, completion: @escaping ((_ data: CurrentDriver?,_ error: Error?) -> Void)) {
        getDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/drivers/{driver_id_or_external_id}
     - Fetch driver by id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<CurrentDriver> 
     */
    open class func getDriverByIdWithRequestBuilder(accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<CurrentDriver> {
        var path = "/fleet/drivers/{driver_id_or_external_id}"
        let driverIdOrExternalIdPreEscape = "\(driverIdOrExternalId)"
        let driverIdOrExternalIdPostEscape = driverIdOrExternalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id_or_external_id}", with: driverIdOrExternalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<CurrentDriver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/document_types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDriverDocumentTypesByOrgId(completion: @escaping ((_ data: DocumentTypes?,_ error: Error?) -> Void)) {
        getDriverDocumentTypesByOrgIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/document_types
     - GET /fleet/drivers/document_types
     - Fetch all of the document types.
     - examples: [{example="", contentType=application/json}]

     - returns: RequestBuilder<DocumentTypes> 
     */
    open class func getDriverDocumentTypesByOrgIdWithRequestBuilder() -> RequestBuilder<DocumentTypes> {
        let path = "/fleet/drivers/document_types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DocumentTypes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/documents
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now. (optional)
     - parameter durationMs: (query) Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDriverDocumentsByOrgId(accessToken: String, endMs: Int64? = nil, durationMs: Int64? = nil, completion: @escaping ((_ data: Documents?,_ error: Error?) -> Void)) {
        getDriverDocumentsByOrgIdWithRequestBuilder(accessToken: accessToken, endMs: endMs, durationMs: durationMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/documents
     - GET /fleet/drivers/documents
     - Fetch all of the documents.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now. (optional)
     - parameter durationMs: (query) Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<Documents> 
     */
    open class func getDriverDocumentsByOrgIdWithRequestBuilder(accessToken: String, endMs: Int64? = nil, durationMs: Int64? = nil) -> RequestBuilder<Documents> {
        let path = "/fleet/drivers/documents"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "endMs": endMs?.encodeToJSON(), 
            "durationMs": durationMs?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Documents>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers/{driverId:[0-9]+}/safety/score
     
     - parameter driverId: (path) ID of the driver 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDriverSafetyScore(driverId: Int64, accessToken: String, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: DriverSafetyScoreResponse?,_ error: Error?) -> Void)) {
        getDriverSafetyScoreWithRequestBuilder(driverId: driverId, accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driverId:[0-9]+}/safety/score
     - GET /fleet/drivers/{driverId}/safety/score
     - Fetch the safety score for the driver.
     - examples: [{example={
  "totalTimeDrivenMs" : 19708293,
  "timeOverSpeedLimitMs" : 3769,
  "harshBrakingCount" : 2,
  "harshEvents" : [ {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  }, {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  } ],
  "harshTurningCount" : 0,
  "totalHarshEventCount" : 3,
  "driverId" : 1234,
  "safetyScore" : 97,
  "crashCount" : 0,
  "harshAccelCount" : 1,
  "safetyScoreRank" : "26",
  "totalDistanceDrivenMeters" : 291836
}, contentType=application/json}]
     
     - parameter driverId: (path) ID of the driver 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<DriverSafetyScoreResponse> 
     */
    open class func getDriverSafetyScoreWithRequestBuilder(driverId: Int64, accessToken: String, startMs: Int64, endMs: Int64) -> RequestBuilder<DriverSafetyScoreResponse> {
        var path = "/fleet/drivers/{driverId}/safety/score"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driverId}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DriverSafetyScoreResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/maintenance/dvirs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) time in millis until the last dvir log. 
     - parameter durationMs: (query) time in millis which corresponds to the duration before the end_ms. 
     - parameter groupId: (query) Group ID to query. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDvirs(accessToken: String, endMs: Int, durationMs: Int, groupId: Int? = nil, completion: @escaping ((_ data: DvirListResponse?,_ error: Error?) -> Void)) {
        getDvirsWithRequestBuilder(accessToken: accessToken, endMs: endMs, durationMs: durationMs, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/maintenance/dvirs
     - GET /fleet/maintenance/dvirs
     - Get DVIRs for the org within provided time constraints
     - examples: [{example={
  "dvirs" : [ {
    "vehicleDefects" : [ {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    }, {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    } ],
    "defectsNeedNotBeCorrected" : false,
    "authorSignature" : {
      "username" : "jsmith",
      "mechanicUserId" : 14849,
      "email" : "j.smith@yahoo.com",
      "signedAt" : 12535500000,
      "name" : "John Smith",
      "driverId" : 2581,
      "type" : "driver"
    },
    "inspectionType" : "pre trip",
    "odometerMiles" : 49912,
    "vehicle" : {
      "id" : 19,
      "name" : "Storer's vehicle 19"
    },
    "timeMs" : 1453449599999,
    "defectsCorrected" : true,
    "mechanicNotes" : "The vehicle is now safe.",
    "id" : 19,
    "nextDriverSignature" : {
      "username" : "jsmith",
      "email" : "j.smith@yahoo.com",
      "signedAt" : 12535500000,
      "name" : "John Smith",
      "driverId" : 2581,
      "type" : "driver"
    },
    "trailerName" : "Storer's Trailer 19",
    "vehicleCondition" : "SATISFACTORY",
    "mechanicOrAgentSignature" : {
      "username" : "jsmith",
      "mechanicUserId" : 14849,
      "email" : "j.smith@yahoo.com",
      "signedAt" : 12535500000,
      "name" : "John Smith",
      "driverId" : 2581,
      "type" : "driver"
    },
    "trailerDefects" : [ {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    }, {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    } ],
    "trailerId" : 19
  }, {
    "vehicleDefects" : [ {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    }, {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    } ],
    "defectsNeedNotBeCorrected" : false,
    "authorSignature" : {
      "username" : "jsmith",
      "mechanicUserId" : 14849,
      "email" : "j.smith@yahoo.com",
      "signedAt" : 12535500000,
      "name" : "John Smith",
      "driverId" : 2581,
      "type" : "driver"
    },
    "inspectionType" : "pre trip",
    "odometerMiles" : 49912,
    "vehicle" : {
      "id" : 19,
      "name" : "Storer's vehicle 19"
    },
    "timeMs" : 1453449599999,
    "defectsCorrected" : true,
    "mechanicNotes" : "The vehicle is now safe.",
    "id" : 19,
    "nextDriverSignature" : {
      "username" : "jsmith",
      "email" : "j.smith@yahoo.com",
      "signedAt" : 12535500000,
      "name" : "John Smith",
      "driverId" : 2581,
      "type" : "driver"
    },
    "trailerName" : "Storer's Trailer 19",
    "vehicleCondition" : "SATISFACTORY",
    "mechanicOrAgentSignature" : {
      "username" : "jsmith",
      "mechanicUserId" : 14849,
      "email" : "j.smith@yahoo.com",
      "signedAt" : 12535500000,
      "name" : "John Smith",
      "driverId" : 2581,
      "type" : "driver"
    },
    "trailerDefects" : [ {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    }, {
      "defectType" : "Air Compressor",
      "comment" : "Air Compressor not working"
    } ],
    "trailerId" : 19
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) time in millis until the last dvir log. 
     - parameter durationMs: (query) time in millis which corresponds to the duration before the end_ms. 
     - parameter groupId: (query) Group ID to query. (optional)

     - returns: RequestBuilder<DvirListResponse> 
     */
    open class func getDvirsWithRequestBuilder(accessToken: String, endMs: Int, durationMs: Int, groupId: Int? = nil) -> RequestBuilder<DvirListResponse> {
        let path = "/fleet/maintenance/dvirs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "end_ms": endMs.encodeToJSON(), 
            "duration_ms": durationMs.encodeToJSON(), 
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DvirListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/drivers
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupDriversParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetDrivers(accessToken: String, groupDriversParam: GroupDriversParam, completion: @escaping ((_ data: DriversResponse?,_ error: Error?) -> Void)) {
        getFleetDriversWithRequestBuilder(accessToken: accessToken, groupDriversParam: groupDriversParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers
     - POST /fleet/drivers
     - Get all the drivers for the specified group.
     - examples: [{example={
  "drivers" : [ "", "" ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupDriversParam: (body)  

     - returns: RequestBuilder<DriversResponse> 
     */
    open class func getFleetDriversWithRequestBuilder(accessToken: String, groupDriversParam: GroupDriversParam) -> RequestBuilder<DriversResponse> {
        let path = "/fleet/drivers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupDriversParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DriversResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with HOS logs. 
     - parameter hosLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetDriversHosDailyLogs(accessToken: String, driverId: Int64, hosLogsParam: HosLogsParam, completion: @escaping ((_ data: DriverDailyLogResponse?,_ error: Error?) -> Void)) {
        getFleetDriversHosDailyLogsWithRequestBuilder(accessToken: accessToken, driverId: driverId, hosLogsParam: hosLogsParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
     - POST /fleet/drivers/{driver_id}/hos_daily_logs
     - Get summarized daily HOS charts for a specified driver.
     - examples: [{example={
  "days" : [ {
    "distanceMiles" : 123.24,
    "vehicleIds" : [ 192319, 12958 ],
    "activeMs" : 691200,
    "certified" : true,
    "trailerIds" : [ 10293, 192933 ],
    "certifiedAtMs" : 0,
    "startMs" : 1473750000000,
    "activeHours" : 5.4,
    "endMs" : 1473836400000
  }, {
    "distanceMiles" : 123.24,
    "vehicleIds" : [ 192319, 12958 ],
    "activeMs" : 691200,
    "certified" : true,
    "trailerIds" : [ 10293, 192933 ],
    "certifiedAtMs" : 0,
    "startMs" : 1473750000000,
    "activeHours" : 5.4,
    "endMs" : 1473836400000
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with HOS logs. 
     - parameter hosLogsParam: (body)  

     - returns: RequestBuilder<DriverDailyLogResponse> 
     */
    open class func getFleetDriversHosDailyLogsWithRequestBuilder(accessToken: String, driverId: Int64, hosLogsParam: HosLogsParam) -> RequestBuilder<DriverDailyLogResponse> {
        var path = "/fleet/drivers/{driver_id}/hos_daily_logs"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hosLogsParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DriverDailyLogResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/summary
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driversSummaryParam: (body) Org ID and time range to query. 
     - parameter snapToDayBounds: (query) Snap query result to HOS day boundaries. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetDriversSummary(accessToken: String, driversSummaryParam: DriversSummaryParam, snapToDayBounds: Bool? = nil, completion: @escaping ((_ data: DriversSummaryResponse?,_ error: Error?) -> Void)) {
        getFleetDriversSummaryWithRequestBuilder(accessToken: accessToken, driversSummaryParam: driversSummaryParam, snapToDayBounds: snapToDayBounds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/summary
     - POST /fleet/drivers/summary
     - Get the distance and time each driver in an organization has driven in a given time period.
     - examples: [{example={
  "Summaries" : [ {
    "distanceMiles" : 123.24,
    "groupId" : 111,
    "onDutyMs" : 21600000,
    "activeMs" : 43200000,
    "driverId" : 444,
    "driveMs" : 21600000,
    "driverUsername" : "fjacobs",
    "driverName" : "Fred Jacobs"
  }, {
    "distanceMiles" : 123.24,
    "groupId" : 111,
    "onDutyMs" : 21600000,
    "activeMs" : 43200000,
    "driverId" : 444,
    "driveMs" : 21600000,
    "driverUsername" : "fjacobs",
    "driverName" : "Fred Jacobs"
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driversSummaryParam: (body) Org ID and time range to query. 
     - parameter snapToDayBounds: (query) Snap query result to HOS day boundaries. (optional)

     - returns: RequestBuilder<DriversSummaryResponse> 
     */
    open class func getFleetDriversSummaryWithRequestBuilder(accessToken: String, driversSummaryParam: DriversSummaryParam, snapToDayBounds: Bool? = nil) -> RequestBuilder<DriversSummaryResponse> {
        let path = "/fleet/drivers/summary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: driversSummaryParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "snap_to_day_bounds": snapToDayBounds
        ])

        let requestBuilder: RequestBuilder<DriversSummaryResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/hos_authentication_logs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosAuthenticationLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetHosAuthenticationLogs(accessToken: String, hosAuthenticationLogsParam: HosAuthenticationLogsParam, completion: @escaping ((_ data: HosAuthenticationLogsResponse?,_ error: Error?) -> Void)) {
        getFleetHosAuthenticationLogsWithRequestBuilder(accessToken: accessToken, hosAuthenticationLogsParam: hosAuthenticationLogsParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/hos_authentication_logs
     - POST /fleet/hos_authentication_logs
     - Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
     - examples: [{example={
  "authenticationLogs" : [ {
    "happenedAtMs" : 1462881998034,
    "address" : "123 Main St., Ahwatukee, Arizona 85044",
    "state" : "Arizona",
    "actionType" : "signin",
    "city" : "Ahwatukee",
    "addressName" : "Garage Number 3"
  }, {
    "happenedAtMs" : 1462881998034,
    "address" : "123 Main St., Ahwatukee, Arizona 85044",
    "state" : "Arizona",
    "actionType" : "signin",
    "city" : "Ahwatukee",
    "addressName" : "Garage Number 3"
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosAuthenticationLogsParam: (body)  

     - returns: RequestBuilder<HosAuthenticationLogsResponse> 
     */
    open class func getFleetHosAuthenticationLogsWithRequestBuilder(accessToken: String, hosAuthenticationLogsParam: HosAuthenticationLogsParam) -> RequestBuilder<HosAuthenticationLogsResponse> {
        let path = "/fleet/hos_authentication_logs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hosAuthenticationLogsParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<HosAuthenticationLogsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/hos_logs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetHosLogs(accessToken: String, hosLogsParam: HosLogsParam1, completion: @escaping ((_ data: HosLogsResponse?,_ error: Error?) -> Void)) {
        getFleetHosLogsWithRequestBuilder(accessToken: accessToken, hosLogsParam: hosLogsParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/hos_logs
     - POST /fleet/hos_logs
     - Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
     - examples: [{example={
  "logs" : [ {
    "groupId" : 101,
    "logStartMs" : 1462881998034,
    "codriverIds" : [ 445, 445 ],
    "vehicleId" : 112,
    "remark" : "Lunch Break",
    "statusType" : "OFF_DUTY",
    "driverId" : 444,
    "locLng" : -98.502888123,
    "locName" : "McLean Site A",
    "locLat" : 23.413702345,
    "locCity" : "Ahwatukee",
    "locState" : "Arizona"
  }, {
    "groupId" : 101,
    "logStartMs" : 1462881998034,
    "codriverIds" : [ 445, 445 ],
    "vehicleId" : 112,
    "remark" : "Lunch Break",
    "statusType" : "OFF_DUTY",
    "driverId" : 444,
    "locLng" : -98.502888123,
    "locName" : "McLean Site A",
    "locLat" : 23.413702345,
    "locCity" : "Ahwatukee",
    "locState" : "Arizona"
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  

     - returns: RequestBuilder<HosLogsResponse> 
     */
    open class func getFleetHosLogsWithRequestBuilder(accessToken: String, hosLogsParam: HosLogsParam1) -> RequestBuilder<HosLogsResponse> {
        let path = "/fleet/hos_logs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hosLogsParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<HosLogsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/hos_logs_summary
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetHosLogsSummary(accessToken: String, hosLogsParam: HosLogsParam2, completion: @escaping ((_ data: HosLogsSummaryResponse?,_ error: Error?) -> Void)) {
        getFleetHosLogsSummaryWithRequestBuilder(accessToken: accessToken, hosLogsParam: hosLogsParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/hos_logs_summary
     - POST /fleet/hos_logs_summary
     - Get the current HOS status for all drivers in the group.
     - examples: [{example={
  "drivers" : [ {
    "timeUntilBreak" : 28800000,
    "dutyStatus" : "OFF_DUTY",
    "vehicleName" : "Vehicle 1",
    "shiftDriveRemaining" : 39600000,
    "driverId" : 444,
    "cycleTomorrow" : 252000000,
    "shiftRemaining" : 50400000,
    "drivingInViolationToday" : 39600000,
    "timeInCurrentStatus" : 5000,
    "cycleRemaining" : 252000000,
    "drivingInViolationCycle" : 50400000,
    "driverName" : "Fred Jacobs"
  }, {
    "timeUntilBreak" : 28800000,
    "dutyStatus" : "OFF_DUTY",
    "vehicleName" : "Vehicle 1",
    "shiftDriveRemaining" : 39600000,
    "driverId" : 444,
    "cycleTomorrow" : 252000000,
    "shiftRemaining" : 50400000,
    "drivingInViolationToday" : 39600000,
    "timeInCurrentStatus" : 5000,
    "cycleRemaining" : 252000000,
    "drivingInViolationCycle" : 50400000,
    "driverName" : "Fred Jacobs"
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  

     - returns: RequestBuilder<HosLogsSummaryResponse> 
     */
    open class func getFleetHosLogsSummaryWithRequestBuilder(accessToken: String, hosLogsParam: HosLogsParam2) -> RequestBuilder<HosLogsSummaryResponse> {
        let path = "/fleet/hos_logs_summary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hosLogsParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<HosLogsSummaryResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body) Group ID to query. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetLocations(accessToken: String, groupParam: GroupParam, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        getFleetLocationsWithRequestBuilder(accessToken: accessToken, groupParam: groupParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/locations
     - POST /fleet/locations
     - Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
     - examples: [{example={
  "groupId" : 101,
  "vehicles" : [ {
    "id" : 112,
    "time" : 1462881998034,
    "onTrip" : true,
    "speed" : 64.37,
    "location" : "1 Main St, Dallas, TX",
    "vin" : "JTNBB46KX73011966",
    "name" : "Truck A7",
    "odometerMeters" : 71774705,
    "longitude" : 32.897,
    "latitude" : 123.456,
    "heading" : 246.42
  }, {
    "id" : 112,
    "time" : 1462881998034,
    "onTrip" : true,
    "speed" : 64.37,
    "location" : "1 Main St, Dallas, TX",
    "vin" : "JTNBB46KX73011966",
    "name" : "Truck A7",
    "odometerMeters" : 71774705,
    "longitude" : 32.897,
    "latitude" : 123.456,
    "heading" : 246.42
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body) Group ID to query. 

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func getFleetLocationsWithRequestBuilder(accessToken: String, groupParam: GroupParam) -> RequestBuilder<InlineResponse2003> {
        let path = "/fleet/locations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/maintenance/list
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body) Group ID to query. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetMaintenanceList(accessToken: String, groupParam: GroupParam, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        getFleetMaintenanceListWithRequestBuilder(accessToken: accessToken, groupParam: groupParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/maintenance/list
     - POST /fleet/maintenance/list
     - Get list of the vehicles with any engine faults or check light data.
     - examples: [{example={
  "vehicles" : [ {
    "passenger" : {
      "diagnosticTroubleCodes" : [ {
        "dtcShortCode" : "dtcShortCode",
        "dtcDescription" : "dtcDescription",
        "dtcId" : 5
      }, {
        "dtcShortCode" : "dtcShortCode",
        "dtcDescription" : "dtcDescription",
        "dtcId" : 5
      } ],
      "checkEngineLight" : {
        "isOn" : true
      }
    },
    "id" : 112,
    "j1939" : {
      "diagnosticTroubleCodes" : [ {
        "spnDescription" : "spnDescription",
        "occurrenceCount" : 6,
        "fmiId" : 0,
        "txId" : 5,
        "fmiText" : "fmiText",
        "spnId" : 1
      }, {
        "spnDescription" : "spnDescription",
        "occurrenceCount" : 6,
        "fmiId" : 0,
        "txId" : 5,
        "fmiText" : "fmiText",
        "spnId" : 1
      } ],
      "checkEngineLight" : {
        "emissionsIsOn" : true,
        "stopIsOn" : true,
        "warningIsOn" : true,
        "protectIsOn" : true
      }
    }
  }, {
    "passenger" : {
      "diagnosticTroubleCodes" : [ {
        "dtcShortCode" : "dtcShortCode",
        "dtcDescription" : "dtcDescription",
        "dtcId" : 5
      }, {
        "dtcShortCode" : "dtcShortCode",
        "dtcDescription" : "dtcDescription",
        "dtcId" : 5
      } ],
      "checkEngineLight" : {
        "isOn" : true
      }
    },
    "id" : 112,
    "j1939" : {
      "diagnosticTroubleCodes" : [ {
        "spnDescription" : "spnDescription",
        "occurrenceCount" : 6,
        "fmiId" : 0,
        "txId" : 5,
        "fmiText" : "fmiText",
        "spnId" : 1
      }, {
        "spnDescription" : "spnDescription",
        "occurrenceCount" : 6,
        "fmiId" : 0,
        "txId" : 5,
        "fmiText" : "fmiText",
        "spnId" : 1
      } ],
      "checkEngineLight" : {
        "emissionsIsOn" : true,
        "stopIsOn" : true,
        "warningIsOn" : true,
        "protectIsOn" : true
      }
    }
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body) Group ID to query. 

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func getFleetMaintenanceListWithRequestBuilder(accessToken: String, groupParam: GroupParam) -> RequestBuilder<InlineResponse2004> {
        let path = "/fleet/maintenance/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/trips
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tripsParam: (body) Group ID, vehicle ID and time range to query. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetTrips(accessToken: String, tripsParam: TripsParam, completion: @escaping ((_ data: TripResponse?,_ error: Error?) -> Void)) {
        getFleetTripsWithRequestBuilder(accessToken: accessToken, tripsParam: tripsParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/trips
     - POST /fleet/trips
     - Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
     - examples: [{example={
  "trips" : [ {
    "startAddress" : "Ramen Tatsunoya",
    "endOdometer" : 210430500,
    "distanceMeters" : 2500,
    "startCoordinates" : {
      "longitude" : -98.502888123,
      "latitude" : 29.443702345
    },
    "startLocation" : "16 N Fair Oaks Ave, Pasadena, CA 91103",
    "fuelConsumedMl" : 75700,
    "endCoordinates" : {
      "longitude" : -91.502888123,
      "latitude" : 23.413702345
    },
    "tollMeters" : 32000,
    "endLocation" : "571 S Lake Ave, Pasadena, CA 91101",
    "driverId" : 719,
    "endAddress" : "Winchell's Donuts House",
    "startOdometer" : 210430450,
    "startMs" : 1462878398034,
    "endMs" : 1462881998034
  }, {
    "startAddress" : "Ramen Tatsunoya",
    "endOdometer" : 210430500,
    "distanceMeters" : 2500,
    "startCoordinates" : {
      "longitude" : -98.502888123,
      "latitude" : 29.443702345
    },
    "startLocation" : "16 N Fair Oaks Ave, Pasadena, CA 91103",
    "fuelConsumedMl" : 75700,
    "endCoordinates" : {
      "longitude" : -91.502888123,
      "latitude" : 23.413702345
    },
    "tollMeters" : 32000,
    "endLocation" : "571 S Lake Ave, Pasadena, CA 91101",
    "driverId" : 719,
    "endAddress" : "Winchell's Donuts House",
    "startOdometer" : 210430450,
    "startMs" : 1462878398034,
    "endMs" : 1462881998034
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tripsParam: (body) Group ID, vehicle ID and time range to query. 

     - returns: RequestBuilder<TripResponse> 
     */
    open class func getFleetTripsWithRequestBuilder(accessToken: String, tripsParam: TripsParam) -> RequestBuilder<TripResponse> {
        let path = "/fleet/trips"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tripsParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<TripResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetVehicle(accessToken: String, vehicleIdOrExternalId: String, completion: @escaping ((_ data: FleetVehicleResponse?,_ error: Error?) -> Void)) {
        getFleetVehicleWithRequestBuilder(accessToken: accessToken, vehicleIdOrExternalId: vehicleIdOrExternalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/vehicles/{vehicle_id_or_external_id}
     - Gets a specific vehicle.
     - examples: [{example={
  "id" : 112,
  "externalIds" : {
    "maintenanceId" : "ABFS18600"
  },
  "harshAccelSetting" : "Heavy",
  "name" : "Truck A7",
  "vehicleInfo" : {
    "model" : "Odyssey",
    "vin" : "1FUJA6BD31LJ09646",
    "year" : 1997,
    "make" : "Honda"
  }
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<FleetVehicleResponse> 
     */
    open class func getFleetVehicleWithRequestBuilder(accessToken: String, vehicleIdOrExternalId: String) -> RequestBuilder<FleetVehicleResponse> {
        var path = "/fleet/vehicles/{vehicle_id_or_external_id}"
        let vehicleIdOrExternalIdPreEscape = "\(vehicleIdOrExternalId)"
        let vehicleIdOrExternalIdPostEscape = vehicleIdOrExternalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id_or_external_id}", with: vehicleIdOrExternalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<FleetVehicleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /addresses/{addressId}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganizationAddress(accessToken: String, addressId: Int64, completion: @escaping ((_ data: Address?,_ error: Error?) -> Void)) {
        getOrganizationAddressWithRequestBuilder(accessToken: accessToken, addressId: addressId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /addresses/{addressId}
     - GET /addresses/{addressId}
     - Fetch an address by its id.
     - examples: [{example={
  "tags" : [ {
    "id" : 12345,
    "name" : "Broken Vehicles"
  }, {
    "id" : 12345,
    "name" : "Broken Vehicles"
  } ],
  "id" : 123,
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      }, {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      } ]
    },
    "circle" : {
      "radiusMeters" : 250,
      "longitude" : -122.403098,
      "latitude" : 37.765363
    }
  },
  "name" : "Samsara HQ",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "notes" : "Delivery site 1",
  "contacts" : [ {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  }, {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  } ]
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 

     - returns: RequestBuilder<Address> 
     */
    open class func getOrganizationAddressWithRequestBuilder(accessToken: String, addressId: Int64) -> RequestBuilder<Address> {
        var path = "/addresses/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Address>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /addresses
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganizationAddresses(accessToken: String, completion: @escaping ((_ data: [Address]?,_ error: Error?) -> Void)) {
        getOrganizationAddressesWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /addresses
     - GET /addresses
     - Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
     - examples: [{example=[ {
  "tags" : [ {
    "id" : 12345,
    "name" : "Broken Vehicles"
  }, {
    "id" : 12345,
    "name" : "Broken Vehicles"
  } ],
  "id" : 123,
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      }, {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      } ]
    },
    "circle" : {
      "radiusMeters" : 250,
      "longitude" : -122.403098,
      "latitude" : 37.765363
    }
  },
  "name" : "Samsara HQ",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "notes" : "Delivery site 1",
  "contacts" : [ {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  }, {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  } ]
}, {
  "tags" : [ {
    "id" : 12345,
    "name" : "Broken Vehicles"
  }, {
    "id" : 12345,
    "name" : "Broken Vehicles"
  } ],
  "id" : 123,
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      }, {
        "longitude" : -122.403098,
        "latitude" : 37.765363
      } ]
    },
    "circle" : {
      "radiusMeters" : 250,
      "longitude" : -122.403098,
      "latitude" : 37.765363
    }
  },
  "name" : "Samsara HQ",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "notes" : "Delivery site 1",
  "contacts" : [ {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  }, {
    "id" : 123,
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "email" : "jane.jones@yahoo.com",
    "firstName" : "Jane"
  } ]
} ], contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 

     - returns: RequestBuilder<[Address]> 
     */
    open class func getOrganizationAddressesWithRequestBuilder(accessToken: String) -> RequestBuilder<[Address]> {
        let path = "/addresses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<[Address]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /contacts/{contact_id}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter contactId: (path) ID of the contact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganizationContact(accessToken: String, contactId: Int64, completion: @escaping ((_ data: Contact?,_ error: Error?) -> Void)) {
        getOrganizationContactWithRequestBuilder(accessToken: accessToken, contactId: contactId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /contacts/{contact_id}
     - GET /contacts/{contact_id}
     - Fetch a contact by its id.
     - examples: [{example={
  "id" : 123,
  "lastName" : "Jones",
  "phone" : "111-222-3344",
  "email" : "jane.jones@yahoo.com",
  "firstName" : "Jane"
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter contactId: (path) ID of the contact 

     - returns: RequestBuilder<Contact> 
     */
    open class func getOrganizationContactWithRequestBuilder(accessToken: String, contactId: Int64) -> RequestBuilder<Contact> {
        var path = "/contacts/{contact_id}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contact_id}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Contact>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
     
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter timestamp: (query) Timestamp in milliseconds representing the timestamp of a harsh event. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehicleHarshEvent(vehicleId: Int64, accessToken: String, timestamp: Int64, completion: @escaping ((_ data: VehicleHarshEventResponse?,_ error: Error?) -> Void)) {
        getVehicleHarshEventWithRequestBuilder(vehicleId: vehicleId, accessToken: accessToken, timestamp: timestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
     - GET /fleet/vehicles/{vehicleId}/safety/harsh_event
     - Fetch harsh event details for a vehicle.
     - examples: [{example={
  "harshEventType" : "Harsh Braking",
  "location" : {
    "address" : "350 Rhode Island St, San Francisco, CA",
    "longitude" : "-96.14907287",
    "latitude" : "33.07614328"
  },
  "incidentReportUrl" : "https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984",
  "downloadTrackedInwardVideoUrl" : "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...",
  "isDistracted" : true,
  "downloadInwardVideoUrl" : "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...",
  "downloadForwardVideoUrl" : "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?..."
}, contentType=application/json}]
     
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter timestamp: (query) Timestamp in milliseconds representing the timestamp of a harsh event. 

     - returns: RequestBuilder<VehicleHarshEventResponse> 
     */
    open class func getVehicleHarshEventWithRequestBuilder(vehicleId: Int64, accessToken: String, timestamp: Int64) -> RequestBuilder<VehicleHarshEventResponse> {
        var path = "/fleet/vehicles/{vehicleId}/safety/harsh_event"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicleId}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "timestamp": timestamp.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<VehicleHarshEventResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehicleLocations(accessToken: String, vehicleId: Int64, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: FleetVehicleLocations?,_ error: Error?) -> Void)) {
        getVehicleLocationsWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/locations
     - GET /fleet/vehicles/{vehicle_id}/locations
     - Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour) 

     - returns: RequestBuilder<FleetVehicleLocations> 
     */
    open class func getVehicleLocationsWithRequestBuilder(accessToken: String, vehicleId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<FleetVehicleLocations> {
        var path = "/fleet/vehicles/{vehicle_id}/locations"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<FleetVehicleLocations>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
     
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehicleSafetyScore(vehicleId: Int64, accessToken: String, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: VehicleSafetyScoreResponse?,_ error: Error?) -> Void)) {
        getVehicleSafetyScoreWithRequestBuilder(vehicleId: vehicleId, accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
     - GET /fleet/vehicles/{vehicleId}/safety/score
     - Fetch the safety score for the vehicle.
     - examples: [{example={
  "totalTimeDrivenMs" : 19708293,
  "timeOverSpeedLimitMs" : 3769,
  "harshBrakingCount" : 2,
  "harshEvents" : [ {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  }, {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  } ],
  "vehicleId" : 4321,
  "harshTurningCount" : 0,
  "totalHarshEventCount" : 3,
  "safetyScore" : 97,
  "crashCount" : 0,
  "harshAccelCount" : 1,
  "safetyScoreRank" : "26",
  "totalDistanceDrivenMeters" : 291836
}, contentType=application/json}]
     
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<VehicleSafetyScoreResponse> 
     */
    open class func getVehicleSafetyScoreWithRequestBuilder(vehicleId: Int64, accessToken: String, startMs: Int64, endMs: Int64) -> RequestBuilder<VehicleSafetyScoreResponse> {
        var path = "/fleet/vehicles/{vehicleId}/safety/score"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicleId}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<VehicleSafetyScoreResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter series
     */
    public enum Series_getVehicleStats: String { 
        case enginestate = "engineState"
        case auxinput1 = "auxInput1"
        case auxinput2 = "auxInput2"
    }

    /**
     /fleet/vehicles/stats
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query. 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query. 
     - parameter series: (query) Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2 (optional)
     - parameter tagIds: (query) Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3 (optional)
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehicleStats(accessToken: String, startMs: Int, endMs: Int, series: Series_getVehicleStats? = nil, tagIds: String? = nil, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil, completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        getVehicleStatsWithRequestBuilder(accessToken: accessToken, startMs: startMs, endMs: endMs, series: series, tagIds: tagIds, startingAfter: startingAfter, endingBefore: endingBefore, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/stats
     - GET /fleet/vehicles/stats
     - Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
     - examples: [{example={
  "vehicleStats" : [ {
    "auxInput1" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1.546542978484E12
      }, {
        "value" : true,
        "timeMs" : 1.546542978484E12
      } ],
      "name" : "Boom"
    },
    "vehicleId" : 112,
    "auxInput2" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1.546542978484E12
      }, {
        "value" : true,
        "timeMs" : 1.546542978484E12
      } ],
      "name" : "Boom"
    },
    "engineState" : [ {
      "value" : "Running",
      "timeMs" : 1.546542978484E12
    }, {
      "value" : "Running",
      "timeMs" : 1.546542978484E12
    } ]
  }, {
    "auxInput1" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1.546542978484E12
      }, {
        "value" : true,
        "timeMs" : 1.546542978484E12
      } ],
      "name" : "Boom"
    },
    "vehicleId" : 112,
    "auxInput2" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1.546542978484E12
      }, {
        "value" : true,
        "timeMs" : 1.546542978484E12
      } ],
      "name" : "Boom"
    },
    "engineState" : [ {
      "value" : "Running",
      "timeMs" : 1.546542978484E12
    }, {
      "value" : "Running",
      "timeMs" : 1.546542978484E12
    } ]
  } ],
  "pagination" : {
    "hasNextPage" : true,
    "startCursor" : "MTU5MTEzNjA2OTU0MzQ3",
    "endCursor" : "MTU5MTEzNjA2OTU0MzQ3",
    "hasPrevPage" : true
  }
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query. 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query. 
     - parameter series: (query) Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2 (optional)
     - parameter tagIds: (query) Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3 (optional)
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)

     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func getVehicleStatsWithRequestBuilder(accessToken: String, startMs: Int, endMs: Int, series: Series_getVehicleStats? = nil, tagIds: String? = nil, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil) -> RequestBuilder<InlineResponse2005> {
        let path = "/fleet/vehicles/stats"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON(), 
            "series": series?.rawValue, 
            "tagIds": tagIds, 
            "startingAfter": startingAfter, 
            "endingBefore": endingBefore, 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehiclesLocations(accessToken: String, startMs: Int, endMs: Int, completion: @escaping ((_ data: FleetVehiclesLocations?,_ error: Error?) -> Void)) {
        getVehiclesLocationsWithRequestBuilder(accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/locations
     - GET /fleet/vehicles/locations
     - Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes) 

     - returns: RequestBuilder<FleetVehiclesLocations> 
     */
    open class func getVehiclesLocationsWithRequestBuilder(accessToken: String, startMs: Int, endMs: Int) -> RequestBuilder<FleetVehiclesLocations> {
        let path = "/fleet/vehicles/locations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startMs": startMs.encodeToJSON(), 
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<FleetVehiclesLocations>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /contacts
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listContacts(accessToken: String, completion: @escaping ((_ data: [Contact]?,_ error: Error?) -> Void)) {
        listContactsWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /contacts
     - GET /contacts
     - Fetch all contacts for the organization.
     - examples: [{example=[ {
  "id" : 123,
  "lastName" : "Jones",
  "phone" : "111-222-3344",
  "email" : "jane.jones@yahoo.com",
  "firstName" : "Jane"
}, {
  "id" : 123,
  "lastName" : "Jones",
  "phone" : "111-222-3344",
  "email" : "jane.jones@yahoo.com",
  "firstName" : "Jane"
} ], contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 

     - returns: RequestBuilder<[Contact]> 
     */
    open class func listContactsWithRequestBuilder(accessToken: String) -> RequestBuilder<[Contact]> {
        let path = "/contacts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<[Contact]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/list
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body) Group ID to query. 
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFleet(accessToken: String, groupParam: GroupParam, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        listFleetWithRequestBuilder(accessToken: accessToken, groupParam: groupParam, startingAfter: startingAfter, endingBefore: endingBefore, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/list
     - POST /fleet/list
     - Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
     - examples: [{example={
  "groupId" : 101,
  "vehicles" : [ {
    "id" : 112,
    "fuelLevelPercent" : 0.3,
    "engineHours" : 1500,
    "vin" : "1FUJA6BD31LJ09646",
    "name" : "Truck A7",
    "odometerMeters" : 60130000,
    "note" : "Red truck 2015 M16"
  }, {
    "id" : 112,
    "fuelLevelPercent" : 0.3,
    "engineHours" : 1500,
    "vin" : "1FUJA6BD31LJ09646",
    "name" : "Truck A7",
    "odometerMeters" : 60130000,
    "note" : "Red truck 2015 M16"
  } ],
  "pagination" : {
    "hasNextPage" : true,
    "startCursor" : "MTU5MTEzNjA2OTU0MzQ3",
    "endCursor" : "MTU5MTEzNjA2OTU0MzQ3",
    "hasPrevPage" : true
  }
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body) Group ID to query. 
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func listFleetWithRequestBuilder(accessToken: String, groupParam: GroupParam, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/fleet/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "startingAfter": startingAfter, 
            "endingBefore": endingBefore, 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchFleetVehicle(accessToken: String, vehicleIdOrExternalId: String, data: ModelData, completion: @escaping ((_ data: FleetVehicleResponse?,_ error: Error?) -> Void)) {
        patchFleetVehicleWithRequestBuilder(accessToken: accessToken, vehicleIdOrExternalId: vehicleIdOrExternalId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - PATCH /fleet/vehicles/{vehicle_id_or_external_id}
     - Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
     - examples: [{example={
  "id" : 112,
  "externalIds" : {
    "maintenanceId" : "ABFS18600"
  },
  "harshAccelSetting" : "Heavy",
  "name" : "Truck A7",
  "vehicleInfo" : {
    "model" : "Odyssey",
    "vin" : "1FUJA6BD31LJ09646",
    "year" : 1997,
    "make" : "Honda"
  }
}, contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 
     - parameter data: (body)  

     - returns: RequestBuilder<FleetVehicleResponse> 
     */
    open class func patchFleetVehicleWithRequestBuilder(accessToken: String, vehicleIdOrExternalId: String, data: ModelData) -> RequestBuilder<FleetVehicleResponse> {
        var path = "/fleet/vehicles/{vehicle_id_or_external_id}"
        let vehicleIdOrExternalIdPreEscape = "\(vehicleIdOrExternalId)"
        let vehicleIdOrExternalIdPostEscape = vehicleIdOrExternalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicle_id_or_external_id}", with: vehicleIdOrExternalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<FleetVehicleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter reactivateDriverParam: (body) Driver reactivation body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactivateDriverById(accessToken: String, driverIdOrExternalId: String, reactivateDriverParam: ReactivateDriverParam, completion: @escaping ((_ data: CurrentDriver?,_ error: Error?) -> Void)) {
        reactivateDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId, reactivateDriverParam: reactivateDriverParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - PUT /fleet/drivers/inactive/{driver_id_or_external_id}
     - Reactivate the inactive driver having id.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter reactivateDriverParam: (body) Driver reactivation body 

     - returns: RequestBuilder<CurrentDriver> 
     */
    open class func reactivateDriverByIdWithRequestBuilder(accessToken: String, driverIdOrExternalId: String, reactivateDriverParam: ReactivateDriverParam) -> RequestBuilder<CurrentDriver> {
        var path = "/fleet/drivers/inactive/{driver_id_or_external_id}"
        let driverIdOrExternalIdPreEscape = "\(driverIdOrExternalId)"
        let driverIdOrExternalIdPostEscape = driverIdOrExternalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driver_id_or_external_id}", with: driverIdOrExternalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reactivateDriverParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<CurrentDriver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter updateDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDispatchRouteById(accessToken: String, routeId: Int64, updateDispatchRouteParams: DispatchRoute, completion: @escaping ((_ data: DispatchRoute?,_ error: Error?) -> Void)) {
        updateDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId, updateDispatchRouteParams: updateDispatchRouteParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     - PUT /fleet/dispatch/routes/{route_id}
     - Update a dispatch route and its associated jobs.
     - examples: [{example="", contentType=application/json}]
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter updateDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    open class func updateDispatchRouteByIdWithRequestBuilder(accessToken: String, routeId: Int64, updateDispatchRouteParams: DispatchRoute) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/dispatch/routes/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDispatchRouteParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DispatchRoute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /addresses/{addressId}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter address: (body) Update parts of an address&#39;s value. If the geofence &#39;circle&#39; or &#39;polygon&#39; key is specified, the update will change the type of geofence accordingly. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOrganizationAddress(accessToken: String, address: Address, addressId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateOrganizationAddressWithRequestBuilder(accessToken: accessToken, address: address, addressId: addressId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /addresses/{addressId}
     - PATCH /addresses/{addressId}
     - Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter address: (body) Update parts of an address&#39;s value. If the geofence &#39;circle&#39; or &#39;polygon&#39; key is specified, the update will change the type of geofence accordingly. 
     - parameter addressId: (path) ID of the address/geofence 

     - returns: RequestBuilder<Void> 
     */
    open class func updateOrganizationAddressWithRequestBuilder(accessToken: String, address: Address, addressId: Int64) -> RequestBuilder<Void> {
        var path = "/addresses/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: address)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /fleet/set_data
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleUpdateParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateVehicles(accessToken: String, vehicleUpdateParam: VehicleUpdateParam, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateVehiclesWithRequestBuilder(accessToken: accessToken, vehicleUpdateParam: vehicleUpdateParam).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     /fleet/set_data
     - POST /fleet/set_data
     - This method enables the mutation of metadata for vehicles in the Samsara Cloud.
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleUpdateParam: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateVehiclesWithRequestBuilder(accessToken: String, vehicleUpdateParam: VehicleUpdateParam) -> RequestBuilder<Void> {
        let path = "/fleet/set_data"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: vehicleUpdateParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
