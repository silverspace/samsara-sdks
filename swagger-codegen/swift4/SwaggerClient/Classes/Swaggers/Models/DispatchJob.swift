//
// DispatchJob.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct DispatchJob: Codable {

    /** The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided. */
    public var destinationAddress: String?
    /** ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided. */
    public var destinationAddressId: Int64?
    /** Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided. */
    public var destinationLat: Double?
    /** Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided. */
    public var destinationLng: Double?
    /** The name of the job destination. If provided, it will take precedence over the name of the address book entry. */
    public var destinationName: String?
    /** Notes regarding the details of this job. */
    public var notes: String?
    /** The time at which the assigned driver is scheduled to arrive at the job destination. */
    public var scheduledArrivalTimeMs: Int64
    /** The time at which the assigned driver is scheduled to depart from the job destination. */
    public var scheduledDepartureTimeMs: Int64?
    /** The time at which the driver arrived at the job destination. */
    public var arrivedAtMs: Int64?
    /** The time at which the job was marked complete (e.g. started driving to the next destination). */
    public var completedAtMs: Int64?
    /** ID of the route that this job belongs to. */
    public var dispatchRouteId: Int64
    /** ID of the driver assigned to the dispatch job. */
    public var driverId: Int64?
    /** The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination). */
    public var enRouteAtMs: Int64?
    /** The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs. */
    public var estimatedArrivalMs: Int64?
    /** Fleet viewer url of the dispatch job. */
    public var fleetViewerUrl: String?
    public var groupId: Int64
    /** ID of the Samsara dispatch job. */
    public var _id: Int64
    public var jobState: JobStatus
    /** The time at which the job was marked skipped. */
    public var skippedAtMs: Int64?
    /** ID of the vehicle used for the dispatch job. */
    public var vehicleId: Int64?

    public init(destinationAddress: String?, destinationAddressId: Int64?, destinationLat: Double?, destinationLng: Double?, destinationName: String?, notes: String?, scheduledArrivalTimeMs: Int64, scheduledDepartureTimeMs: Int64?, arrivedAtMs: Int64?, completedAtMs: Int64?, dispatchRouteId: Int64, driverId: Int64?, enRouteAtMs: Int64?, estimatedArrivalMs: Int64?, fleetViewerUrl: String?, groupId: Int64, _id: Int64, jobState: JobStatus, skippedAtMs: Int64?, vehicleId: Int64?) {
        self.destinationAddress = destinationAddress
        self.destinationAddressId = destinationAddressId
        self.destinationLat = destinationLat
        self.destinationLng = destinationLng
        self.destinationName = destinationName
        self.notes = notes
        self.scheduledArrivalTimeMs = scheduledArrivalTimeMs
        self.scheduledDepartureTimeMs = scheduledDepartureTimeMs
        self.arrivedAtMs = arrivedAtMs
        self.completedAtMs = completedAtMs
        self.dispatchRouteId = dispatchRouteId
        self.driverId = driverId
        self.enRouteAtMs = enRouteAtMs
        self.estimatedArrivalMs = estimatedArrivalMs
        self.fleetViewerUrl = fleetViewerUrl
        self.groupId = groupId
        self._id = _id
        self.jobState = jobState
        self.skippedAtMs = skippedAtMs
        self.vehicleId = vehicleId
    }

    public enum CodingKeys: String, CodingKey { 
        case destinationAddress = "destination_address"
        case destinationAddressId = "destination_address_id"
        case destinationLat = "destination_lat"
        case destinationLng = "destination_lng"
        case destinationName = "destination_name"
        case notes
        case scheduledArrivalTimeMs = "scheduled_arrival_time_ms"
        case scheduledDepartureTimeMs = "scheduled_departure_time_ms"
        case arrivedAtMs = "arrived_at_ms"
        case completedAtMs = "completed_at_ms"
        case dispatchRouteId = "dispatch_route_id"
        case driverId = "driver_id"
        case enRouteAtMs = "en_route_at_ms"
        case estimatedArrivalMs = "estimated_arrival_ms"
        case fleetViewerUrl = "fleet_viewer_url"
        case groupId = "group_id"
        case _id = "id"
        case jobState = "job_state"
        case skippedAtMs = "skipped_at_ms"
        case vehicleId = "vehicle_id"
    }


}

