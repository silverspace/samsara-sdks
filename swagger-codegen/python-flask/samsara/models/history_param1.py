# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from samsara.models.base_model_ import Model
from samsara.models.sensorshistory_series import SensorshistorySeries  # noqa: F401,E501
from samsara import util


class HistoryParam1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, end_ms: int=None, fill_missing: str='withNull', group_id: int=None, series: List[SensorshistorySeries]=None, start_ms: int=None, step_ms: int=None):  # noqa: E501
        """HistoryParam1 - a model defined in Swagger

        :param end_ms: The end_ms of this HistoryParam1.  # noqa: E501
        :type end_ms: int
        :param fill_missing: The fill_missing of this HistoryParam1.  # noqa: E501
        :type fill_missing: str
        :param group_id: The group_id of this HistoryParam1.  # noqa: E501
        :type group_id: int
        :param series: The series of this HistoryParam1.  # noqa: E501
        :type series: List[SensorshistorySeries]
        :param start_ms: The start_ms of this HistoryParam1.  # noqa: E501
        :type start_ms: int
        :param step_ms: The step_ms of this HistoryParam1.  # noqa: E501
        :type step_ms: int
        """
        self.swagger_types = {
            'end_ms': int,
            'fill_missing': str,
            'group_id': int,
            'series': List[SensorshistorySeries],
            'start_ms': int,
            'step_ms': int
        }

        self.attribute_map = {
            'end_ms': 'endMs',
            'fill_missing': 'fillMissing',
            'group_id': 'groupId',
            'series': 'series',
            'start_ms': 'startMs',
            'step_ms': 'stepMs'
        }

        self._end_ms = end_ms
        self._fill_missing = fill_missing
        self._group_id = group_id
        self._series = series
        self._start_ms = start_ms
        self._step_ms = step_ms

    @classmethod
    def from_dict(cls, dikt) -> 'HistoryParam1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The historyParam_1 of this HistoryParam1.  # noqa: E501
        :rtype: HistoryParam1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_ms(self) -> int:
        """Gets the end_ms of this HistoryParam1.

        End of the time range, specified in milliseconds UNIX time.  # noqa: E501

        :return: The end_ms of this HistoryParam1.
        :rtype: int
        """
        return self._end_ms

    @end_ms.setter
    def end_ms(self, end_ms: int):
        """Sets the end_ms of this HistoryParam1.

        End of the time range, specified in milliseconds UNIX time.  # noqa: E501

        :param end_ms: The end_ms of this HistoryParam1.
        :type end_ms: int
        """
        if end_ms is None:
            raise ValueError("Invalid value for `end_ms`, must not be `None`")  # noqa: E501

        self._end_ms = end_ms

    @property
    def fill_missing(self) -> str:
        """Gets the fill_missing of this HistoryParam1.


        :return: The fill_missing of this HistoryParam1.
        :rtype: str
        """
        return self._fill_missing

    @fill_missing.setter
    def fill_missing(self, fill_missing: str):
        """Sets the fill_missing of this HistoryParam1.


        :param fill_missing: The fill_missing of this HistoryParam1.
        :type fill_missing: str
        """
        allowed_values = ["withNull", "withPrevious"]  # noqa: E501
        if fill_missing not in allowed_values:
            raise ValueError(
                "Invalid value for `fill_missing` ({0}), must be one of {1}"
                .format(fill_missing, allowed_values)
            )

        self._fill_missing = fill_missing

    @property
    def group_id(self) -> int:
        """Gets the group_id of this HistoryParam1.

        Group ID to query.  # noqa: E501

        :return: The group_id of this HistoryParam1.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this HistoryParam1.

        Group ID to query.  # noqa: E501

        :param group_id: The group_id of this HistoryParam1.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def series(self) -> List[SensorshistorySeries]:
        """Gets the series of this HistoryParam1.


        :return: The series of this HistoryParam1.
        :rtype: List[SensorshistorySeries]
        """
        return self._series

    @series.setter
    def series(self, series: List[SensorshistorySeries]):
        """Sets the series of this HistoryParam1.


        :param series: The series of this HistoryParam1.
        :type series: List[SensorshistorySeries]
        """
        if series is None:
            raise ValueError("Invalid value for `series`, must not be `None`")  # noqa: E501

        self._series = series

    @property
    def start_ms(self) -> int:
        """Gets the start_ms of this HistoryParam1.

        Beginning of the time range, specified in milliseconds UNIX time.  # noqa: E501

        :return: The start_ms of this HistoryParam1.
        :rtype: int
        """
        return self._start_ms

    @start_ms.setter
    def start_ms(self, start_ms: int):
        """Sets the start_ms of this HistoryParam1.

        Beginning of the time range, specified in milliseconds UNIX time.  # noqa: E501

        :param start_ms: The start_ms of this HistoryParam1.
        :type start_ms: int
        """
        if start_ms is None:
            raise ValueError("Invalid value for `start_ms`, must not be `None`")  # noqa: E501

        self._start_ms = start_ms

    @property
    def step_ms(self) -> int:
        """Gets the step_ms of this HistoryParam1.

        Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.  # noqa: E501

        :return: The step_ms of this HistoryParam1.
        :rtype: int
        """
        return self._step_ms

    @step_ms.setter
    def step_ms(self, step_ms: int):
        """Sets the step_ms of this HistoryParam1.

        Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.  # noqa: E501

        :param step_ms: The step_ms of this HistoryParam1.
        :type step_ms: int
        """
        if step_ms is None:
            raise ValueError("Invalid value for `step_ms`, must not be `None`")  # noqa: E501

        self._step_ms = step_ms
