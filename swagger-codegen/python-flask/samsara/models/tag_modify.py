# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from samsara.models.base_model_ import Model
from samsara.models.tag_modify_add import TagModifyAdd  # noqa: F401,E501
from samsara.models.tag_modify_delete import TagModifyDelete  # noqa: F401,E501
from samsara import util


class TagModify(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, add: TagModifyAdd=None, delete: TagModifyDelete=None, name: str=None, parent_tag_id: int=None):  # noqa: E501
        """TagModify - a model defined in Swagger

        :param add: The add of this TagModify.  # noqa: E501
        :type add: TagModifyAdd
        :param delete: The delete of this TagModify.  # noqa: E501
        :type delete: TagModifyDelete
        :param name: The name of this TagModify.  # noqa: E501
        :type name: str
        :param parent_tag_id: The parent_tag_id of this TagModify.  # noqa: E501
        :type parent_tag_id: int
        """
        self.swagger_types = {
            'add': TagModifyAdd,
            'delete': TagModifyDelete,
            'name': str,
            'parent_tag_id': int
        }

        self.attribute_map = {
            'add': 'add',
            'delete': 'delete',
            'name': 'name',
            'parent_tag_id': 'parentTagId'
        }

        self._add = add
        self._delete = delete
        self._name = name
        self._parent_tag_id = parent_tag_id

    @classmethod
    def from_dict(cls, dikt) -> 'TagModify':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TagModify of this TagModify.  # noqa: E501
        :rtype: TagModify
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add(self) -> TagModifyAdd:
        """Gets the add of this TagModify.


        :return: The add of this TagModify.
        :rtype: TagModifyAdd
        """
        return self._add

    @add.setter
    def add(self, add: TagModifyAdd):
        """Sets the add of this TagModify.


        :param add: The add of this TagModify.
        :type add: TagModifyAdd
        """

        self._add = add

    @property
    def delete(self) -> TagModifyDelete:
        """Gets the delete of this TagModify.


        :return: The delete of this TagModify.
        :rtype: TagModifyDelete
        """
        return self._delete

    @delete.setter
    def delete(self, delete: TagModifyDelete):
        """Sets the delete of this TagModify.


        :param delete: The delete of this TagModify.
        :type delete: TagModifyDelete
        """

        self._delete = delete

    @property
    def name(self) -> str:
        """Gets the name of this TagModify.

        Updated name of this tag.  # noqa: E501

        :return: The name of this TagModify.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TagModify.

        Updated name of this tag.  # noqa: E501

        :param name: The name of this TagModify.
        :type name: str
        """

        self._name = name

    @property
    def parent_tag_id(self) -> int:
        """Gets the parent_tag_id of this TagModify.

        If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.  # noqa: E501

        :return: The parent_tag_id of this TagModify.
        :rtype: int
        """
        return self._parent_tag_id

    @parent_tag_id.setter
    def parent_tag_id(self, parent_tag_id: int):
        """Sets the parent_tag_id of this TagModify.

        If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.  # noqa: E501

        :param parent_tag_id: The parent_tag_id of this TagModify.
        :type parent_tag_id: int
        """

        self._parent_tag_id = parent_tag_id
