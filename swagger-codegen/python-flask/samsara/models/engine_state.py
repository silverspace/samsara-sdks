# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from samsara.models.base_model_ import Model
from samsara import util


class EngineState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, time_ms: float=None, value: str=None):  # noqa: E501
        """EngineState - a model defined in Swagger

        :param time_ms: The time_ms of this EngineState.  # noqa: E501
        :type time_ms: float
        :param value: The value of this EngineState.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            'time_ms': float,
            'value': str
        }

        self.attribute_map = {
            'time_ms': 'timeMs',
            'value': 'value'
        }

        self._time_ms = time_ms
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'EngineState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EngineState of this EngineState.  # noqa: E501
        :rtype: EngineState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_ms(self) -> float:
        """Gets the time_ms of this EngineState.

        Timestamp in Unix epoch milliseconds.  # noqa: E501

        :return: The time_ms of this EngineState.
        :rtype: float
        """
        return self._time_ms

    @time_ms.setter
    def time_ms(self, time_ms: float):
        """Sets the time_ms of this EngineState.

        Timestamp in Unix epoch milliseconds.  # noqa: E501

        :param time_ms: The time_ms of this EngineState.
        :type time_ms: float
        """
        if time_ms is None:
            raise ValueError("Invalid value for `time_ms`, must not be `None`")  # noqa: E501

        self._time_ms = time_ms

    @property
    def value(self) -> str:
        """Gets the value of this EngineState.


        :return: The value of this EngineState.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this EngineState.


        :param value: The value of this EngineState.
        :type value: str
        """
        allowed_values = ["Running", "Off", "Idle"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
