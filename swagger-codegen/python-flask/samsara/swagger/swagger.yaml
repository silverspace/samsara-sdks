---
swagger: "2.0"
info:
  description: "# Introduction\n\nSamsara provides API endpoints for interacting with\
    \ Samsara Cloud, so that you can build powerful applications and custom solutions\
    \ with sensor data. Samsara has endpoints available to track and analyze sensors,\
    \ vehicles, and entire fleets.\n\nThe Samsara Cloud API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer)\
    \ accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\
    \ client such as wget or curl, or HTTP libraries of most modern programming languages\
    \ including python, ruby, java. We use built-in HTTP features, like HTTP authentication\
    \ and HTTP verbs, which are understood by off-the-shelf HTTP clients. We allow\
    \ you to interact securely with our API from a client-side web application (though\
    \ you should never expose your secret API key). [JSON](http://www.json.org/) is\
    \ returned by all API responses, including errors. If you’re familiar with what\
    \ you can build with a REST API, the following API reference guide will be your\
    \ go-to resource.\n\nAPI access to the Samsara cloud is available to all Samsara\
    \ administrators. To start developing with Samsara APIs you will need to [obtain\
    \ your API keys](#section/Authentication) to authenticate your API requests.\n\
    \nIf you have any questions you can reach out to us on [support@samsara.com](mailto:support@samsara.com)\n\
    \n# Endpoints\n\nAll our APIs can be accessed through HTTP requests to URLs like:\n\
    \n```curl\nhttps://api.samsara.com/<version>/<endpoint>\n```\n\nAll our APIs are\
    \ [versioned](#section/Versioning). If we intend to make breaking changes to an\
    \ API which either changes the response format or request parameter, we will increment\
    \ the version.\n\n# Authentication\n\nTo authenticate your API request you will\
    \ need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com).\
    \ They are visible under `Settings->Organization->API Tokens`.\n\nYour API tokens\
    \ carry many privileges, so be sure to keep them secure. Do not share your secret\
    \ API tokens in publicly accessible areas such as GitHub, client-side code, and\
    \ so on.\n\nAuthentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication).\
    \ Provide your API token as the basic access_token value in the URL. You do not\
    \ need to provide a password.\n\n```curl\nhttps://api.samsara.com/<version>/<endpoint>?access_token={access_token}\n\
    ```\n\nAll API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).\
    \ Calls made over plain HTTP or without authentication will fail.\n\n# Request\
    \ Methods\n\nOur API endpoints use [HTTP request methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods)\
    \ to specify the desired operation to be performed. The documentation below specified\
    \ request method supported by each endpoint and the resulting action.\n\n## GET\n\
    \nGET requests are typically used for fetching data (like data for a particular\
    \ driver).\n\n## POST\n\nPOST requests are typically used for creating or updating\
    \ a record (like adding new tags to the system). With that being said, a few of\
    \ our POST requests can be used for fetching data (like current location data\
    \ of your fleet).\n\n## PUT\n\nPUT requests are typically used for updating an\
    \ existing record (like updating all devices associated with a particular tag).\n\
    \n## PATCH\n\nPATCH requests are typically used for modifying an existing record\
    \ (like modifying a few devices associated with a particular tag).\n\n## DELETE\n\
    \nDELETE requests are used for deleting a record (like deleting a tag from the\
    \ system).\n\n# Response Codes\n\nAll API requests will respond with appropriate\
    \ [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\
    \ Your API client should handle each response class differently.\n\n## 2XX\n\n\
    These are successful responses and indicate that the API request returned the\
    \ expected response.\n\n## 4XX\n\nThese indicate that there was a problem with\
    \ the request like a missing parameter or invalid values. Check the response for\
    \ specific [error details](#section/Error-Responses). Requests that respond with\
    \ a 4XX status code, should be modified before retrying.\n\n## 5XX\n\nThese indicate\
    \ server errors when the server is unreachable or is misconfigured. In this case,\
    \ you should retry the API request after some delay.\n\n# Error Responses\n\n\
    In case of a 4XX status code, the body of the response will contain information\
    \ to briefly explain the error reported. To help debugging the error, you can\
    \ refer to the following table for understanding the error message.\n\n| Status\
    \ Code | Message | Description |\n|-------------|----------------|-------------------------------------------------------------------|\n\
    | 401 | Invalid token | The API token is invalid and could not be authenticated.\
    \ Please refer to the [authentication section](#section/Authentication). |\n|\
    \ 404 | Page not found | The API endpoint being accessed is invalid. |\n| 400\
    \ | Bad request | Default response for an invalid request. Please check the request\
    \ to make sure it follows the format specified in the documentation. |\n\n# Versioning\n\
    \nAll our APIs are versioned. Our current API version is `v1` and we are continuously\
    \ working on improving it further and provide additional endpoints. If we intend\
    \ to make breaking changes to an API which either changes the response format\
    \ or request parameter, we will increment the version. Thus, you can use our current\
    \ API version worry free.\n\n# FAQs\n\nCheck out our [responses to FAQs here](https://kb.samsara.com/hc/en-us/sections/360000538054-APIs).\
    \ Don’t see an answer to your question? Reach out to us on [support@samsara.com](mailto:support@samsara.com)."
  version: "1.0.0"
  title: "Samsara API"
host: "api.samsara.com"
basePath: "/v1"
tags:
- name: "Fleet"
  description: "Access to fleet data"
- name: "Industrial"
  description: "Access to industrial data"
- name: "Sensors"
  description: "Access to sensor data"
- name: "Assets"
  description: "Access to asset specific data"
- name: "Safety"
  description: "Access to safety specific data"
- name: "Users"
  description: "Access to user data"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /addresses:
    get:
      tags:
      - "Fleet"
      summary: "/addresses"
      description: "Fetch all addresses/geofences for the organization. An address\
        \ contains either a circle or polygon geofence describing the address boundaries."
      operationId: "get_organization_addresses"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      responses:
        200:
          description: "List of addresses/geofences. For each address entry, the geofence\
            \ field will only be populated with either 'circle' or 'polygon', depending\
            \ on the geofence type."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Address"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    post:
      tags:
      - "Fleet"
      summary: "/addresses"
      description: "Add one or more addresses to the organization"
      operationId: "add_organization_addresses"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "addresses"
        description: "List of addresses/geofences to add. Geofences can be circular\
          \ or a polygon. \nFor each address, only one of 'circle' or 'polygon' should\
          \ be provided. If both are provided, the geofence will be saved as a polygon."
        required: true
        schema:
          $ref: "#/definitions/addresses"
      responses:
        200:
          description: "List of added addresses/geofences. For each address entry,\
            \ the geofence field will only be populated with either 'circle' or 'polygon',\
            \ depending on the geofence type. Circle geofences added without a specific\
            \ lat/lng are geocoded asynchronously, and will be 0,0 in the immediate\
            \ response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Address"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /addresses/{addressId}:
    get:
      tags:
      - "Fleet"
      summary: "/addresses/{addressId}"
      description: "Fetch an address by its id."
      operationId: "get_organization_address"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "addressId"
        in: "path"
        description: "ID of the address/geofence"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The address/geofence. The geofence field will only be populated\
            \ with either 'circle' or 'polygon', depending on the geofence type."
          schema:
            $ref: "#/definitions/Address"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    delete:
      tags:
      - "Fleet"
      summary: "/addresses/{addressId}"
      description: "Delete an address."
      operationId: "delete_organization_address"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "addressId"
        in: "path"
        description: "ID of the address/geofence"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Address was successfully deleted. No response body is returned."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    patch:
      tags:
      - "Fleet"
      summary: "/addresses/{addressId}"
      description: "Update the name, formatted address, geofence, notes, or tag and\
        \ contact Ids for an address. The set of tags or contacts associated with\
        \ this address will be updated to exactly match the list of IDs passed in.\
        \ To remove all tags or contacts from an address, pass an empty list; to remove\
        \ notes, pass an empty string."
      operationId: "update_organization_address"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "address"
        description: "Update parts of an address's value. If the geofence 'circle'\
          \ or 'polygon' key is specified, the update will change the type of geofence\
          \ accordingly."
        required: true
        schema:
          $ref: "#/definitions/address"
      - name: "addressId"
        in: "path"
        description: "ID of the address/geofence"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Address was successfully updated. No response body is returned."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /contacts:
    get:
      tags:
      - "Fleet"
      summary: "/contacts"
      description: "Fetch all contacts for the organization."
      operationId: "list_contacts"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      responses:
        200:
          description: "List of contacts."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /contacts/{contact_id}:
    get:
      tags:
      - "Fleet"
      summary: "/contacts/{contact_id}"
      description: "Fetch a contact by its id."
      operationId: "get_organization_contact"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "contact_id"
        in: "path"
        description: "ID of the contact"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The contact."
          schema:
            $ref: "#/definitions/Contact"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/add_address:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/add_address"
      description: "This method adds an address book entry to the specified group."
      operationId: "add_fleet_address"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "addressParam"
        required: true
        schema:
          $ref: "#/definitions/addressParam"
      responses:
        200:
          description: "Address was successfully added. No response body is returned."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/assets:
    get:
      tags:
      - "Fleet"
      - "Assets"
      summary: "/fleet/assets"
      description: "Fetch all of the assets for the group."
      operationId: "get_all_assets"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of assets."
          schema:
            type: "object"
            properties:
              assets:
                type: "array"
                items:
                  $ref: "#/definitions/Asset"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/assets/locations:
    get:
      tags:
      - "Fleet"
      - "Assets"
      summary: "/fleet/assets/locations"
      description: "Fetch current locations of all assets for the group."
      operationId: "get_all_asset_current_locations"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of assets and their current locations."
          schema:
            type: "object"
            properties:
              assets:
                type: "array"
                items:
                  $ref: "#/definitions/AssetCurrentLocationsResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/assets/{asset_id}/locations:
    get:
      tags:
      - "Fleet"
      - "Assets"
      summary: "/fleet/assets/{assetId:[0-9]+}/locations"
      description: "Fetch the historical locations for the asset."
      operationId: "get_asset_location"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "asset_id"
        in: "path"
        description: "ID of the asset"
        required: true
        type: "integer"
        format: "int64"
      - name: "startMs"
        in: "query"
        description: "Timestamp in milliseconds representing the start of the period\
          \ to fetch, inclusive. Used in combination with endMs."
        required: true
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Timestamp in milliseconds representing the end of the period\
          \ to fetch, inclusive. Used in combination with startMs."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Asset location details."
          schema:
            $ref: "#/definitions/AssetLocationResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/assets/{asset_id}/reefer:
    get:
      tags:
      - "Fleet"
      - "Assets"
      summary: "/fleet/assets/{assetId:[0-9]+}/reefer"
      description: "Fetch the reefer-specific stats of an asset."
      operationId: "get_asset_reefer"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "asset_id"
        in: "path"
        description: "ID of the asset"
        required: true
        type: "integer"
        format: "int64"
      - name: "startMs"
        in: "query"
        description: "Timestamp in milliseconds representing the start of the period\
          \ to fetch, inclusive. Used in combination with endMs."
        required: true
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Timestamp in milliseconds representing the end of the period\
          \ to fetch, inclusive. Used in combination with startMs."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Reefer-specific asset details."
          schema:
            $ref: "#/definitions/AssetReeferResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/dispatch/routes:
    get:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes"
      description: "Fetch all of the dispatch routes for the group."
      operationId: "fetch_all_dispatch_routes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      - name: "end_time"
        in: "query"
        description: "Time in unix milliseconds that represents the oldest routes\
          \ to return. Used in combination with duration. Defaults to now."
        required: false
        type: "integer"
        format: "int64"
      - name: "duration"
        in: "query"
        description: "Time in milliseconds that represents the duration before end_time\
          \ to query. Defaults to 24 hours."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "All dispatch route objects for the group."
          schema:
            $ref: "#/definitions/DispatchRoutes"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    post:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes"
      description: "Create a new dispatch route."
      operationId: "create_dispatch_route"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "createDispatchRouteParams"
        required: true
        schema:
          $ref: "#/definitions/DispatchRouteCreate"
      responses:
        200:
          description: "Created route object including the new route ID."
          schema:
            $ref: "#/definitions/DispatchRoute"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/dispatch/routes/job_updates:
    get:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes/job_updates"
      description: "Fetch all updates to a job including route data in the last 24\
        \ hours or subsequent to an sequence ID"
      operationId: "fetch_all_route_job_updates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      - name: "sequence_id"
        in: "query"
        description: "Sequence ID from the response payload of the last request. Defaults\
          \ to fetching updates from last 24 hours."
        required: false
        type: "string"
      - name: "include"
        in: "query"
        description: "Optionally set include=route to include route object in response\
          \ payload."
        required: false
        type: "string"
      responses:
        200:
          description: "All job updates on routes."
          schema:
            $ref: "#/definitions/allRouteJobUpdates"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/dispatch/routes/{route_id}:
    get:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes/{route_id:[0-9]+}"
      description: "Fetch a dispatch route by id."
      operationId: "get_dispatch_route_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "route_id"
        in: "path"
        description: "ID of the dispatch route."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The dispatch route corresponding to route_id."
          schema:
            $ref: "#/definitions/DispatchRoute"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    put:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes/{route_id:[0-9]+}/"
      description: "Update a dispatch route and its associated jobs."
      operationId: "update_dispatch_route_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "route_id"
        in: "path"
        description: "ID of the dispatch route."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "updateDispatchRouteParams"
        required: true
        schema:
          $ref: "#/definitions/DispatchRoute"
      responses:
        200:
          description: "Update the dispatch route. Allowable updates include setting\
            \ job state, adding or removing jobs, and changing job locations and times."
          schema:
            $ref: "#/definitions/DispatchRoute"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    delete:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes/{route_id:[0-9]+}/"
      description: "Delete a dispatch route and its associated jobs."
      operationId: "delete_dispatch_route_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "route_id"
        in: "path"
        description: "ID of the dispatch route."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successfully deleted the dispatch route. No response body\
            \ is returned."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/dispatch/routes/{route_id}/history:
    get:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/dispatch/routes/{route_id:[0-9]+}/history"
      description: "Fetch the history of a dispatch route."
      operationId: "get_dispatch_route_history"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "start_time"
        in: "query"
        description: "Timestamp representing the start of the period to fetch, inclusive.\
          \ Used in combination with end_time. Defaults to 0."
        required: false
        type: "integer"
        format: "int64"
      - name: "end_time"
        in: "query"
        description: "Timestamp representing the end of the period to fetch, inclusive.\
          \ Used in combination with start_time. Defaults to nowMs."
        required: false
        type: "integer"
        format: "int64"
      - name: "route_id"
        in: "path"
        description: "ID of the route with history."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The historical route state changes between start_time and\
            \ end_time."
          schema:
            $ref: "#/definitions/DispatchRouteHistory"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/drivers"
      description: "Get all the drivers for the specified group."
      operationId: "get_fleet_drivers"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "groupDriversParam"
        required: true
        schema:
          $ref: "#/definitions/groupDriversParam"
      responses:
        200:
          description: "All drivers in the group."
          schema:
            $ref: "#/definitions/DriversResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/create:
    post:
      tags:
      - "Fleet"
      - "Drivers"
      summary: "/fleet/drivers/create"
      description: "Create a new driver."
      operationId: "create_driver"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "createDriverParam"
        description: "Driver creation body"
        required: true
        schema:
          $ref: "#/definitions/DriverForCreate"
      responses:
        200:
          description: "Returns the successfully created the driver."
          schema:
            $ref: "#/definitions/Driver"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/document_types:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/drivers/document_types"
      description: "Fetch all of the document types."
      operationId: "get_driver_document_types_by_org_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Returns all of the document types."
          schema:
            $ref: "#/definitions/DocumentTypes"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/documents:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/drivers/documents"
      description: "Fetch all of the documents."
      operationId: "get_driver_documents_by_org_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "endMs"
        in: "query"
        description: "Time in unix milliseconds that represents the oldest documents\
          \ to return. Used in combination with durationMs. Defaults to now."
        required: false
        type: "integer"
        format: "int64"
      - name: "durationMs"
        in: "query"
        description: "Time in milliseconds that represents the duration before endMs\
          \ to query. Defaults to 24 hours."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns all of the documents."
          schema:
            $ref: "#/definitions/Documents"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/inactive:
    get:
      tags:
      - "Fleet"
      - "Drivers"
      summary: "/fleet/drivers/inactive"
      description: "Fetch all deactivated drivers for the group."
      operationId: "get_all_deactivated_drivers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns an array of all deactivated drivers for the group.\
            \ Deactivated drivers are referenced at /fleet/drivers/inactive/{driver_id}"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Driver"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/inactive/{driver_id_or_external_id}:
    get:
      tags:
      - "Fleet"
      - "Drivers"
      summary: "/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}"
      description: "Fetch deactivated driver by id."
      operationId: "get_deactivated_driver_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id_or_external_id"
        in: "path"
        description: "ID of the driver.  This must be either the numeric ID generated\
          \ by Samsara or the external ID of the driver.  External IDs are customer\
          \ specified key-value pairs."
        required: true
        type: "string"
      responses:
        200:
          description: "Returns the deactivated driver with the given driver_id."
          schema:
            $ref: "#/definitions/Driver"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    put:
      tags:
      - "Fleet"
      - "Drivers"
      summary: "/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}"
      description: "Reactivate the inactive driver having id."
      operationId: "reactivate_driver_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id_or_external_id"
        in: "path"
        description: "ID of the driver.  This must be either the numeric ID generated\
          \ by Samsara or the external ID of the driver.  External IDs are customer\
          \ specified key-value pairs."
        required: true
        type: "string"
      - in: "body"
        name: "reactivateDriverParam"
        description: "Driver reactivation body"
        required: true
        schema:
          $ref: "#/definitions/reactivateDriverParam"
      responses:
        200:
          description: "Returns the reactivated driver, which is now available at\
            \ /fleet/drivers/{driver_id}."
          schema:
            $ref: "#/definitions/CurrentDriver"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/summary:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/drivers/summary"
      description: "Get the distance and time each driver in an organization has driven\
        \ in a given time period."
      operationId: "get_fleet_drivers_summary"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "snap_to_day_bounds"
        in: "query"
        description: "Snap query result to HOS day boundaries."
        required: false
        type: "boolean"
      - in: "body"
        name: "driversSummaryParam"
        description: "Org ID and time range to query."
        required: true
        schema:
          $ref: "#/definitions/driversSummaryParam"
      responses:
        200:
          description: "Distance traveled and time active for each driver in the organization\
            \ over the specified time period."
          schema:
            $ref: "#/definitions/DriversSummaryResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/{driverId}/safety/score:
    get:
      tags:
      - "Fleet"
      - "Safety"
      summary: "/fleet/drivers/{driverId:[0-9]+}/safety/score"
      description: "Fetch the safety score for the driver."
      operationId: "get_driver_safety_score"
      parameters:
      - name: "driverId"
        in: "path"
        description: "ID of the driver"
        required: true
        type: "integer"
        format: "int64"
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "startMs"
        in: "query"
        description: "Timestamp in milliseconds representing the start of the period\
          \ to fetch, inclusive. Used in combination with endMs."
        required: true
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Timestamp in milliseconds representing the end of the period\
          \ to fetch, inclusive. Used in combination with startMs."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Safety score details."
          schema:
            $ref: "#/definitions/DriverSafetyScoreResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/{driver_id_or_external_id}:
    get:
      tags:
      - "Fleet"
      - "Drivers"
      summary: "/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}"
      description: "Fetch driver by id."
      operationId: "get_driver_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id_or_external_id"
        in: "path"
        description: "ID of the driver.  This must be either the numeric ID generated\
          \ by Samsara or the external ID of the driver.  External IDs are customer\
          \ specified key-value pairs."
        required: true
        type: "string"
      responses:
        200:
          description: "Returns the driver for the given driver_id."
          schema:
            $ref: "#/definitions/CurrentDriver"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    delete:
      tags:
      - "Fleet"
      - "Drivers"
      summary: "/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}"
      description: "Deactivate a driver with the given id."
      operationId: "deactivate_driver"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id_or_external_id"
        in: "path"
        description: "ID of the driver.  This must be either the numeric ID generated\
          \ by Samsara or the external ID of the driver.  External IDs are customer\
          \ specified key-value pairs."
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully deactivated the driver, which is now referenced\
            \ by /fleet/drivers/inactive/{driver_id}."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/{driver_id}/dispatch/routes:
    get:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/drivers/{driver_id:[0-9]+}/dispatch/routes"
      description: "Fetch all of the dispatch routes for a given driver."
      operationId: "get_dispatch_routes_by_driver_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id"
        in: "path"
        description: "ID of the driver with the associated routes."
        required: true
        type: "integer"
        format: "int64"
      - name: "end_time"
        in: "query"
        description: "Time in unix milliseconds that represents the oldest routes\
          \ to return. Used in combination with duration. Defaults to now."
        required: false
        type: "integer"
        format: "int64"
      - name: "duration"
        in: "query"
        description: "Time in milliseconds that represents the duration before end_time\
          \ to query. Defaults to 24 hours."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns the dispatch routes for the given driver_id."
          schema:
            $ref: "#/definitions/DispatchRoutes"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    post:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/drivers/{driver_id:[0-9]+}/dispatch/routes"
      description: "Create a new dispatch route for the driver with driver_id."
      operationId: "create_driver_dispatch_route"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id"
        in: "path"
        description: "ID of the driver with the associated routes."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "createDispatchRouteParams"
        required: true
        schema:
          $ref: "#/definitions/DispatchRouteCreate"
      responses:
        200:
          description: "Created route object including the new route ID."
          schema:
            $ref: "#/definitions/DispatchRoute"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/{driver_id}/documents:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/drivers/{driver_id:[0-9]+}/documents"
      description: "Create a driver document for the given driver."
      operationId: "create_driver_document"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id"
        in: "path"
        description: "ID of the driver for whom the document is created."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "createDocumentParams"
        description: "To create a document for a given document type, the document\
          \ type's uuid needs to be passed in to documentTypeUuid. The list of fields\
          \ passed in should match the document type’s list of field types in the\
          \ correct order. In other words, a field's valueType and value (i.e. only\
          \ one of: stringValue, numberValue, or photoValue) at index _i_ should match\
          \ with the document field type’s valueType at index _i_."
        required: true
        schema:
          $ref: "#/definitions/DocumentCreate"
      responses:
        200:
          description: "Returns the created document."
          schema:
            $ref: "#/definitions/Document"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/drivers/{driver_id}/hos_daily_logs:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs"
      description: "Get summarized daily HOS charts for a specified driver."
      operationId: "get_fleet_drivers_hos_daily_logs"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "driver_id"
        in: "path"
        description: "ID of the driver with HOS logs."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "hosLogsParam"
        required: true
        schema:
          $ref: "#/definitions/hosLogsParam"
      responses:
        200:
          description: "Distance traveled and time active for each driver in the organization\
            \ over the specified time period."
          schema:
            $ref: "#/definitions/DriverDailyLogResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/hos_authentication_logs:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/hos_authentication_logs"
      description: "Get the HOS (hours of service) signin and signout logs for the\
        \ specified driver. Only signout logs include location information."
      operationId: "get_fleet_hos_authentication_logs"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "hosAuthenticationLogsParam"
        required: true
        schema:
          $ref: "#/definitions/hosAuthenticationLogsParam"
      responses:
        200:
          description: "HOS authentication logs for the specified driver."
          schema:
            $ref: "#/definitions/HosAuthenticationLogsResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/hos_logs:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/hos_logs"
      description: "Get the HOS (hours of service) logs for the specified driver.\
        \ This method returns all the HOS statuses that the driver was in during this\
        \ time period."
      operationId: "get_fleet_hos_logs"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "hosLogsParam"
        required: true
        schema:
          $ref: "#/definitions/hosLogsParam_1"
      responses:
        200:
          description: "HOS logs for the specified driver."
          schema:
            $ref: "#/definitions/HosLogsResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/hos_logs_summary:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/hos_logs_summary"
      description: "Get the current HOS status for all drivers in the group."
      operationId: "get_fleet_hos_logs_summary"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "hosLogsParam"
        required: true
        schema:
          $ref: "#/definitions/hosLogsParam_2"
      responses:
        200:
          description: "HOS logs for the specified driver."
          schema:
            $ref: "#/definitions/HosLogsSummaryResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/list:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/list"
      description: "Get list of the vehicles. This method returns a list of the vehicles\
        \ in the Samsara Cloud and information about them."
      operationId: "list_fleet"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "groupParam"
        description: "Group ID to query."
        required: true
        schema:
          $ref: "#/definitions/groupParam"
      - name: "startingAfter"
        in: "query"
        description: "Pagination parameter indicating the cursor position to continue\
          \ returning results after. Used in conjunction with the 'limit' parameter.\
          \ Mutually exclusive with 'endingBefore' parameter."
        required: false
        type: "string"
      - name: "endingBefore"
        in: "query"
        description: "Pagination parameter indicating the cursor position to return\
          \ results before. Used in conjunction with the 'limit' parameter. Mutually\
          \ exclusive with 'startingAfter' parameter."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Pagination parameter indicating the number of results to return\
          \ in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of vehicles and information about each."
          schema:
            type: "object"
            properties:
              groupId:
                type: "integer"
                format: "int64"
                example: 101
                description: "Group ID to query."
              pagination:
                $ref: "#/definitions/Pagination"
              vehicles:
                type: "array"
                items:
                  $ref: "#/definitions/Vehicle"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/locations:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/locations"
      description: "Get current location of vehicles in a group. This method returns\
        \ the current location in latitude and longitude of all vehicles in a requested\
        \ group."
      operationId: "get_fleet_locations"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "groupParam"
        description: "Group ID to query."
        required: true
        schema:
          $ref: "#/definitions/groupParam"
      responses:
        200:
          description: "List of vehicle objects containing their location and the\
            \ time at which that location was logged."
          schema:
            type: "object"
            properties:
              groupId:
                type: "integer"
                format: "int64"
                example: 101
                description: "Group ID to query."
              vehicles:
                type: "array"
                items:
                  $ref: "#/definitions/VehicleLocation"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/maintenance/dvirs:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/maintenance/dvirs"
      description: "Get DVIRs for the org within provided time constraints"
      operationId: "get_dvirs"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "end_ms"
        in: "query"
        description: "time in millis until the last dvir log."
        required: true
        type: "integer"
      - name: "duration_ms"
        in: "query"
        description: "time in millis which corresponds to the duration before the\
          \ end_ms."
        required: true
        type: "integer"
      - name: "group_id"
        in: "query"
        description: "Group ID to query."
        required: false
        type: "integer"
      responses:
        200:
          description: "DVIRs for the specified duration."
          schema:
            $ref: "#/definitions/DvirListResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    post:
      tags:
      - "Fleet"
      summary: "/fleet/maintenance/dvirs"
      description: "Create a new dvir, marking a vehicle or trailer safe or unsafe."
      operationId: "create_dvir"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "createDvirParam"
        description: "DVIR creation body"
        required: true
        schema:
          $ref: "#/definitions/createDvirParam"
      responses:
        200:
          description: "Newly created DVIR."
          schema:
            $ref: "#/definitions/DvirBase"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/maintenance/list:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/maintenance/list"
      description: "Get list of the vehicles with any engine faults or check light\
        \ data."
      operationId: "get_fleet_maintenance_list"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "groupParam"
        description: "Group ID to query."
        required: true
        schema:
          $ref: "#/definitions/groupParam"
      responses:
        200:
          description: "List of vehicles and maintenance information about each."
          schema:
            type: "object"
            properties:
              vehicles:
                type: "array"
                items:
                  $ref: "#/definitions/VehicleMaintenance"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/set_data:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/set_data"
      description: "This method enables the mutation of metadata for vehicles in the\
        \ Samsara Cloud."
      operationId: "update_vehicles"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "vehicleUpdateParam"
        required: true
        schema:
          $ref: "#/definitions/vehicleUpdateParam"
      responses:
        200:
          description: "Vehicles were successfully updated. No response body is returned."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/trips:
    post:
      tags:
      - "Fleet"
      summary: "/fleet/trips"
      description: "Get historical trips data for specified vehicle. This method returns\
        \ a set of historical trips data for the specified vehicle in the specified\
        \ time range."
      operationId: "get_fleet_trips"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "tripsParam"
        description: "Group ID, vehicle ID and time range to query."
        required: true
        schema:
          $ref: "#/definitions/tripsParam"
      responses:
        200:
          description: "List of trips taken by the requested vehicle within the specified\
            \ timeframe."
          schema:
            $ref: "#/definitions/TripResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/locations:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/vehicles/locations"
      description: "Fetch locations for a given vehicle between a start/end time.\
        \ The maximum query duration is 30 minutes."
      operationId: "get_vehicles_locations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "startMs"
        in: "query"
        description: "Time in Unix epoch milliseconds for the start of the query (cannot\
          \ exceed 30 minutes)"
        required: true
        type: "integer"
      - name: "endMs"
        in: "query"
        description: "Time in Unix epoch milliseconds for the end of the query (cannot\
          \ exceed 30 minutes)"
        required: true
        type: "integer"
      responses:
        200:
          description: "Returns locations for a given vehicle between a start/end\
            \ time, with a maximum query duration of 30 minutes."
          schema:
            $ref: "#/definitions/FleetVehiclesLocations"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/stats:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/vehicles/stats"
      description: "Fetch engine state and aux input data for all vehicles in the\
        \ group between a start/end time. Data returned may be affected by device\
        \ connectivity and processing time."
      operationId: "get_vehicle_stats"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "startMs"
        in: "query"
        description: "Time in Unix epoch milliseconds for the start of the query."
        required: true
        type: "integer"
      - name: "endMs"
        in: "query"
        description: "Time in Unix epoch milliseconds for the end of the query."
        required: true
        type: "integer"
      - name: "series"
        in: "query"
        description: "Comma-separated list of stat types. Options are engineState,\
          \ auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types\
          \ will be returned. Example: series=engineState,auxInput2"
        required: false
        type: "string"
        enum:
        - "engineState"
        - "auxInput1"
        - "auxInput2"
      - name: "tagIds"
        in: "query"
        description: "Comma-separated list of tag ids. Example: tagIds=1,2,3"
        required: false
        type: "string"
      - name: "startingAfter"
        in: "query"
        description: "Pagination parameter indicating the cursor position to continue\
          \ returning results after. Used in conjunction with the 'limit' parameter.\
          \ Mutually exclusive with 'endingBefore' parameter."
        required: false
        type: "string"
      - name: "endingBefore"
        in: "query"
        description: "Pagination parameter indicating the cursor position to return\
          \ results before. Used in conjunction with the 'limit' parameter. Mutually\
          \ exclusive with 'startingAfter' parameter."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Pagination parameter indicating the number of results to return\
          \ in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns engine state and/or aux input data for all vehicles\
            \ in the group between a start/end time."
          schema:
            type: "object"
            required:
            - "vehicleStats"
            properties:
              pagination:
                $ref: "#/definitions/Pagination"
              vehicleStats:
                type: "array"
                items:
                  $ref: "#/definitions/inline_response_200_5_vehicleStats"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/{vehicleId}/safety/harsh_event:
    get:
      tags:
      - "Fleet"
      - "Safety"
      summary: "/fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event"
      description: "Fetch harsh event details for a vehicle."
      operationId: "get_vehicle_harsh_event"
      parameters:
      - name: "vehicleId"
        in: "path"
        description: "ID of the vehicle"
        required: true
        type: "integer"
        format: "int64"
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "timestamp"
        in: "query"
        description: "Timestamp in milliseconds representing the timestamp of a harsh\
          \ event."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Harsh event details."
          schema:
            $ref: "#/definitions/VehicleHarshEventResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/{vehicleId}/safety/score:
    get:
      tags:
      - "Fleet"
      - "Safety"
      summary: "/fleet/vehicles/{vehicleId:[0-9]+}/safety/score"
      description: "Fetch the safety score for the vehicle."
      operationId: "get_vehicle_safety_score"
      parameters:
      - name: "vehicleId"
        in: "path"
        description: "ID of the vehicle"
        required: true
        type: "integer"
        format: "int64"
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "startMs"
        in: "query"
        description: "Timestamp in milliseconds representing the start of the period\
          \ to fetch, inclusive. Used in combination with endMs."
        required: true
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Timestamp in milliseconds representing the end of the period\
          \ to fetch, inclusive. Used in combination with startMs."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Safety score details."
          schema:
            $ref: "#/definitions/VehicleSafetyScoreResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/{vehicle_id_or_external_id}:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}"
      description: "Gets a specific vehicle."
      operationId: "get_fleet_vehicle"
      consumes:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "vehicle_id_or_external_id"
        in: "path"
        description: "ID of the vehicle.  This must be either the numeric ID generated\
          \ by Samsara or the external ID of the vehicle.  External IDs are customer\
          \ specified key-value pairs."
        required: true
        type: "string"
      responses:
        200:
          description: "The specified vehicle."
          schema:
            $ref: "#/definitions/FleetVehicleResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    patch:
      tags:
      - "Fleet"
      summary: "/fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}"
      description: "Updates the specified vehicle using JSON merge patch format. See\
        \ IETF RFC 7396: https://tools.ietf.org/html/rfc7396."
      operationId: "patch_fleet_vehicle"
      consumes:
      - "application/json"
      - "application/merge-patch+json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "vehicle_id_or_external_id"
        in: "path"
        description: "ID of the vehicle.  This must be either the numeric ID generated\
          \ by Samsara or the external ID of the vehicle.  External IDs are customer\
          \ specified key-value pairs."
        required: true
        type: "string"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/data"
      responses:
        200:
          description: "The updated vehicle."
          schema:
            $ref: "#/definitions/FleetVehicleResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/{vehicle_id}/dispatch/routes:
    get:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes"
      description: "Fetch all of the dispatch routes for a given vehicle."
      operationId: "get_dispatch_routes_by_vehicle_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "vehicle_id"
        in: "path"
        description: "ID of the vehicle with the associated routes."
        required: true
        type: "integer"
        format: "int64"
      - name: "end_time"
        in: "query"
        description: "Time in unix milliseconds that represents the oldest routes\
          \ to return. Used in combination with duration. Defaults to now."
        required: false
        type: "integer"
        format: "int64"
      - name: "duration"
        in: "query"
        description: "Time in milliseconds that represents the duration before end_time\
          \ to query. Defaults to 24 hours."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns all of the dispatch routes for the given vehicle_id."
          schema:
            $ref: "#/definitions/DispatchRoutes"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
    post:
      tags:
      - "Fleet"
      - "Routes"
      summary: "/fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes"
      description: "Create a new dispatch route for the vehicle with vehicle_id."
      operationId: "create_vehicle_dispatch_route"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "vehicle_id"
        in: "path"
        description: "ID of the vehicle with the associated routes."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "createDispatchRouteParams"
        required: true
        schema:
          $ref: "#/definitions/DispatchRouteCreate"
      responses:
        200:
          description: "Created route object including the new route ID."
          schema:
            $ref: "#/definitions/DispatchRoute"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /fleet/vehicles/{vehicle_id}/locations:
    get:
      tags:
      - "Fleet"
      summary: "/fleet/vehicles/{vehicle_id:[0-9]+}/locations"
      description: "Fetch locations for a given vehicle between a start/end time.\
        \ The maximum query duration is one hour."
      operationId: "get_vehicle_locations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "vehicle_id"
        in: "path"
        description: "ID of the vehicle with the associated routes."
        required: true
        type: "integer"
        format: "int64"
      - name: "startMs"
        in: "query"
        description: "Time in Unix epoch milliseconds for the start of the query (cannot\
          \ exceed 1 hour)"
        required: true
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Time in Unix epoch milliseconds for the end of the query (cannot\
          \ exceed 1 hour)"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns locations for a given vehicle between a start/end\
            \ time, with a maximum query duration of one hour."
          schema:
            $ref: "#/definitions/FleetVehicleLocations"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.fleet_controller"
  /industrial/data:
    get:
      tags:
      - "Industrial"
      summary: "/industrial/data"
      description: "Fetch all of the data inputs for a group."
      operationId: "get_all_data_inputs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      - name: "startMs"
        in: "query"
        description: "Timestamp in unix milliseconds representing the start of the\
          \ period to fetch, inclusive. Used in combination with endMs. defaults to\
          \ nowMs."
        required: false
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Timestamp in unix milliseconds representing the end of the period\
          \ to fetch, inclusive. Used in combination with startMs. Defaults to nowMs."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of data inputs."
          schema:
            type: "object"
            properties:
              dataInputs:
                type: "array"
                items:
                  $ref: "#/definitions/DataInputHistoryResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.industrial_controller"
  /industrial/data/{data_input_id}:
    get:
      tags:
      - "Industrial"
      summary: "/industrial/data/{data_input_id:[0-9]+}"
      description: "Fetch datapoints from a given data input."
      operationId: "get_data_input"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "data_input_id"
        in: "path"
        description: "ID of the data input"
        required: true
        type: "integer"
        format: "int64"
      - name: "startMs"
        in: "query"
        description: "Timestamp in unix milliseconds representing the start of the\
          \ period to fetch, inclusive. Used in combination with endMs. defaults to\
          \ nowMs."
        required: false
        type: "integer"
        format: "int64"
      - name: "endMs"
        in: "query"
        description: "Timestamp in unix milliseconds representing the end of the period\
          \ to fetch, inclusive. Used in combination with startMs. Defaults to nowMs."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returns datapoints for the given data input"
          schema:
            $ref: "#/definitions/DataInputHistoryResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.industrial_controller"
  /machines/history:
    post:
      tags:
      - "Industrial"
      summary: "/machines/history"
      description: "Get historical data for machine objects. This method returns a\
        \ set of historical data for all machines in a group"
      operationId: "get_machines_history"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "historyParam"
        description: "Group ID and time range to query for events"
        required: true
        schema:
          $ref: "#/definitions/historyParam"
      responses:
        200:
          description: "List of machine results objects, each containing a time and\
            \ a datapoint."
          schema:
            $ref: "#/definitions/MachineHistoryResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.industrial_controller"
  /machines/list:
    post:
      tags:
      - "Industrial"
      summary: "/machines/list"
      description: "Get machine objects. This method returns a list of the machine\
        \ objects in the Samsara Cloud and information about them."
      operationId: "get_machines"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "groupParam"
        description: "Group ID to query."
        required: true
        schema:
          $ref: "#/definitions/groupParam"
      responses:
        200:
          description: "List of machine objects."
          schema:
            type: "object"
            properties:
              machines:
                type: "array"
                items:
                  $ref: "#/definitions/Machine"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.industrial_controller"
  /sensors/cargo:
    post:
      tags:
      - "Sensors"
      summary: "/sensors/cargo"
      description: "Get cargo monitor status (empty / full) for requested sensors."
      operationId: "get_sensors_cargo"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "sensorParam"
        description: "Group ID and list of sensor IDs to query."
        required: true
        schema:
          $ref: "#/definitions/sensorParam"
      responses:
        200:
          description: "List of sensor objects containing the current cargo status\
            \ reported by each sensor."
          schema:
            $ref: "#/definitions/CargoResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.sensors_controller"
  /sensors/door:
    post:
      tags:
      - "Sensors"
      summary: "/sensors/door"
      description: "Get door monitor status (closed / open) for requested sensors."
      operationId: "get_sensors_door"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "sensorParam"
        description: "Group ID and list of sensor IDs to query."
        required: true
        schema:
          $ref: "#/definitions/sensorParam"
      responses:
        200:
          description: "List of sensor objects containing the current door status\
            \ reported by each sensor."
          schema:
            $ref: "#/definitions/DoorResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.sensors_controller"
  /sensors/history:
    post:
      tags:
      - "Sensors"
      summary: "/sensors/history"
      description: "Get historical data for specified sensors. This method returns\
        \ a set of historical data for the specified sensors in the specified time\
        \ range and at the specified time resolution."
      operationId: "get_sensors_history"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "historyParam"
        description: "Group ID, time range and resolution, and list of sensor ID,\
          \ field pairs to query."
        required: true
        schema:
          $ref: "#/definitions/historyParam_1"
      responses:
        200:
          description: "List of results objects, each containing a time and a datapoint\
            \ for each requested sensor/field pair."
          schema:
            $ref: "#/definitions/SensorHistoryResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.sensors_controller"
  /sensors/humidity:
    post:
      tags:
      - "Sensors"
      summary: "/sensors/humidity"
      description: "Get humidity for requested sensors. This method returns the current\
        \ relative humidity for the requested sensors."
      operationId: "get_sensors_humidity"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "sensorParam"
        description: "Group ID and list of sensor IDs to query."
        required: true
        schema:
          $ref: "#/definitions/sensorParam"
      responses:
        200:
          description: "List of sensor objects containing the current humidity reported\
            \ by each sensor."
          schema:
            $ref: "#/definitions/HumidityResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.sensors_controller"
  /sensors/list:
    post:
      tags:
      - "Sensors"
      summary: "/sensors/list"
      description: "Get sensor objects. This method returns a list of the sensor objects\
        \ in the Samsara Cloud and information about them."
      operationId: "get_sensors"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "groupParam"
        description: "Group ID to query."
        required: true
        schema:
          $ref: "#/definitions/groupParam"
      responses:
        200:
          description: "List of sensor objects."
          schema:
            type: "object"
            properties:
              sensors:
                type: "array"
                items:
                  $ref: "#/definitions/Sensor"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.sensors_controller"
  /sensors/temperature:
    post:
      tags:
      - "Sensors"
      summary: "/sensors/temperature"
      description: "Get temperature for requested sensors. This method returns the\
        \ current ambient temperature (and probe temperature if applicable) for the\
        \ requested sensors."
      operationId: "get_sensors_temperature"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "sensorParam"
        description: "Group ID and list of sensor IDs to query."
        required: true
        schema:
          $ref: "#/definitions/sensorParam"
      responses:
        200:
          description: "List of sensor objects containing the current temperature\
            \ reported by each sensor."
          schema:
            $ref: "#/definitions/TemperatureResponse"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.sensors_controller"
  /tags:
    get:
      tags:
      - "Tags"
      summary: "/tags"
      description: "Fetch all of the tags for a group."
      operationId: "get_all_tags"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "group_id"
        in: "query"
        description: "Optional group ID if the organization has multiple groups (uncommon)."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of tags."
          schema:
            type: "object"
            properties:
              tags:
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.tags_controller"
    post:
      tags:
      - "Tags"
      summary: "/tags"
      description: "Create a new tag for the group."
      operationId: "create_tag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - in: "body"
        name: "tagCreateParams"
        required: true
        schema:
          $ref: "#/definitions/TagCreate"
      responses:
        200:
          description: "Newly created tag object, including the new tag ID."
          schema:
            $ref: "#/definitions/Tag"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.tags_controller"
  /tags/{tag_id}:
    get:
      tags:
      - "Tags"
      summary: "/tags/{tag_id:[0-9]+}"
      description: "Fetch a tag by id."
      operationId: "get_tag_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        description: "ID of the tag."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The tag corresponding to tag_id."
          schema:
            $ref: "#/definitions/Tag"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.tags_controller"
    put:
      tags:
      - "Tags"
      summary: "/tags/{tag_id:[0-9]+}"
      description: "Update a tag with a new name and new members. This API call would\
        \ replace all old members of a tag with new members specified in the request\
        \ body. To modify only a few devices associated with a tag use the PATCH endpoint."
      operationId: "update_tag_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        description: "ID of the tag."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "updateTagParams"
        required: true
        schema:
          $ref: "#/definitions/TagUpdate"
      responses:
        200:
          description: "The updated tag data."
          schema:
            $ref: "#/definitions/Tag"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.tags_controller"
    delete:
      tags:
      - "Tags"
      summary: "/tags/{tag_id:[0-9]+}"
      description: "Permanently deletes a tag."
      operationId: "delete_tag_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        description: "ID of the tag."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successfully deleted the tag. No response body is returned."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.tags_controller"
    patch:
      tags:
      - "Tags"
      summary: "/tags/{tag_id:[0-9]+}"
      description: "Add or delete specific members from a tag, or modify the name\
        \ of a tag."
      operationId: "modify_tag_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        description: "ID of the tag."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "tagModifyParams"
        required: true
        schema:
          $ref: "#/definitions/TagModify"
      responses:
        200:
          description: "The updated tag data."
          schema:
            $ref: "#/definitions/Tag"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.tags_controller"
  /user_roles:
    get:
      tags:
      - "Users"
      summary: "/user_roles"
      description: "Get all roles in the organization."
      operationId: "list_user_roles"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      responses:
        200:
          description: "List of user roles."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserRole"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.users_controller"
  /users:
    get:
      tags:
      - "Users"
      summary: "/users"
      description: "List all users in the organization."
      operationId: "list_users"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      responses:
        200:
          description: "List of users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.users_controller"
  /users/{userId}:
    get:
      tags:
      - "Users"
      summary: "/users/{userId:[0-9]+}"
      description: "Get a user."
      operationId: "get_user_by_id"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "ID of the user."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "User record."
          schema:
            $ref: "#/definitions/User"
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.users_controller"
    delete:
      tags:
      - "Users"
      summary: "/users/{userId:[0-9]+}"
      description: "Remove a user from the organization."
      operationId: "delete_user_by_id"
      parameters:
      - name: "access_token"
        in: "query"
        description: "Samsara API access token."
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "ID of the user."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The user was successfully removed."
        default:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "samsara.controllers.users_controller"
definitions:
  Address:
    type: "object"
    properties:
      contacts:
        type: "array"
        items:
          $ref: "#/definitions/Contact"
      formattedAddress:
        type: "string"
        example: "350 Rhode Island St, San Francisco, CA"
        description: "The full address associated with this address/geofence, as it\
          \ might be recognized by maps.google.com"
      geofence:
        $ref: "#/definitions/AddressGeofence"
      id:
        type: "integer"
        format: "int64"
        example: 123
        description: "ID of the address"
      name:
        type: "string"
        example: "Samsara HQ"
        description: "Name of the address or geofence"
      notes:
        $ref: "#/definitions/AddressNotes"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadata"
    description: "Information about an address/geofence. Geofences are either a circle\
      \ or a polygon."
    example:
      tags:
      - id: 12345
        name: "Broken Vehicles"
      - id: 12345
        name: "Broken Vehicles"
      id: 123
      geofence:
        polygon:
          vertices:
          - longitude: -122.403098
            latitude: 37.765363
          - longitude: -122.403098
            latitude: 37.765363
        circle:
          radiusMeters: 250
          longitude: -122.403098
          latitude: 37.765363
      name: "Samsara HQ"
      formattedAddress: "350 Rhode Island St, San Francisco, CA"
      notes: "Delivery site 1"
      contacts:
      - id: 123
        lastName: "Jones"
        phone: "111-222-3344"
        email: "jane.jones@yahoo.com"
        firstName: "Jane"
      - id: 123
        lastName: "Jones"
        phone: "111-222-3344"
        email: "jane.jones@yahoo.com"
        firstName: "Jane"
  AddressGeofence:
    type: "object"
    properties:
      circle:
        $ref: "#/definitions/AddressGeofence_circle"
      polygon:
        $ref: "#/definitions/AddressGeofence_polygon"
    description: "The geofence that defines this address and its bounds. This can\
      \ either be a circle, or a polygon - only one key should be provided, depending\
      \ on the geofence type."
    example:
      polygon:
        vertices:
        - longitude: -122.403098
          latitude: 37.765363
        - longitude: -122.403098
          latitude: 37.765363
      circle:
        radiusMeters: 250
        longitude: -122.403098
        latitude: 37.765363
  AddressNotes:
    type: "string"
    description: "Notes associated with an address."
    example: "Delivery site 1"
  Asset:
    type: "object"
    required:
    - "id"
    properties:
      assetSerialNumber:
        type: "string"
        example: "SNTEST123"
        description: "Serial number of the host asset"
      cable:
        type: "array"
        description: "The cable connected to the asset"
        items:
          $ref: "#/definitions/Asset_cable"
      engineHours:
        type: "integer"
        example: 104
        description: "Engine hours"
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Asset ID"
      name:
        type: "string"
        example: "Trailer 123"
        description: "Asset name"
    description: "Basic information of an asset"
    example:
      id: 1
      assetSerialNumber: "SNTEST123"
      engineHours: 104
      name: "Trailer 123"
      cable:
      - assetType: "Reefer (Thermo King)"
      - assetType: "Reefer (Thermo King)"
  AssetCurrentLocation:
    type: "object"
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 37.0
        description: "The latitude of the location in degrees."
      location:
        type: "string"
        example: "525 York, San Francisco, CA"
        description: "The best effort (street,city,state) for the latitude and longitude."
      longitude:
        type: "number"
        format: "double"
        example: -122.7
        description: "The longitude of the location in degrees."
      speedMilesPerHour:
        type: "number"
        format: "double"
        example: 35.0
        description: "The speed calculated from GPS that the asset was traveling at\
          \ in miles per hour."
      timeMs:
        type: "integer"
        format: "int64"
        example: 12314151
        description: "Time in Unix milliseconds since epoch when the asset was at\
          \ the location."
    description: "Current location of an asset"
    example:
      speedMilesPerHour: 35.0
      location: "525 York, San Francisco, CA"
      longitude: -122.7
      latitude: 37.0
      timeMs: 12314151
  AssetCurrentLocationsResponse:
    type: "object"
    required:
    - "id"
    properties:
      cable:
        type: "array"
        description: "The cable connected to the asset"
        items:
          $ref: "#/definitions/Asset_cable"
      engineHours:
        type: "integer"
        example: 104
        description: "Engine hours"
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Asset ID"
      location:
        type: "array"
        description: "Current location of an asset"
        items:
          $ref: "#/definitions/AssetCurrentLocation"
      name:
        type: "string"
        example: "Trailer 123"
        description: "Asset name"
    description: "Basic information of an asset"
    example:
      id: 1
      engineHours: 104
      location:
      - speedMilesPerHour: 35.0
        location: "525 York, San Francisco, CA"
        longitude: -122.7
        latitude: 37.0
        timeMs: 12314151
      - speedMilesPerHour: 35.0
        location: "525 York, San Francisco, CA"
        longitude: -122.7
        latitude: 37.0
        timeMs: 12314151
      name: "Trailer 123"
      cable:
      - assetType: "Reefer (Thermo King)"
      - assetType: "Reefer (Thermo King)"
  AssetLocationResponse:
    type: "array"
    description: "A list of historical asset locations."
    items:
      $ref: "#/definitions/AssetLocationResponse_inner"
  AssetReeferResponse:
    type: "object"
    properties:
      assetType:
        type: "string"
        example: "Reefer (Thermo King)"
        description: "Asset type"
      id:
        type: "integer"
        example: 1
        description: "Asset ID"
      name:
        type: "string"
        example: "Reefer 123"
        description: "Asset name"
      reeferStats:
        $ref: "#/definitions/AssetReeferResponse_reeferStats"
    description: "Reefer-specific asset details"
    example:
      id: 1
      reeferStats:
        powerStatus:
        - status: "Active (Continuous)"
          changedAtMs: 1453449599999
        - status: "Active (Continuous)"
          changedAtMs: 1453449599999
        engineHours:
        - engineHours: 1200
          changedAtMs: 1453449599999
        - engineHours: 1200
          changedAtMs: 1453449599999
        returnAirTemp:
        - changedAtMs: 1453449599999
          tempInMilliC: 31110
        - changedAtMs: 1453449599999
          tempInMilliC: 31110
        fuelPercentage:
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        setPoint:
        - changedAtMs: 1453449599999
          tempInMilliC: 31110
        - changedAtMs: 1453449599999
          tempInMilliC: 31110
        alarms:
        - changedAtMs: 1453449599999
          alarms:
          - description: "Check Return Air Sensor"
            severity: 1
            operatorAction: "Check and repair at end of trip"
            alarmCode: 102
          - description: "Check Return Air Sensor"
            severity: 1
            operatorAction: "Check and repair at end of trip"
            alarmCode: 102
        - changedAtMs: 1453449599999
          alarms:
          - description: "Check Return Air Sensor"
            severity: 1
            operatorAction: "Check and repair at end of trip"
            alarmCode: 102
          - description: "Check Return Air Sensor"
            severity: 1
            operatorAction: "Check and repair at end of trip"
            alarmCode: 102
      assetType: "Reefer (Thermo King)"
      name: "Reefer 123"
  AuxInput:
    type: "object"
    required:
    - "timeMs"
    - "value"
    properties:
      timeMs:
        type: "number"
        format: "int64"
        example: 1.546542978484E12
        description: "Timestamp in Unix epoch milliseconds."
      value:
        type: "boolean"
        example: true
        description: "Boolean representing the digital value of the aux input."
    description: "Digital value of an aux input."
    example:
      value: true
      timeMs: 1.546542978484E12
  AuxInputSeries:
    type: "object"
    required:
    - "name"
    - "values"
    properties:
      name:
        type: "string"
        example: "Boom"
        description: "The name of the aux input."
        enum:
        - "Emergency Lights"
        - "Emergency Alarm"
        - "Stop Paddle"
        - "Power Take-Off"
        - "Plow"
        - "Sweeper"
        - "Salter"
        - "Boom"
      values:
        type: "array"
        items:
          $ref: "#/definitions/AuxInput"
    description: "A list of aux input values over a timerange."
    example:
      values:
      - value: true
        timeMs: 1.546542978484E12
      - value: true
        timeMs: 1.546542978484E12
      name: "Boom"
  CargoResponse:
    type: "object"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/CargoResponse_sensors"
    description: "Contains the current cargo status of a sensor."
    example:
      sensors:
      - id: 122
        name: "Trailer Cargo Sensor"
        cargoEmpty: true
      - id: 122
        name: "Trailer Cargo Sensor"
        cargoEmpty: true
      groupId: 101
  Contact:
    type: "object"
    properties:
      email:
        type: "string"
        example: "jane.jones@yahoo.com"
        description: "Email address of the contact"
      firstName:
        type: "string"
        example: "Jane"
        description: "First name of the contact"
      id:
        type: "integer"
        format: "int64"
        example: 123
        description: "ID of the contact"
      lastName:
        type: "string"
        example: "Jones"
        description: "Last name of the contact"
      phone:
        type: "string"
        example: "111-222-3344"
        description: "Phone number of the contact"
    description: "Information about a notification contact for alerts."
    example:
      id: 123
      lastName: "Jones"
      phone: "111-222-3344"
      email: "jane.jones@yahoo.com"
      firstName: "Jane"
  ContactIds:
    type: "array"
    description: "A list of IDs for contact book entries."
    items:
      type: "integer"
      format: "int64"
      example: 123
  CurrentDriver:
    $ref: "#/definitions/Driver"
  DataInputHistoryResponse:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
        description: "The ID of this data input"
      name:
        type: "string"
        example: "Pump Flow"
        description: "Name of this data input"
      points:
        type: "array"
        description: "Data points from this data input"
        items:
          $ref: "#/definitions/DataInputHistoryResponse_points"
    example:
      id: 12345
      name: "Pump Flow"
      points:
      - value: 12.332
        timeMs: 1453449599999
      - value: 12.332
        timeMs: 1453449599999
  DispatchJob:
    allOf:
    - type: "object"
      required:
      - "dispatch_route_id"
      - "group_id"
      - "id"
      - "job_state"
      properties:
        arrived_at_ms:
          type: "integer"
          format: "int64"
          example: 1462881998034
          description: "The time at which the driver arrived at the job destination."
        completed_at_ms:
          type: "integer"
          format: "int64"
          example: 1462881998034
          description: "The time at which the job was marked complete (e.g. started\
            \ driving to the next destination)."
        dispatch_route_id:
          type: "integer"
          format: "int64"
          example: 55
          description: "ID of the route that this job belongs to."
        driver_id:
          type: "integer"
          format: "int64"
          example: 444
          description: "ID of the driver assigned to the dispatch job."
        en_route_at_ms:
          type: "integer"
          format: "int64"
          example: 1462881998034
          description: "The time at which the assigned driver started fulfilling the\
            \ job (e.g. started driving to the destination)."
        estimated_arrival_ms:
          type: "integer"
          format: "int64"
          example: 1462881998034
          description: "The time at which the assigned driver is estimated to arrive\
            \ at the job destination. Only valid for en-route jobs."
        fleet_viewer_url:
          type: "string"
          example: "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
          description: "Fleet viewer url of the dispatch job."
        group_id:
          type: "integer"
          format: "int64"
          example: 101
        id:
          type: "integer"
          format: "int64"
          example: 773
          description: "ID of the Samsara dispatch job."
        job_state:
          $ref: "#/definitions/jobStatus"
        skipped_at_ms:
          type: "integer"
          format: "int64"
          example: 1462881998034
          description: "The time at which the job was marked skipped."
        vehicle_id:
          type: "integer"
          format: "int64"
          example: 112
          description: "ID of the vehicle used for the dispatch job."
    - $ref: "#/definitions/DispatchJobCreate"
  DispatchJobCreate:
    type: "object"
    required:
    - "scheduled_arrival_time_ms"
    properties:
      destination_address:
        type: "string"
        example: "123 Main St, Philadelphia, PA 19106"
        description: "The address of the job destination, as it would be recognized\
          \ if provided to maps.google.com. Optional if a valid destination address\
          \ ID is provided."
      destination_address_id:
        type: "integer"
        format: "int64"
        example: 67890
        description: "ID of the job destination associated with an address book entry.\
          \ Optional if valid values are provided for destination address or latitude/longitude.\
          \ If a valid destination address ID is provided, address/latitude/longitude\
          \ will be used from the address book entry. Name of the address book entry\
          \ will only be used if the destination name is not provided."
      destination_lat:
        type: "number"
        format: "double"
        example: 123.456
        description: "Latitude of the destination in decimal degrees. Optional if\
          \ a valid destination address ID is provided."
      destination_lng:
        type: "number"
        format: "double"
        example: 37.459
        description: "Longitude of the destination in decimal degrees. Optional if\
          \ a valid destination address ID is provided."
      destination_name:
        type: "string"
        example: "ACME Inc. Philadelphia HQ"
        description: "The name of the job destination. If provided, it will take precedence\
          \ over the name of the address book entry."
      notes:
        type: "string"
        example: "Ensure crates are stacked no more than 3 high."
        description: "Notes regarding the details of this job."
      scheduled_arrival_time_ms:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "The time at which the assigned driver is scheduled to arrive\
          \ at the job destination."
      scheduled_departure_time_ms:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "The time at which the assigned driver is scheduled to depart\
          \ from the job destination."
  DispatchRoute:
    allOf:
    - type: "object"
      required:
      - "dispatch_jobs"
      - "id"
      properties:
        dispatch_jobs:
          type: "array"
          description: "The dispatch jobs associated with this route."
          items:
            $ref: "#/definitions/DispatchJob"
        id:
          type: "integer"
          format: "int64"
          example: 556
          description: "ID of the Samsara dispatch route."
    - $ref: "#/definitions/DispatchRouteBase"
  DispatchRouteBase:
    type: "object"
    required:
    - "name"
    - "scheduled_end_ms"
    - "scheduled_start_ms"
    properties:
      actual_end_ms:
        type: "integer"
        format: "int64"
        example: 1462882101000
        description: "The time in Unix epoch milliseconds that the route actually\
          \ ended."
      actual_start_ms:
        type: "integer"
        format: "int64"
        example: 1462882098000
        description: "The time in Unix epoch milliseconds that the route actually\
          \ started."
      driver_id:
        type: "integer"
        format: "int64"
        example: 555
        description: "ID of the driver assigned to the dispatch route. Note that driver_id\
          \ and vehicle_id are mutually exclusive. If neither is specified, then the\
          \ route is unassigned."
      group_id:
        type: "integer"
        format: "int64"
        example: 101
        description: "ID of the group if the organization has multiple groups (optional)."
      name:
        type: "string"
        example: "Bid #123"
        description: "Descriptive name of this route."
      scheduled_end_ms:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "The time in Unix epoch milliseconds that the last job in the\
          \ route is scheduled to end."
      scheduled_meters:
        type: "integer"
        format: "int64"
        example: 10000
        description: "The distance expected to be traveled for this route in meters."
      scheduled_start_ms:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "The time in Unix epoch milliseconds that the route is scheduled\
          \ to start."
      start_location_address:
        type: "string"
        example: "123 Main St, Philadelphia, PA 19106"
        description: "The address of the route's starting location, as it would be\
          \ recognized if provided to maps.google.com. Optional if a valid start location\
          \ address ID is provided."
      start_location_address_id:
        type: "integer"
        format: "int64"
        example: 67890
        description: "ID of the start location associated with an address book entry.\
          \ Optional if valid values are provided for start location address or latitude/longitude.\
          \ If a valid start location address ID is provided, address/latitude/longitude\
          \ will be used from the address book entry. Name of the address book entry\
          \ will only be used if the start location name is not provided."
      start_location_lat:
        type: "number"
        format: "double"
        example: 123.456
        description: "Latitude of the start location in decimal degrees. Optional\
          \ if a valid start location address ID is provided."
      start_location_lng:
        type: "number"
        format: "double"
        example: 37.459
        description: "Longitude of the start location in decimal degrees. Optional\
          \ if a valid start location address ID is provided."
      start_location_name:
        type: "string"
        example: "ACME Inc. Philadelphia HQ"
        description: "The name of the route's starting location. If provided, it will\
          \ take precedence over the name of the address book entry."
      trailer_id:
        type: "integer"
        format: "int64"
        example: 666
        description: "ID of the trailer assigned to the dispatch route. Note that\
          \ trailers can only be assigned to routes that have a Vehicle or Driver\
          \ assigned to them."
      vehicle_id:
        type: "integer"
        format: "int64"
        example: 444
        description: "ID of the vehicle assigned to the dispatch route. Note that\
          \ vehicle_id and driver_id are mutually exclusive. If neither is specified,\
          \ then the route is unassigned."
  DispatchRouteCreate:
    allOf:
    - type: "object"
      required:
      - "dispatch_jobs"
      properties:
        dispatch_jobs:
          type: "array"
          description: "The dispatch jobs to create for this route."
          items:
            $ref: "#/definitions/DispatchJobCreate"
    - $ref: "#/definitions/DispatchRouteBase"
  DispatchRouteHistoricalEntry:
    type: "object"
    properties:
      changed_at_ms:
        type: "integer"
        format: "int64"
        example: 1499411220000
        description: "Timestamp that the route was updated, represented as Unix milliseconds\
          \ since epoch."
      route:
        $ref: "#/definitions/DispatchRoute"
    example:
      route: ""
      changed_at_ms: 1499411220000
  DispatchRouteHistory:
    type: "object"
    properties:
      history:
        type: "array"
        description: "History of the route's state changes."
        items:
          $ref: "#/definitions/DispatchRouteHistoricalEntry"
    example:
      history:
      - route: ""
        changed_at_ms: 1499411220000
      - route: ""
        changed_at_ms: 1499411220000
  DispatchRoutes:
    type: "array"
    items:
      $ref: "#/definitions/DispatchRoute"
  Document:
    allOf:
    - type: "object"
      required:
      - "documentType"
      - "driverCreatedAtMs"
      - "driverId"
      - "fields"
      properties:
        documentType:
          type: "string"
          example: "Fuel Receipt"
          description: "Descriptive name of this type of document."
        driverCreatedAtMs:
          type: "integer"
          format: "int64"
          example: 1462881998034
          description: "The time in Unix epoch milliseconds that the document is created."
        driverId:
          type: "integer"
          format: "int64"
          example: 555
          description: "ID of the driver for whom the document is submitted"
        fields:
          type: "array"
          example:
          - label: "Photos"
            photoValue: []
            valueType: "ValueType_Photo"
          - label: "Gallons"
            numberValue: 12.34
            valueType: "ValueType_Number"
          - label: "City"
            stringValue: "San Francisco, CA"
            valueType: "ValueType_String"
          description: "The fields associated with this document."
          items:
            $ref: "#/definitions/DocumentField"
        vehicleId:
          type: "integer"
          format: "int64"
          example: 222
          description: "VehicleID of the driver at document creation."
    - $ref: "#/definitions/DocumentBase"
  DocumentBase:
    type: "object"
    properties:
      dispatchJobId:
        type: "integer"
        format: "int64"
        example: 773
        description: "ID of the Samsara dispatch job for which the document is submitted"
      notes:
        type: "string"
        example: "Fueled up before delivery."
        description: "Notes submitted with this document."
  DocumentCreate:
    allOf:
    - type: "object"
      required:
      - "documentTypeUuid"
      - "fields"
      properties:
        documentTypeUuid:
          type: "string"
          example: "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
          description: "Universally unique identifier for the document type this document\
            \ is being created for."
        fields:
          type: "array"
          example:
          - label: "Driver Photo"
            photoValue: []
            valueType: "ValueType_Photo"
          - label: "Gallons"
            numberValue: 12.34
            valueType: "ValueType_Number"
          - label: "City"
            stringValue: "San Francisco, CA"
            valueType: "ValueType_String"
          description: "List of fields should match the document type’s list of field\
            \ types in the correct order. In other words, a field's valueType and\
            \ value (i.e. only one of: stringValue, numberValue, or photoValue) at\
            \ index _i_ should match with the document field type’s valueType at index\
            \ _i_."
          items:
            $ref: "#/definitions/DocumentField"
      description: "Arguments to create a document."
    - $ref: "#/definitions/DocumentBase"
  DocumentField:
    allOf:
    - type: "object"
      required:
      - "label"
      properties:
        label:
          type: "string"
          example: "Fuel Cost ($)"
          description: "Descriptive name of this field."
        value:
          example: "23.45"
          description: "DEPRECATED: Please use stringValue, numberValue, or photoValue\
            \ instead. Value of this field. Depending on what kind of field it is,\
            \ this may be one of the following: an array of image urls, a float, an\
            \ integer, or a string."
      description: "A field of a document. A field can be a string type, number type,\
        \ or photo type, which can be identified from its valueType. Between stringValue,\
        \ numberValue, and photoValue, only one can exist for a single document field\
        \ depending on the valueType."
    - $ref: "#/definitions/DocumentFieldCreate"
  DocumentFieldCreate:
    type: "object"
    required:
    - "valueType"
    properties:
      numberValue:
        type: "number"
        format: "double"
        example: 12.34
        description: "Value of this field if this document field has valueType: ValueType_Number."
      photoValue:
        type: "array"
        example:
        - url: "https://www.samsara.com/photo1"
        - url: "https://www.samsara.com/photo2"
        description: "Value of this field if this document field has valueType: ValueType_Photo.\
          \ Array of photo objects where each object contains a URL for a photo."
        items:
          $ref: "#/definitions/DocumentFieldCreate_photoValue"
      stringValue:
        type: "string"
        example: "This is a string."
        description: "Value of this field if this document field has valueType: ValueType_String."
      valueType:
        type: "string"
        example: "ValueType_Number"
        description: "Determines the type of this field and what type of value this\
          \ field has. It should be either ValueType_Number, ValueType_String, or\
          \ ValueType_Photo."
  DocumentFieldType:
    type: "object"
    required:
    - "label"
    - "valueType"
    properties:
      label:
        type: "string"
        example: "Fuel Cost ($)"
        description: "Descriptive name of this field type."
      numberValueTypeMetadata:
        $ref: "#/definitions/DocumentFieldType_numberValueTypeMetadata"
      valueType:
        type: "string"
        example: "ValueType_Number"
        description: "The kind of value that can be submitted for this fieldType.\
          \ It should be either ValueType_Number, ValueType_String, or ValueType_Photo."
  DocumentFieldTypes:
    type: "array"
    items:
      $ref: "#/definitions/DocumentFieldType"
  DocumentType:
    type: "object"
    required:
    - "name"
    - "orgId"
    - "uuid"
    properties:
      fieldTypes:
        type: "array"
        description: "The field types determine the names of fields for this document\
          \ type. They also determine the types of values a document submitted for\
          \ this document type can have."
        items:
          $ref: "#/definitions/DocumentFieldTypes"
      name:
        type: "string"
        example: "Fuel Receipt"
        description: "Name of the document type."
      orgId:
        type: "integer"
        format: "int64"
        example: 773
        description: "ID for the organization this document belongs to."
      uuid:
        type: "string"
        example: "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
        description: "Universally unique identifier for the document type. Can be\
          \ passed in as a documentTypeUuid when creating a document for this document\
          \ type."
  DocumentTypes:
    type: "array"
    items:
      $ref: "#/definitions/DocumentType"
  Documents:
    type: "array"
    items:
      $ref: "#/definitions/Document"
  DoorResponse:
    type: "object"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/DoorResponse_sensors"
    description: "Contains the current door status of a sensor."
    example:
      sensors:
      - id: 122
        doorClosed: true
        name: "Trailer Door Sensor"
      - id: 122
        doorClosed: true
        name: "Trailer Door Sensor"
      groupId: 101
  Driver:
    allOf:
    - type: "object"
      required:
      - "id"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 556
          description: "ID of the driver."
        isDeactivated:
          type: "boolean"
          description: "True if the driver account has been deactivated."
        tags:
          type: "array"
          items:
            $ref: "#/definitions/TagMetadata"
    - type: "object"
      properties:
        currentVehicleId:
          type: "integer"
          format: "int64"
          example: 879
          description: "ID of the vehicle that this driver is currently assigned to.\
            \ Omitted if there is no current vehicle assignment for this driver."
    - $ref: "#/definitions/DriverBase"
  DriverBase:
    type: "object"
    required:
    - "name"
    properties:
      eldAdverseWeatherExemptionEnabled:
        type: "boolean"
        description: "Flag indicating this driver may use Adverse Weather exemptions\
          \ in ELD logs."
      eldBigDayExemptionEnabled:
        type: "boolean"
        description: "Flag indicating this driver may use Big Day excemptions in ELD\
          \ logs."
      eldDayStartHour:
        type: "integer"
        description: "0 indicating midnight-to-midnight ELD driving hours, 12 to indicate\
          \ noon-to-noon driving hours."
      eldExempt:
        type: "boolean"
        description: "Flag indicating this driver is exempt from the Electronic Logging\
          \ Mandate."
      eldExemptReason:
        type: "string"
        description: "Reason that this driver is exempt from the Electronic Logging\
          \ Mandate (see eldExempt)."
      eldPcEnabled:
        type: "boolean"
        description: "Flag indicating this driver may select the Personal Conveyance\
          \ duty status in ELD logs."
        default: false
      eldYmEnabled:
        type: "boolean"
        description: "Flag indicating this driver may select the Yard Move duty status\
          \ in ELD logs."
        default: false
      externalIds:
        type: "object"
        example:
          maintenanceId: "250020"
          payrollId: "123"
        description: "Dictionary of external IDs (string key-value pairs)"
        additionalProperties:
          type: "string"
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "ID of the group if the organization has multiple groups (uncommon)."
      licenseNumber:
        type: "string"
        example: "E1234567"
        description: "Driver's state issued license number."
      licenseState:
        type: "string"
        example: "CA"
        description: "Abbreviation of state that issued driver's license."
      name:
        type: "string"
        example: "Susan Jones"
        description: "Driver's name."
      notes:
        type: "string"
        example: "Also goes by the nickname 'Furious Fred'."
        description: "Notes about the driver."
      phone:
        type: "string"
        example: "5558234327"
        description: "Driver's phone number. Please include only digits, ex. 4157771234"
      username:
        type: "string"
        example: "Susan Jones"
        description: "Driver's login username into the driver app."
      vehicleId:
        type: "integer"
        format: "int64"
        example: 444
        description: "ID of the vehicle assigned to the driver for static vehicle\
          \ assignments. (uncommon)."
  DriverDailyLogResponse:
    type: "object"
    properties:
      days:
        type: "array"
        items:
          $ref: "#/definitions/DriverDailyLogResponse_days"
    example:
      days:
      - distanceMiles: 123.24
        vehicleIds:
        - 192319
        - 12958
        activeMs: 691200
        certified: true
        trailerIds:
        - 10293
        - 192933
        certifiedAtMs: 0
        startMs: 1473750000000
        activeHours: 5.4
        endMs: 1473836400000
      - distanceMiles: 123.24
        vehicleIds:
        - 192319
        - 12958
        activeMs: 691200
        certified: true
        trailerIds:
        - 10293
        - 192933
        certifiedAtMs: 0
        startMs: 1473750000000
        activeHours: 5.4
        endMs: 1473836400000
  DriverForCreate:
    allOf:
    - type: "object"
      required:
      - "password"
      properties:
        password:
          type: "string"
          example: "mypassword"
          description: "Driver's password for the driver app."
        tagIds:
          $ref: "#/definitions/TagIds"
    - $ref: "#/definitions/DriverBase"
  DriverSafetyScoreResponse:
    type: "object"
    properties:
      crashCount:
        type: "integer"
        example: 0
        description: "Crash event count"
      driverId:
        type: "integer"
        example: 1234
        description: "Driver ID"
      harshAccelCount:
        type: "integer"
        example: 1
        description: "Harsh acceleration event count"
      harshBrakingCount:
        type: "integer"
        example: 2
        description: "Harsh braking event count"
      harshEvents:
        type: "array"
        items:
          $ref: "#/definitions/SafetyReportHarshEvent"
      harshTurningCount:
        type: "integer"
        example: 0
        description: "Harsh turning event count"
      safetyScore:
        type: "integer"
        example: 97
        description: "Safety Score"
      safetyScoreRank:
        type: "string"
        example: "26"
        description: "Safety Score Rank"
      timeOverSpeedLimitMs:
        type: "integer"
        example: 3769
        description: "Amount of time driven over the speed limit in milliseconds"
      totalDistanceDrivenMeters:
        type: "integer"
        example: 291836
        description: "Total distance driven in meters"
      totalHarshEventCount:
        type: "integer"
        example: 3
        description: "Total harsh event count"
      totalTimeDrivenMs:
        type: "integer"
        example: 19708293
        description: "Amount of time driven in milliseconds"
    description: "Safety score details for a driver"
    example:
      totalTimeDrivenMs: 19708293
      timeOverSpeedLimitMs: 3769
      harshBrakingCount: 2
      harshEvents:
      - harshEventType: "Harsh Braking"
        vehicleId: 212014918086169
        timestampMs: 1535590776000
      - harshEventType: "Harsh Braking"
        vehicleId: 212014918086169
        timestampMs: 1535590776000
      harshTurningCount: 0
      totalHarshEventCount: 3
      driverId: 1234
      safetyScore: 97
      crashCount: 0
      harshAccelCount: 1
      safetyScoreRank: "26"
      totalDistanceDrivenMeters: 291836
  DriversResponse:
    type: "object"
    properties:
      drivers:
        type: "array"
        items:
          $ref: "#/definitions/Driver"
    example:
      drivers:
      - ""
      - ""
  DriversSummaryResponse:
    type: "object"
    properties:
      Summaries:
        type: "array"
        items:
          $ref: "#/definitions/DriversSummaryResponse_Summaries"
    example:
      Summaries:
      - distanceMiles: 123.24
        groupId: 111
        onDutyMs: 21600000
        activeMs: 43200000
        driverId: 444
        driveMs: 21600000
        driverUsername: "fjacobs"
        driverName: "Fred Jacobs"
      - distanceMiles: 123.24
        groupId: 111
        onDutyMs: 21600000
        activeMs: 43200000
        driverId: 444
        driveMs: 21600000
        driverUsername: "fjacobs"
        driverName: "Fred Jacobs"
  DvirBase:
    type: "object"
    properties:
      authorSignature:
        $ref: "#/definitions/DvirBase_authorSignature"
      defectsCorrected:
        type: "boolean"
        example: true
        description: "Signifies if the defects on the vehicle corrected after the\
          \ DVIR is done."
      defectsNeedNotBeCorrected:
        type: "boolean"
        example: false
        description: "Signifies if the defects on this vehicle can be ignored."
      id:
        type: "integer"
        format: "int64"
        example: 19
        description: "The id of this DVIR record."
      inspectionType:
        type: "string"
        example: "pre trip"
        description: "Inspection type of the DVIR."
      mechanicNotes:
        type: "string"
        example: "The vehicle is now safe."
        description: "The mechanics notes on the DVIR."
      mechanicOrAgentSignature:
        $ref: "#/definitions/DvirBase_mechanicOrAgentSignature"
      nextDriverSignature:
        $ref: "#/definitions/DvirBase_nextDriverSignature"
      odometerMiles:
        type: "integer"
        format: "int64"
        example: 49912
        description: "The odometer reading in miles for the vehicle when the DVIR\
          \ was done."
      timeMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp of this DVIR in UNIX milliseconds."
      trailerDefects:
        type: "array"
        description: "Defects registered for the trailer which was part of the DVIR."
        items:
          $ref: "#/definitions/DvirBase_trailerDefects"
      trailerId:
        type: "integer"
        example: 19
        description: "The id of the trailer which was part of the DVIR."
      trailerName:
        type: "string"
        example: "Storer's Trailer 19"
        description: "The name of the trailer which was part of the DVIR."
      vehicle:
        $ref: "#/definitions/DvirBase_vehicle"
      vehicleCondition:
        type: "string"
        example: "SATISFACTORY"
        description: "The condition of vechile on which DVIR was done."
      vehicleDefects:
        type: "array"
        description: "Defects registered for the vehicle which was part of the DVIR."
        items:
          $ref: "#/definitions/DvirBase_trailerDefects"
    example:
      vehicleDefects:
      - defectType: "Air Compressor"
        comment: "Air Compressor not working"
      - defectType: "Air Compressor"
        comment: "Air Compressor not working"
      defectsNeedNotBeCorrected: false
      authorSignature:
        username: "jsmith"
        mechanicUserId: 14849
        email: "j.smith@yahoo.com"
        signedAt: 12535500000
        name: "John Smith"
        driverId: 2581
        type: "driver"
      inspectionType: "pre trip"
      odometerMiles: 49912
      vehicle:
        id: 19
        name: "Storer's vehicle 19"
      timeMs: 1453449599999
      defectsCorrected: true
      mechanicNotes: "The vehicle is now safe."
      id: 19
      nextDriverSignature:
        username: "jsmith"
        email: "j.smith@yahoo.com"
        signedAt: 12535500000
        name: "John Smith"
        driverId: 2581
        type: "driver"
      trailerName: "Storer's Trailer 19"
      vehicleCondition: "SATISFACTORY"
      mechanicOrAgentSignature:
        username: "jsmith"
        mechanicUserId: 14849
        email: "j.smith@yahoo.com"
        signedAt: 12535500000
        name: "John Smith"
        driverId: 2581
        type: "driver"
      trailerDefects:
      - defectType: "Air Compressor"
        comment: "Air Compressor not working"
      - defectType: "Air Compressor"
        comment: "Air Compressor not working"
      trailerId: 19
  DvirListResponse:
    type: "object"
    properties:
      dvirs:
        type: "array"
        items:
          $ref: "#/definitions/DvirBase"
    example:
      dvirs:
      - vehicleDefects:
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        defectsNeedNotBeCorrected: false
        authorSignature:
          username: "jsmith"
          mechanicUserId: 14849
          email: "j.smith@yahoo.com"
          signedAt: 12535500000
          name: "John Smith"
          driverId: 2581
          type: "driver"
        inspectionType: "pre trip"
        odometerMiles: 49912
        vehicle:
          id: 19
          name: "Storer's vehicle 19"
        timeMs: 1453449599999
        defectsCorrected: true
        mechanicNotes: "The vehicle is now safe."
        id: 19
        nextDriverSignature:
          username: "jsmith"
          email: "j.smith@yahoo.com"
          signedAt: 12535500000
          name: "John Smith"
          driverId: 2581
          type: "driver"
        trailerName: "Storer's Trailer 19"
        vehicleCondition: "SATISFACTORY"
        mechanicOrAgentSignature:
          username: "jsmith"
          mechanicUserId: 14849
          email: "j.smith@yahoo.com"
          signedAt: 12535500000
          name: "John Smith"
          driverId: 2581
          type: "driver"
        trailerDefects:
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        trailerId: 19
      - vehicleDefects:
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        defectsNeedNotBeCorrected: false
        authorSignature:
          username: "jsmith"
          mechanicUserId: 14849
          email: "j.smith@yahoo.com"
          signedAt: 12535500000
          name: "John Smith"
          driverId: 2581
          type: "driver"
        inspectionType: "pre trip"
        odometerMiles: 49912
        vehicle:
          id: 19
          name: "Storer's vehicle 19"
        timeMs: 1453449599999
        defectsCorrected: true
        mechanicNotes: "The vehicle is now safe."
        id: 19
        nextDriverSignature:
          username: "jsmith"
          email: "j.smith@yahoo.com"
          signedAt: 12535500000
          name: "John Smith"
          driverId: 2581
          type: "driver"
        trailerName: "Storer's Trailer 19"
        vehicleCondition: "SATISFACTORY"
        mechanicOrAgentSignature:
          username: "jsmith"
          mechanicUserId: 14849
          email: "j.smith@yahoo.com"
          signedAt: 12535500000
          name: "John Smith"
          driverId: 2581
          type: "driver"
        trailerDefects:
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        - defectType: "Air Compressor"
          comment: "Air Compressor not working"
        trailerId: 19
  EngineState:
    type: "object"
    required:
    - "timeMs"
    - "value"
    properties:
      timeMs:
        type: "number"
        format: "int64"
        example: 1.546542978484E12
        description: "Timestamp in Unix epoch milliseconds."
      value:
        type: "string"
        enum:
        - "Running"
        - "Off"
        - "Idle"
    description: "The state of the vehicle over time. State can be Running, Off, or\
      \ Idle."
    example:
      value: "Running"
      timeMs: 1.546542978484E12
  ErrorResponse:
    type: "string"
    description: "Error message describing why the request failed."
  FleetVehicleLocation:
    type: "object"
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 37.2
        description: "The latitude of the location in degrees."
      location:
        type: "string"
        example: "525 York, San Francisco, CA"
        description: "The best effort (street,city,state) for the latitude and longitude."
      longitude:
        type: "number"
        format: "double"
        example: -122.5
        description: "The longitude of the location in degrees."
      speedMilesPerHour:
        type: "number"
        format: "double"
        example: 35.2
        description: "The speed calculated from GPS that the asset was traveling at\
          \ in miles per hour."
      timeMs:
        type: "integer"
        format: "int64"
        example: 1535586471332
        description: "Time in Unix milliseconds since epoch when the asset was at\
          \ the location."
    description: "Contains the location and speed of a vehicle at a particular time"
  FleetVehicleLocations:
    type: "array"
    items:
      $ref: "#/definitions/FleetVehicleLocation"
  FleetVehicleResponse:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      externalIds:
        type: "object"
        example:
          maintenanceId: "ABFS18600"
        additionalProperties:
          type: "string"
      harshAccelSetting:
        type: "string"
        example: "Heavy"
        description: "Harsh event detection setting."
      id:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
      name:
        type: "string"
        example: "Truck A7"
        description: "Name of the vehicle."
      vehicleInfo:
        $ref: "#/definitions/FleetVehicleResponse_vehicleInfo"
    description: "A vehicle object as returned for fleet/vehicle"
    example:
      id: 112
      externalIds:
        maintenanceId: "ABFS18600"
      harshAccelSetting: "Heavy"
      name: "Truck A7"
      vehicleInfo:
        model: "Odyssey"
        vin: "1FUJA6BD31LJ09646"
        year: 1997
        make: "Honda"
  FleetVehiclesLocations:
    type: "array"
    items:
      $ref: "#/definitions/FleetVehiclesLocations_inner"
  HosAuthenticationLogsResponse:
    type: "object"
    properties:
      authenticationLogs:
        type: "array"
        items:
          $ref: "#/definitions/HosAuthenticationLogsResponse_authenticationLogs"
    example:
      authenticationLogs:
      - happenedAtMs: 1462881998034
        address: "123 Main St., Ahwatukee, Arizona 85044"
        state: "Arizona"
        actionType: "signin"
        city: "Ahwatukee"
        addressName: "Garage Number 3"
      - happenedAtMs: 1462881998034
        address: "123 Main St., Ahwatukee, Arizona 85044"
        state: "Arizona"
        actionType: "signin"
        city: "Ahwatukee"
        addressName: "Garage Number 3"
  HosLogsResponse:
    type: "object"
    properties:
      logs:
        type: "array"
        items:
          $ref: "#/definitions/HosLogsResponse_logs"
    example:
      logs:
      - groupId: 101
        logStartMs: 1462881998034
        codriverIds:
        - 445
        - 445
        vehicleId: 112
        remark: "Lunch Break"
        statusType: "OFF_DUTY"
        driverId: 444
        locLng: -98.502888123
        locName: "McLean Site A"
        locLat: 23.413702345
        locCity: "Ahwatukee"
        locState: "Arizona"
      - groupId: 101
        logStartMs: 1462881998034
        codriverIds:
        - 445
        - 445
        vehicleId: 112
        remark: "Lunch Break"
        statusType: "OFF_DUTY"
        driverId: 444
        locLng: -98.502888123
        locName: "McLean Site A"
        locLat: 23.413702345
        locCity: "Ahwatukee"
        locState: "Arizona"
  HosLogsSummaryResponse:
    type: "object"
    properties:
      drivers:
        type: "array"
        items:
          $ref: "#/definitions/HosLogsSummaryResponse_drivers"
    example:
      drivers:
      - timeUntilBreak: 28800000
        dutyStatus: "OFF_DUTY"
        vehicleName: "Vehicle 1"
        shiftDriveRemaining: 39600000
        driverId: 444
        cycleTomorrow: 252000000
        shiftRemaining: 50400000
        drivingInViolationToday: 39600000
        timeInCurrentStatus: 5000
        cycleRemaining: 252000000
        drivingInViolationCycle: 50400000
        driverName: "Fred Jacobs"
      - timeUntilBreak: 28800000
        dutyStatus: "OFF_DUTY"
        vehicleName: "Vehicle 1"
        shiftDriveRemaining: 39600000
        driverId: 444
        cycleTomorrow: 252000000
        shiftRemaining: 50400000
        drivingInViolationToday: 39600000
        timeInCurrentStatus: 5000
        cycleRemaining: 252000000
        drivingInViolationCycle: 50400000
        driverName: "Fred Jacobs"
  HumidityResponse:
    type: "object"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/HumidityResponse_sensors"
    description: "Contains the current humidity of a sensor."
    example:
      sensors:
      - id: 122
        humidity: 53
        name: "Freezer Humidity Sensor"
      - id: 122
        humidity: 53
        name: "Freezer Humidity Sensor"
      groupId: 101
  Machine:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 123
        description: "ID of the machine."
      name:
        type: "string"
        example: "Freezer ABC"
        description: "Name of the machine."
      notes:
        type: "string"
        example: "This is in the left hallway behind the conveyor belt"
        description: "Notes about the machine"
    description: "Contains information about a machine."
    example:
      id: 123
      name: "Freezer ABC"
      notes: "This is in the left hallway behind the conveyor belt"
  MachineHistoryResponse:
    type: "object"
    properties:
      machines:
        type: "array"
        items:
          $ref: "#/definitions/MachineHistoryResponse_machines"
    description: "Contains the results for a machine history request"
    example:
      machines:
      - id: 1
        vibrations:
        - time: 1453449599999
          Y: 1.23
          X: 0.01
          Z: 2.55
        - time: 1453449599999
          Y: 1.23
          X: 0.01
          Z: 2.55
        name: "1/3 HP Motor"
      - id: 1
        vibrations:
        - time: 1453449599999
          Y: 1.23
          X: 0.01
          Z: 2.55
        - time: 1453449599999
          Y: 1.23
          X: 0.01
          Z: 2.55
        name: "1/3 HP Motor"
  Pagination:
    type: "object"
    required:
    - "endCursor"
    - "hasNextPage"
    - "hasPrevPage"
    - "startCursor"
    properties:
      endCursor:
        type: "string"
        example: "MTU5MTEzNjA2OTU0MzQ3"
        description: "Cursor identifier representing the last element in the response.\
          \ This value should be used in conjunction with a subsequent request's 'starting_after'\
          \ query parameter."
      hasNextPage:
        type: "boolean"
        description: "True if there are more pages of results after this response."
      hasPrevPage:
        type: "boolean"
        description: "True if there are more pages of results before this response."
      startCursor:
        type: "string"
        example: "MTU5MTEzNjA2OTU0MzQ3"
        description: "Cursor identifier representing the first element in the response.\
          \ This value should be used in conjunction with a subsequent request's 'ending_before'\
          \ query parameter."
    example:
      hasNextPage: true
      startCursor: "MTU5MTEzNjA2OTU0MzQ3"
      endCursor: "MTU5MTEzNjA2OTU0MzQ3"
      hasPrevPage: true
  SafetyReportHarshEvent:
    type: "object"
    properties:
      harshEventType:
        type: "string"
        example: "Harsh Braking"
        description: "Type of the harsh event"
      timestampMs:
        type: "integer"
        example: 1535590776000
        description: "Timestamp that the harsh event occurred in Unix milliseconds\
          \ since epoch"
      vehicleId:
        type: "integer"
        example: 212014918086169
        description: "Vehicle associated with the harsh event"
    description: "List of harsh events"
    example:
      harshEventType: "Harsh Braking"
      vehicleId: 212014918086169
      timestampMs: 1535590776000
  Sensor:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 123
        description: "ID of the sensor."
      macAddress:
        type: "string"
        example: "11:11:11:11:11:11"
        description: "MAC address of the sensor."
      name:
        type: "string"
        example: "Freezer ABC"
        description: "Name of the sensor."
    description: "Contains information about a sensor."
    example:
      id: 123
      name: "Freezer ABC"
      macAddress: "11:11:11:11:11:11"
  SensorHistoryResponse:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/SensorHistoryResponse_results"
    description: "Contains the results for a sensor history request. Each result contains\
      \ a timestamp and datapoint for each requested (sensor, field) pair."
    example:
      results:
      - series:
        - 1
        - 1
        timeMs: 1453449599999
      - series:
        - 1
        - 1
        timeMs: 1453449599999
  Tag:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      addresses:
        type: "array"
        description: "The addresses that belong to this tag."
        items:
          $ref: "#/definitions/TaggedAddress"
      assets:
        type: "array"
        description: "The assets that belong to this tag."
        items:
          $ref: "#/definitions/TaggedAsset"
      drivers:
        type: "array"
        description: "The drivers that belong to this tag."
        items:
          $ref: "#/definitions/TaggedDriver"
      groupId:
        type: "integer"
        format: "int64"
        example: 2348
        description: "The GroupID that this tag belongs to."
      id:
        type: "integer"
        format: "int64"
        example: 12345
        description: "The ID of this tag."
      machines:
        type: "array"
        description: "The machines that belong to this tag."
        items:
          $ref: "#/definitions/TaggedMachine"
      name:
        type: "string"
        example: "Broken Vehicles"
        description: "Name of this tag."
      parentTagId:
        type: "integer"
        format: "int64"
        example: 8389
        description: "If this tag is part a hierarchical tag tree as a child tag,\
          \ the parentTagId is the ID of this tag's parent tag."
      sensors:
        type: "array"
        description: "The sensors that belong to this tag."
        items:
          $ref: "#/definitions/TaggedSensor"
      vehicles:
        type: "array"
        description: "The vehicles that belong to this tag."
        items:
          $ref: "#/definitions/TaggedVehicle"
    example:
      sensors:
      - ""
      - ""
      id: 12345
      drivers:
      - ""
      - ""
      groupId: 2348
      assets:
      - ""
      - ""
      parentTagId: 8389
      name: "Broken Vehicles"
      vehicles:
      - ""
      - ""
      addresses:
      - ""
      - ""
      machines:
      - ""
      - ""
  TagCreate:
    type: "object"
    required:
    - "name"
    properties:
      assets:
        type: "array"
        description: "The assets that belong to this tag."
        items:
          $ref: "#/definitions/TaggedAssetBase"
      drivers:
        type: "array"
        description: "The drivers that belong to this tag."
        items:
          $ref: "#/definitions/TaggedDriverBase"
      machines:
        type: "array"
        description: "The machines that belong to this tag."
        items:
          $ref: "#/definitions/TaggedMachineBase"
      name:
        type: "string"
        example: "Broken Vehicles"
        description: "Name of this tag."
      parentTagId:
        type: "integer"
        format: "int64"
        example: 8389
        description: "If this tag is part a hierarchical tag tree as a child tag,\
          \ the parentTagId is the ID of this tag's parent tag."
      sensors:
        type: "array"
        description: "The sensors that belong to this tag."
        items:
          $ref: "#/definitions/TaggedSensorBase"
      vehicles:
        type: "array"
        description: "The vehicles that belong to this tag."
        items:
          $ref: "#/definitions/TaggedVehicleBase"
    example:
      sensors:
      - id: 345
      - id: 345
      drivers:
      - id: 456
      - id: 456
      assets:
      - id: 789
      - id: 789
      parentTagId: 8389
      name: "Broken Vehicles"
      vehicles:
      - id: 123
      - id: 123
      machines:
      - id: 567
      - id: 567
  TagIds:
    type: "array"
    description: "A list of tag IDs."
    items:
      type: "integer"
      format: "int64"
      example: 123
  TagMetadata:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
        description: "The ID of this tag."
      name:
        type: "string"
        example: "Broken Vehicles"
        description: "Name of this tag."
    example:
      id: 12345
      name: "Broken Vehicles"
  TagModify:
    type: "object"
    properties:
      add:
        $ref: "#/definitions/TagModify_add"
      delete:
        $ref: "#/definitions/TagModify_delete"
      name:
        type: "string"
        example: "Broken Vehicles"
        description: "Updated name of this tag."
      parentTagId:
        type: "integer"
        format: "int64"
        example: 8389
        description: "If this tag is part a hierarchical tag tree as a child tag,\
          \ the parentTagId is the ID of this tag's parent tag."
    example:
      parentTagId: 8389
      name: "Broken Vehicles"
      delete:
        sensors:
        - id: 345
        - id: 345
        drivers:
        - id: 456
        - id: 456
        assets:
        - id: 789
        - id: 789
        vehicles:
        - id: 123
        - id: 123
        machines:
        - id: 567
        - id: 567
      add:
        sensors:
        - id: 345
        - id: 345
        drivers:
        - id: 456
        - id: 456
        assets:
        - id: 789
        - id: 789
        vehicles:
        - id: 123
        - id: 123
        machines:
        - id: 567
        - id: 567
  TagUpdate:
    type: "object"
    properties:
      assets:
        type: "array"
        description: "The assets that belong to this tag."
        items:
          $ref: "#/definitions/TaggedAssetBase"
      drivers:
        type: "array"
        description: "The drivers that belong to this tag."
        items:
          $ref: "#/definitions/TaggedDriverBase"
      machines:
        type: "array"
        description: "The machines that belong to this tag."
        items:
          $ref: "#/definitions/TaggedMachineBase"
      name:
        type: "string"
        example: "Broken Vehicles"
        description: "Updated name of this tag."
      parentTagId:
        type: "integer"
        format: "int64"
        example: 8389
        description: "If this tag is part a hierarchical tag tree as a child tag,\
          \ the parentTagId is the ID of this tag's parent tag."
      sensors:
        type: "array"
        description: "The sensors that belong to this tag."
        items:
          $ref: "#/definitions/TaggedSensorBase"
      vehicles:
        type: "array"
        description: "The vehicles that belong to this tag."
        items:
          $ref: "#/definitions/TaggedVehicleBase"
    example:
      sensors:
      - id: 345
      - id: 345
      drivers:
      - id: 456
      - id: 456
      assets:
      - id: 789
      - id: 789
      parentTagId: 8389
      name: "Broken Vehicles"
      vehicles:
      - id: 123
      - id: 123
      machines:
      - id: 567
      - id: 567
  TaggedAddress:
    allOf:
    - $ref: "#/definitions/TaggedAddressBase"
    - type: "object"
      properties:
        name:
          type: "string"
          example: "Truck Lot 345"
          description: "Name of the address being tagged."
  TaggedAddressBase:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 345
        description: "The ID of the address being tagged."
  TaggedAsset:
    allOf:
    - $ref: "#/definitions/TaggedAssetBase"
    - type: "object"
      properties:
        name:
          type: "string"
          example: "Trailer 789"
          description: "Name of the Asset being tagged."
  TaggedAssetBase:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 789
        description: "The ID of the Asset being tagged."
    example:
      id: 789
  TaggedDriver:
    allOf:
    - $ref: "#/definitions/TaggedDriverBase"
    - type: "object"
      properties:
        name:
          type: "string"
          example: "John Smith"
          description: "Name of the Driver being tagged."
  TaggedDriverBase:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 456
        description: "The ID of the Driver being tagged."
    example:
      id: 456
  TaggedMachine:
    allOf:
    - $ref: "#/definitions/TaggedMachineBase"
    - type: "object"
      properties:
        name:
          type: "string"
          example: "Vibration Monitor 567"
          description: "Name of the Machine being tagged."
  TaggedMachineBase:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 567
        description: "The ID of the Machine being tagged."
    example:
      id: 567
  TaggedSensor:
    allOf:
    - $ref: "#/definitions/TaggedSensorBase"
    - type: "object"
      properties:
        name:
          type: "string"
          example: "Temperature Sensor 345"
          description: "Name of the Sensor being tagged."
  TaggedSensorBase:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 345
        description: "The ID of the Sensor being tagged."
    example:
      id: 345
  TaggedVehicle:
    allOf:
    - $ref: "#/definitions/TaggedVehicleBase"
    - type: "object"
      properties:
        name:
          type: "string"
          example: "Heavy Duty 123"
          description: "Name of the Vehicle being tagged."
  TaggedVehicleBase:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 123
        description: "The ID of the Vehicle being tagged."
    example:
      id: 123
  TemperatureResponse:
    type: "object"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/TemperatureResponse_sensors"
    description: "Contains the current temperatures of a sensor."
    example:
      sensors:
      - id: 122
        name: "Freezer Temp Sensor"
        probeTemperature: -20145
        ambientTemperature: 11057
      - id: 122
        name: "Freezer Temp Sensor"
        probeTemperature: -20145
        ambientTemperature: 11057
      groupId: 101
  TripResponse:
    type: "object"
    properties:
      trips:
        type: "array"
        items:
          $ref: "#/definitions/TripResponse_trips"
    description: "Contains the trips for the vehicle in the requested timeframe. A\
      \ trip is represented as an object that contains startMs, startLocation, startAddress,\
      \ startCoordinates, endMs, endLocation, endAddress and endCoordinates."
    example:
      trips:
      - startAddress: "Ramen Tatsunoya"
        endOdometer: 210430500
        distanceMeters: 2500
        startCoordinates:
          longitude: -98.502888123
          latitude: 29.443702345
        startLocation: "16 N Fair Oaks Ave, Pasadena, CA 91103"
        fuelConsumedMl: 75700
        endCoordinates:
          longitude: -91.502888123
          latitude: 23.413702345
        tollMeters: 32000
        endLocation: "571 S Lake Ave, Pasadena, CA 91101"
        driverId: 719
        endAddress: "Winchell's Donuts House"
        startOdometer: 210430450
        startMs: 1462878398034
        endMs: 1462881998034
      - startAddress: "Ramen Tatsunoya"
        endOdometer: 210430500
        distanceMeters: 2500
        startCoordinates:
          longitude: -98.502888123
          latitude: 29.443702345
        startLocation: "16 N Fair Oaks Ave, Pasadena, CA 91103"
        fuelConsumedMl: 75700
        endCoordinates:
          longitude: -91.502888123
          latitude: 23.413702345
        tollMeters: 32000
        endLocation: "571 S Lake Ave, Pasadena, CA 91101"
        driverId: 719
        endAddress: "Winchell's Donuts House"
        startOdometer: 210430450
        startMs: 1462878398034
        endMs: 1462881998034
  User:
    allOf:
    - $ref: "#/definitions/UserBase"
    - type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 123
          description: "The ID of the User record."
        organizationRole:
          type: "string"
          example: "Full Admin"
          description: "The name of the role the user is assigned to at the organization\
            \ level. This will be blank for users that only have access to specific\
            \ tags."
        tagRoles:
          type: "array"
          description: "The specific tags this user has access to. This will be blank\
            \ for users that have full access to the organization."
          items:
            $ref: "#/definitions/UserTagRole"
  UserBase:
    type: "object"
    required:
    - "authType"
    - "email"
    properties:
      authType:
        type: "string"
        description: "The authentication type the user uses to authenticate. To use\
          \ SAML this organization must have a configured SAML integration."
        enum:
        - "default"
        - "saml"
      email:
        type: "string"
        example: "user@company.com"
        description: "The email address of this user."
      name:
        type: "string"
        example: "Jane Doe"
        description: "The first and last name of the user."
      organizationRoleId:
        type: "string"
        example: "23d4d8d3-dc10-4e7a-a183-69968751f23e"
        description: "The id of the role the user is assigned to at the organization\
          \ level. This will be blank for users that only have access to specific\
          \ tags."
  UserRole:
    type: "object"
    properties:
      id:
        type: "string"
        example: "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
      name:
        type: "string"
        example: "Full Admin"
    example:
      id: "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
      name: "Full Admin"
  UserTagRole:
    type: "object"
    required:
    - "roleId"
    - "tag"
    properties:
      role:
        type: "string"
        example: "Full Admin"
        description: "The name of the role the user has been granted on this tag."
      roleId:
        type: "string"
        example: "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        description: "The id of the role the user has been granted on this tag."
      tag:
        $ref: "#/definitions/UserTagRole_tag"
  Vehicle:
    type: "object"
    required:
    - "id"
    properties:
      engineHours:
        type: "integer"
        format: "int64"
        example: 1500
        description: "Total engine hours for the vehicle."
      fuelLevelPercent:
        type: "number"
        format: "double"
        example: 0.3
        description: "The fuel level of the vehicle as a percentage. (0.0 to 1.0)"
      id:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
      name:
        type: "string"
        example: "Truck A7"
        description: "Name of the vehicle."
      note:
        type: "string"
        example: "Red truck 2015 M16"
      odometerMeters:
        type: "integer"
        format: "int64"
        example: 60130000
        description: "The number of meters reported by the odometer."
      vin:
        type: "string"
        example: "1FUJA6BD31LJ09646"
        description: "Vehicle Identification Number."
    description: "A vehicle object."
    example:
      id: 112
      fuelLevelPercent: 0.3
      engineHours: 1500
      vin: "1FUJA6BD31LJ09646"
      name: "Truck A7"
      odometerMeters: 60130000
      note: "Red truck 2015 M16"
  VehicleHarshEventResponse:
    type: "object"
    required:
    - "harshEventType"
    - "incidentReportUrl"
    properties:
      downloadForwardVideoUrl:
        type: "string"
        example: "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?..."
        description: "URL for downloading the forward facing video"
      downloadInwardVideoUrl:
        type: "string"
        example: "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?..."
        description: "URL for downloading the inward facing video"
      downloadTrackedInwardVideoUrl:
        type: "string"
        example: "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?..."
        description: "URL for downloading the tracked inward facing video"
      harshEventType:
        type: "string"
        example: "Harsh Braking"
        description: "Type of the harsh event. One of: [Crash, Harsh Acceleration,\
          \ Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake,\
          \ Harsh Event]"
      incidentReportUrl:
        type: "string"
        example: "https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984"
        description: "URL of the associated incident report page"
      isDistracted:
        type: "boolean"
        example: true
        description: "Whether the driver was deemed distracted during this harsh event"
      location:
        $ref: "#/definitions/VehicleHarshEventResponse_location"
    description: "Harsh event details for a vehicle"
    example:
      harshEventType: "Harsh Braking"
      location:
        address: "350 Rhode Island St, San Francisco, CA"
        longitude: "-96.14907287"
        latitude: "33.07614328"
      incidentReportUrl: "https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984"
      downloadTrackedInwardVideoUrl: "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?..."
      isDistracted: true
      downloadInwardVideoUrl: "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?..."
      downloadForwardVideoUrl: "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?..."
  VehicleLocation:
    type: "object"
    required:
    - "id"
    properties:
      heading:
        type: "number"
        format: "double"
        example: 246.42
        description: "Heading in degrees."
      id:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
      latitude:
        type: "number"
        format: "double"
        example: 123.456
        description: "Latitude in decimal degrees."
      location:
        type: "string"
        example: "1 Main St, Dallas, TX"
        description: "Text representation of nearest identifiable location to (latitude,\
          \ longitude) coordinates."
      longitude:
        type: "number"
        format: "double"
        example: 32.897
        description: "Longitude in decimal degrees."
      name:
        type: "string"
        example: "Truck A7"
        description: "Name of the vehicle."
      odometerMeters:
        type: "integer"
        format: "int64"
        example: 71774705
        description: "The number of meters reported by the odometer."
      onTrip:
        type: "boolean"
        example: true
        description: "Whether or not a trip is currently in progress for this vehicle.\
          \ More information available via /fleet/trips endpoint."
      speed:
        type: "number"
        format: "double"
        example: 64.37
        description: "Speed in miles per hour."
      time:
        type: "integer"
        example: 1462881998034
        description: "The time the reported location was logged, reported as a UNIX\
          \ timestamp in milliseconds."
      vin:
        type: "string"
        example: "JTNBB46KX73011966"
        description: "Vehicle Identification Number (VIN) of the vehicle."
    description: "Contains the location, in latitude and longitude, of a vehicle."
    example:
      id: 112
      time: 1462881998034
      onTrip: true
      speed: 64.37
      location: "1 Main St, Dallas, TX"
      vin: "JTNBB46KX73011966"
      name: "Truck A7"
      odometerMeters: 71774705
      longitude: 32.897
      latitude: 123.456
      heading: 246.42
  VehicleMaintenance:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
      j1939:
        $ref: "#/definitions/VehicleMaintenance_j1939"
      passenger:
        $ref: "#/definitions/VehicleMaintenance_passenger"
    description: "Contains any J1939/Passenger engine light warnings and engine faults."
    example:
      passenger:
        diagnosticTroubleCodes:
        - dtcShortCode: "dtcShortCode"
          dtcDescription: "dtcDescription"
          dtcId: 5
        - dtcShortCode: "dtcShortCode"
          dtcDescription: "dtcDescription"
          dtcId: 5
        checkEngineLight:
          isOn: true
      id: 112
      j1939:
        diagnosticTroubleCodes:
        - spnDescription: "spnDescription"
          occurrenceCount: 6
          fmiId: 0
          txId: 5
          fmiText: "fmiText"
          spnId: 1
        - spnDescription: "spnDescription"
          occurrenceCount: 6
          fmiId: 0
          txId: 5
          fmiText: "fmiText"
          spnId: 1
        checkEngineLight:
          emissionsIsOn: true
          stopIsOn: true
          warningIsOn: true
          protectIsOn: true
  VehicleSafetyScoreResponse:
    type: "object"
    properties:
      crashCount:
        type: "integer"
        example: 0
        description: "Crash event count"
      harshAccelCount:
        type: "integer"
        example: 1
        description: "Harsh acceleration event count"
      harshBrakingCount:
        type: "integer"
        example: 2
        description: "Harsh braking event count"
      harshEvents:
        type: "array"
        items:
          $ref: "#/definitions/SafetyReportHarshEvent"
      harshTurningCount:
        type: "integer"
        example: 0
        description: "Harsh turning event count"
      safetyScore:
        type: "integer"
        example: 97
        description: "Safety Score"
      safetyScoreRank:
        type: "string"
        example: "26"
        description: "Safety Score Rank"
      timeOverSpeedLimitMs:
        type: "integer"
        example: 3769
        description: "Amount of time driven over the speed limit in milliseconds"
      totalDistanceDrivenMeters:
        type: "integer"
        example: 291836
        description: "Total distance driven in meters"
      totalHarshEventCount:
        type: "integer"
        example: 3
        description: "Total harsh event count"
      totalTimeDrivenMs:
        type: "integer"
        example: 19708293
        description: "Amount of time driven in milliseconds"
      vehicleId:
        type: "integer"
        example: 4321
        description: "Vehicle ID"
    description: "Safety score details for a vehicle"
    example:
      totalTimeDrivenMs: 19708293
      timeOverSpeedLimitMs: 3769
      harshBrakingCount: 2
      harshEvents:
      - harshEventType: "Harsh Braking"
        vehicleId: 212014918086169
        timestampMs: 1535590776000
      - harshEventType: "Harsh Braking"
        vehicleId: 212014918086169
        timestampMs: 1535590776000
      vehicleId: 4321
      harshTurningCount: 0
      totalHarshEventCount: 3
      safetyScore: 97
      crashCount: 0
      harshAccelCount: 1
      safetyScoreRank: "26"
      totalDistanceDrivenMeters: 291836
  allRouteJobUpdates:
    type: "object"
    properties:
      job_updates:
        type: "array"
        items:
          $ref: "#/definitions/jobUpdateObject"
      sequence_id:
        type: "string"
        example: "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
        description: "Sequence ID of the last update returned in the response"
    example:
      job_updates:
      - prev_job_state: "JobState_EnRoute"
        route_id: 556
        route: ""
        changed_at_ms: 1462881998034
        job_state: "JobState_Arrived"
        job_id: 773
      - prev_job_state: "JobState_EnRoute"
        route_id: 556
        route: ""
        changed_at_ms: 1462881998034
        job_state: "JobState_Arrived"
        job_id: 773
      sequence_id: "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
  jobStatus:
    type: "string"
    description: "The current state of the dispatch job."
    example: "JobState_Arrived"
    enum:
    - "JobState_Unassigned"
    - "JobState_Scheduled"
    - "JobState_EnRoute"
    - "JobState_Arrived"
    - "JobState_Completed"
    - "JobState_Skipped"
  jobUpdateObject:
    type: "object"
    properties:
      changed_at_ms:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "Timestamp that this event was updated, represented as Unix milliseconds\
          \ since epoch."
      job_id:
        type: "integer"
        format: "int64"
        example: 773
        description: "ID of the Samsara job."
      job_state:
        $ref: "#/definitions/jobStatus"
      prev_job_state:
        $ref: "#/definitions/prevJobStatus"
      route:
        $ref: "#/definitions/DispatchRoute"
      route_id:
        type: "integer"
        format: "int64"
        example: 556
        description: "ID of the Samsara dispatch route."
    example:
      prev_job_state: "JobState_EnRoute"
      route_id: 556
      route: ""
      changed_at_ms: 1462881998034
      job_state: "JobState_Arrived"
      job_id: 773
  prevJobStatus:
    type: "string"
    description: "The previous state of the dispatch job."
    example: "JobState_EnRoute"
    enum:
    - "JobState_Unassigned"
    - "JobState_Scheduled"
    - "JobState_EnRoute"
    - "JobState_Arrived"
    - "JobState_Completed"
    - "JobState_Skipped"
  addresses_addresses:
    required:
    - "formattedAddress"
    - "geofence"
    - "name"
    properties:
      contactIds:
        $ref: "#/definitions/ContactIds"
      formattedAddress:
        type: "string"
        example: "350 Rhode Island St, San Francisco, CA"
        description: "The full address associated with this address/geofence, as it\
          \ might be recognized by maps.google.com"
      geofence:
        $ref: "#/definitions/AddressGeofence"
      name:
        type: "string"
        example: "Samsara HQ"
        description: "The name of this address/geofence"
      notes:
        $ref: "#/definitions/AddressNotes"
      tagIds:
        $ref: "#/definitions/TagIds"
  addresses:
    type: "object"
    required:
    - "addresses"
    properties:
      addresses:
        type: "array"
        items:
          $ref: "#/definitions/addresses_addresses"
  address:
    type: "object"
    properties:
      contactIds:
        $ref: "#/definitions/ContactIds"
      formattedAddress:
        type: "string"
        example: "350 Rhode Island St, San Francisco, CA"
        description: "The full address associated with this address/geofence, as it\
          \ might be recognized by maps.google.com"
      geofence:
        $ref: "#/definitions/AddressGeofence"
      name:
        type: "string"
        example: "Samsara HQ"
        description: "The name of this address/geofence"
      notes:
        $ref: "#/definitions/AddressNotes"
      tagIds:
        $ref: "#/definitions/TagIds"
  addressParam:
    type: "object"
    required:
    - "address"
    - "groupId"
    - "name"
    - "radius"
    properties:
      address:
        type: "string"
        example: "501 York St"
        description: "The address of the entry to add, as it would be recognized if\
          \ provided to maps.google.com."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      name:
        type: "string"
        example: "HQ"
        description: "Name of the location to add to the address book."
      radius:
        type: "integer"
        example: 10
        description: "Radius in meters of the address (used for matching vehicle trip\
          \ stops to this location)."
  inline_response_200:
    properties:
      assets:
        type: "array"
        items:
          $ref: "#/definitions/Asset"
    example:
      assets:
      - id: 1
        assetSerialNumber: "SNTEST123"
        engineHours: 104
        name: "Trailer 123"
        cable:
        - assetType: "Reefer (Thermo King)"
        - assetType: "Reefer (Thermo King)"
      - id: 1
        assetSerialNumber: "SNTEST123"
        engineHours: 104
        name: "Trailer 123"
        cable:
        - assetType: "Reefer (Thermo King)"
        - assetType: "Reefer (Thermo King)"
  inline_response_200_1:
    properties:
      assets:
        type: "array"
        items:
          $ref: "#/definitions/AssetCurrentLocationsResponse"
    example:
      assets:
      - id: 1
        engineHours: 104
        location:
        - speedMilesPerHour: 35.0
          location: "525 York, San Francisco, CA"
          longitude: -122.7
          latitude: 37.0
          timeMs: 12314151
        - speedMilesPerHour: 35.0
          location: "525 York, San Francisco, CA"
          longitude: -122.7
          latitude: 37.0
          timeMs: 12314151
        name: "Trailer 123"
        cable:
        - assetType: "Reefer (Thermo King)"
        - assetType: "Reefer (Thermo King)"
      - id: 1
        engineHours: 104
        location:
        - speedMilesPerHour: 35.0
          location: "525 York, San Francisco, CA"
          longitude: -122.7
          latitude: 37.0
          timeMs: 12314151
        - speedMilesPerHour: 35.0
          location: "525 York, San Francisco, CA"
          longitude: -122.7
          latitude: 37.0
          timeMs: 12314151
        name: "Trailer 123"
        cable:
        - assetType: "Reefer (Thermo King)"
        - assetType: "Reefer (Thermo King)"
  groupDriversParam:
    type: "object"
    required:
    - "groupId"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
  reactivateDriverParam:
    type: "object"
    required:
    - "reactivate"
    properties:
      reactivate:
        type: "boolean"
        description: "True indicates that this driver should be reactivated."
  driversSummaryParam:
    type: "object"
    required:
    - "endMs"
    - "orgId"
    - "startMs"
    properties:
      endMs:
        type: "integer"
        format: "int64"
        example: 1481076244389
        description: "End time (ms) of queried time period."
      orgId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Org ID to query."
      startMs:
        type: "integer"
        format: "int64"
        example: 1481076243389
        description: "Start time (ms) of queried time period."
  hosLogsParam:
    type: "object"
    required:
    - "driverId"
    - "endMs"
    - "groupId"
    - "startMs"
    properties:
      driverId:
        type: "integer"
        format: "int64"
        example: 444
        description: "Driver ID to query."
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the time range, specified in milliseconds UNIX time."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the time range, specified in milliseconds UNIX\
          \ time."
  hosAuthenticationLogsParam:
    type: "object"
    required:
    - "driverId"
    - "endMs"
    - "groupId"
    - "startMs"
    properties:
      driverId:
        type: "integer"
        format: "int64"
        example: 444
        description: "Driver ID to query."
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the time range, specified in milliseconds UNIX time."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the time range, specified in milliseconds UNIX\
          \ time."
  hosLogsParam_1:
    type: "object"
    required:
    - "driverId"
    - "endMs"
    - "groupId"
    - "startMs"
    properties:
      driverId:
        type: "integer"
        format: "int64"
        example: 444
        description: "Driver ID to query."
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the time range, specified in milliseconds UNIX time."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the time range, specified in milliseconds UNIX\
          \ time."
  hosLogsParam_2:
    type: "object"
    required:
    - "groupId"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
  groupParam:
    type: "object"
    required:
    - "groupId"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
  inline_response_200_2:
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      pagination:
        $ref: "#/definitions/Pagination"
      vehicles:
        type: "array"
        items:
          $ref: "#/definitions/Vehicle"
    example:
      groupId: 101
      vehicles:
      - id: 112
        fuelLevelPercent: 0.3
        engineHours: 1500
        vin: "1FUJA6BD31LJ09646"
        name: "Truck A7"
        odometerMeters: 60130000
        note: "Red truck 2015 M16"
      - id: 112
        fuelLevelPercent: 0.3
        engineHours: 1500
        vin: "1FUJA6BD31LJ09646"
        name: "Truck A7"
        odometerMeters: 60130000
        note: "Red truck 2015 M16"
      pagination:
        hasNextPage: true
        startCursor: "MTU5MTEzNjA2OTU0MzQ3"
        endCursor: "MTU5MTEzNjA2OTU0MzQ3"
        hasPrevPage: true
  inline_response_200_3:
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      vehicles:
        type: "array"
        items:
          $ref: "#/definitions/VehicleLocation"
    example:
      groupId: 101
      vehicles:
      - id: 112
        time: 1462881998034
        onTrip: true
        speed: 64.37
        location: "1 Main St, Dallas, TX"
        vin: "JTNBB46KX73011966"
        name: "Truck A7"
        odometerMeters: 71774705
        longitude: 32.897
        latitude: 123.456
        heading: 246.42
      - id: 112
        time: 1462881998034
        onTrip: true
        speed: 64.37
        location: "1 Main St, Dallas, TX"
        vin: "JTNBB46KX73011966"
        name: "Truck A7"
        odometerMeters: 71774705
        longitude: 32.897
        latitude: 123.456
        heading: 246.42
  createDvirParam:
    type: "object"
    required:
    - "inspectionType"
    - "safe"
    - "userEmail"
    properties:
      inspectionType:
        type: "string"
        example: "mechanic"
        description: "Only type 'mechanic' is currently accepted."
        enum:
        - "mechanic"
      mechanicNotes:
        type: "string"
        example: "Replaced headlight on passenger side."
        description: "Any notes from the mechanic."
      odometerMiles:
        type: "integer"
        example: 38426
        description: "The current odometer of the vehicle."
      previousDefectsCorrected:
        type: "boolean"
        example: true
        description: "Whether any previous defects were corrected. If this vehicle\
          \ or trailer was previously marked unsafe, and this DVIR marks it as safe,\
          \ either previousDefectsCorrected or previousDefectsIgnored must be true."
      previousDefectsIgnored:
        type: "boolean"
        example: false
        description: "Whether any previous defects were ignored. If this vehicle or\
          \ trailer was previously marked unsafe, and this DVIR marks it as safe,\
          \ either previousDefectsCorrected or previousDefectsIgnored must be true."
      safe:
        type: "string"
        example: "safe"
        description: "Whether or not this vehicle or trailer is safe to drive."
        enum:
        - "safe"
        - "unsafe"
      trailerId:
        type: "integer"
        example: 11
        description: "Id of trailer being inspected. Either vehicleId or trailerId\
          \ must be provided."
      userEmail:
        type: "string"
        example: "j.smith@yahoo.com"
        description: "The Samsara login email for the person creating the DVIR. The\
          \ email must correspond to a Samsara user's email."
      vehicleId:
        type: "integer"
        example: 10
        description: "Id of vehicle being inspected. Either vehicleId or trailerId\
          \ must be provided."
  inline_response_200_4:
    properties:
      vehicles:
        type: "array"
        items:
          $ref: "#/definitions/VehicleMaintenance"
    example:
      vehicles:
      - passenger:
          diagnosticTroubleCodes:
          - dtcShortCode: "dtcShortCode"
            dtcDescription: "dtcDescription"
            dtcId: 5
          - dtcShortCode: "dtcShortCode"
            dtcDescription: "dtcDescription"
            dtcId: 5
          checkEngineLight:
            isOn: true
        id: 112
        j1939:
          diagnosticTroubleCodes:
          - spnDescription: "spnDescription"
            occurrenceCount: 6
            fmiId: 0
            txId: 5
            fmiText: "fmiText"
            spnId: 1
          - spnDescription: "spnDescription"
            occurrenceCount: 6
            fmiId: 0
            txId: 5
            fmiText: "fmiText"
            spnId: 1
          checkEngineLight:
            emissionsIsOn: true
            stopIsOn: true
            warningIsOn: true
            protectIsOn: true
      - passenger:
          diagnosticTroubleCodes:
          - dtcShortCode: "dtcShortCode"
            dtcDescription: "dtcDescription"
            dtcId: 5
          - dtcShortCode: "dtcShortCode"
            dtcDescription: "dtcDescription"
            dtcId: 5
          checkEngineLight:
            isOn: true
        id: 112
        j1939:
          diagnosticTroubleCodes:
          - spnDescription: "spnDescription"
            occurrenceCount: 6
            fmiId: 0
            txId: 5
            fmiText: "fmiText"
            spnId: 1
          - spnDescription: "spnDescription"
            occurrenceCount: 6
            fmiId: 0
            txId: 5
            fmiText: "fmiText"
            spnId: 1
          checkEngineLight:
            emissionsIsOn: true
            stopIsOn: true
            warningIsOn: true
            protectIsOn: true
  vehicleUpdateParam:
    type: "object"
    required:
    - "groupId"
    - "vehicles"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      vehicles:
        type: "array"
        items:
          $ref: "#/definitions/Vehicle"
  tripsParam:
    type: "object"
    required:
    - "endMs"
    - "groupId"
    - "startMs"
    - "vehicleId"
    properties:
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the time range, specified in milliseconds UNIX time."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the time range, specified in milliseconds UNIX\
          \ time. Limited to a 90 day window with respect to startMs and endMs"
      vehicleId:
        type: "integer"
        format: "int64"
        example: 112
        description: "Vehicle ID to query."
  inline_response_200_5_vehicleStats:
    required:
    - "vehicleId"
    properties:
      auxInput1:
        $ref: "#/definitions/AuxInputSeries"
      auxInput2:
        $ref: "#/definitions/AuxInputSeries"
      engineState:
        type: "array"
        items:
          $ref: "#/definitions/EngineState"
      vehicleId:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
    example:
      auxInput1:
        values:
        - value: true
          timeMs: 1.546542978484E12
        - value: true
          timeMs: 1.546542978484E12
        name: "Boom"
      vehicleId: 112
      auxInput2:
        values:
        - value: true
          timeMs: 1.546542978484E12
        - value: true
          timeMs: 1.546542978484E12
        name: "Boom"
      engineState:
      - value: "Running"
        timeMs: 1.546542978484E12
      - value: "Running"
        timeMs: 1.546542978484E12
  inline_response_200_5:
    required:
    - "vehicleStats"
    properties:
      pagination:
        $ref: "#/definitions/Pagination"
      vehicleStats:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_5_vehicleStats"
    example:
      vehicleStats:
      - auxInput1:
          values:
          - value: true
            timeMs: 1.546542978484E12
          - value: true
            timeMs: 1.546542978484E12
          name: "Boom"
        vehicleId: 112
        auxInput2:
          values:
          - value: true
            timeMs: 1.546542978484E12
          - value: true
            timeMs: 1.546542978484E12
          name: "Boom"
        engineState:
        - value: "Running"
          timeMs: 1.546542978484E12
        - value: "Running"
          timeMs: 1.546542978484E12
      - auxInput1:
          values:
          - value: true
            timeMs: 1.546542978484E12
          - value: true
            timeMs: 1.546542978484E12
          name: "Boom"
        vehicleId: 112
        auxInput2:
          values:
          - value: true
            timeMs: 1.546542978484E12
          - value: true
            timeMs: 1.546542978484E12
          name: "Boom"
        engineState:
        - value: "Running"
          timeMs: 1.546542978484E12
        - value: "Running"
          timeMs: 1.546542978484E12
      pagination:
        hasNextPage: true
        startCursor: "MTU5MTEzNjA2OTU0MzQ3"
        endCursor: "MTU5MTEzNjA2OTU0MzQ3"
        hasPrevPage: true
  data:
    type: "object"
    properties:
      externalIds:
        type: "object"
        example:
          maintenanceId: "ABFS18600"
        additionalProperties:
          type: "string"
      harsh_accel_setting:
        type: "integer"
        format: "string"
        description: "Harsh Event Detection Setting\n* 0: Passenger\n* 1: Light Truck\n\
          * 2: Heavy\n* 3: Off\n* 4: Automatic"
      name:
        type: "string"
        description: "Name"
  inline_response_200_6:
    properties:
      dataInputs:
        type: "array"
        items:
          $ref: "#/definitions/DataInputHistoryResponse"
    example:
      dataInputs:
      - id: 12345
        name: "Pump Flow"
        points:
        - value: 12.332
          timeMs: 1453449599999
        - value: 12.332
          timeMs: 1453449599999
      - id: 12345
        name: "Pump Flow"
        points:
        - value: 12.332
          timeMs: 1453449599999
        - value: 12.332
          timeMs: 1453449599999
  historyParam:
    type: "object"
    required:
    - "endMs"
    - "groupId"
    - "startMs"
    properties:
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the time range, specified in milliseconds UNIX time."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the time range, specified in milliseconds UNIX\
          \ time."
  inline_response_200_7:
    properties:
      machines:
        type: "array"
        items:
          $ref: "#/definitions/Machine"
    example:
      machines:
      - id: 123
        name: "Freezer ABC"
        notes: "This is in the left hallway behind the conveyor belt"
      - id: 123
        name: "Freezer ABC"
        notes: "This is in the left hallway behind the conveyor belt"
  sensorParam:
    type: "object"
    required:
    - "groupId"
    - "sensors"
    properties:
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      sensors:
        type: "array"
        example:
        - 122
        description: "List of sensor IDs to query."
        items:
          type: "integer"
          format: "int64"
  sensorshistory_series:
    required:
    - "field"
    - "widgetId"
    properties:
      field:
        type: "string"
        example: "ambientTemperature"
        description: "Field to query."
        enum:
        - "ambientTemperature"
        - "probeTemperature"
        - "currentLoop1Raw"
        - "currentLoop1Mapped"
        - "currentLoop2Raw"
        - "currentLoop2Mapped"
        - "pmPowerTotal"
        - "pmPhase1Power"
        - "pmPhase2Power"
        - "pmPhase3Power"
        - "pmPhase1PowerFactor"
        - "pmPhase2PowerFactor"
        - "pmPhase3PowerFactor"
      widgetId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Sensor ID to query."
    description: "Sensor ID and field to query."
  historyParam_1:
    type: "object"
    required:
    - "endMs"
    - "groupId"
    - "series"
    - "startMs"
    - "stepMs"
    properties:
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the time range, specified in milliseconds UNIX time."
      fillMissing:
        type: "string"
        default: "withNull"
        enum:
        - "withNull"
        - "withPrevious"
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "Group ID to query."
      series:
        type: "array"
        items:
          $ref: "#/definitions/sensorshistory_series"
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the time range, specified in milliseconds UNIX\
          \ time."
      stepMs:
        type: "integer"
        example: 3600000
        description: "Time resolution for which data should be returned, in milliseconds.\
          \ Specifying 3600000 will return data at hour intervals."
  inline_response_200_8:
    properties:
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/Sensor"
    example:
      sensors:
      - id: 123
        name: "Freezer ABC"
        macAddress: "11:11:11:11:11:11"
      - id: 123
        name: "Freezer ABC"
        macAddress: "11:11:11:11:11:11"
  inline_response_200_9:
    properties:
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
    example:
      tags:
      - sensors:
        - ""
        - ""
        id: 12345
        drivers:
        - ""
        - ""
        groupId: 2348
        assets:
        - ""
        - ""
        parentTagId: 8389
        name: "Broken Vehicles"
        vehicles:
        - ""
        - ""
        addresses:
        - ""
        - ""
        machines:
        - ""
        - ""
      - sensors:
        - ""
        - ""
        id: 12345
        drivers:
        - ""
        - ""
        groupId: 2348
        assets:
        - ""
        - ""
        parentTagId: 8389
        name: "Broken Vehicles"
        vehicles:
        - ""
        - ""
        addresses:
        - ""
        - ""
        machines:
        - ""
        - ""
  AddressGeofence_circle:
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 37.765363
        description: "The latitude of the center of the circular geofence"
      longitude:
        type: "number"
        format: "double"
        example: -122.403098
        description: "The longitude of the center of the circular geofence"
      radiusMeters:
        type: "integer"
        format: "int64"
        example: 250
        description: "The radius of the circular geofence"
    description: "Information about a circular geofence. This field is only populated\
      \ if the geofence is a circle."
    example:
      radiusMeters: 250
      longitude: -122.403098
      latitude: 37.765363
  AddressGeofence_polygon_vertices:
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 37.765363
        description: "The longitude of a geofence vertex"
      longitude:
        type: "number"
        format: "double"
        example: -122.403098
        description: "The longitude of a geofence vertex"
    example:
      longitude: -122.403098
      latitude: 37.765363
  AddressGeofence_polygon:
    properties:
      vertices:
        type: "array"
        description: "The vertices of the polygon geofence. These geofence vertices\
          \ describe the perimeter of the polygon, and must consist of at least 3\
          \ vertices and less than 40."
        items:
          $ref: "#/definitions/AddressGeofence_polygon_vertices"
    description: "Information about a polygon geofence. This field is only populated\
      \ if the geofence is a polygon."
    example:
      vertices:
      - longitude: -122.403098
        latitude: 37.765363
      - longitude: -122.403098
        latitude: 37.765363
  Asset_cable:
    properties:
      assetType:
        type: "string"
        example: "Reefer (Thermo King)"
        description: "Asset type"
    example:
      assetType: "Reefer (Thermo King)"
  AssetLocationResponse_inner:
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 37.0
        description: "The latitude of the location in degrees."
      location:
        type: "string"
        example: "525 York, San Francisco, CA"
        description: "The best effort (street,city,state) for the latitude and longitude."
      longitude:
        type: "number"
        format: "double"
        example: -122.7
        description: "The longitude of the location in degrees."
      speedMilesPerHour:
        type: "number"
        format: "double"
        example: 35.0
        description: "The speed calculated from GPS that the asset was traveling at\
          \ in miles per hour."
      time:
        type: "number"
        format: "int64"
        example: 1.2314151E7
        description: "Time in Unix milliseconds since epoch when the asset was at\
          \ the location."
    description: "Asset location details."
  AssetReeferResponse_reeferStats_alarms:
    properties:
      alarmCode:
        type: "integer"
        format: "int64"
        example: 102
        description: "ID of the alarm"
      description:
        type: "string"
        example: "Check Return Air Sensor"
        description: "Description of the alarm"
      operatorAction:
        type: "string"
        example: "Check and repair at end of trip"
        description: "Recommended operator action"
      severity:
        type: "integer"
        format: "int64"
        example: 1
        description: "Severity of the alarm: 1: OK to run, 2: Check as specified,\
          \ 3: Take immediate action"
    example:
      description: "Check Return Air Sensor"
      severity: 1
      operatorAction: "Check and repair at end of trip"
      alarmCode: 102
  AssetReeferResponse_reeferStats_alarms_1:
    properties:
      alarms:
        type: "array"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_alarms"
      changedAtMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp when the alarms were reported, in Unix milliseconds\
          \ since epoch"
    example:
      changedAtMs: 1453449599999
      alarms:
      - description: "Check Return Air Sensor"
        severity: 1
        operatorAction: "Check and repair at end of trip"
        alarmCode: 102
      - description: "Check Return Air Sensor"
        severity: 1
        operatorAction: "Check and repair at end of trip"
        alarmCode: 102
  AssetReeferResponse_reeferStats_engineHours:
    properties:
      changedAtMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp in Unix milliseconds since epoch."
      engineHours:
        type: "integer"
        format: "int64"
        example: 1200
        description: "Engine hours of the reefer."
    example:
      engineHours: 1200
      changedAtMs: 1453449599999
  AssetReeferResponse_reeferStats_fuelPercentage:
    properties:
      changedAtMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp in Unix milliseconds since epoch."
      fuelPercentage:
        type: "integer"
        format: "int64"
        example: 99
        description: "Fuel percentage of the reefer."
    example:
      fuelPercentage: 99
      changedAtMs: 1453449599999
  AssetReeferResponse_reeferStats_powerStatus:
    properties:
      changedAtMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp in Unix milliseconds since epoch."
      status:
        type: "string"
        example: "Active (Continuous)"
        description: "Power status of the reefer."
    example:
      status: "Active (Continuous)"
      changedAtMs: 1453449599999
  AssetReeferResponse_reeferStats_returnAirTemp:
    properties:
      changedAtMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp in Unix milliseconds since epoch."
      tempInMilliC:
        type: "integer"
        format: "int64"
        example: 31110
        description: "Return air temperature in millidegree Celsius."
    example:
      changedAtMs: 1453449599999
      tempInMilliC: 31110
  AssetReeferResponse_reeferStats_setPoint:
    properties:
      changedAtMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
        description: "Timestamp in Unix milliseconds since epoch."
      tempInMilliC:
        type: "integer"
        format: "int64"
        example: 31110
        description: "Set point temperature in millidegree Celsius."
    example:
      changedAtMs: 1453449599999
      tempInMilliC: 31110
  AssetReeferResponse_reeferStats:
    properties:
      alarms:
        type: "array"
        description: "Reefer alarms"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_alarms_1"
      engineHours:
        type: "array"
        description: "Engine hours of the reefer"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_engineHours"
      fuelPercentage:
        type: "array"
        description: "Fuel percentage of the reefer"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_fuelPercentage"
      powerStatus:
        type: "array"
        description: "Power status of the reefer"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_powerStatus"
      returnAirTemp:
        type: "array"
        description: "Return air temperature of the reefer"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_returnAirTemp"
      setPoint:
        type: "array"
        description: "Set point temperature of the reefer"
        items:
          $ref: "#/definitions/AssetReeferResponse_reeferStats_setPoint"
    example:
      powerStatus:
      - status: "Active (Continuous)"
        changedAtMs: 1453449599999
      - status: "Active (Continuous)"
        changedAtMs: 1453449599999
      engineHours:
      - engineHours: 1200
        changedAtMs: 1453449599999
      - engineHours: 1200
        changedAtMs: 1453449599999
      returnAirTemp:
      - changedAtMs: 1453449599999
        tempInMilliC: 31110
      - changedAtMs: 1453449599999
        tempInMilliC: 31110
      fuelPercentage:
      - fuelPercentage: 99
        changedAtMs: 1453449599999
      - fuelPercentage: 99
        changedAtMs: 1453449599999
      setPoint:
      - changedAtMs: 1453449599999
        tempInMilliC: 31110
      - changedAtMs: 1453449599999
        tempInMilliC: 31110
      alarms:
      - changedAtMs: 1453449599999
        alarms:
        - description: "Check Return Air Sensor"
          severity: 1
          operatorAction: "Check and repair at end of trip"
          alarmCode: 102
        - description: "Check Return Air Sensor"
          severity: 1
          operatorAction: "Check and repair at end of trip"
          alarmCode: 102
      - changedAtMs: 1453449599999
        alarms:
        - description: "Check Return Air Sensor"
          severity: 1
          operatorAction: "Check and repair at end of trip"
          alarmCode: 102
        - description: "Check Return Air Sensor"
          severity: 1
          operatorAction: "Check and repair at end of trip"
          alarmCode: 102
  CargoResponse_sensors:
    properties:
      cargoEmpty:
        type: "boolean"
        example: true
        description: "Flag indicating whether the current cargo is empty or loaded."
      id:
        type: "integer"
        format: "int64"
        example: 122
        description: "ID of the sensor."
      name:
        type: "string"
        example: "Trailer Cargo Sensor"
        description: "Name of the sensor."
    example:
      id: 122
      name: "Trailer Cargo Sensor"
      cargoEmpty: true
  DataInputHistoryResponse_points:
    properties:
      timeMs:
        type: "integer"
        format: "int64"
        example: 1453449599999
      value:
        type: "number"
        format: "double"
        example: 12.332
    example:
      value: 12.332
      timeMs: 1453449599999
  DocumentFieldCreate_photoValue:
    properties:
      url:
        type: "string"
        description: "Photo URL for a JPG image"
  DocumentFieldType_numberValueTypeMetadata:
    properties:
      numDecimalPlaces:
        type: "integer"
        format: "int64"
        example: 2
        description: "Number of decimal places that values for this field type can\
          \ have."
    description: "Additional metadata information for a number field type. Only defined\
      \ when a field type has valueType: ValueType_Number."
  DoorResponse_sensors:
    properties:
      doorClosed:
        type: "boolean"
        example: true
        description: "Flag indicating whether the current door is closed or open."
      id:
        type: "integer"
        format: "int64"
        example: 122
        description: "ID of the sensor."
      name:
        type: "string"
        example: "Trailer Door Sensor"
        description: "Name of the sensor."
    example:
      id: 122
      doorClosed: true
      name: "Trailer Door Sensor"
  DriverDailyLogResponse_days:
    properties:
      activeHours:
        type: "number"
        format: "double"
        example: 5.4
        description: "Hours spent on duty or driving, rounded to two decimal places."
      activeMs:
        type: "integer"
        format: "int64"
        example: 691200
        description: "Milliseconds spent on duty or driving."
      certified:
        type: "boolean"
        description: "Whether this HOS day chart was certified by the driver."
      certifiedAtMs:
        type: "integer"
        format: "int64"
        description: "Unix epoch time (in ms) of time when this chart was certified.\
          \ If this chart is uncertified, 0."
      distanceMiles:
        type: "number"
        format: "double"
        example: 123.24
        description: "Distance driven in miles, rounded to two decimal places."
      endMs:
        type: "integer"
        example: 1473836400000
        description: "End of the HOS day, specified in milliseconds UNIX time."
      startMs:
        type: "integer"
        example: 1473750000000
        description: "End of the HOS day, specified in milliseconds UNIX time."
      trailerIds:
        type: "object"
        example:
        - 10293
        - 192933
        description: "List of trailer ID's associated with the driver for the day."
        properties: {}
      vehicleIds:
        type: "object"
        example:
        - 192319
        - 12958
        description: "List of vehicle ID's associated with the driver for the day."
        properties: {}
    example:
      distanceMiles: 123.24
      vehicleIds:
      - 192319
      - 12958
      activeMs: 691200
      certified: true
      trailerIds:
      - 10293
      - 192933
      certifiedAtMs: 0
      startMs: 1473750000000
      activeHours: 5.4
      endMs: 1473836400000
  DriversSummaryResponse_Summaries:
    properties:
      activeMs:
        type: "integer"
        format: "int64"
        example: 43200000
        description: "Duration in milliseconds that driver was on duty or driving\
          \ during the requested time range"
      distanceMiles:
        type: "number"
        format: "double"
        example: 123.24
        description: "Distance driven in miles, rounded to two decimal places."
      driveMs:
        type: "integer"
        format: "int64"
        example: 21600000
        description: "Duration in milliseconds that driver was driving during the\
          \ requested time range"
      driverId:
        type: "integer"
        format: "int64"
        example: 444
        description: "ID of the driver."
      driverName:
        type: "string"
        example: "Fred Jacobs"
        description: "Name of the driver."
      driverUsername:
        type: "string"
        example: "fjacobs"
        description: "Username of the driver."
      groupId:
        type: "integer"
        format: "int64"
        example: 111
        description: "Group of the driver."
      onDutyMs:
        type: "integer"
        format: "int64"
        example: 21600000
        description: "Duration in milliseconds that driver was on duty during the\
          \ requested time range"
    example:
      distanceMiles: 123.24
      groupId: 111
      onDutyMs: 21600000
      activeMs: 43200000
      driverId: 444
      driveMs: 21600000
      driverUsername: "fjacobs"
      driverName: "Fred Jacobs"
  DvirBase_authorSignature:
    properties:
      driverId:
        type: "integer"
        format: "int64"
        example: 2581
        description: "ID of the driver who signed the DVIR. Will not be returned if\
          \ mechanicUserId is returned."
      email:
        type: "string"
        example: "j.smith@yahoo.com"
        description: "Email of the  driver|mechanic who signed the DVIR."
      mechanicUserId:
        type: "integer"
        format: "int64"
        example: 14849
        description: "ID of the mechanic who signed the DVIR. Will not be returned\
          \ if driverId is returned."
      name:
        type: "string"
        example: "John Smith"
        description: "The name of the driver or mechanic who signed the DVIR."
      signedAt:
        type: "integer"
        format: "int64"
        example: 12535500000
        description: "The time in millis when the DVIR was signed"
      type:
        type: "string"
        example: "driver"
        description: "Type corresponds to whether the signature corresponds to driver|mechanic."
      username:
        type: "string"
        example: "jsmith"
        description: "Username of the  driver|mechanic who signed the DVIR."
    description: "The authors signature for the DVIR."
    example:
      username: "jsmith"
      mechanicUserId: 14849
      email: "j.smith@yahoo.com"
      signedAt: 12535500000
      name: "John Smith"
      driverId: 2581
      type: "driver"
  DvirBase_mechanicOrAgentSignature:
    properties:
      driverId:
        type: "integer"
        format: "int64"
        example: 2581
        description: "ID of the driver who signed the DVIR. Will not be returned if\
          \ mechanicUserId is returned."
      email:
        type: "string"
        example: "j.smith@yahoo.com"
        description: "Email of the  agent|mechanic who signed the DVIR."
      mechanicUserId:
        type: "integer"
        format: "int64"
        example: 14849
        description: "ID of the mechanic who signed the DVIR. Will not be returned\
          \ if driverId is returned."
      name:
        type: "string"
        example: "John Smith"
        description: "The name of the agent or mechanic who signed the DVIR."
      signedAt:
        type: "integer"
        format: "int64"
        example: 12535500000
        description: "The time in millis when the DVIR was signed"
      type:
        type: "string"
        example: "driver"
        description: "Type corresponds to whether the signature corresponds to driver|mechanic."
      username:
        type: "string"
        example: "jsmith"
        description: "Username of the  agent|mechanic who signed the DVIR."
    description: "The mechanic's or agent's signature for the DVIR."
    example:
      username: "jsmith"
      mechanicUserId: 14849
      email: "j.smith@yahoo.com"
      signedAt: 12535500000
      name: "John Smith"
      driverId: 2581
      type: "driver"
  DvirBase_nextDriverSignature:
    properties:
      driverId:
        type: "integer"
        format: "int64"
        example: 2581
        description: "ID of the driver who signed the DVIR"
      email:
        type: "string"
        example: "j.smith@yahoo.com"
        description: "Email of the  driver who signed the next DVIR on this vehicle."
      name:
        type: "string"
        example: "John Smith"
        description: "The name of the driver who signed the next DVIR on this vehicle."
      signedAt:
        type: "integer"
        format: "int64"
        example: 12535500000
        description: "The time in millis when the next driver signed the DVIR on this\
          \ vehicle."
      type:
        type: "string"
        example: "driver"
        description: "Type corresponds to driver."
      username:
        type: "string"
        example: "jsmith"
        description: "Username of the  driver who signed the next DVIR on this vehicle."
    description: "The next driver signature for the DVIR."
    example:
      username: "jsmith"
      email: "j.smith@yahoo.com"
      signedAt: 12535500000
      name: "John Smith"
      driverId: 2581
      type: "driver"
  DvirBase_trailerDefects:
    properties:
      comment:
        type: "string"
        example: "Air Compressor not working"
        description: "The comment describing the type of DVIR defect"
      defectType:
        type: "string"
        example: "Air Compressor"
        description: "The type of DVIR defect"
    example:
      defectType: "Air Compressor"
      comment: "Air Compressor not working"
  DvirBase_vehicle:
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 19
        description: "The vehicle id on which DVIR was done."
      name:
        type: "string"
        example: "Storer's vehicle 19"
        description: "The vehicle on which DVIR was done."
    description: "The vehicle on which DVIR was done."
    example:
      id: 19
      name: "Storer's vehicle 19"
  FleetVehicleResponse_vehicleInfo:
    properties:
      make:
        type: "string"
        example: "Honda"
        description: "Make of the vehicle."
      model:
        type: "string"
        example: "Odyssey"
        description: "Model of the Vehicle."
      vin:
        type: "string"
        example: "1FUJA6BD31LJ09646"
        description: "Vehicle Identification Number."
      year:
        type: "integer"
        format: "int64"
        example: 1997
        description: "Year of the vehicle."
    example:
      model: "Odyssey"
      vin: "1FUJA6BD31LJ09646"
      year: 1997
      make: "Honda"
  FleetVehiclesLocations_inner:
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
      locations:
        $ref: "#/definitions/FleetVehicleLocations"
      name:
        type: "string"
        example: "Truck A7"
        description: "Name of the vehicle."
  HosAuthenticationLogsResponse_authenticationLogs:
    properties:
      actionType:
        type: "string"
        example: "signin"
        description: "The log type - one of 'signin' or 'signout'"
      address:
        type: "string"
        example: "123 Main St., Ahwatukee, Arizona 85044"
        description: "Address at which the log was recorded, if applicable."
      addressName:
        type: "string"
        example: "Garage Number 3"
        description: "Address name from the group address book at which the log was\
          \ recorded, if applicable."
      city:
        type: "string"
        example: "Ahwatukee"
        description: "City in which the log was recorded, if applicable."
      happenedAtMs:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "The time at which the event was recorded in UNIX milliseconds."
      state:
        type: "string"
        example: "Arizona"
        description: "State in which the log was recorded, if applicable."
    example:
      happenedAtMs: 1462881998034
      address: "123 Main St., Ahwatukee, Arizona 85044"
      state: "Arizona"
      actionType: "signin"
      city: "Ahwatukee"
      addressName: "Garage Number 3"
  HosLogsResponse_logs:
    properties:
      codriverIds:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: 445
          description: "Ids of codrivers during any of the logged trips"
      driverId:
        type: "integer"
        format: "int64"
        example: 444
        description: "ID of the driver."
      groupId:
        type: "integer"
        format: "int64"
        example: 101
        description: "ID of the group."
      locCity:
        type: "string"
        example: "Ahwatukee"
        description: "City in which the log was recorded."
      locLat:
        type: "number"
        format: "double"
        example: 23.413702345
        description: "Latitude at which the log was recorded."
      locLng:
        type: "number"
        format: "double"
        example: -98.502888123
        description: "Longitude at which the log was recorded."
      locName:
        type: "string"
        example: "McLean Site A"
        description: "Name of location at which the log was recorded."
      locState:
        type: "string"
        example: "Arizona"
        description: "State in which the log was recorded."
      logStartMs:
        type: "integer"
        format: "int64"
        example: 1462881998034
        description: "The time at which the log/HOS status started in UNIX milliseconds."
      remark:
        type: "string"
        example: "Lunch Break"
        description: "Remark associated with the log entry."
      statusType:
        type: "string"
        example: "OFF_DUTY"
        description: "The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`,\
          \ `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`."
      vehicleId:
        type: "integer"
        format: "int64"
        example: 112
        description: "ID of the vehicle."
    example:
      groupId: 101
      logStartMs: 1462881998034
      codriverIds:
      - 445
      - 445
      vehicleId: 112
      remark: "Lunch Break"
      statusType: "OFF_DUTY"
      driverId: 444
      locLng: -98.502888123
      locName: "McLean Site A"
      locLat: 23.413702345
      locCity: "Ahwatukee"
      locState: "Arizona"
  HosLogsSummaryResponse_drivers:
    properties:
      cycleRemaining:
        type: "integer"
        format: "int64"
        example: 252000000
        description: "The amount of remaining cycle time (in ms)."
      cycleTomorrow:
        type: "integer"
        format: "int64"
        example: 252000000
        description: "The amount of cycle time (in ms) available tomorrow."
      driverId:
        type: "integer"
        format: "int64"
        example: 444
        description: "ID of the driver."
      driverName:
        type: "string"
        example: "Fred Jacobs"
        description: "Name of the driver."
      drivingInViolationCycle:
        type: "integer"
        format: "int64"
        example: 50400000
        description: "The amount of driving time in violation in this cycle (in ms)."
      drivingInViolationToday:
        type: "integer"
        format: "int64"
        example: 39600000
        description: "The amount of driving time in violation today (in ms)."
      dutyStatus:
        type: "string"
        example: "OFF_DUTY"
        description: "The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`,\
          \ `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`."
      shiftDriveRemaining:
        type: "integer"
        format: "int64"
        example: 39600000
        description: "The amount of remaining shift drive time (in ms)."
      shiftRemaining:
        type: "integer"
        format: "int64"
        example: 50400000
        description: "The amount of remaining shift time (in ms)."
      timeInCurrentStatus:
        type: "integer"
        format: "int64"
        example: 5000
        description: "The amount of time (in ms) that the driver has been in the current\
          \ `dutyStatus`."
      timeUntilBreak:
        type: "integer"
        format: "int64"
        example: 28800000
        description: "The amount of time (in ms) remaining until the driver cannot\
          \ drive without a rest break."
      vehicleName:
        type: "string"
        example: "Vehicle 1"
        description: "Name of the vehicle."
    example:
      timeUntilBreak: 28800000
      dutyStatus: "OFF_DUTY"
      vehicleName: "Vehicle 1"
      shiftDriveRemaining: 39600000
      driverId: 444
      cycleTomorrow: 252000000
      shiftRemaining: 50400000
      drivingInViolationToday: 39600000
      timeInCurrentStatus: 5000
      cycleRemaining: 252000000
      drivingInViolationCycle: 50400000
      driverName: "Fred Jacobs"
  HumidityResponse_sensors:
    properties:
      humidity:
        type: "integer"
        example: 53
        description: "Currently reported relative humidity in percent, from 0-100."
      id:
        type: "integer"
        format: "int64"
        example: 122
        description: "ID of the sensor."
      name:
        type: "string"
        example: "Freezer Humidity Sensor"
        description: "Name of the sensor."
    example:
      id: 122
      humidity: 53
      name: "Freezer Humidity Sensor"
  MachineHistoryResponse_vibrations:
    properties:
      X:
        type: "number"
        format: "double"
        example: 0.01
      Y:
        type: "number"
        format: "double"
        example: 1.23
      Z:
        type: "number"
        format: "double"
        example: 2.55
      time:
        type: "integer"
        format: "int64"
        example: 1453449599999
    example:
      time: 1453449599999
      Y: 1.23
      X: 0.01
      Z: 2.55
  MachineHistoryResponse_machines:
    properties:
      id:
        type: "integer"
        example: 1
        description: "Machine ID"
      name:
        type: "string"
        example: "1/3 HP Motor"
        description: "Machine name"
      vibrations:
        type: "array"
        description: "List of vibration datapoints, with timestamp and vibration measurement\
          \ for x/y/z axis in mm/s"
        items:
          $ref: "#/definitions/MachineHistoryResponse_vibrations"
    example:
      id: 1
      vibrations:
      - time: 1453449599999
        Y: 1.23
        X: 0.01
        Z: 2.55
      - time: 1453449599999
        Y: 1.23
        X: 0.01
        Z: 2.55
      name: "1/3 HP Motor"
  SensorHistoryResponse_results:
    properties:
      series:
        type: "array"
        description: "List of datapoints, one for each requested (sensor, field) pair."
        items:
          type: "integer"
          format: "int64"
          example: 1
      timeMs:
        type: "integer"
        example: 1453449599999
        description: "Timestamp in UNIX milliseconds."
    example:
      series:
      - 1
      - 1
      timeMs: 1453449599999
  TagModify_add:
    properties:
      assets:
        type: "array"
        description: "The assets to be added to this tag."
        items:
          $ref: "#/definitions/TaggedAssetBase"
      drivers:
        type: "array"
        description: "The drivers to be added to this tag."
        items:
          $ref: "#/definitions/TaggedDriverBase"
      machines:
        type: "array"
        description: "The machines to be added to this tag."
        items:
          $ref: "#/definitions/TaggedMachineBase"
      sensors:
        type: "array"
        description: "The sensors to be added to this tag."
        items:
          $ref: "#/definitions/TaggedSensorBase"
      vehicles:
        type: "array"
        description: "The vehicles to be added to this tag."
        items:
          $ref: "#/definitions/TaggedVehicleBase"
    description: "Specify devices, etc. that should be added to the tag."
    example:
      sensors:
      - id: 345
      - id: 345
      drivers:
      - id: 456
      - id: 456
      assets:
      - id: 789
      - id: 789
      vehicles:
      - id: 123
      - id: 123
      machines:
      - id: 567
      - id: 567
  TagModify_delete:
    properties:
      assets:
        type: "array"
        description: "The assets to be removed from this tag."
        items:
          $ref: "#/definitions/TaggedAssetBase"
      drivers:
        type: "array"
        description: "The drivers to be removed from this tag."
        items:
          $ref: "#/definitions/TaggedDriverBase"
      machines:
        type: "array"
        description: "The machines to be removed from this tag."
        items:
          $ref: "#/definitions/TaggedMachineBase"
      sensors:
        type: "array"
        description: "The sensors to be removed from this tag."
        items:
          $ref: "#/definitions/TaggedSensorBase"
      vehicles:
        type: "array"
        description: "The vehicles to be removed from this tag."
        items:
          $ref: "#/definitions/TaggedVehicleBase"
    description: "Specify devices, etc. that should be removed from the tag."
    example:
      sensors:
      - id: 345
      - id: 345
      drivers:
      - id: 456
      - id: 456
      assets:
      - id: 789
      - id: 789
      vehicles:
      - id: 123
      - id: 123
      machines:
      - id: 567
      - id: 567
  TemperatureResponse_sensors:
    properties:
      ambientTemperature:
        type: "integer"
        example: 11057
        description: "Currently reported ambient temperature in millidegrees celsius."
      id:
        type: "integer"
        format: "int64"
        example: 122
        description: "ID of the sensor."
      name:
        type: "string"
        example: "Freezer Temp Sensor"
        description: "Name of the sensor."
      probeTemperature:
        type: "integer"
        example: -20145
        description: "Currently reported probe temperature in millidegrees celsius.\
          \ If no probe is connected, this parameter will not be reported."
    example:
      id: 122
      name: "Freezer Temp Sensor"
      probeTemperature: -20145
      ambientTemperature: 11057
  TripResponse_endCoordinates:
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 23.413702345
      longitude:
        type: "number"
        format: "double"
        example: -91.502888123
    description: "End (latitude, longitude) in decimal degrees."
    example:
      longitude: -91.502888123
      latitude: 23.413702345
  TripResponse_startCoordinates:
    properties:
      latitude:
        type: "number"
        format: "double"
        example: 29.443702345
      longitude:
        type: "number"
        format: "double"
        example: -98.502888123
    description: "Start (latitude, longitude) in decimal degrees."
    example:
      longitude: -98.502888123
      latitude: 29.443702345
  TripResponse_trips:
    properties:
      distanceMeters:
        type: "integer"
        example: 2500
        description: "Length of the trip in meters."
      driverId:
        type: "integer"
        example: 719
        description: "ID of the driver."
      endAddress:
        type: "string"
        example: "Winchell's Donuts House"
        description: "Text representation of nearest identifiable location to the\
          \ end (latitude, longitude) coordinates."
      endCoordinates:
        $ref: "#/definitions/TripResponse_endCoordinates"
      endLocation:
        type: "string"
        example: "571 S Lake Ave, Pasadena, CA 91101"
        description: "Geocoded street address of start (latitude, longitude) coordinates."
      endMs:
        type: "integer"
        example: 1462881998034
        description: "End of the trip in UNIX milliseconds."
      endOdometer:
        type: "integer"
        example: 210430500
        description: "Odometer reading at the end of the trip."
      fuelConsumedMl:
        type: "integer"
        example: 75700
        description: "Amount in milliliters of fuel consumed on this trip."
      startAddress:
        type: "string"
        example: "Ramen Tatsunoya"
        description: "Text representation of nearest identifiable location to the\
          \ start (latitude, longitude) coordinates."
      startCoordinates:
        $ref: "#/definitions/TripResponse_startCoordinates"
      startLocation:
        type: "string"
        example: "16 N Fair Oaks Ave, Pasadena, CA 91103"
        description: "Geocoded street address of start (latitude, longitude) coordinates."
      startMs:
        type: "integer"
        example: 1462878398034
        description: "Beginning of the trip in UNIX milliseconds."
      startOdometer:
        type: "integer"
        example: 210430450
        description: "Odometer reading at the beginning of the trip."
      tollMeters:
        type: "integer"
        example: 32000
        description: "Length in meters trip spent on toll roads."
    example:
      startAddress: "Ramen Tatsunoya"
      endOdometer: 210430500
      distanceMeters: 2500
      startCoordinates:
        longitude: -98.502888123
        latitude: 29.443702345
      startLocation: "16 N Fair Oaks Ave, Pasadena, CA 91103"
      fuelConsumedMl: 75700
      endCoordinates:
        longitude: -91.502888123
        latitude: 23.413702345
      tollMeters: 32000
      endLocation: "571 S Lake Ave, Pasadena, CA 91101"
      driverId: 719
      endAddress: "Winchell's Donuts House"
      startOdometer: 210430450
      startMs: 1462878398034
      endMs: 1462881998034
  UserTagRole_tag:
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
        description: "The ID of this tag."
      name:
        type: "string"
        example: "North Carolina Distribution"
        description: "Name of this tag."
      parentTagId:
        type: "integer"
        format: "int64"
        example: 12345
        description: "The ID of this tag."
  VehicleHarshEventResponse_location:
    properties:
      address:
        type: "string"
        example: "350 Rhode Island St, San Francisco, CA"
        description: "Address of location where the harsh event occurred"
      latitude:
        type: "string"
        example: "33.07614328"
        description: "Latitude of location where the harsh event occurred"
      longitude:
        type: "string"
        example: "-96.14907287"
        description: "Longitude of location where the harsh event occurred"
    example:
      address: "350 Rhode Island St, San Francisco, CA"
      longitude: "-96.14907287"
      latitude: "33.07614328"
  VehicleMaintenance_j1939_checkEngineLight:
    properties:
      emissionsIsOn:
        type: "boolean"
      protectIsOn:
        type: "boolean"
      stopIsOn:
        type: "boolean"
      warningIsOn:
        type: "boolean"
    description: "J1939 check engine lights."
    example:
      emissionsIsOn: true
      stopIsOn: true
      warningIsOn: true
      protectIsOn: true
  VehicleMaintenance_j1939_diagnosticTroubleCodes:
    properties:
      fmiId:
        type: "integer"
      fmiText:
        type: "string"
      occurrenceCount:
        type: "integer"
      spnDescription:
        type: "string"
      spnId:
        type: "integer"
      txId:
        type: "integer"
    example:
      spnDescription: "spnDescription"
      occurrenceCount: 6
      fmiId: 0
      txId: 5
      fmiText: "fmiText"
      spnId: 1
  VehicleMaintenance_j1939:
    properties:
      checkEngineLight:
        $ref: "#/definitions/VehicleMaintenance_j1939_checkEngineLight"
      diagnosticTroubleCodes:
        type: "array"
        description: "J1939 DTCs."
        items:
          $ref: "#/definitions/VehicleMaintenance_j1939_diagnosticTroubleCodes"
    description: "J1939 based data. Null if no data is available."
    example:
      diagnosticTroubleCodes:
      - spnDescription: "spnDescription"
        occurrenceCount: 6
        fmiId: 0
        txId: 5
        fmiText: "fmiText"
        spnId: 1
      - spnDescription: "spnDescription"
        occurrenceCount: 6
        fmiId: 0
        txId: 5
        fmiText: "fmiText"
        spnId: 1
      checkEngineLight:
        emissionsIsOn: true
        stopIsOn: true
        warningIsOn: true
        protectIsOn: true
  VehicleMaintenance_passenger_checkEngineLight:
    properties:
      isOn:
        type: "boolean"
    description: "Passenger vehicle check engine light."
    example:
      isOn: true
  VehicleMaintenance_passenger_diagnosticTroubleCodes:
    properties:
      dtcDescription:
        type: "string"
      dtcId:
        type: "integer"
      dtcShortCode:
        type: "string"
    example:
      dtcShortCode: "dtcShortCode"
      dtcDescription: "dtcDescription"
      dtcId: 5
  VehicleMaintenance_passenger:
    properties:
      checkEngineLight:
        $ref: "#/definitions/VehicleMaintenance_passenger_checkEngineLight"
      diagnosticTroubleCodes:
        type: "array"
        description: "Passenger vehicle DTCs."
        items:
          $ref: "#/definitions/VehicleMaintenance_passenger_diagnosticTroubleCodes"
    description: "Passenger vehicle data. Null if no data is available."
    example:
      diagnosticTroubleCodes:
      - dtcShortCode: "dtcShortCode"
        dtcDescription: "dtcDescription"
        dtcId: 5
      - dtcShortCode: "dtcShortCode"
        dtcDescription: "dtcDescription"
        dtcId: 5
      checkEngineLight:
        isOn: true
parameters:
  accessTokenParam:
    name: "access_token"
    in: "query"
    description: "Samsara API access token."
    required: true
    type: "string"
  addressAddParam:
    in: "body"
    name: "addresses"
    description: "List of addresses/geofences to add. Geofences can be circular or\
      \ a polygon. \nFor each address, only one of 'circle' or 'polygon' should be\
      \ provided. If both are provided, the geofence will be saved as a polygon."
    required: true
    schema:
      $ref: "#/definitions/addresses"
  addressUpdateParam:
    in: "body"
    name: "address"
    description: "Update parts of an address's value. If the geofence 'circle' or\
      \ 'polygon' key is specified, the update will change the type of geofence accordingly."
    required: true
    schema:
      $ref: "#/definitions/address"
  assetHistoryEndTimeParam:
    name: "endMs"
    in: "query"
    description: "Timestamp in milliseconds representing the end of the period to\
      \ fetch, inclusive. Used in combination with startMs."
    required: true
    type: "integer"
    format: "int64"
  assetHistoryStartTimeParam:
    name: "startMs"
    in: "query"
    description: "Timestamp in milliseconds representing the start of the period to\
      \ fetch, inclusive. Used in combination with endMs."
    required: true
    type: "integer"
    format: "int64"
  assetIdParam:
    name: "asset_id"
    in: "path"
    description: "ID of the asset"
    required: true
    type: "integer"
    format: "int64"
  createDriverParam:
    in: "body"
    name: "createDriverParam"
    description: "Driver creation body"
    required: true
    schema:
      $ref: "#/definitions/DriverForCreate"
  createDvirParam:
    in: "body"
    name: "createDvirParam"
    description: "DVIR creation body"
    required: true
    schema:
      $ref: "#/definitions/createDvirParam"
  dataInputEndTimeParam:
    name: "endMs"
    in: "query"
    description: "Timestamp in unix milliseconds representing the end of the period\
      \ to fetch, inclusive. Used in combination with startMs. Defaults to nowMs."
    required: false
    type: "integer"
    format: "int64"
  dataInputIdParam:
    name: "data_input_id"
    in: "path"
    description: "ID of the data input"
    required: true
    type: "integer"
    format: "int64"
  dataInputStartTimeParam:
    name: "startMs"
    in: "query"
    description: "Timestamp in unix milliseconds representing the start of the period\
      \ to fetch, inclusive. Used in combination with endMs. defaults to nowMs."
    required: false
    type: "integer"
    format: "int64"
  documentCreateParam:
    in: "body"
    name: "createDocumentParams"
    description: "To create a document for a given document type, the document type's\
      \ uuid needs to be passed in to documentTypeUuid. The list of fields passed\
      \ in should match the document type’s list of field types in the correct order.\
      \ In other words, a field's valueType and value (i.e. only one of: stringValue,\
      \ numberValue, or photoValue) at index _i_ should match with the document field\
      \ type’s valueType at index _i_."
    required: true
    schema:
      $ref: "#/definitions/DocumentCreate"
  documentsDurationMsParam:
    name: "durationMs"
    in: "query"
    description: "Time in milliseconds that represents the duration before endMs to\
      \ query. Defaults to 24 hours."
    required: false
    type: "integer"
    format: "int64"
  documentsEndMsParam:
    name: "endMs"
    in: "query"
    description: "Time in unix milliseconds that represents the oldest documents to\
      \ return. Used in combination with durationMs. Defaults to now."
    required: false
    type: "integer"
    format: "int64"
  driverIdOrExternalIdParam:
    name: "driver_id_or_external_id"
    in: "path"
    description: "ID of the driver.  This must be either the numeric ID generated\
      \ by Samsara or the external ID of the driver.  External IDs are customer specified\
      \ key-value pairs."
    required: true
    type: "string"
  groupIdParam:
    name: "group_id"
    in: "query"
    description: "Optional group ID if the organization has multiple groups (uncommon)."
    required: false
    type: "integer"
    format: "int64"
  groupParam:
    in: "body"
    name: "groupParam"
    description: "Group ID to query."
    required: true
    schema:
      $ref: "#/definitions/groupParam"
  harshEventMsParam:
    name: "timestamp"
    in: "query"
    description: "Timestamp in milliseconds representing the timestamp of a harsh\
      \ event."
    required: true
    type: "integer"
    format: "int64"
  jobUpdatesIncludeParam:
    name: "include"
    in: "query"
    description: "Optionally set include=route to include route object in response\
      \ payload."
    required: false
    type: "string"
  lastReceivedSequenceIDParam:
    name: "sequence_id"
    in: "query"
    description: "Sequence ID from the response payload of the last request. Defaults\
      \ to fetching updates from last 24 hours."
    required: false
    type: "string"
  paginationEndingBeforeParam:
    name: "endingBefore"
    in: "query"
    description: "Pagination parameter indicating the cursor position to return results\
      \ before. Used in conjunction with the 'limit' parameter. Mutually exclusive\
      \ with 'startingAfter' parameter."
    required: false
    type: "string"
  paginationLimitParam:
    name: "limit"
    in: "query"
    description: "Pagination parameter indicating the number of results to return\
      \ in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'."
    required: false
    type: "integer"
    format: "int64"
  paginationStartingAfterParam:
    name: "startingAfter"
    in: "query"
    description: "Pagination parameter indicating the cursor position to continue\
      \ returning results after. Used in conjunction with the 'limit' parameter. Mutually\
      \ exclusive with 'endingBefore' parameter."
    required: false
    type: "string"
  reactivateDriverParam:
    in: "body"
    name: "reactivateDriverParam"
    description: "Driver reactivation body"
    required: true
    schema:
      $ref: "#/definitions/reactivateDriverParam"
  routeCreateParam:
    in: "body"
    name: "createDispatchRouteParams"
    required: true
    schema:
      $ref: "#/definitions/DispatchRouteCreate"
  routeDurationParam:
    name: "duration"
    in: "query"
    description: "Time in milliseconds that represents the duration before end_time\
      \ to query. Defaults to 24 hours."
    required: false
    type: "integer"
    format: "int64"
  routeEndTimeParam:
    name: "end_time"
    in: "query"
    description: "Time in unix milliseconds that represents the oldest routes to return.\
      \ Used in combination with duration. Defaults to now."
    required: false
    type: "integer"
    format: "int64"
  routeHistoryEndTimeParam:
    name: "end_time"
    in: "query"
    description: "Timestamp representing the end of the period to fetch, inclusive.\
      \ Used in combination with start_time. Defaults to nowMs."
    required: false
    type: "integer"
    format: "int64"
  routeHistoryStartTimeParam:
    name: "start_time"
    in: "query"
    description: "Timestamp representing the start of the period to fetch, inclusive.\
      \ Used in combination with end_time. Defaults to 0."
    required: false
    type: "integer"
    format: "int64"
  routeUpdateParam:
    in: "body"
    name: "updateDispatchRouteParams"
    required: true
    schema:
      $ref: "#/definitions/DispatchRoute"
  safetyScoreEndMsParam:
    name: "endMs"
    in: "query"
    description: "Timestamp in milliseconds representing the end of the period to\
      \ fetch, inclusive. Used in combination with startMs."
    required: true
    type: "integer"
    format: "int64"
  safetyScoreStartMsParam:
    name: "startMs"
    in: "query"
    description: "Timestamp in milliseconds representing the start of the period to\
      \ fetch, inclusive. Used in combination with endMs."
    required: true
    type: "integer"
    format: "int64"
  sensorParam:
    in: "body"
    name: "sensorParam"
    description: "Group ID and list of sensor IDs to query."
    required: true
    schema:
      $ref: "#/definitions/sensorParam"
  tagCreateParam:
    in: "body"
    name: "tagCreateParams"
    required: true
    schema:
      $ref: "#/definitions/TagCreate"
  tagModifyParam:
    in: "body"
    name: "tagModifyParams"
    required: true
    schema:
      $ref: "#/definitions/TagModify"
  tagPathParam:
    name: "tag_id"
    in: "path"
    description: "ID of the tag."
    required: true
    type: "integer"
    format: "int64"
  tagUpdateParam:
    in: "body"
    name: "updateTagParams"
    required: true
    schema:
      $ref: "#/definitions/TagUpdate"
  vehicleIdOrExternalIdParam:
    name: "vehicle_id_or_external_id"
    in: "path"
    description: "ID of the vehicle.  This must be either the numeric ID generated\
      \ by Samsara or the external ID of the vehicle.  External IDs are customer specified\
      \ key-value pairs."
    required: true
    type: "string"
