# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # IndustrialController
  class IndustrialController < BaseController
    @instance = IndustrialController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Fetch datapoints from a given data input.
    # @param [String] access_token Required parameter: Samsara API access
    # token.
    # @param [Long] data_input_id Required parameter: ID of the data input
    # @param [Long] start_ms Optional parameter: Timestamp in unix milliseconds
    # representing the start of the period to fetch, inclusive. Used in
    # combination with endMs. defaults to nowMs.
    # @param [Long] end_ms Optional parameter: Timestamp in unix milliseconds
    # representing the end of the period to fetch, inclusive. Used in
    # combination with startMs. Defaults to nowMs.
    # @return DataInputHistoryResponse response from the API call
    def get_data_input(access_token,
                       data_input_id,
                       start_ms = nil,
                       end_ms = nil)
      # Prepare query url.
      _path_url = '/industrial/data/{data_input_id}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'data_input_id' => data_input_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'access_token' => access_token,
          'startMs' => start_ms,
          'endMs' => end_ms
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'Unexpected error.',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      DataInputHistoryResponse.from_hash(decoded)
    end

    # Fetch all of the data inputs for a group.
    # @param [String] access_token Required parameter: Samsara API access
    # token.
    # @param [Long] group_id Optional parameter: Optional group ID if the
    # organization has multiple groups (uncommon).
    # @param [Long] start_ms Optional parameter: Timestamp in unix milliseconds
    # representing the start of the period to fetch, inclusive. Used in
    # combination with endMs. defaults to nowMs.
    # @param [Long] end_ms Optional parameter: Timestamp in unix milliseconds
    # representing the end of the period to fetch, inclusive. Used in
    # combination with startMs. Defaults to nowMs.
    # @return GetAllDataInputsResponse response from the API call
    def get_all_data_inputs(access_token,
                            group_id = nil,
                            start_ms = nil,
                            end_ms = nil)
      # Prepare query url.
      _path_url = '/industrial/data'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'access_token' => access_token,
          'group_id' => group_id,
          'startMs' => start_ms,
          'endMs' => end_ms
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'Unexpected error.',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetAllDataInputsResponse.from_hash(decoded)
    end

    # Get machine objects. This method returns a list of the machine objects in
    # the Samsara Cloud and information about them.
    # @param [String] access_token Required parameter: Samsara API access
    # token.
    # @param [GroupParam] group_param Required parameter: Group ID to query.
    # @return GetMachinesResponse response from the API call
    def create_get_machines(access_token,
                            group_param)
      # Prepare query url.
      _path_url = '/machines/list'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'access_token' => access_token
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: group_param.to_json
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'Unexpected error.',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetMachinesResponse.from_hash(decoded)
    end

    # Get historical data for machine objects. This method returns a set of
    # historical data for all machines in a group
    # @param [String] access_token Required parameter: Samsara API access
    # token.
    # @param [HistoryParam] history_param Required parameter: Group ID and time
    # range to query for events
    # @return MachineHistoryResponse response from the API call
    def create_get_machines_history(access_token,
                                    history_param)
      # Prepare query url.
      _path_url = '/machines/history'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'access_token' => access_token
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: history_param.to_json
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'Unexpected error.',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      MachineHistoryResponse.from_hash(decoded)
    end
  end
end
