# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # Basic information of an asset
  class Asset < BaseModel
    # Serial number of the host asset
    # @return [String]
    attr_accessor :asset_serial_number

    # The cable connected to the asset
    # @return [List of Cable]
    attr_accessor :cable

    # Engine hours
    # @return [Integer]
    attr_accessor :engine_hours

    # Asset ID
    # @return [Long]
    attr_accessor :id

    # Asset name
    # @return [String]
    attr_accessor :name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['asset_serial_number'] = 'assetSerialNumber'
      @_hash['cable'] = 'cable'
      @_hash['engine_hours'] = 'engineHours'
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash
    end

    def initialize(id = nil,
                   asset_serial_number = nil,
                   cable = nil,
                   engine_hours = nil,
                   name = nil)
      @asset_serial_number = asset_serial_number
      @cable = cable
      @engine_hours = engine_hours
      @id = id
      @name = name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      asset_serial_number = hash['assetSerialNumber']
      # Parameter is an array, so we need to iterate through it
      cable = nil
      unless hash['cable'].nil?
        cable = []
        hash['cable'].each do |structure|
          cable << (Cable.from_hash(structure) if structure)
        end
      end
      engine_hours = hash['engineHours']
      name = hash['name']

      # Create object from extracted values.
      Asset.new(id,
                asset_serial_number,
                cable,
                engine_hours,
                name)
    end
  end
end
