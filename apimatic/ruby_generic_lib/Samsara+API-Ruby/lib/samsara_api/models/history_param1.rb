# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # HistoryParam1 Model.
  class HistoryParam1 < BaseModel
    # End of the time range, specified in milliseconds UNIX time.
    # @return [Long]
    attr_accessor :end_ms

    # End of the time range, specified in milliseconds UNIX time.
    # @return [FillMissingEnum]
    attr_accessor :fill_missing

    # Group ID to query.
    # @return [Long]
    attr_accessor :group_id

    # Group ID to query.
    # @return [List of Series1]
    attr_accessor :series

    # Beginning of the time range, specified in milliseconds UNIX time.
    # @return [Long]
    attr_accessor :start_ms

    # Time resolution for which data should be returned, in milliseconds.
    # Specifying 3600000 will return data at hour intervals.
    # @return [Integer]
    attr_accessor :step_ms

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['end_ms'] = 'endMs'
      @_hash['fill_missing'] = 'fillMissing'
      @_hash['group_id'] = 'groupId'
      @_hash['series'] = 'series'
      @_hash['start_ms'] = 'startMs'
      @_hash['step_ms'] = 'stepMs'
      @_hash
    end

    def initialize(end_ms = nil,
                   group_id = nil,
                   series = nil,
                   start_ms = nil,
                   step_ms = nil,
                   fill_missing = FillMissingEnum::WITHNULL)
      @end_ms = end_ms
      @fill_missing = fill_missing
      @group_id = group_id
      @series = series
      @start_ms = start_ms
      @step_ms = step_ms
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      end_ms = hash['endMs']
      group_id = hash['groupId']
      # Parameter is an array, so we need to iterate through it
      series = nil
      unless hash['series'].nil?
        series = []
        hash['series'].each do |structure|
          series << (Series1.from_hash(structure) if structure)
        end
      end
      start_ms = hash['startMs']
      step_ms = hash['stepMs']
      fill_missing = hash['fillMissing'] ||= FillMissingEnum::WITHNULL

      # Create object from extracted values.
      HistoryParam1.new(end_ms,
                        group_id,
                        series,
                        start_ms,
                        step_ms,
                        fill_missing)
    end
  end
end
