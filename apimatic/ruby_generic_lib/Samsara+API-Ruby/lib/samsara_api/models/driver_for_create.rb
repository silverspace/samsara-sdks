# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # DriverForCreate Model.
  class DriverForCreate < BaseModel
    # Driver's password for the driver app.
    # @return [String]
    attr_accessor :password

    # A list of tag IDs.
    # @return [List of Long]
    attr_accessor :tag_ids

    # Flag indicating this driver may use Adverse Weather exemptions in ELD
    # logs.
    # @return [Boolean]
    attr_accessor :eld_adverse_weather_exemption_enabled

    # Flag indicating this driver may use Big Day excemptions in ELD logs.
    # @return [Boolean]
    attr_accessor :eld_big_day_exemption_enabled

    # 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate
    # noon-to-noon driving hours.
    # @return [Integer]
    attr_accessor :eld_day_start_hour

    # Flag indicating this driver is exempt from the Electronic Logging Mandate.
    # @return [Boolean]
    attr_accessor :eld_exempt

    # Reason that this driver is exempt from the Electronic Logging Mandate (see
    # eldExempt).
    # @return [String]
    attr_accessor :eld_exempt_reason

    # Flag indicating this driver may select the Personal Conveyance duty status
    # in ELD logs.
    # @return [Boolean]
    attr_accessor :eld_pc_enabled

    # Flag indicating this driver may select the Yard Move duty status in ELD
    # logs.
    # @return [Boolean]
    attr_accessor :eld_ym_enabled

    # Dictionary of external IDs (string key-value pairs)
    # @return [Array<String, String>]
    attr_accessor :external_ids

    # ID of the group if the organization has multiple groups (uncommon).
    # @return [Long]
    attr_accessor :group_id

    # Driver's state issued license number.
    # @return [String]
    attr_accessor :license_number

    # Abbreviation of state that issued driver's license.
    # @return [String]
    attr_accessor :license_state

    # Driver's name.
    # @return [String]
    attr_accessor :name

    # Notes about the driver.
    # @return [String]
    attr_accessor :notes

    # Driver's phone number. Please include only digits, ex. 4157771234
    # @return [String]
    attr_accessor :phone

    # Driver's login username into the driver app.
    # @return [String]
    attr_accessor :username

    # ID of the vehicle assigned to the driver for static vehicle assignments.
    # (uncommon).
    # @return [Long]
    attr_accessor :vehicle_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['password'] = 'password'
      @_hash['tag_ids'] = 'tagIds'
      @_hash['eld_adverse_weather_exemption_enabled'] =
        'eldAdverseWeatherExemptionEnabled'
      @_hash['eld_big_day_exemption_enabled'] = 'eldBigDayExemptionEnabled'
      @_hash['eld_day_start_hour'] = 'eldDayStartHour'
      @_hash['eld_exempt'] = 'eldExempt'
      @_hash['eld_exempt_reason'] = 'eldExemptReason'
      @_hash['eld_pc_enabled'] = 'eldPcEnabled'
      @_hash['eld_ym_enabled'] = 'eldYmEnabled'
      @_hash['external_ids'] = 'externalIds'
      @_hash['group_id'] = 'groupId'
      @_hash['license_number'] = 'licenseNumber'
      @_hash['license_state'] = 'licenseState'
      @_hash['name'] = 'name'
      @_hash['notes'] = 'notes'
      @_hash['phone'] = 'phone'
      @_hash['username'] = 'username'
      @_hash['vehicle_id'] = 'vehicleId'
      @_hash
    end

    def initialize(password = nil,
                   name = nil,
                   tag_ids = nil,
                   eld_adverse_weather_exemption_enabled = nil,
                   eld_big_day_exemption_enabled = nil,
                   eld_day_start_hour = nil,
                   eld_exempt = nil,
                   eld_exempt_reason = nil,
                   eld_pc_enabled = false,
                   eld_ym_enabled = false,
                   external_ids = nil,
                   group_id = nil,
                   license_number = nil,
                   license_state = nil,
                   notes = nil,
                   phone = nil,
                   username = nil,
                   vehicle_id = nil)
      @password = password
      @tag_ids = tag_ids
      @eld_adverse_weather_exemption_enabled =
        eld_adverse_weather_exemption_enabled
      @eld_big_day_exemption_enabled = eld_big_day_exemption_enabled
      @eld_day_start_hour = eld_day_start_hour
      @eld_exempt = eld_exempt
      @eld_exempt_reason = eld_exempt_reason
      @eld_pc_enabled = eld_pc_enabled
      @eld_ym_enabled = eld_ym_enabled
      @external_ids = external_ids
      @group_id = group_id
      @license_number = license_number
      @license_state = license_state
      @name = name
      @notes = notes
      @phone = phone
      @username = username
      @vehicle_id = vehicle_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      password = hash['password']
      name = hash['name']
      tag_ids = hash['tagIds']
      eld_adverse_weather_exemption_enabled =
        hash['eldAdverseWeatherExemptionEnabled']
      eld_big_day_exemption_enabled = hash['eldBigDayExemptionEnabled']
      eld_day_start_hour = hash['eldDayStartHour']
      eld_exempt = hash['eldExempt']
      eld_exempt_reason = hash['eldExemptReason']
      eld_pc_enabled = hash['eldPcEnabled'] ||= false
      eld_ym_enabled = hash['eldYmEnabled'] ||= false
      external_ids = hash['externalIds']
      group_id = hash['groupId']
      license_number = hash['licenseNumber']
      license_state = hash['licenseState']
      notes = hash['notes']
      phone = hash['phone']
      username = hash['username']
      vehicle_id = hash['vehicleId']

      # Create object from extracted values.
      DriverForCreate.new(password,
                          name,
                          tag_ids,
                          eld_adverse_weather_exemption_enabled,
                          eld_big_day_exemption_enabled,
                          eld_day_start_hour,
                          eld_exempt,
                          eld_exempt_reason,
                          eld_pc_enabled,
                          eld_ym_enabled,
                          external_ids,
                          group_id,
                          license_number,
                          license_state,
                          notes,
                          phone,
                          username,
                          vehicle_id)
    end
  end
end
