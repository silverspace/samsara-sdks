# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # VehicleStat Model.
  class VehicleStat < BaseModel
    # A list of aux input values over a timerange.
    # @return [AuxInputSeries]
    attr_accessor :aux_input1

    # A list of aux input values over a timerange.
    # @return [AuxInputSeries]
    attr_accessor :aux_input2

    # A list of aux input values over a timerange.
    # @return [List of EngineState]
    attr_accessor :engine_state

    # ID of the vehicle.
    # @return [Long]
    attr_accessor :vehicle_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['aux_input1'] = 'auxInput1'
      @_hash['aux_input2'] = 'auxInput2'
      @_hash['engine_state'] = 'engineState'
      @_hash['vehicle_id'] = 'vehicleId'
      @_hash
    end

    def initialize(vehicle_id = nil,
                   aux_input1 = nil,
                   aux_input2 = nil,
                   engine_state = nil)
      @aux_input1 = aux_input1
      @aux_input2 = aux_input2
      @engine_state = engine_state
      @vehicle_id = vehicle_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      vehicle_id = hash['vehicleId']
      aux_input1 = AuxInputSeries.from_hash(hash['auxInput1']) if
        hash['auxInput1']
      aux_input2 = AuxInputSeries.from_hash(hash['auxInput2']) if
        hash['auxInput2']
      # Parameter is an array, so we need to iterate through it
      engine_state = nil
      unless hash['engineState'].nil?
        engine_state = []
        hash['engineState'].each do |structure|
          engine_state << (EngineState.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      VehicleStat.new(vehicle_id,
                      aux_input1,
                      aux_input2,
                      engine_state)
    end
  end
end
