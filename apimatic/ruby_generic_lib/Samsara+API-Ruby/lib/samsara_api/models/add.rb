# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # Specify devices, etc. that should be added to the tag.
  class Add < BaseModel
    # The assets to be added to this tag.
    # @return [List of TaggedAssetBase]
    attr_accessor :assets

    # The drivers to be added to this tag.
    # @return [List of TaggedDriverBase]
    attr_accessor :drivers

    # The machines to be added to this tag.
    # @return [List of TaggedMachineBase]
    attr_accessor :machines

    # The sensors to be added to this tag.
    # @return [List of TaggedSensorBase]
    attr_accessor :sensors

    # The vehicles to be added to this tag.
    # @return [List of TaggedVehicleBase]
    attr_accessor :vehicles

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['assets'] = 'assets'
      @_hash['drivers'] = 'drivers'
      @_hash['machines'] = 'machines'
      @_hash['sensors'] = 'sensors'
      @_hash['vehicles'] = 'vehicles'
      @_hash
    end

    def initialize(assets = nil,
                   drivers = nil,
                   machines = nil,
                   sensors = nil,
                   vehicles = nil)
      @assets = assets
      @drivers = drivers
      @machines = machines
      @sensors = sensors
      @vehicles = vehicles
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      assets = nil
      unless hash['assets'].nil?
        assets = []
        hash['assets'].each do |structure|
          assets << (TaggedAssetBase.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      drivers = nil
      unless hash['drivers'].nil?
        drivers = []
        hash['drivers'].each do |structure|
          drivers << (TaggedDriverBase.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      machines = nil
      unless hash['machines'].nil?
        machines = []
        hash['machines'].each do |structure|
          machines << (TaggedMachineBase.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      sensors = nil
      unless hash['sensors'].nil?
        sensors = []
        hash['sensors'].each do |structure|
          sensors << (TaggedSensorBase.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      vehicles = nil
      unless hash['vehicles'].nil?
        vehicles = []
        hash['vehicles'].each do |structure|
          vehicles << (TaggedVehicleBase.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Add.new(assets,
              drivers,
              machines,
              sensors,
              vehicles)
    end
  end
end
