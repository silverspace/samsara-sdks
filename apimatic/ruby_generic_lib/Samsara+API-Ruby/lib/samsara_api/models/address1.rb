# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # Address1 Model.
  class Address1 < BaseModel
    # A list of IDs for contact book entries.
    # @return [List of Long]
    attr_accessor :contact_ids

    # The full address associated with this address/geofence, as it might be
    # recognized by maps.google.com
    # @return [String]
    attr_accessor :formatted_address

    # The geofence that defines this address and its bounds. This can either be
    # a circle, or a polygon - only one key should be provided, depending on the
    # geofence type.
    # @return [AddressGeofence]
    attr_accessor :geofence

    # The name of this address/geofence
    # @return [String]
    attr_accessor :name

    # Notes associated with an address.
    # @return [String]
    attr_accessor :notes

    # A list of tag IDs.
    # @return [List of Long]
    attr_accessor :tag_ids

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['contact_ids'] = 'contactIds'
      @_hash['formatted_address'] = 'formattedAddress'
      @_hash['geofence'] = 'geofence'
      @_hash['name'] = 'name'
      @_hash['notes'] = 'notes'
      @_hash['tag_ids'] = 'tagIds'
      @_hash
    end

    def initialize(contact_ids = nil,
                   formatted_address = nil,
                   geofence = nil,
                   name = nil,
                   notes = nil,
                   tag_ids = nil)
      @contact_ids = contact_ids
      @formatted_address = formatted_address
      @geofence = geofence
      @name = name
      @notes = notes
      @tag_ids = tag_ids
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      contact_ids = hash['contactIds']
      formatted_address = hash['formattedAddress']
      geofence = AddressGeofence.from_hash(hash['geofence']) if
        hash['geofence']
      name = hash['name']
      notes = hash['notes']
      tag_ids = hash['tagIds']

      # Create object from extracted values.
      Address1.new(contact_ids,
                   formatted_address,
                   geofence,
                   name,
                   notes,
                   tag_ids)
    end
  end
end
