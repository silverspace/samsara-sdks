# samsara_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SamsaraApi
  # CreateDvirParam Model.
  class CreateDvirParam < BaseModel
    # Only type 'mechanic' is currently accepted.
    # @return [String]
    attr_accessor :inspection_type

    # Any notes from the mechanic.
    # @return [String]
    attr_accessor :mechanic_notes

    # The current odometer of the vehicle.
    # @return [Integer]
    attr_accessor :odometer_miles

    # Whether any previous defects were corrected. If this vehicle or trailer
    # was previously marked unsafe, and this DVIR marks it as safe, either
    # previousDefectsCorrected or previousDefectsIgnored must be true.
    # @return [Boolean]
    attr_accessor :previous_defects_corrected

    # Whether any previous defects were ignored. If this vehicle or trailer was
    # previously marked unsafe, and this DVIR marks it as safe, either
    # previousDefectsCorrected or previousDefectsIgnored must be true.
    # @return [Boolean]
    attr_accessor :previous_defects_ignored

    # Whether or not this vehicle or trailer is safe to drive.
    # @return [SafeEnum]
    attr_accessor :safe

    # Id of trailer being inspected. Either vehicleId or trailerId must be
    # provided.
    # @return [Integer]
    attr_accessor :trailer_id

    # The Samsara login email for the person creating the DVIR. The email must
    # correspond to a Samsara user's email.
    # @return [String]
    attr_accessor :user_email

    # Id of vehicle being inspected. Either vehicleId or trailerId must be
    # provided.
    # @return [Integer]
    attr_accessor :vehicle_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['inspection_type'] = 'inspectionType'
      @_hash['mechanic_notes'] = 'mechanicNotes'
      @_hash['odometer_miles'] = 'odometerMiles'
      @_hash['previous_defects_corrected'] = 'previousDefectsCorrected'
      @_hash['previous_defects_ignored'] = 'previousDefectsIgnored'
      @_hash['safe'] = 'safe'
      @_hash['trailer_id'] = 'trailerId'
      @_hash['user_email'] = 'userEmail'
      @_hash['vehicle_id'] = 'vehicleId'
      @_hash
    end

    def initialize(inspection_type = 'mechanic',
                   safe = nil,
                   user_email = nil,
                   mechanic_notes = nil,
                   odometer_miles = nil,
                   previous_defects_corrected = nil,
                   previous_defects_ignored = nil,
                   trailer_id = nil,
                   vehicle_id = nil)
      @inspection_type = inspection_type
      @mechanic_notes = mechanic_notes
      @odometer_miles = odometer_miles
      @previous_defects_corrected = previous_defects_corrected
      @previous_defects_ignored = previous_defects_ignored
      @safe = safe
      @trailer_id = trailer_id
      @user_email = user_email
      @vehicle_id = vehicle_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      inspection_type = hash['inspectionType'] ||= 'mechanic'
      safe = hash['safe']
      user_email = hash['userEmail']
      mechanic_notes = hash['mechanicNotes']
      odometer_miles = hash['odometerMiles']
      previous_defects_corrected = hash['previousDefectsCorrected']
      previous_defects_ignored = hash['previousDefectsIgnored']
      trailer_id = hash['trailerId']
      vehicle_id = hash['vehicleId']

      # Create object from extracted values.
      CreateDvirParam.new(inspection_type,
                          safe,
                          user_email,
                          mechanic_notes,
                          odometer_miles,
                          previous_defects_corrected,
                          previous_defects_ignored,
                          trailer_id,
                          vehicle_id)
    end
  end
end
