/*
 * SamsaraAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SamsaraAPI.PCL;
using SamsaraAPI.PCL.Utilities;

namespace SamsaraAPI.PCL.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum NameEnum
    {
        ENUM_EMERGENCY_LIGHTS, //TODO: Write general description for this method
        ENUM_EMERGENCY_ALARM, //TODO: Write general description for this method
        ENUM_STOP_PADDLE, //TODO: Write general description for this method
        ENUM_POWER_TAKEOFF, //TODO: Write general description for this method
        PLOW, //TODO: Write general description for this method
        SWEEPER, //TODO: Write general description for this method
        SALTER, //TODO: Write general description for this method
        BOOM, //TODO: Write general description for this method
    }

    /// <summary>
    /// Helper for the enum type NameEnum
    /// </summary>
    public static class NameEnumHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "Emergency Lights", "Emergency Alarm", "Stop Paddle", "Power Take-Off", "Plow", "Sweeper", "Salter", "Boom" };

        /// <summary>
        /// Converts a NameEnum value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The NameEnum value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(NameEnum enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case NameEnum.ENUM_EMERGENCY_LIGHTS:
                case NameEnum.ENUM_EMERGENCY_ALARM:
                case NameEnum.ENUM_STOP_PADDLE:
                case NameEnum.ENUM_POWER_TAKEOFF:
                case NameEnum.PLOW:
                case NameEnum.SWEEPER:
                case NameEnum.SALTER:
                case NameEnum.BOOM:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of NameEnum values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of NameEnum values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<NameEnum> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into NameEnum value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed NameEnum value</returns>
        public static NameEnum ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type NameEnum", value));

            return (NameEnum) index;
        }
    }
} 