/*
 * SamsaraAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using SamsaraAPI.PCL;
using SamsaraAPI.PCL.Utilities;
using SamsaraAPI.PCL.Http.Request;
using SamsaraAPI.PCL.Http.Response;
using SamsaraAPI.PCL.Http.Client;
using SamsaraAPI.PCL.Exceptions;

namespace SamsaraAPI.PCL.Controllers
{
    public partial class IndustrialController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static IndustrialController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static IndustrialController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new IndustrialController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Fetch datapoints from a given data input.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="dataInputId">Required parameter: ID of the data input</param>
        /// <param name="startMs">Optional parameter: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.</param>
        /// <param name="endMs">Optional parameter: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.</param>
        /// <return>Returns the Models.DataInputHistoryResponse response from the API call</return>
        public Models.DataInputHistoryResponse GetDataInput(
                string accessToken,
                long dataInputId,
                long? startMs = null,
                long? endMs = null)
        {
            Task<Models.DataInputHistoryResponse> t = GetDataInputAsync(accessToken, dataInputId, startMs, endMs);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Fetch datapoints from a given data input.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="dataInputId">Required parameter: ID of the data input</param>
        /// <param name="startMs">Optional parameter: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.</param>
        /// <param name="endMs">Optional parameter: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.</param>
        /// <return>Returns the Models.DataInputHistoryResponse response from the API call</return>
        public async Task<Models.DataInputHistoryResponse> GetDataInputAsync(
                string accessToken,
                long dataInputId,
                long? startMs = null,
                long? endMs = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/industrial/data/{data_input_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "data_input_id", dataInputId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "startMs", startMs },
                { "endMs", endMs },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DataInputHistoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Fetch all of the data inputs for a group.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="groupId">Optional parameter: Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <param name="startMs">Optional parameter: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.</param>
        /// <param name="endMs">Optional parameter: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.</param>
        /// <return>Returns the Models.GetAllDataInputsResponse response from the API call</return>
        public Models.GetAllDataInputsResponse GetAllDataInputs(
                string accessToken,
                long? groupId = null,
                long? startMs = null,
                long? endMs = null)
        {
            Task<Models.GetAllDataInputsResponse> t = GetAllDataInputsAsync(accessToken, groupId, startMs, endMs);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Fetch all of the data inputs for a group.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="groupId">Optional parameter: Optional group ID if the organization has multiple groups (uncommon).</param>
        /// <param name="startMs">Optional parameter: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.</param>
        /// <param name="endMs">Optional parameter: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.</param>
        /// <return>Returns the Models.GetAllDataInputsResponse response from the API call</return>
        public async Task<Models.GetAllDataInputsResponse> GetAllDataInputsAsync(
                string accessToken,
                long? groupId = null,
                long? startMs = null,
                long? endMs = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/industrial/data");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "group_id", groupId },
                { "startMs", startMs },
                { "endMs", endMs },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.GetAllDataInputsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="groupParam">Required parameter: Group ID to query.</param>
        /// <return>Returns the Models.GetMachinesResponse response from the API call</return>
        public Models.GetMachinesResponse CreateGetMachines(string accessToken, Models.GroupParam groupParam)
        {
            Task<Models.GetMachinesResponse> t = CreateGetMachinesAsync(accessToken, groupParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="groupParam">Required parameter: Group ID to query.</param>
        /// <return>Returns the Models.GetMachinesResponse response from the API call</return>
        public async Task<Models.GetMachinesResponse> CreateGetMachinesAsync(string accessToken, Models.GroupParam groupParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/machines/list");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(groupParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.GetMachinesResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get historical data for machine objects. This method returns a set of historical data for all machines in a group
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="historyParam">Required parameter: Group ID and time range to query for events</param>
        /// <return>Returns the Models.MachineHistoryResponse response from the API call</return>
        public Models.MachineHistoryResponse CreateGetMachinesHistory(string accessToken, Models.HistoryParam historyParam)
        {
            Task<Models.MachineHistoryResponse> t = CreateGetMachinesHistoryAsync(accessToken, historyParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get historical data for machine objects. This method returns a set of historical data for all machines in a group
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="historyParam">Required parameter: Group ID and time range to query for events</param>
        /// <return>Returns the Models.MachineHistoryResponse response from the API call</return>
        public async Task<Models.MachineHistoryResponse> CreateGetMachinesHistoryAsync(string accessToken, Models.HistoryParam historyParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/machines/history");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(historyParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MachineHistoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 