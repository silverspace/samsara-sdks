/*
 * SamsaraAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using SamsaraAPI.PCL;
using SamsaraAPI.PCL.Utilities;
using SamsaraAPI.PCL.Http.Request;
using SamsaraAPI.PCL.Http.Response;
using SamsaraAPI.PCL.Http.Client;
using SamsaraAPI.PCL.Exceptions;

namespace SamsaraAPI.PCL.Controllers
{
    public partial class SensorsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SensorsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SensorsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SensorsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.TemperatureResponse response from the API call</return>
        public Models.TemperatureResponse CreateGetSensorsTemperature(string accessToken, Models.SensorParam sensorParam)
        {
            Task<Models.TemperatureResponse> t = CreateGetSensorsTemperatureAsync(accessToken, sensorParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.TemperatureResponse response from the API call</return>
        public async Task<Models.TemperatureResponse> CreateGetSensorsTemperatureAsync(string accessToken, Models.SensorParam sensorParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sensors/temperature");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(sensorParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.TemperatureResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="groupParam">Required parameter: Group ID to query.</param>
        /// <return>Returns the Models.GetSensorsResponse response from the API call</return>
        public Models.GetSensorsResponse CreateGetSensors(string accessToken, Models.GroupParam groupParam)
        {
            Task<Models.GetSensorsResponse> t = CreateGetSensorsAsync(accessToken, groupParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="groupParam">Required parameter: Group ID to query.</param>
        /// <return>Returns the Models.GetSensorsResponse response from the API call</return>
        public async Task<Models.GetSensorsResponse> CreateGetSensorsAsync(string accessToken, Models.GroupParam groupParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sensors/list");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(groupParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.GetSensorsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.HumidityResponse response from the API call</return>
        public Models.HumidityResponse CreateGetSensorsHumidity(string accessToken, Models.SensorParam sensorParam)
        {
            Task<Models.HumidityResponse> t = CreateGetSensorsHumidityAsync(accessToken, sensorParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.HumidityResponse response from the API call</return>
        public async Task<Models.HumidityResponse> CreateGetSensorsHumidityAsync(string accessToken, Models.SensorParam sensorParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sensors/humidity");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(sensorParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.HumidityResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="historyParam">Required parameter: Group ID, time range and resolution, and list of sensor ID, field pairs to query.</param>
        /// <return>Returns the Models.SensorHistoryResponse response from the API call</return>
        public Models.SensorHistoryResponse CreateGetSensorsHistory(string accessToken, Models.HistoryParam1 historyParam)
        {
            Task<Models.SensorHistoryResponse> t = CreateGetSensorsHistoryAsync(accessToken, historyParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="historyParam">Required parameter: Group ID, time range and resolution, and list of sensor ID, field pairs to query.</param>
        /// <return>Returns the Models.SensorHistoryResponse response from the API call</return>
        public async Task<Models.SensorHistoryResponse> CreateGetSensorsHistoryAsync(string accessToken, Models.HistoryParam1 historyParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sensors/history");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(historyParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SensorHistoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get door monitor status (closed / open) for requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.DoorResponse response from the API call</return>
        public Models.DoorResponse CreateGetSensorsDoor(string accessToken, Models.SensorParam sensorParam)
        {
            Task<Models.DoorResponse> t = CreateGetSensorsDoorAsync(accessToken, sensorParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get door monitor status (closed / open) for requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.DoorResponse response from the API call</return>
        public async Task<Models.DoorResponse> CreateGetSensorsDoorAsync(string accessToken, Models.SensorParam sensorParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sensors/door");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(sensorParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DoorResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get cargo monitor status (empty / full) for requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.CargoResponse response from the API call</return>
        public Models.CargoResponse CreateGetSensorsCargo(string accessToken, Models.SensorParam sensorParam)
        {
            Task<Models.CargoResponse> t = CreateGetSensorsCargoAsync(accessToken, sensorParam);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get cargo monitor status (empty / full) for requested sensors.
        /// </summary>
        /// <param name="accessToken">Required parameter: Samsara API access token.</param>
        /// <param name="sensorParam">Required parameter: Group ID and list of sensor IDs to query.</param>
        /// <return>Returns the Models.CargoResponse response from the API call</return>
        public async Task<Models.CargoResponse> CreateGetSensorsCargoAsync(string accessToken, Models.SensorParam sensorParam)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sensors/cargo");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "access_token", Configuration.AccessToken }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(sensorParam);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unexpected error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CargoResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 