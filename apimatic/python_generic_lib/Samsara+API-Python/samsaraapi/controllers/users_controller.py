# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from samsaraapi.api_helper import APIHelper
from samsaraapi.configuration import Configuration
from samsaraapi.controllers.base_controller import BaseController
from samsaraapi.http.auth.custom_query_auth import CustomQueryAuth
from samsaraapi.models.user import User
from samsaraapi.models.user_role import UserRole
from samsaraapi.exceptions.api_exception import APIException

class UsersController(BaseController):

    """A Controller to access Endpoints in the samsaraapi API."""


    def delete_user_by_id(self,
                          access_token,
                          user_id):
        """Does a DELETE request to /users/{userId}.

        Remove a user from the organization.

        Args:
            access_token (string): Samsara API access token.
            user_id (long|int): ID of the user.

        Returns:
            void: Response from the API. The user was successfully removed.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'userId': user_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.delete(_query_url)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def get_user_by_id(self,
                       access_token,
                       user_id):
        """Does a GET request to /users/{userId}.

        Get a user.

        Args:
            access_token (string): Samsara API access token.
            user_id (long|int): ID of the user.

        Returns:
            User: Response from the API. User record.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'userId': user_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, User.from_dictionary)

    def list_users(self,
                   access_token):
        """Does a GET request to /users.

        List all users in the organization.

        Args:
            access_token (string): Samsara API access token.

        Returns:
            list of User: Response from the API. List of users.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, User.from_dictionary)

    def list_user_roles(self,
                        access_token):
        """Does a GET request to /user_roles.

        Get all roles in the organization.

        Args:
            access_token (string): Samsara API access token.

        Returns:
            list of UserRole: Response from the API. List of user roles.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/user_roles'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, UserRole.from_dictionary)
