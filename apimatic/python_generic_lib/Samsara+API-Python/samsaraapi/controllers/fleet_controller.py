# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from samsaraapi.api_helper import APIHelper
from samsaraapi.configuration import Configuration
from samsaraapi.controllers.base_controller import BaseController
from samsaraapi.http.auth.custom_query_auth import CustomQueryAuth
from samsaraapi.models.document_type import DocumentType
from samsaraapi.models.fleet_vehicle_location import FleetVehicleLocation
from samsaraapi.models.dispatch_route import DispatchRoute
from samsaraapi.models.fleet_vehicle_response import FleetVehicleResponse
from samsaraapi.models.vehicle_safety_score_response import VehicleSafetyScoreResponse
from samsaraapi.models.vehicle_harsh_event_response import VehicleHarshEventResponse
from samsaraapi.models.fleet_vehicles_location import FleetVehiclesLocation
from samsaraapi.models.dvir_list_response import DvirListResponse
from samsaraapi.models.list_fleet_response import ListFleetResponse
from samsaraapi.models.driver_daily_log_response import DriverDailyLogResponse
from samsaraapi.models.document import Document
from samsaraapi.models.trip_response import TripResponse
from samsaraapi.models.get_fleet_maintenance_list_response import GetFleetMaintenanceListResponse
from samsaraapi.models.dvir_base import DvirBase
from samsaraapi.models.driver_safety_score_response import DriverSafetyScoreResponse
from samsaraapi.models.get_fleet_locations_response import GetFleetLocationsResponse
from samsaraapi.models.hos_logs_summary_response import HosLogsSummaryResponse
from samsaraapi.models.hos_logs_response import HosLogsResponse
from samsaraapi.models.hos_authentication_logs_response import HosAuthenticationLogsResponse
from samsaraapi.models.drivers_summary_response import DriversSummaryResponse
from samsaraapi.models.get_vehicle_stats_response import GetVehicleStatsResponse
from samsaraapi.models.driver import Driver
from samsaraapi.models.dispatch_route_history import DispatchRouteHistory
from samsaraapi.models.all_route_job_updates import AllRouteJobUpdates
from samsaraapi.models.asset_reefer_response import AssetReeferResponse
from samsaraapi.models.asset_location_response import AssetLocationResponse
from samsaraapi.models.drivers_response import DriversResponse
from samsaraapi.models.get_all_asset_current_locations_response import GetAllAssetCurrentLocationsResponse
from samsaraapi.models.get_all_assets_response import GetAllAssetsResponse
from samsaraapi.models.contact import Contact
from samsaraapi.models.address import Address
from samsaraapi.exceptions.api_exception import APIException

class FleetController(BaseController):

    """A Controller to access Endpoints in the samsaraapi API."""


    def get_driver_document_types_by_org_id(self):
        """Does a GET request to /fleet/drivers/document_types.

        Fetch all of the document types.

        Returns:
            list of DocumentType: Response from the API. Returns all of the
                document types.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/document_types'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DocumentType.from_dictionary)

    def get_vehicle_locations(self,
                              access_token,
                              vehicle_id,
                              start_ms,
                              end_ms):
        """Does a GET request to /fleet/vehicles/{vehicle_id}/locations.

        Fetch locations for a given vehicle between a start/end time. The
        maximum query duration is one hour.

        Args:
            access_token (string): Samsara API access token.
            vehicle_id (long|int): ID of the vehicle with the associated
                routes.
            start_ms (long|int): Time in Unix epoch milliseconds for the start
                of the query (cannot exceed 1 hour)
            end_ms (long|int): Time in Unix epoch milliseconds for the end of
                the query (cannot exceed 1 hour)

        Returns:
            list of FleetVehicleLocation: Response from the API. Returns
                locations for a given vehicle between a start/end time, with a
                maximum query duration of one hour.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicle_id}/locations'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicle_id': vehicle_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, FleetVehicleLocation.from_dictionary)

    def create_vehicle_dispatch_route(self,
                                      create_dispatch_route_params,
                                      access_token,
                                      vehicle_id):
        """Does a POST request to /fleet/vehicles/{vehicle_id}/dispatch/routes.

        Create a new dispatch route for the vehicle with vehicle_id.

        Args:
            create_dispatch_route_params (DispatchRouteCreate): TODO: type
                description here. Example: 
            access_token (string): Samsara API access token.
            vehicle_id (long|int): ID of the vehicle with the associated
                routes.

        Returns:
            DispatchRoute: Response from the API. Created route object
                including the new route ID.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicle_id}/dispatch/routes'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicle_id': vehicle_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(create_dispatch_route_params))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def get_dispatch_routes_by_vehicle_id(self,
                                          access_token,
                                          vehicle_id,
                                          end_time=None,
                                          duration=None):
        """Does a GET request to /fleet/vehicles/{vehicle_id}/dispatch/routes.

        Fetch all of the dispatch routes for a given vehicle.

        Args:
            access_token (string): Samsara API access token.
            vehicle_id (long|int): ID of the vehicle with the associated
                routes.
            end_time (long|int, optional): Time in unix milliseconds that
                represents the oldest routes to return. Used in combination
                with duration. Defaults to now.
            duration (long|int, optional): Time in milliseconds that
                represents the duration before end_time to query. Defaults to
                24 hours.

        Returns:
            list of DispatchRoute: Response from the API. Returns all of the
                dispatch routes for the given vehicle_id.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicle_id}/dispatch/routes'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicle_id': vehicle_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'end_time': end_time,
            'duration': duration
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def patch_fleet_vehicle(self,
                            access_token,
                            vehicle_id_or_external_id,
                            data):
        """Does a PATCH request to /fleet/vehicles/{vehicle_id_or_external_id}.

        Updates the specified vehicle using JSON merge patch format. See IETF
        RFC 7396: https://tools.ietf.org/html/rfc7396.

        Args:
            access_token (string): Samsara API access token.
            vehicle_id_or_external_id (string): ID of the vehicle.  This must
                be either the numeric ID generated by Samsara or the external
                ID of the vehicle.  External IDs are customer specified
                key-value pairs.
            data (Data): TODO: type description here. Example: 

        Returns:
            FleetVehicleResponse: Response from the API. The updated vehicle.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicle_id_or_external_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicle_id_or_external_id': vehicle_id_or_external_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(data))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, FleetVehicleResponse.from_dictionary)

    def get_vehicle_safety_score(self,
                                 access_token,
                                 start_ms,
                                 end_ms,
                                 vehicle_id):
        """Does a GET request to /fleet/vehicles/{vehicleId}/safety/score.

        Fetch the safety score for the vehicle.

        Args:
            access_token (string): Samsara API access token.
            start_ms (long|int): Timestamp in milliseconds representing the
                start of the period to fetch, inclusive. Used in combination
                with endMs.
            end_ms (long|int): Timestamp in milliseconds representing the end
                of the period to fetch, inclusive. Used in combination with
                startMs.
            vehicle_id (long|int): ID of the vehicle

        Returns:
            VehicleSafetyScoreResponse: Response from the API. Safety score
                details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicleId}/safety/score'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicleId': vehicle_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, VehicleSafetyScoreResponse.from_dictionary)

    def get_vehicle_harsh_event(self,
                                access_token,
                                timestamp,
                                vehicle_id):
        """Does a GET request to /fleet/vehicles/{vehicleId}/safety/harsh_event.

        Fetch harsh event details for a vehicle.

        Args:
            access_token (string): Samsara API access token.
            timestamp (long|int): Timestamp in milliseconds representing the
                timestamp of a harsh event.
            vehicle_id (long|int): ID of the vehicle

        Returns:
            VehicleHarshEventResponse: Response from the API. Harsh event
                details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicleId}/safety/harsh_event'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicleId': vehicle_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'timestamp': timestamp
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, VehicleHarshEventResponse.from_dictionary)

    def get_vehicles_locations(self,
                               access_token,
                               start_ms,
                               end_ms):
        """Does a GET request to /fleet/vehicles/locations.

        Fetch locations for a given vehicle between a start/end time. The
        maximum query duration is 30 minutes.

        Args:
            access_token (string): Samsara API access token.
            start_ms (int): Time in Unix epoch milliseconds for the start of
                the query (cannot exceed 30 minutes)
            end_ms (int): Time in Unix epoch milliseconds for the end of the
                query (cannot exceed 30 minutes)

        Returns:
            list of FleetVehiclesLocation: Response from the API. Returns
                locations for a given vehicle between a start/end time, with a
                maximum query duration of 30 minutes.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/locations'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, FleetVehiclesLocation.from_dictionary)

    def get_dvirs(self,
                  access_token,
                  end_ms,
                  duration_ms,
                  group_id=None):
        """Does a GET request to /fleet/maintenance/dvirs.

        Get DVIRs for the org within provided time constraints

        Args:
            access_token (string): Samsara API access token.
            end_ms (int): time in millis until the last dvir log.
            duration_ms (int): time in millis which corresponds to the
                duration before the end_ms.
            group_id (int, optional): Group ID to query.

        Returns:
            DvirListResponse: Response from the API. DVIRs for the specified
                duration.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/maintenance/dvirs'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'end_ms': end_ms,
            'duration_ms': duration_ms,
            'group_id': group_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DvirListResponse.from_dictionary)

    def get_fleet_vehicle(self,
                          access_token,
                          vehicle_id_or_external_id):
        """Does a GET request to /fleet/vehicles/{vehicle_id_or_external_id}.

        Gets a specific vehicle.

        Args:
            access_token (string): Samsara API access token.
            vehicle_id_or_external_id (string): ID of the vehicle.  This must
                be either the numeric ID generated by Samsara or the external
                ID of the vehicle.  External IDs are customer specified
                key-value pairs.

        Returns:
            FleetVehicleResponse: Response from the API. The specified
                vehicle.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/{vehicle_id_or_external_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'vehicle_id_or_external_id': vehicle_id_or_external_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, FleetVehicleResponse.from_dictionary)

    def create_list_fleet(self,
                          access_token,
                          group_param,
                          starting_after=None,
                          ending_before=None,
                          limit=None):
        """Does a POST request to /fleet/list.

        Get list of the vehicles. This method returns a list of the vehicles
        in the Samsara Cloud and information about them.

        Args:
            access_token (string): Samsara API access token.
            group_param (GroupParam): Group ID to query.
            starting_after (string, optional): Pagination parameter indicating
                the cursor position to continue returning results after. Used
                in conjunction with the 'limit' parameter. Mutually exclusive
                with 'endingBefore' parameter.
            ending_before (string, optional): Pagination parameter indicating
                the cursor position to return results before. Used in
                conjunction with the 'limit' parameter. Mutually exclusive
                with 'startingAfter' parameter.
            limit (long|int, optional): Pagination parameter indicating the
                number of results to return in this request. Used in
                conjunction with either 'startingAfter' or 'endingBefore'.

        Returns:
            ListFleetResponse: Response from the API. List of vehicles and
                information about each.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/list'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startingAfter': starting_after,
            'endingBefore': ending_before,
            'limit': limit
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(group_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListFleetResponse.from_dictionary)

    def create_get_fleet_drivers_hos_daily_logs(self,
                                                access_token,
                                                driver_id,
                                                hos_logs_param):
        """Does a POST request to /fleet/drivers/{driver_id}/hos_daily_logs.

        Get summarized daily HOS charts for a specified driver.

        Args:
            access_token (string): Samsara API access token.
            driver_id (long|int): ID of the driver with HOS logs.
            hos_logs_param (HosLogsParam): TODO: type description here.
                Example: 

        Returns:
            DriverDailyLogResponse: Response from the API. Distance traveled
                and time active for each driver in the organization over the
                specified time period.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driver_id}/hos_daily_logs'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id': driver_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(hos_logs_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DriverDailyLogResponse.from_dictionary)

    def create_driver_document(self,
                               create_document_params,
                               access_token,
                               driver_id):
        """Does a POST request to /fleet/drivers/{driver_id}/documents.

        Create a driver document for the given driver.

        Args:
            create_document_params (DocumentCreate): To create a document for
                a given document type, the document type's uuid needs to be
                passed in to documentTypeUuid. The list of fields passed in
                should match the document type’s list of field types in the
                correct order. In other words, a field's valueType and value
                (i.e. only one of: stringValue, numberValue, or photoValue) at
                index _i_ should match with the document field type’s
                valueType at index _i_.
            access_token (string): Samsara API access token.
            driver_id (long|int): ID of the driver for whom the document is
                created.

        Returns:
            Document: Response from the API. Returns the created document.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driver_id}/documents'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id': driver_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(create_document_params))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Document.from_dictionary)

    def create_driver_dispatch_route(self,
                                     create_dispatch_route_params,
                                     access_token,
                                     driver_id):
        """Does a POST request to /fleet/drivers/{driver_id}/dispatch/routes.

        Create a new dispatch route for the driver with driver_id.

        Args:
            create_dispatch_route_params (DispatchRouteCreate): TODO: type
                description here. Example: 
            access_token (string): Samsara API access token.
            driver_id (long|int): ID of the driver with the associated
                routes.

        Returns:
            DispatchRoute: Response from the API. Created route object
                including the new route ID.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driver_id}/dispatch/routes'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id': driver_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(create_dispatch_route_params))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def create_get_fleet_trips(self,
                               access_token,
                               trips_param):
        """Does a POST request to /fleet/trips.

        Get historical trips data for specified vehicle. This method returns a
        set of historical trips data for the specified vehicle in the
        specified time range.

        Args:
            access_token (string): Samsara API access token.
            trips_param (TripsParam): Group ID, vehicle ID and time range to
                query.

        Returns:
            TripResponse: Response from the API. List of trips taken by the
                requested vehicle within the specified timeframe.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/trips'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(trips_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, TripResponse.from_dictionary)

    def update_vehicles(self,
                        access_token,
                        vehicle_update_param):
        """Does a POST request to /fleet/set_data.

        This method enables the mutation of metadata for vehicles in the
        Samsara Cloud.

        Args:
            access_token (string): Samsara API access token.
            vehicle_update_param (VehicleUpdateParam): TODO: type description
                here. Example: 

        Returns:
            void: Response from the API. Vehicles were successfully updated.
                No response body is returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/set_data'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(vehicle_update_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def create_get_fleet_maintenance_list(self,
                                          access_token,
                                          group_param):
        """Does a POST request to /fleet/maintenance/list.

        Get list of the vehicles with any engine faults or check light data.

        Args:
            access_token (string): Samsara API access token.
            group_param (GroupParam): Group ID to query.

        Returns:
            GetFleetMaintenanceListResponse: Response from the API. List of
                vehicles and maintenance information about each.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/maintenance/list'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(group_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetFleetMaintenanceListResponse.from_dictionary)

    def get_dispatch_routes_by_driver_id(self,
                                         access_token,
                                         driver_id,
                                         end_time=None,
                                         duration=None):
        """Does a GET request to /fleet/drivers/{driver_id}/dispatch/routes.

        Fetch all of the dispatch routes for a given driver.

        Args:
            access_token (string): Samsara API access token.
            driver_id (long|int): ID of the driver with the associated
                routes.
            end_time (long|int, optional): Time in unix milliseconds that
                represents the oldest routes to return. Used in combination
                with duration. Defaults to now.
            duration (long|int, optional): Time in milliseconds that
                represents the duration before end_time to query. Defaults to
                24 hours.

        Returns:
            list of DispatchRoute: Response from the API. Returns the dispatch
                routes for the given driver_id.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driver_id}/dispatch/routes'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id': driver_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'end_time': end_time,
            'duration': duration
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def create_dvir(self,
                    access_token,
                    create_dvir_param):
        """Does a POST request to /fleet/maintenance/dvirs.

        Create a new dvir, marking a vehicle or trailer safe or unsafe.

        Args:
            access_token (string): Samsara API access token.
            create_dvir_param (CreateDvirParam): DVIR creation body

        Returns:
            DvirBase: Response from the API. Newly created DVIR.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/maintenance/dvirs'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(create_dvir_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DvirBase.from_dictionary)

    def get_driver_safety_score(self,
                                access_token,
                                start_ms,
                                end_ms,
                                driver_id):
        """Does a GET request to /fleet/drivers/{driverId}/safety/score.

        Fetch the safety score for the driver.

        Args:
            access_token (string): Samsara API access token.
            start_ms (long|int): Timestamp in milliseconds representing the
                start of the period to fetch, inclusive. Used in combination
                with endMs.
            end_ms (long|int): Timestamp in milliseconds representing the end
                of the period to fetch, inclusive. Used in combination with
                startMs.
            driver_id (long|int): ID of the driver

        Returns:
            DriverSafetyScoreResponse: Response from the API. Safety score
                details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driverId}/safety/score'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driverId': driver_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DriverSafetyScoreResponse.from_dictionary)

    def create_get_fleet_locations(self,
                                   access_token,
                                   group_param):
        """Does a POST request to /fleet/locations.

        Get current location of vehicles in a group. This method returns the
        current location in latitude and longitude of all vehicles in a
        requested group.

        Args:
            access_token (string): Samsara API access token.
            group_param (GroupParam): Group ID to query.

        Returns:
            GetFleetLocationsResponse: Response from the API. List of vehicle
                objects containing their location and the time at which that
                location was logged.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/locations'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(group_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetFleetLocationsResponse.from_dictionary)

    def create_get_fleet_hos_logs_summary(self,
                                          access_token,
                                          hos_logs_param):
        """Does a POST request to /fleet/hos_logs_summary.

        Get the current HOS status for all drivers in the group.

        Args:
            access_token (string): Samsara API access token.
            hos_logs_param (HosLogsParam2): TODO: type description here.
                Example: 

        Returns:
            HosLogsSummaryResponse: Response from the API. HOS logs for the
                specified driver.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/hos_logs_summary'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(hos_logs_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, HosLogsSummaryResponse.from_dictionary)

    def create_get_fleet_hos_logs(self,
                                  access_token,
                                  hos_logs_param):
        """Does a POST request to /fleet/hos_logs.

        Get the HOS (hours of service) logs for the specified driver. This
        method returns all the HOS statuses that the driver was in during this
        time period.

        Args:
            access_token (string): Samsara API access token.
            hos_logs_param (HosLogsParam): TODO: type description here.
                Example: 

        Returns:
            HosLogsResponse: Response from the API. HOS logs for the specified
                driver.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/hos_logs'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(hos_logs_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, HosLogsResponse.from_dictionary)

    def create_get_fleet_hos_authentication_logs(self,
                                                 access_token,
                                                 hos_authentication_logs_param):
        """Does a POST request to /fleet/hos_authentication_logs.

        Get the HOS (hours of service) signin and signout logs for the
        specified driver. Only signout logs include location information.

        Args:
            access_token (string): Samsara API access token.
            hos_authentication_logs_param (HosAuthenticationLogsParam): TODO:
                type description here. Example: 

        Returns:
            HosAuthenticationLogsResponse: Response from the API. HOS
                authentication logs for the specified driver.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/hos_authentication_logs'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(hos_authentication_logs_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, HosAuthenticationLogsResponse.from_dictionary)

    def create_get_fleet_drivers_summary(self,
                                         access_token,
                                         drivers_summary_param,
                                         snap_to_day_bounds=None):
        """Does a POST request to /fleet/drivers/summary.

        Get the distance and time each driver in an organization has driven in
        a given time period.

        Args:
            access_token (string): Samsara API access token.
            drivers_summary_param (DriversSummaryParam): Org ID and time range
                to query.
            snap_to_day_bounds (bool, optional): Snap query result to HOS day
                boundaries.

        Returns:
            DriversSummaryResponse: Response from the API. Distance traveled
                and time active for each driver in the organization over the
                specified time period.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/summary'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'snap_to_day_bounds': snap_to_day_bounds
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(drivers_summary_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DriversSummaryResponse.from_dictionary)

    def get_vehicle_stats(self,
                          access_token,
                          start_ms,
                          end_ms,
                          series=None,
                          tag_ids=None,
                          starting_after=None,
                          ending_before=None,
                          limit=None):
        """Does a GET request to /fleet/vehicles/stats.

        Fetch engine state and aux input data for all vehicles in the group
        between a start/end time. Data returned may be affected by device
        connectivity and processing time.

        Args:
            access_token (string): Samsara API access token.
            start_ms (int): Time in Unix epoch milliseconds for the start of
                the query.
            end_ms (int): Time in Unix epoch milliseconds for the end of the
                query.
            series (SeriesEnum, optional): Comma-separated list of stat types.
                Options are engineState, auxInput1, and auxInput2. If this
                parameter is excluded, all 3 stat types will be returned.
                Example: series=engineState,auxInput2
            tag_ids (string, optional): Comma-separated list of tag ids.
                Example: tagIds=1,2,3
            starting_after (string, optional): Pagination parameter indicating
                the cursor position to continue returning results after. Used
                in conjunction with the 'limit' parameter. Mutually exclusive
                with 'endingBefore' parameter.
            ending_before (string, optional): Pagination parameter indicating
                the cursor position to return results before. Used in
                conjunction with the 'limit' parameter. Mutually exclusive
                with 'startingAfter' parameter.
            limit (long|int, optional): Pagination parameter indicating the
                number of results to return in this request. Used in
                conjunction with either 'startingAfter' or 'endingBefore'.

        Returns:
            GetVehicleStatsResponse: Response from the API. Returns engine
                state and/or aux input data for all vehicles in the group
                between a start/end time.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/vehicles/stats'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms,
            'series': series,
            'tagIds': tag_ids,
            'startingAfter': starting_after,
            'endingBefore': ending_before,
            'limit': limit
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetVehicleStatsResponse.from_dictionary)

    def update_reactivate_driver_by_id(self,
                                       reactivate_driver_param,
                                       access_token,
                                       driver_id_or_external_id):
        """Does a PUT request to /fleet/drivers/inactive/{driver_id_or_external_id}.

        Reactivate the inactive driver having id.

        Args:
            reactivate_driver_param (ReactivateDriverParam): Driver
                reactivation body
            access_token (string): Samsara API access token.
            driver_id_or_external_id (string): ID of the driver.  This must be
                either the numeric ID generated by Samsara or the external ID
                of the driver.  External IDs are customer specified key-value
                pairs.

        Returns:
            Driver: Response from the API. Returns the reactivated driver,
                which is now available at /fleet/drivers/{driver_id}.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/inactive/{driver_id_or_external_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id_or_external_id': driver_id_or_external_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(reactivate_driver_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Driver.from_dictionary)

    def get_driver_documents_by_org_id(self,
                                       access_token,
                                       end_ms=None,
                                       duration_ms=None):
        """Does a GET request to /fleet/drivers/documents.

        Fetch all of the documents.

        Args:
            access_token (string): Samsara API access token.
            end_ms (long|int, optional): Time in unix milliseconds that
                represents the oldest documents to return. Used in combination
                with durationMs. Defaults to now.
            duration_ms (long|int, optional): Time in milliseconds that
                represents the duration before endMs to query. Defaults to 24
                hours.

        Returns:
            list of Document: Response from the API. Returns all of the
                documents.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/documents'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'endMs': end_ms,
            'durationMs': duration_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Document.from_dictionary)

    def delete_deactivate_driver(self,
                                 access_token,
                                 driver_id_or_external_id):
        """Does a DELETE request to /fleet/drivers/{driver_id_or_external_id}.

        Deactivate a driver with the given id.

        Args:
            access_token (string): Samsara API access token.
            driver_id_or_external_id (string): ID of the driver.  This must be
                either the numeric ID generated by Samsara or the external ID
                of the driver.  External IDs are customer specified key-value
                pairs.

        Returns:
            void: Response from the API. Successfully deactivated the driver,
                which is now referenced by
                /fleet/drivers/inactive/{driver_id}.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driver_id_or_external_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id_or_external_id': driver_id_or_external_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.delete(_query_url)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def get_dispatch_route_history(self,
                                   access_token,
                                   route_id,
                                   start_time=None,
                                   end_time=None):
        """Does a GET request to /fleet/dispatch/routes/{route_id}/history.

        Fetch the history of a dispatch route.

        Args:
            access_token (string): Samsara API access token.
            route_id (long|int): ID of the route with history.
            start_time (long|int, optional): Timestamp representing the start
                of the period to fetch, inclusive. Used in combination with
                end_time. Defaults to 0.
            end_time (long|int, optional): Timestamp representing the end of
                the period to fetch, inclusive. Used in combination with
                start_time. Defaults to nowMs.

        Returns:
            DispatchRouteHistory: Response from the API. The historical route
                state changes between start_time and end_time.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes/{route_id}/history'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'route_id': route_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'start_time': start_time,
            'end_time': end_time
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRouteHistory.from_dictionary)

    def update_dispatch_route_by_id(self,
                                    update_dispatch_route_params,
                                    access_token,
                                    route_id):
        """Does a PUT request to /fleet/dispatch/routes/{route_id}.

        Update a dispatch route and its associated jobs.

        Args:
            update_dispatch_route_params (DispatchRoute): TODO: type
                description here. Example: 
            access_token (string): Samsara API access token.
            route_id (long|int): ID of the dispatch route.

        Returns:
            DispatchRoute: Response from the API. Update the dispatch route.
                Allowable updates include setting job state, adding or
                removing jobs, and changing job locations and times.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes/{route_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'route_id': route_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(update_dispatch_route_params))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def fetch_all_route_job_updates(self,
                                    access_token,
                                    group_id=None,
                                    sequence_id=None,
                                    include=None):
        """Does a GET request to /fleet/dispatch/routes/job_updates.

        Fetch all updates to a job including route data in the last 24 hours
        or subsequent to an sequence ID

        Args:
            access_token (string): Samsara API access token.
            group_id (long|int, optional): Optional group ID if the
                organization has multiple groups (uncommon).
            sequence_id (string, optional): Sequence ID from the response
                payload of the last request. Defaults to fetching updates from
                last 24 hours.
            include (string, optional): Optionally set include=route to
                include route object in response payload.

        Returns:
            AllRouteJobUpdates: Response from the API. All job updates on
                routes.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes/job_updates'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'group_id': group_id,
            'sequence_id': sequence_id,
            'include': include
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, AllRouteJobUpdates.from_dictionary)

    def fetch_all_dispatch_routes(self,
                                  access_token,
                                  group_id=None,
                                  end_time=None,
                                  duration=None):
        """Does a GET request to /fleet/dispatch/routes.

        Fetch all of the dispatch routes for the group.

        Args:
            access_token (string): Samsara API access token.
            group_id (long|int, optional): Optional group ID if the
                organization has multiple groups (uncommon).
            end_time (long|int, optional): Time in unix milliseconds that
                represents the oldest routes to return. Used in combination
                with duration. Defaults to now.
            duration (long|int, optional): Time in milliseconds that
                represents the duration before end_time to query. Defaults to
                24 hours.

        Returns:
            list of DispatchRoute: Response from the API. All dispatch route
                objects for the group.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'group_id': group_id,
            'end_time': end_time,
            'duration': duration
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def get_asset_reefer(self,
                         access_token,
                         asset_id,
                         start_ms,
                         end_ms):
        """Does a GET request to /fleet/assets/{asset_id}/reefer.

        Fetch the reefer-specific stats of an asset.

        Args:
            access_token (string): Samsara API access token.
            asset_id (long|int): ID of the asset
            start_ms (long|int): Timestamp in milliseconds representing the
                start of the period to fetch, inclusive. Used in combination
                with endMs.
            end_ms (long|int): Timestamp in milliseconds representing the end
                of the period to fetch, inclusive. Used in combination with
                startMs.

        Returns:
            AssetReeferResponse: Response from the API. Reefer-specific asset
                details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/assets/{asset_id}/reefer'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'asset_id': asset_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, AssetReeferResponse.from_dictionary)

    def get_asset_location(self,
                           access_token,
                           asset_id,
                           start_ms,
                           end_ms):
        """Does a GET request to /fleet/assets/{asset_id}/locations.

        Fetch the historical locations for the asset.

        Args:
            access_token (string): Samsara API access token.
            asset_id (long|int): ID of the asset
            start_ms (long|int): Timestamp in milliseconds representing the
                start of the period to fetch, inclusive. Used in combination
                with endMs.
            end_ms (long|int): Timestamp in milliseconds representing the end
                of the period to fetch, inclusive. Used in combination with
                startMs.

        Returns:
            list of AssetLocationResponse: Response from the API. Asset
                location details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/assets/{asset_id}/locations'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'asset_id': asset_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'startMs': start_ms,
            'endMs': end_ms
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, AssetLocationResponse.from_dictionary)

    def get_driver_by_id(self,
                         access_token,
                         driver_id_or_external_id):
        """Does a GET request to /fleet/drivers/{driver_id_or_external_id}.

        Fetch driver by id.

        Args:
            access_token (string): Samsara API access token.
            driver_id_or_external_id (string): ID of the driver.  This must be
                either the numeric ID generated by Samsara or the external ID
                of the driver.  External IDs are customer specified key-value
                pairs.

        Returns:
            Driver: Response from the API. Returns the driver for the given
                driver_id.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/{driver_id_or_external_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id_or_external_id': driver_id_or_external_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Driver.from_dictionary)

    def get_deactivated_driver_by_id(self,
                                     access_token,
                                     driver_id_or_external_id):
        """Does a GET request to /fleet/drivers/inactive/{driver_id_or_external_id}.

        Fetch deactivated driver by id.

        Args:
            access_token (string): Samsara API access token.
            driver_id_or_external_id (string): ID of the driver.  This must be
                either the numeric ID generated by Samsara or the external ID
                of the driver.  External IDs are customer specified key-value
                pairs.

        Returns:
            Driver: Response from the API. Returns the deactivated driver with
                the given driver_id.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/inactive/{driver_id_or_external_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'driver_id_or_external_id': driver_id_or_external_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Driver.from_dictionary)

    def get_all_deactivated_drivers(self,
                                    access_token,
                                    group_id=None):
        """Does a GET request to /fleet/drivers/inactive.

        Fetch all deactivated drivers for the group.

        Args:
            access_token (string): Samsara API access token.
            group_id (long|int, optional): Optional group ID if the
                organization has multiple groups (uncommon).

        Returns:
            list of Driver: Response from the API. Returns an array of all
                deactivated drivers for the group. Deactivated drivers are
                referenced at /fleet/drivers/inactive/{driver_id}

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/inactive'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token,
            'group_id': group_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Driver.from_dictionary)

    def create_driver(self,
                      access_token,
                      create_driver_param):
        """Does a POST request to /fleet/drivers/create.

        Create a new driver.

        Args:
            access_token (string): Samsara API access token.
            create_driver_param (DriverForCreate): Driver creation body

        Returns:
            Driver: Response from the API. Returns the successfully created
                the driver.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers/create'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(create_driver_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Driver.from_dictionary)

    def create_get_fleet_drivers(self,
                                 access_token,
                                 group_drivers_param):
        """Does a POST request to /fleet/drivers.

        Get all the drivers for the specified group.

        Args:
            access_token (string): Samsara API access token.
            group_drivers_param (GroupDriversParam): TODO: type description
                here. Example: 

        Returns:
            DriversResponse: Response from the API. All drivers in the group.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/drivers'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(group_drivers_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DriversResponse.from_dictionary)

    def delete_dispatch_route_by_id(self,
                                    access_token,
                                    route_id):
        """Does a DELETE request to /fleet/dispatch/routes/{route_id}.

        Delete a dispatch route and its associated jobs.

        Args:
            access_token (string): Samsara API access token.
            route_id (long|int): ID of the dispatch route.

        Returns:
            void: Response from the API. Successfully deleted the dispatch
                route. No response body is returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes/{route_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'route_id': route_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.delete(_query_url)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def get_dispatch_route_by_id(self,
                                 access_token,
                                 route_id):
        """Does a GET request to /fleet/dispatch/routes/{route_id}.

        Fetch a dispatch route by id.

        Args:
            access_token (string): Samsara API access token.
            route_id (long|int): ID of the dispatch route.

        Returns:
            DispatchRoute: Response from the API. The dispatch route
                corresponding to route_id.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes/{route_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'route_id': route_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def create_dispatch_route(self,
                              access_token,
                              create_dispatch_route_params):
        """Does a POST request to /fleet/dispatch/routes.

        Create a new dispatch route.

        Args:
            access_token (string): Samsara API access token.
            create_dispatch_route_params (DispatchRouteCreate): TODO: type
                description here. Example: 

        Returns:
            DispatchRoute: Response from the API. Created route object
                including the new route ID.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/dispatch/routes'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(create_dispatch_route_params))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DispatchRoute.from_dictionary)

    def get_all_asset_current_locations(self,
                                        access_token):
        """Does a GET request to /fleet/assets/locations.

        Fetch current locations of all assets for the group.

        Args:
            access_token (string): Samsara API access token.

        Returns:
            GetAllAssetCurrentLocationsResponse: Response from the API. List
                of assets and their current locations.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/assets/locations'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetAllAssetCurrentLocationsResponse.from_dictionary)

    def get_all_assets(self,
                       access_token):
        """Does a GET request to /fleet/assets.

        Fetch all of the assets for the group.

        Args:
            access_token (string): Samsara API access token.

        Returns:
            GetAllAssetsResponse: Response from the API. List of assets.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/assets'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetAllAssetsResponse.from_dictionary)

    def add_fleet_address(self,
                          access_token,
                          address_param):
        """Does a POST request to /fleet/add_address.

        This method adds an address book entry to the specified group.

        Args:
            access_token (string): Samsara API access token.
            address_param (AddressParam): TODO: type description here.
                Example: 

        Returns:
            void: Response from the API. Address was successfully added. No
                response body is returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/fleet/add_address'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(address_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def get_organization_contact(self,
                                 access_token,
                                 contact_id):
        """Does a GET request to /contacts/{contact_id}.

        Fetch a contact by its id.

        Args:
            access_token (string): Samsara API access token.
            contact_id (long|int): ID of the contact

        Returns:
            Contact: Response from the API. The contact.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/contacts/{contact_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'contact_id': contact_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Contact.from_dictionary)

    def list_contacts(self,
                      access_token):
        """Does a GET request to /contacts.

        Fetch all contacts for the organization.

        Args:
            access_token (string): Samsara API access token.

        Returns:
            list of Contact: Response from the API. List of contacts.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/contacts'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Contact.from_dictionary)

    def delete_organization_address(self,
                                    access_token,
                                    address_id):
        """Does a DELETE request to /addresses/{addressId}.

        Delete an address.

        Args:
            access_token (string): Samsara API access token.
            address_id (long|int): ID of the address/geofence

        Returns:
            void: Response from the API. Address was successfully deleted. No
                response body is returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/addresses/{addressId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'addressId': address_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.delete(_query_url)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def get_organization_address(self,
                                 access_token,
                                 address_id):
        """Does a GET request to /addresses/{addressId}.

        Fetch an address by its id.

        Args:
            access_token (string): Samsara API access token.
            address_id (long|int): ID of the address/geofence

        Returns:
            Address: Response from the API. The address/geofence. The geofence
                field will only be populated with either 'circle' or
                'polygon', depending on the geofence type.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/addresses/{addressId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'addressId': address_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Address.from_dictionary)

    def update_organization_address(self,
                                    access_token,
                                    address,
                                    address_id):
        """Does a PATCH request to /addresses/{addressId}.

        Update the name, formatted address, geofence, notes, or tag and
        contact Ids for an address. The set of tags or contacts associated
        with this address will be updated to exactly match the list of IDs
        passed in. To remove all tags or contacts from an address, pass an
        empty list; to remove notes, pass an empty string.

        Args:
            access_token (string): Samsara API access token.
            address (Address1): Update parts of an address's value. If the
                geofence 'circle' or 'polygon' key is specified, the update
                will change the type of geofence accordingly.
            address_id (long|int): ID of the address/geofence

        Returns:
            void: Response from the API. Address was successfully updated. No
                response body is returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/addresses/{addressId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'addressId': address_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(address))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

    def get_organization_addresses(self,
                                   access_token):
        """Does a GET request to /addresses.

        Fetch all addresses/geofences for the organization. An address
        contains either a circle or polygon geofence describing the address
        boundaries.

        Args:
            access_token (string): Samsara API access token.

        Returns:
            list of Address: Response from the API. List of
                addresses/geofences. For each address entry, the geofence
                field will only be populated with either 'circle' or
                'polygon', depending on the geofence type.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/addresses'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Address.from_dictionary)

    def add_organization_addresses(self,
                                   access_token,
                                   addresses):
        """Does a POST request to /addresses.

        Add one or more addresses to the organization

        Args:
            access_token (string): Samsara API access token.
            addresses (Addresses): List of addresses/geofences to add.
                Geofences can be circular or a polygon.  For each address,
                only one of 'circle' or 'polygon' should be provided. If both
                are provided, the geofence will be saved as a polygon.

        Returns:
            list of Address: Response from the API. List of added
                addresses/geofences. For each address entry, the geofence
                field will only be populated with either 'circle' or
                'polygon', depending on the geofence type. Circle geofences
                added without a specific lat/lng are geocoded asynchronously,
                and will be 0,0 in the immediate response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/addresses'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(addresses))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Address.from_dictionary)
