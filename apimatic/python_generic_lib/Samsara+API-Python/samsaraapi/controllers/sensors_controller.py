# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from samsaraapi.api_helper import APIHelper
from samsaraapi.configuration import Configuration
from samsaraapi.controllers.base_controller import BaseController
from samsaraapi.http.auth.custom_query_auth import CustomQueryAuth
from samsaraapi.models.temperature_response import TemperatureResponse
from samsaraapi.models.get_sensors_response import GetSensorsResponse
from samsaraapi.models.humidity_response import HumidityResponse
from samsaraapi.models.sensor_history_response import SensorHistoryResponse
from samsaraapi.models.door_response import DoorResponse
from samsaraapi.models.cargo_response import CargoResponse
from samsaraapi.exceptions.api_exception import APIException

class SensorsController(BaseController):

    """A Controller to access Endpoints in the samsaraapi API."""


    def create_get_sensors_temperature(self,
                                       access_token,
                                       sensor_param):
        """Does a POST request to /sensors/temperature.

        Get temperature for requested sensors. This method returns the current
        ambient temperature (and probe temperature if applicable) for the
        requested sensors.

        Args:
            access_token (string): Samsara API access token.
            sensor_param (SensorParam): Group ID and list of sensor IDs to
                query.

        Returns:
            TemperatureResponse: Response from the API. List of sensor objects
                containing the current temperature reported by each sensor.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sensors/temperature'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(sensor_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, TemperatureResponse.from_dictionary)

    def create_get_sensors(self,
                           access_token,
                           group_param):
        """Does a POST request to /sensors/list.

        Get sensor objects. This method returns a list of the sensor objects
        in the Samsara Cloud and information about them.

        Args:
            access_token (string): Samsara API access token.
            group_param (GroupParam): Group ID to query.

        Returns:
            GetSensorsResponse: Response from the API. List of sensor
                objects.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sensors/list'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(group_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetSensorsResponse.from_dictionary)

    def create_get_sensors_humidity(self,
                                    access_token,
                                    sensor_param):
        """Does a POST request to /sensors/humidity.

        Get humidity for requested sensors. This method returns the current
        relative humidity for the requested sensors.

        Args:
            access_token (string): Samsara API access token.
            sensor_param (SensorParam): Group ID and list of sensor IDs to
                query.

        Returns:
            HumidityResponse: Response from the API. List of sensor objects
                containing the current humidity reported by each sensor.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sensors/humidity'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(sensor_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, HumidityResponse.from_dictionary)

    def create_get_sensors_history(self,
                                   access_token,
                                   history_param):
        """Does a POST request to /sensors/history.

        Get historical data for specified sensors. This method returns a set
        of historical data for the specified sensors in the specified time
        range and at the specified time resolution.

        Args:
            access_token (string): Samsara API access token.
            history_param (HistoryParam1): Group ID, time range and
                resolution, and list of sensor ID, field pairs to query.

        Returns:
            SensorHistoryResponse: Response from the API. List of results
                objects, each containing a time and a datapoint for each
                requested sensor/field pair.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sensors/history'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(history_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SensorHistoryResponse.from_dictionary)

    def create_get_sensors_door(self,
                                access_token,
                                sensor_param):
        """Does a POST request to /sensors/door.

        Get door monitor status (closed / open) for requested sensors.

        Args:
            access_token (string): Samsara API access token.
            sensor_param (SensorParam): Group ID and list of sensor IDs to
                query.

        Returns:
            DoorResponse: Response from the API. List of sensor objects
                containing the current door status reported by each sensor.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sensors/door'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(sensor_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DoorResponse.from_dictionary)

    def create_get_sensors_cargo(self,
                                 access_token,
                                 sensor_param):
        """Does a POST request to /sensors/cargo.

        Get cargo monitor status (empty / full) for requested sensors.

        Args:
            access_token (string): Samsara API access token.
            sensor_param (SensorParam): Group ID and list of sensor IDs to
                query.

        Returns:
            CargoResponse: Response from the API. List of sensor objects
                containing the current cargo status reported by each sensor.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sensors/cargo'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'access_token': access_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(sensor_param))
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise APIException('Unexpected error.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CargoResponse.from_dictionary)
