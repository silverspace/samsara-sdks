# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import samsaraapi.models.circle
import samsaraapi.models.polygon

class AddressGeofence(object):

    """Implementation of the 'AddressGeofence' model.

    The geofence that defines this address and its bounds. This can either be
    a circle, or a polygon - only one key should be provided, depending on the
    geofence type.

    Attributes:
        circle (Circle): Information about a circular geofence. This field is
            only populated if the geofence is a circle.
        polygon (Polygon): Information about a polygon geofence. This field is
            only populated if the geofence is a polygon.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "circle":'circle',
        "polygon":'polygon'
    }

    def __init__(self,
                 circle=None,
                 polygon=None):
        """Constructor for the AddressGeofence class"""

        # Initialize members of the class
        self.circle = circle
        self.polygon = polygon


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        circle = samsaraapi.models.circle.Circle.from_dictionary(dictionary.get('circle')) if dictionary.get('circle') else None
        polygon = samsaraapi.models.polygon.Polygon.from_dictionary(dictionary.get('polygon')) if dictionary.get('polygon') else None

        # Return an object of this model
        return cls(circle,
                   polygon)


