# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import samsaraapi.models.tagged_asset_base
import samsaraapi.models.tagged_driver_base
import samsaraapi.models.tagged_machine_base
import samsaraapi.models.tagged_sensor_base
import samsaraapi.models.tagged_vehicle_base

class TagUpdate(object):

    """Implementation of the 'TagUpdate' model.

    TODO: type model description here.

    Attributes:
        assets (list of TaggedAssetBase): The assets that belong to this tag.
        drivers (list of TaggedDriverBase): The drivers that belong to this
            tag.
        machines (list of TaggedMachineBase): The machines that belong to this
            tag.
        name (string): Updated name of this tag.
        parent_tag_id (long|int): If this tag is part a hierarchical tag tree
            as a child tag, the parentTagId is the ID of this tag's parent
            tag.
        sensors (list of TaggedSensorBase): The sensors that belong to this
            tag.
        vehicles (list of TaggedVehicleBase): The vehicles that belong to this
            tag.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "assets":'assets',
        "drivers":'drivers',
        "machines":'machines',
        "name":'name',
        "parent_tag_id":'parentTagId',
        "sensors":'sensors',
        "vehicles":'vehicles'
    }

    def __init__(self,
                 assets=None,
                 drivers=None,
                 machines=None,
                 name=None,
                 parent_tag_id=None,
                 sensors=None,
                 vehicles=None):
        """Constructor for the TagUpdate class"""

        # Initialize members of the class
        self.assets = assets
        self.drivers = drivers
        self.machines = machines
        self.name = name
        self.parent_tag_id = parent_tag_id
        self.sensors = sensors
        self.vehicles = vehicles


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        assets = None
        if dictionary.get('assets') != None:
            assets = list()
            for structure in dictionary.get('assets'):
                assets.append(samsaraapi.models.tagged_asset_base.TaggedAssetBase.from_dictionary(structure))
        drivers = None
        if dictionary.get('drivers') != None:
            drivers = list()
            for structure in dictionary.get('drivers'):
                drivers.append(samsaraapi.models.tagged_driver_base.TaggedDriverBase.from_dictionary(structure))
        machines = None
        if dictionary.get('machines') != None:
            machines = list()
            for structure in dictionary.get('machines'):
                machines.append(samsaraapi.models.tagged_machine_base.TaggedMachineBase.from_dictionary(structure))
        name = dictionary.get('name')
        parent_tag_id = dictionary.get('parentTagId')
        sensors = None
        if dictionary.get('sensors') != None:
            sensors = list()
            for structure in dictionary.get('sensors'):
                sensors.append(samsaraapi.models.tagged_sensor_base.TaggedSensorBase.from_dictionary(structure))
        vehicles = None
        if dictionary.get('vehicles') != None:
            vehicles = list()
            for structure in dictionary.get('vehicles'):
                vehicles.append(samsaraapi.models.tagged_vehicle_base.TaggedVehicleBase.from_dictionary(structure))

        # Return an object of this model
        return cls(assets,
                   drivers,
                   machines,
                   name,
                   parent_tag_id,
                   sensors,
                   vehicles)


