# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import samsaraapi.models.end_coordinates
import samsaraapi.models.start_coordinates

class Trip(object):

    """Implementation of the 'Trip' model.

    TODO: type model description here.

    Attributes:
        distance_meters (int): Length of the trip in meters.
        driver_id (int): ID of the driver.
        end_address (string): Text representation of nearest identifiable
            location to the end (latitude, longitude) coordinates.
        end_coordinates (EndCoordinates): End (latitude, longitude) in decimal
            degrees.
        end_location (string): Geocoded street address of start (latitude,
            longitude) coordinates.
        end_ms (long|int): End of the trip in UNIX milliseconds.
        end_odometer (int): Odometer reading at the end of the trip.
        fuel_consumed_ml (int): Amount in milliliters of fuel consumed on this
            trip.
        start_address (string): Text representation of nearest identifiable
            location to the start (latitude, longitude) coordinates.
        start_coordinates (StartCoordinates): Start (latitude, longitude) in
            decimal degrees.
        start_location (string): Geocoded street address of start (latitude,
            longitude) coordinates.
        start_ms (long|int): Beginning of the trip in UNIX milliseconds.
        start_odometer (int): Odometer reading at the beginning of the trip.
        toll_meters (int): Length in meters trip spent on toll roads.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "distance_meters":'distanceMeters',
        "driver_id":'driverId',
        "end_address":'endAddress',
        "end_coordinates":'endCoordinates',
        "end_location":'endLocation',
        "end_ms":'endMs',
        "end_odometer":'endOdometer',
        "fuel_consumed_ml":'fuelConsumedMl',
        "start_address":'startAddress',
        "start_coordinates":'startCoordinates',
        "start_location":'startLocation',
        "start_ms":'startMs',
        "start_odometer":'startOdometer',
        "toll_meters":'tollMeters'
    }

    def __init__(self,
                 distance_meters=None,
                 driver_id=None,
                 end_address=None,
                 end_coordinates=None,
                 end_location=None,
                 end_ms=None,
                 end_odometer=None,
                 fuel_consumed_ml=None,
                 start_address=None,
                 start_coordinates=None,
                 start_location=None,
                 start_ms=None,
                 start_odometer=None,
                 toll_meters=None):
        """Constructor for the Trip class"""

        # Initialize members of the class
        self.distance_meters = distance_meters
        self.driver_id = driver_id
        self.end_address = end_address
        self.end_coordinates = end_coordinates
        self.end_location = end_location
        self.end_ms = end_ms
        self.end_odometer = end_odometer
        self.fuel_consumed_ml = fuel_consumed_ml
        self.start_address = start_address
        self.start_coordinates = start_coordinates
        self.start_location = start_location
        self.start_ms = start_ms
        self.start_odometer = start_odometer
        self.toll_meters = toll_meters


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        distance_meters = dictionary.get('distanceMeters')
        driver_id = dictionary.get('driverId')
        end_address = dictionary.get('endAddress')
        end_coordinates = samsaraapi.models.end_coordinates.EndCoordinates.from_dictionary(dictionary.get('endCoordinates')) if dictionary.get('endCoordinates') else None
        end_location = dictionary.get('endLocation')
        end_ms = dictionary.get('endMs')
        end_odometer = dictionary.get('endOdometer')
        fuel_consumed_ml = dictionary.get('fuelConsumedMl')
        start_address = dictionary.get('startAddress')
        start_coordinates = samsaraapi.models.start_coordinates.StartCoordinates.from_dictionary(dictionary.get('startCoordinates')) if dictionary.get('startCoordinates') else None
        start_location = dictionary.get('startLocation')
        start_ms = dictionary.get('startMs')
        start_odometer = dictionary.get('startOdometer')
        toll_meters = dictionary.get('tollMeters')

        # Return an object of this model
        return cls(distance_meters,
                   driver_id,
                   end_address,
                   end_coordinates,
                   end_location,
                   end_ms,
                   end_odometer,
                   fuel_consumed_ml,
                   start_address,
                   start_coordinates,
                   start_location,
                   start_ms,
                   start_odometer,
                   toll_meters)


