# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Summary(object):

    """Implementation of the 'Summary' model.

    TODO: type model description here.

    Attributes:
        active_ms (long|int): Duration in milliseconds that driver was on duty
            or driving during the requested time range
        distance_miles (float): Distance driven in miles, rounded to two
            decimal places.
        drive_ms (long|int): Duration in milliseconds that driver was driving
            during the requested time range
        driver_id (long|int): ID of the driver.
        driver_name (string): Name of the driver.
        driver_username (string): Username of the driver.
        group_id (long|int): Group of the driver.
        on_duty_ms (long|int): Duration in milliseconds that driver was on
            duty during the requested time range

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "active_ms":'activeMs',
        "distance_miles":'distanceMiles',
        "drive_ms":'driveMs',
        "driver_id":'driverId',
        "driver_name":'driverName',
        "driver_username":'driverUsername',
        "group_id":'groupId',
        "on_duty_ms":'onDutyMs'
    }

    def __init__(self,
                 active_ms=None,
                 distance_miles=None,
                 drive_ms=None,
                 driver_id=None,
                 driver_name=None,
                 driver_username=None,
                 group_id=None,
                 on_duty_ms=None):
        """Constructor for the Summary class"""

        # Initialize members of the class
        self.active_ms = active_ms
        self.distance_miles = distance_miles
        self.drive_ms = drive_ms
        self.driver_id = driver_id
        self.driver_name = driver_name
        self.driver_username = driver_username
        self.group_id = group_id
        self.on_duty_ms = on_duty_ms


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        active_ms = dictionary.get('activeMs')
        distance_miles = dictionary.get('distanceMiles')
        drive_ms = dictionary.get('driveMs')
        driver_id = dictionary.get('driverId')
        driver_name = dictionary.get('driverName')
        driver_username = dictionary.get('driverUsername')
        group_id = dictionary.get('groupId')
        on_duty_ms = dictionary.get('onDutyMs')

        # Return an object of this model
        return cls(active_ms,
                   distance_miles,
                   drive_ms,
                   driver_id,
                   driver_name,
                   driver_username,
                   group_id,
                   on_duty_ms)


