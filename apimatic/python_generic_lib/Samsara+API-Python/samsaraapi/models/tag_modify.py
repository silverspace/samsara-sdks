# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import samsaraapi.models.add
import samsaraapi.models.delete

class TagModify(object):

    """Implementation of the 'TagModify' model.

    TODO: type model description here.

    Attributes:
        add (Add): Specify devices, etc. that should be added to the tag.
        delete (Delete): Specify devices, etc. that should be removed from the
            tag.
        name (string): Updated name of this tag.
        parent_tag_id (long|int): If this tag is part a hierarchical tag tree
            as a child tag, the parentTagId is the ID of this tag's parent
            tag.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "add":'add',
        "delete":'delete',
        "name":'name',
        "parent_tag_id":'parentTagId'
    }

    def __init__(self,
                 add=None,
                 delete=None,
                 name=None,
                 parent_tag_id=None):
        """Constructor for the TagModify class"""

        # Initialize members of the class
        self.add = add
        self.delete = delete
        self.name = name
        self.parent_tag_id = parent_tag_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        add = samsaraapi.models.add.Add.from_dictionary(dictionary.get('add')) if dictionary.get('add') else None
        delete = samsaraapi.models.delete.Delete.from_dictionary(dictionary.get('delete')) if dictionary.get('delete') else None
        name = dictionary.get('name')
        parent_tag_id = dictionary.get('parentTagId')

        # Return an object of this model
        return cls(add,
                   delete,
                   name,
                   parent_tag_id)


