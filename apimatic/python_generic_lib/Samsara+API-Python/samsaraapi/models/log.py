# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Log(object):

    """Implementation of the 'Log' model.

    TODO: type model description here.

    Attributes:
        codriver_ids (list of float): TODO: type description here.
        driver_id (long|int): ID of the driver.
        group_id (long|int): ID of the group.
        loc_city (string): City in which the log was recorded.
        loc_lat (float): Latitude at which the log was recorded.
        loc_lng (float): Longitude at which the log was recorded.
        loc_name (string): Name of location at which the log was recorded.
        loc_state (string): State in which the log was recorded.
        log_start_ms (long|int): The time at which the log/HOS status started
            in UNIX milliseconds.
        remark (string): Remark associated with the log entry.
        status_type (string): The Hours of Service status type. One of
            `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
            `PERSONAL_CONVEYANCE`.
        vehicle_id (long|int): ID of the vehicle.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "codriver_ids":'codriverIds',
        "driver_id":'driverId',
        "group_id":'groupId',
        "loc_city":'locCity',
        "loc_lat":'locLat',
        "loc_lng":'locLng',
        "loc_name":'locName',
        "loc_state":'locState',
        "log_start_ms":'logStartMs',
        "remark":'remark',
        "status_type":'statusType',
        "vehicle_id":'vehicleId'
    }

    def __init__(self,
                 codriver_ids=None,
                 driver_id=None,
                 group_id=None,
                 loc_city=None,
                 loc_lat=None,
                 loc_lng=None,
                 loc_name=None,
                 loc_state=None,
                 log_start_ms=None,
                 remark=None,
                 status_type=None,
                 vehicle_id=None):
        """Constructor for the Log class"""

        # Initialize members of the class
        self.codriver_ids = codriver_ids
        self.driver_id = driver_id
        self.group_id = group_id
        self.loc_city = loc_city
        self.loc_lat = loc_lat
        self.loc_lng = loc_lng
        self.loc_name = loc_name
        self.loc_state = loc_state
        self.log_start_ms = log_start_ms
        self.remark = remark
        self.status_type = status_type
        self.vehicle_id = vehicle_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        codriver_ids = dictionary.get('codriverIds')
        driver_id = dictionary.get('driverId')
        group_id = dictionary.get('groupId')
        loc_city = dictionary.get('locCity')
        loc_lat = dictionary.get('locLat')
        loc_lng = dictionary.get('locLng')
        loc_name = dictionary.get('locName')
        loc_state = dictionary.get('locState')
        log_start_ms = dictionary.get('logStartMs')
        remark = dictionary.get('remark')
        status_type = dictionary.get('statusType')
        vehicle_id = dictionary.get('vehicleId')

        # Return an object of this model
        return cls(codriver_ids,
                   driver_id,
                   group_id,
                   loc_city,
                   loc_lat,
                   loc_lng,
                   loc_name,
                   loc_state,
                   log_start_ms,
                   remark,
                   status_type,
                   vehicle_id)


