# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import samsaraapi.models.contact
import samsaraapi.models.address_geofence
import samsaraapi.models.tag_metadata

class Address(object):

    """Implementation of the 'Address' model.

    Information about an address/geofence. Geofences are either a circle or a
    polygon.

    Attributes:
        contacts (list of Contact): TODO: type description here.
        formatted_address (string): The full address associated with this
            address/geofence, as it might be recognized by maps.google.com
        geofence (AddressGeofence): The geofence that defines this address and
            its bounds. This can either be a circle, or a polygon - only one
            key should be provided, depending on the geofence type.
        id (long|int): ID of the address
        name (string): Name of the address or geofence
        notes (string): Notes associated with an address.
        tags (list of TagMetadata): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contacts":'contacts',
        "formatted_address":'formattedAddress',
        "geofence":'geofence',
        "id":'id',
        "name":'name',
        "notes":'notes',
        "tags":'tags'
    }

    def __init__(self,
                 contacts=None,
                 formatted_address=None,
                 geofence=None,
                 id=None,
                 name=None,
                 notes=None,
                 tags=None):
        """Constructor for the Address class"""

        # Initialize members of the class
        self.contacts = contacts
        self.formatted_address = formatted_address
        self.geofence = geofence
        self.id = id
        self.name = name
        self.notes = notes
        self.tags = tags


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        contacts = None
        if dictionary.get('contacts') != None:
            contacts = list()
            for structure in dictionary.get('contacts'):
                contacts.append(samsaraapi.models.contact.Contact.from_dictionary(structure))
        formatted_address = dictionary.get('formattedAddress')
        geofence = samsaraapi.models.address_geofence.AddressGeofence.from_dictionary(dictionary.get('geofence')) if dictionary.get('geofence') else None
        id = dictionary.get('id')
        name = dictionary.get('name')
        notes = dictionary.get('notes')
        tags = None
        if dictionary.get('tags') != None:
            tags = list()
            for structure in dictionary.get('tags'):
                tags.append(samsaraapi.models.tag_metadata.TagMetadata.from_dictionary(structure))

        # Return an object of this model
        return cls(contacts,
                   formatted_address,
                   geofence,
                   id,
                   name,
                   notes,
                   tags)


