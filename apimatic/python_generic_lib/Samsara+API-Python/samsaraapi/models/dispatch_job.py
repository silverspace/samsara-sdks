# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class DispatchJob(object):

    """Implementation of the 'DispatchJob' model.

    TODO: type model description here.

    Attributes:
        arrived_at_ms (long|int): The time at which the driver arrived at the
            job destination.
        completed_at_ms (long|int): The time at which the job was marked
            complete (e.g. started driving to the next destination).
        dispatch_route_id (long|int): ID of the route that this job belongs
            to.
        driver_id (long|int): ID of the driver assigned to the dispatch job.
        en_route_at_ms (long|int): The time at which the assigned driver
            started fulfilling the job (e.g. started driving to the
            destination).
        estimated_arrival_ms (long|int): The time at which the assigned driver
            is estimated to arrive at the job destination. Only valid for
            en-route jobs.
        fleet_viewer_url (string): Fleet viewer url of the dispatch job.
        group_id (long|int): TODO: type description here.
        id (long|int): ID of the Samsara dispatch job.
        job_state (JobStatusEnum): The current state of the dispatch job.
        skipped_at_ms (long|int): The time at which the job was marked
            skipped.
        vehicle_id (long|int): ID of the vehicle used for the dispatch job.
        destination_address (string): The address of the job destination, as
            it would be recognized if provided to maps.google.com. Optional if
            a valid destination address ID is provided.
        destination_address_id (long|int): ID of the job destination
            associated with an address book entry. Optional if valid values
            are provided for destination address or latitude/longitude. If a
            valid destination address ID is provided,
            address/latitude/longitude will be used from the address book
            entry. Name of the address book entry will only be used if the
            destination name is not provided.
        destination_lat (float): Latitude of the destination in decimal
            degrees. Optional if a valid destination address ID is provided.
        destination_lng (float): Longitude of the destination in decimal
            degrees. Optional if a valid destination address ID is provided.
        destination_name (string): The name of the job destination. If
            provided, it will take precedence over the name of the address
            book entry.
        notes (string): Notes regarding the details of this job.
        scheduled_arrival_time_ms (long|int): The time at which the assigned
            driver is scheduled to arrive at the job destination.
        scheduled_departure_time_ms (long|int): The time at which the assigned
            driver is scheduled to depart from the job destination.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dispatch_route_id":'dispatch_route_id',
        "group_id":'group_id',
        "id":'id',
        "job_state":'job_state',
        "scheduled_arrival_time_ms":'scheduled_arrival_time_ms',
        "arrived_at_ms":'arrived_at_ms',
        "completed_at_ms":'completed_at_ms',
        "driver_id":'driver_id',
        "en_route_at_ms":'en_route_at_ms',
        "estimated_arrival_ms":'estimated_arrival_ms',
        "fleet_viewer_url":'fleet_viewer_url',
        "skipped_at_ms":'skipped_at_ms',
        "vehicle_id":'vehicle_id',
        "destination_address":'destination_address',
        "destination_address_id":'destination_address_id',
        "destination_lat":'destination_lat',
        "destination_lng":'destination_lng',
        "destination_name":'destination_name',
        "notes":'notes',
        "scheduled_departure_time_ms":'scheduled_departure_time_ms'
    }

    def __init__(self,
                 dispatch_route_id=None,
                 group_id=None,
                 id=None,
                 job_state=None,
                 scheduled_arrival_time_ms=None,
                 arrived_at_ms=None,
                 completed_at_ms=None,
                 driver_id=None,
                 en_route_at_ms=None,
                 estimated_arrival_ms=None,
                 fleet_viewer_url=None,
                 skipped_at_ms=None,
                 vehicle_id=None,
                 destination_address=None,
                 destination_address_id=None,
                 destination_lat=None,
                 destination_lng=None,
                 destination_name=None,
                 notes=None,
                 scheduled_departure_time_ms=None):
        """Constructor for the DispatchJob class"""

        # Initialize members of the class
        self.arrived_at_ms = arrived_at_ms
        self.completed_at_ms = completed_at_ms
        self.dispatch_route_id = dispatch_route_id
        self.driver_id = driver_id
        self.en_route_at_ms = en_route_at_ms
        self.estimated_arrival_ms = estimated_arrival_ms
        self.fleet_viewer_url = fleet_viewer_url
        self.group_id = group_id
        self.id = id
        self.job_state = job_state
        self.skipped_at_ms = skipped_at_ms
        self.vehicle_id = vehicle_id
        self.destination_address = destination_address
        self.destination_address_id = destination_address_id
        self.destination_lat = destination_lat
        self.destination_lng = destination_lng
        self.destination_name = destination_name
        self.notes = notes
        self.scheduled_arrival_time_ms = scheduled_arrival_time_ms
        self.scheduled_departure_time_ms = scheduled_departure_time_ms


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        dispatch_route_id = dictionary.get('dispatch_route_id')
        group_id = dictionary.get('group_id')
        id = dictionary.get('id')
        job_state = dictionary.get('job_state')
        scheduled_arrival_time_ms = dictionary.get('scheduled_arrival_time_ms')
        arrived_at_ms = dictionary.get('arrived_at_ms')
        completed_at_ms = dictionary.get('completed_at_ms')
        driver_id = dictionary.get('driver_id')
        en_route_at_ms = dictionary.get('en_route_at_ms')
        estimated_arrival_ms = dictionary.get('estimated_arrival_ms')
        fleet_viewer_url = dictionary.get('fleet_viewer_url')
        skipped_at_ms = dictionary.get('skipped_at_ms')
        vehicle_id = dictionary.get('vehicle_id')
        destination_address = dictionary.get('destination_address')
        destination_address_id = dictionary.get('destination_address_id')
        destination_lat = dictionary.get('destination_lat')
        destination_lng = dictionary.get('destination_lng')
        destination_name = dictionary.get('destination_name')
        notes = dictionary.get('notes')
        scheduled_departure_time_ms = dictionary.get('scheduled_departure_time_ms')

        # Return an object of this model
        return cls(dispatch_route_id,
                   group_id,
                   id,
                   job_state,
                   scheduled_arrival_time_ms,
                   arrived_at_ms,
                   completed_at_ms,
                   driver_id,
                   en_route_at_ms,
                   estimated_arrival_ms,
                   fleet_viewer_url,
                   skipped_at_ms,
                   vehicle_id,
                   destination_address,
                   destination_address_id,
                   destination_lat,
                   destination_lng,
                   destination_name,
                   notes,
                   scheduled_departure_time_ms)


