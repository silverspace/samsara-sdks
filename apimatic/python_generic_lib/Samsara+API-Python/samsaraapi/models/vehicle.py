# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Vehicle(object):

    """Implementation of the 'Vehicle' model.

    A vehicle object.

    Attributes:
        engine_hours (long|int): Total engine hours for the vehicle.
        fuel_level_percent (float): The fuel level of the vehicle as a
            percentage. (0.0 to 1.0)
        id (long|int): ID of the vehicle.
        name (string): Name of the vehicle.
        note (string): TODO: type description here.
        odometer_meters (long|int): The number of meters reported by the
            odometer.
        vin (string): Vehicle Identification Number.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "engine_hours":'engineHours',
        "fuel_level_percent":'fuelLevelPercent',
        "name":'name',
        "note":'note',
        "odometer_meters":'odometerMeters',
        "vin":'vin'
    }

    def __init__(self,
                 id=None,
                 engine_hours=None,
                 fuel_level_percent=None,
                 name=None,
                 note=None,
                 odometer_meters=None,
                 vin=None):
        """Constructor for the Vehicle class"""

        # Initialize members of the class
        self.engine_hours = engine_hours
        self.fuel_level_percent = fuel_level_percent
        self.id = id
        self.name = name
        self.note = note
        self.odometer_meters = odometer_meters
        self.vin = vin


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        engine_hours = dictionary.get('engineHours')
        fuel_level_percent = dictionary.get('fuelLevelPercent')
        name = dictionary.get('name')
        note = dictionary.get('note')
        odometer_meters = dictionary.get('odometerMeters')
        vin = dictionary.get('vin')

        # Return an object of this model
        return cls(id,
                   engine_hours,
                   fuel_level_percent,
                   name,
                   note,
                   odometer_meters,
                   vin)


