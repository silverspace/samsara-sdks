# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class UserBase(object):

    """Implementation of the 'UserBase' model.

    TODO: type model description here.

    Attributes:
        auth_type (AuthTypeEnum): The authentication type the user uses to
            authenticate. To use SAML this organization must have a configured
            SAML integration.
        email (string): The email address of this user.
        name (string): The first and last name of the user.
        organization_role_id (string): The id of the role the user is assigned
            to at the organization level. This will be blank for users that
            only have access to specific tags.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "auth_type":'authType',
        "email":'email',
        "name":'name',
        "organization_role_id":'organizationRoleId'
    }

    def __init__(self,
                 auth_type=None,
                 email=None,
                 name=None,
                 organization_role_id=None):
        """Constructor for the UserBase class"""

        # Initialize members of the class
        self.auth_type = auth_type
        self.email = email
        self.name = name
        self.organization_role_id = organization_role_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        auth_type = dictionary.get('authType')
        email = dictionary.get('email')
        name = dictionary.get('name')
        organization_role_id = dictionary.get('organizationRoleId')

        # Return an object of this model
        return cls(auth_type,
                   email,
                   name,
                   organization_role_id)


