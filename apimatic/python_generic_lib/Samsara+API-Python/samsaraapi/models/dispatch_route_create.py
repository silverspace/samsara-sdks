# -*- coding: utf-8 -*-

"""
    samsaraapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import samsaraapi.models.dispatch_job_create

class DispatchRouteCreate(object):

    """Implementation of the 'DispatchRouteCreate' model.

    TODO: type model description here.

    Attributes:
        dispatch_jobs (list of DispatchJobCreate): The dispatch jobs to create
            for this route.
        actual_end_ms (long|int): The time in Unix epoch milliseconds that the
            route actually ended.
        actual_start_ms (long|int): The time in Unix epoch milliseconds that
            the route actually started.
        driver_id (long|int): ID of the driver assigned to the dispatch route.
            Note that driver_id and vehicle_id are mutually exclusive. If
            neither is specified, then the route is unassigned.
        group_id (long|int): ID of the group if the organization has multiple
            groups (optional).
        name (string): Descriptive name of this route.
        scheduled_end_ms (long|int): The time in Unix epoch milliseconds that
            the last job in the route is scheduled to end.
        scheduled_meters (long|int): The distance expected to be traveled for
            this route in meters.
        scheduled_start_ms (long|int): The time in Unix epoch milliseconds
            that the route is scheduled to start.
        start_location_address (string): The address of the route's starting
            location, as it would be recognized if provided to
            maps.google.com. Optional if a valid start location address ID is
            provided.
        start_location_address_id (long|int): ID of the start location
            associated with an address book entry. Optional if valid values
            are provided for start location address or latitude/longitude. If
            a valid start location address ID is provided,
            address/latitude/longitude will be used from the address book
            entry. Name of the address book entry will only be used if the
            start location name is not provided.
        start_location_lat (float): Latitude of the start location in decimal
            degrees. Optional if a valid start location address ID is
            provided.
        start_location_lng (float): Longitude of the start location in decimal
            degrees. Optional if a valid start location address ID is
            provided.
        start_location_name (string): The name of the route's starting
            location. If provided, it will take precedence over the name of
            the address book entry.
        trailer_id (long|int): ID of the trailer assigned to the dispatch
            route. Note that trailers can only be assigned to routes that have
            a Vehicle or Driver assigned to them.
        vehicle_id (long|int): ID of the vehicle assigned to the dispatch
            route. Note that vehicle_id and driver_id are mutually exclusive.
            If neither is specified, then the route is unassigned.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dispatch_jobs":'dispatch_jobs',
        "name":'name',
        "scheduled_end_ms":'scheduled_end_ms',
        "scheduled_start_ms":'scheduled_start_ms',
        "actual_end_ms":'actual_end_ms',
        "actual_start_ms":'actual_start_ms',
        "driver_id":'driver_id',
        "group_id":'group_id',
        "scheduled_meters":'scheduled_meters',
        "start_location_address":'start_location_address',
        "start_location_address_id":'start_location_address_id',
        "start_location_lat":'start_location_lat',
        "start_location_lng":'start_location_lng',
        "start_location_name":'start_location_name',
        "trailer_id":'trailer_id',
        "vehicle_id":'vehicle_id'
    }

    def __init__(self,
                 dispatch_jobs=None,
                 name=None,
                 scheduled_end_ms=None,
                 scheduled_start_ms=None,
                 actual_end_ms=None,
                 actual_start_ms=None,
                 driver_id=None,
                 group_id=None,
                 scheduled_meters=None,
                 start_location_address=None,
                 start_location_address_id=None,
                 start_location_lat=None,
                 start_location_lng=None,
                 start_location_name=None,
                 trailer_id=None,
                 vehicle_id=None):
        """Constructor for the DispatchRouteCreate class"""

        # Initialize members of the class
        self.dispatch_jobs = dispatch_jobs
        self.actual_end_ms = actual_end_ms
        self.actual_start_ms = actual_start_ms
        self.driver_id = driver_id
        self.group_id = group_id
        self.name = name
        self.scheduled_end_ms = scheduled_end_ms
        self.scheduled_meters = scheduled_meters
        self.scheduled_start_ms = scheduled_start_ms
        self.start_location_address = start_location_address
        self.start_location_address_id = start_location_address_id
        self.start_location_lat = start_location_lat
        self.start_location_lng = start_location_lng
        self.start_location_name = start_location_name
        self.trailer_id = trailer_id
        self.vehicle_id = vehicle_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        dispatch_jobs = None
        if dictionary.get('dispatch_jobs') != None:
            dispatch_jobs = list()
            for structure in dictionary.get('dispatch_jobs'):
                dispatch_jobs.append(samsaraapi.models.dispatch_job_create.DispatchJobCreate.from_dictionary(structure))
        name = dictionary.get('name')
        scheduled_end_ms = dictionary.get('scheduled_end_ms')
        scheduled_start_ms = dictionary.get('scheduled_start_ms')
        actual_end_ms = dictionary.get('actual_end_ms')
        actual_start_ms = dictionary.get('actual_start_ms')
        driver_id = dictionary.get('driver_id')
        group_id = dictionary.get('group_id')
        scheduled_meters = dictionary.get('scheduled_meters')
        start_location_address = dictionary.get('start_location_address')
        start_location_address_id = dictionary.get('start_location_address_id')
        start_location_lat = dictionary.get('start_location_lat')
        start_location_lng = dictionary.get('start_location_lng')
        start_location_name = dictionary.get('start_location_name')
        trailer_id = dictionary.get('trailer_id')
        vehicle_id = dictionary.get('vehicle_id')

        # Return an object of this model
        return cls(dispatch_jobs,
                   name,
                   scheduled_end_ms,
                   scheduled_start_ms,
                   actual_end_ms,
                   actual_start_ms,
                   driver_id,
                   group_id,
                   scheduled_meters,
                   start_location_address,
                   start_location_address_id,
                   start_location_lat,
                   start_location_lng,
                   start_location_name,
                   trailer_id,
                   vehicle_id)


