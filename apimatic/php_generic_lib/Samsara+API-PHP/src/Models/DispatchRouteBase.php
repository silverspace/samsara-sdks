<?php
/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace SamsaraAPILib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class DispatchRouteBase implements JsonSerializable
{
    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     * @maps actual_end_ms
     * @var integer|null $actualEndMs public property
     */
    public $actualEndMs;

    /**
     * The time in Unix epoch milliseconds that the route actually started.
     * @maps actual_start_ms
     * @var integer|null $actualStartMs public property
     */
    public $actualStartMs;

    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually
     * exclusive. If neither is specified, then the route is unassigned.
     * @maps driver_id
     * @var integer|null $driverId public property
     */
    public $driverId;

    /**
     * ID of the group if the organization has multiple groups (optional).
     * @maps group_id
     * @var integer|null $groupId public property
     */
    public $groupId;

    /**
     * Descriptive name of this route.
     * @required
     * @var string $name public property
     */
    public $name;

    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     * @required
     * @maps scheduled_end_ms
     * @var integer $scheduledEndMs public property
     */
    public $scheduledEndMs;

    /**
     * The distance expected to be traveled for this route in meters.
     * @maps scheduled_meters
     * @var integer|null $scheduledMeters public property
     */
    public $scheduledMeters;

    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     * @required
     * @maps scheduled_start_ms
     * @var integer $scheduledStartMs public property
     */
    public $scheduledStartMs;

    /**
     * The address of the route's starting location, as it would be recognized if provided to maps.google.
     * com. Optional if a valid start location address ID is provided.
     * @maps start_location_address
     * @var string|null $startLocationAddress public property
     */
    public $startLocationAddress;

    /**
     * ID of the start location associated with an address book entry. Optional if valid values are
     * provided for start location address or latitude/longitude. If a valid start location address ID is
     * provided, address/latitude/longitude will be used from the address book entry. Name of the address
     * book entry will only be used if the start location name is not provided.
     * @maps start_location_address_id
     * @var integer|null $startLocationAddressId public property
     */
    public $startLocationAddressId;

    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is
     * provided.
     * @maps start_location_lat
     * @var double|null $startLocationLat public property
     */
    public $startLocationLat;

    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is
     * provided.
     * @maps start_location_lng
     * @var double|null $startLocationLng public property
     */
    public $startLocationLng;

    /**
     * The name of the route's starting location. If provided, it will take precedence over the name of the
     * address book entry.
     * @maps start_location_name
     * @var string|null $startLocationName public property
     */
    public $startLocationName;

    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes
     * that have a Vehicle or Driver assigned to them.
     * @maps trailer_id
     * @var integer|null $trailerId public property
     */
    public $trailerId;

    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually
     * exclusive. If neither is specified, then the route is unassigned.
     * @maps vehicle_id
     * @var integer|null $vehicleId public property
     */
    public $vehicleId;

    /**
     * Constructor to set initial or default values of member properties
     * @param integer $actualEndMs            Initialization value for $this->actualEndMs
     * @param integer $actualStartMs          Initialization value for $this->actualStartMs
     * @param integer $driverId               Initialization value for $this->driverId
     * @param integer $groupId                Initialization value for $this->groupId
     * @param string  $name                   Initialization value for $this->name
     * @param integer $scheduledEndMs         Initialization value for $this->scheduledEndMs
     * @param integer $scheduledMeters        Initialization value for $this->scheduledMeters
     * @param integer $scheduledStartMs       Initialization value for $this->scheduledStartMs
     * @param string  $startLocationAddress   Initialization value for $this->startLocationAddress
     * @param integer $startLocationAddressId Initialization value for $this->startLocationAddressId
     * @param double  $startLocationLat       Initialization value for $this->startLocationLat
     * @param double  $startLocationLng       Initialization value for $this->startLocationLng
     * @param string  $startLocationName      Initialization value for $this->startLocationName
     * @param integer $trailerId              Initialization value for $this->trailerId
     * @param integer $vehicleId              Initialization value for $this->vehicleId
     */
    public function __construct()
    {
        if (15 == func_num_args()) {
            $this->actualEndMs            = func_get_arg(0);
            $this->actualStartMs          = func_get_arg(1);
            $this->driverId               = func_get_arg(2);
            $this->groupId                = func_get_arg(3);
            $this->name                   = func_get_arg(4);
            $this->scheduledEndMs         = func_get_arg(5);
            $this->scheduledMeters        = func_get_arg(6);
            $this->scheduledStartMs       = func_get_arg(7);
            $this->startLocationAddress   = func_get_arg(8);
            $this->startLocationAddressId = func_get_arg(9);
            $this->startLocationLat       = func_get_arg(10);
            $this->startLocationLng       = func_get_arg(11);
            $this->startLocationName      = func_get_arg(12);
            $this->trailerId              = func_get_arg(13);
            $this->vehicleId              = func_get_arg(14);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['actual_end_ms']             = $this->actualEndMs;
        $json['actual_start_ms']           = $this->actualStartMs;
        $json['driver_id']                 = $this->driverId;
        $json['group_id']                  = $this->groupId;
        $json['name']                      = $this->name;
        $json['scheduled_end_ms']          = $this->scheduledEndMs;
        $json['scheduled_meters']          = $this->scheduledMeters;
        $json['scheduled_start_ms']        = $this->scheduledStartMs;
        $json['start_location_address']    = $this->startLocationAddress;
        $json['start_location_address_id'] = $this->startLocationAddressId;
        $json['start_location_lat']        = $this->startLocationLat;
        $json['start_location_lng']        = $this->startLocationLng;
        $json['start_location_name']       = $this->startLocationName;
        $json['trailer_id']                = $this->trailerId;
        $json['vehicle_id']                = $this->vehicleId;

        return $json;
    }
}
