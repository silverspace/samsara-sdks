<?php
/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace SamsaraAPILib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class Trip implements JsonSerializable
{
    /**
     * Length of the trip in meters.
     * @var integer|null $distanceMeters public property
     */
    public $distanceMeters;

    /**
     * ID of the driver.
     * @var integer|null $driverId public property
     */
    public $driverId;

    /**
     * Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
     * @var string|null $endAddress public property
     */
    public $endAddress;

    /**
     * End (latitude, longitude) in decimal degrees.
     * @var \SamsaraAPILib\Models\EndCoordinates|null $endCoordinates public property
     */
    public $endCoordinates;

    /**
     * Geocoded street address of start (latitude, longitude) coordinates.
     * @var string|null $endLocation public property
     */
    public $endLocation;

    /**
     * End of the trip in UNIX milliseconds.
     * @var integer|null $endMs public property
     */
    public $endMs;

    /**
     * Odometer reading at the end of the trip.
     * @var integer|null $endOdometer public property
     */
    public $endOdometer;

    /**
     * Amount in milliliters of fuel consumed on this trip.
     * @var integer|null $fuelConsumedMl public property
     */
    public $fuelConsumedMl;

    /**
     * Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
     * @var string|null $startAddress public property
     */
    public $startAddress;

    /**
     * Start (latitude, longitude) in decimal degrees.
     * @var \SamsaraAPILib\Models\StartCoordinates|null $startCoordinates public property
     */
    public $startCoordinates;

    /**
     * Geocoded street address of start (latitude, longitude) coordinates.
     * @var string|null $startLocation public property
     */
    public $startLocation;

    /**
     * Beginning of the trip in UNIX milliseconds.
     * @var integer|null $startMs public property
     */
    public $startMs;

    /**
     * Odometer reading at the beginning of the trip.
     * @var integer|null $startOdometer public property
     */
    public $startOdometer;

    /**
     * Length in meters trip spent on toll roads.
     * @var integer|null $tollMeters public property
     */
    public $tollMeters;

    /**
     * Constructor to set initial or default values of member properties
     * @param integer          $distanceMeters   Initialization value for $this->distanceMeters
     * @param integer          $driverId         Initialization value for $this->driverId
     * @param string           $endAddress       Initialization value for $this->endAddress
     * @param EndCoordinates   $endCoordinates   Initialization value for $this->endCoordinates
     * @param string           $endLocation      Initialization value for $this->endLocation
     * @param integer          $endMs            Initialization value for $this->endMs
     * @param integer          $endOdometer      Initialization value for $this->endOdometer
     * @param integer          $fuelConsumedMl   Initialization value for $this->fuelConsumedMl
     * @param string           $startAddress     Initialization value for $this->startAddress
     * @param StartCoordinates $startCoordinates Initialization value for $this->startCoordinates
     * @param string           $startLocation    Initialization value for $this->startLocation
     * @param integer          $startMs          Initialization value for $this->startMs
     * @param integer          $startOdometer    Initialization value for $this->startOdometer
     * @param integer          $tollMeters       Initialization value for $this->tollMeters
     */
    public function __construct()
    {
        if (14 == func_num_args()) {
            $this->distanceMeters   = func_get_arg(0);
            $this->driverId         = func_get_arg(1);
            $this->endAddress       = func_get_arg(2);
            $this->endCoordinates   = func_get_arg(3);
            $this->endLocation      = func_get_arg(4);
            $this->endMs            = func_get_arg(5);
            $this->endOdometer      = func_get_arg(6);
            $this->fuelConsumedMl   = func_get_arg(7);
            $this->startAddress     = func_get_arg(8);
            $this->startCoordinates = func_get_arg(9);
            $this->startLocation    = func_get_arg(10);
            $this->startMs          = func_get_arg(11);
            $this->startOdometer    = func_get_arg(12);
            $this->tollMeters       = func_get_arg(13);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['distanceMeters']   = $this->distanceMeters;
        $json['driverId']         = $this->driverId;
        $json['endAddress']       = $this->endAddress;
        $json['endCoordinates']   = $this->endCoordinates;
        $json['endLocation']      = $this->endLocation;
        $json['endMs']            = $this->endMs;
        $json['endOdometer']      = $this->endOdometer;
        $json['fuelConsumedMl']   = $this->fuelConsumedMl;
        $json['startAddress']     = $this->startAddress;
        $json['startCoordinates'] = $this->startCoordinates;
        $json['startLocation']    = $this->startLocation;
        $json['startMs']          = $this->startMs;
        $json['startOdometer']    = $this->startOdometer;
        $json['tollMeters']       = $this->tollMeters;

        return $json;
    }
}
