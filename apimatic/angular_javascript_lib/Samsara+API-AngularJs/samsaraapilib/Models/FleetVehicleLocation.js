/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of FleetVehicleLocation
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('FleetVehicleLocation', ['BaseModel', FleetVehicleLocationModel]);

    function FleetVehicleLocationModel(BaseModel) {
        var FleetVehicleLocation = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.latitude = this.getValue(obj.latitude);
            this.location = this.getValue(obj.location);
            this.longitude = this.getValue(obj.longitude);
            this.speedMilesPerHour = this.getValue(obj.speedMilesPerHour);
            this.timeMs = this.getValue(obj.timeMs);
        };

        FleetVehicleLocation.prototype = new BaseModel();
        FleetVehicleLocation.prototype.constructor = FleetVehicleLocation;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        FleetVehicleLocation.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'latitude', realName: 'latitude' },
                { name: 'location', realName: 'location' },
                { name: 'longitude', realName: 'longitude' },
                { name: 'speedMilesPerHour', realName: 'speedMilesPerHour' },
                { name: 'timeMs', realName: 'timeMs' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        FleetVehicleLocation.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The latitude of the location in degrees.
         *
         * @return {double|null}
         */
        FleetVehicleLocation.prototype.getLatitude = function () {
            return this.latitude;
        };
    
        /**
         * Setter for Latitude
         * 
         * @param {double|null} value 
         */
        FleetVehicleLocation.prototype.setLatitude = function (value) {
            this.latitude = value;
        };
    
        /**
         * The best effort (street,city,state) for the latitude and longitude.
         *
         * @return {string|null}
         */
        FleetVehicleLocation.prototype.getLocation = function () {
            return this.location;
        };
    
        /**
         * Setter for Location
         * 
         * @param {string|null} value 
         */
        FleetVehicleLocation.prototype.setLocation = function (value) {
            this.location = value;
        };
    
        /**
         * The longitude of the location in degrees.
         *
         * @return {double|null}
         */
        FleetVehicleLocation.prototype.getLongitude = function () {
            return this.longitude;
        };
    
        /**
         * Setter for Longitude
         * 
         * @param {double|null} value 
         */
        FleetVehicleLocation.prototype.setLongitude = function (value) {
            this.longitude = value;
        };
    
        /**
         * The speed calculated from GPS that the asset was traveling at in miles per hour.
         *
         * @return {double|null}
         */
        FleetVehicleLocation.prototype.getSpeedMilesPerHour = function () {
            return this.speedMilesPerHour;
        };
    
        /**
         * Setter for SpeedMilesPerHour
         * 
         * @param {double|null} value 
         */
        FleetVehicleLocation.prototype.setSpeedMilesPerHour = function (value) {
            this.speedMilesPerHour = value;
        };
    
        /**
         * Time in Unix milliseconds since epoch when the asset was at the location.
         *
         * @return {long|null}
         */
        FleetVehicleLocation.prototype.getTimeMs = function () {
            return this.timeMs;
        };
    
        /**
         * Setter for TimeMs
         * 
         * @param {long|null} value 
         */
        FleetVehicleLocation.prototype.setTimeMs = function (value) {
            this.timeMs = value;
        };
    
        return FleetVehicleLocation;
    }

}(angular));
