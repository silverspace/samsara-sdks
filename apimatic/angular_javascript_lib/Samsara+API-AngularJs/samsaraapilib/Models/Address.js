/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Address
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Address', ['BaseModel', AddressModel]);

    function AddressModel(BaseModel) {
        var Address = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.contacts = this.getValue(obj.contacts);
            this.formattedAddress = this.getValue(obj.formattedAddress);
            this.geofence = this.getValue(obj.geofence);
            this.id = this.getValue(obj.id);
            this.name = this.getValue(obj.name);
            this.notes = this.getValue(obj.notes);
            this.tags = this.getValue(obj.tags);
        };

        Address.prototype = new BaseModel();
        Address.prototype.constructor = Address;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Address.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'contacts', realName: 'contacts', array: true, type: 'Contact' },
                { name: 'formattedAddress', realName: 'formattedAddress' },
                { name: 'geofence', realName: 'geofence', type: 'AddressGeofence' },
                { name: 'id', realName: 'id' },
                { name: 'name', realName: 'name' },
                { name: 'notes', realName: 'notes' },
                { name: 'tags', realName: 'tags', array: true, type: 'TagMetadata' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Address.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        Address.prototype.getContacts = function () {
            return this.contacts;
        };
    
        /**
         * Setter for Contacts
         * 
         * @param {array|null} value 
         */
        Address.prototype.setContacts = function (value) {
            this.contacts = value;
        };
    
        /**
         * The full address associated with this address/geofence, as it might be recognized by maps.google.com
         *
         * @return {string|null}
         */
        Address.prototype.getFormattedAddress = function () {
            return this.formattedAddress;
        };
    
        /**
         * Setter for FormattedAddress
         * 
         * @param {string|null} value 
         */
        Address.prototype.setFormattedAddress = function (value) {
            this.formattedAddress = value;
        };
    
        /**
         * The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only
         * one key should be provided, depending on the geofence type.
         *
         * @return {AddressGeofence|null}
         */
        Address.prototype.getGeofence = function () {
            return this.geofence;
        };
    
        /**
         * Setter for Geofence
         * 
         * @param {AddressGeofence|null} value 
         */
        Address.prototype.setGeofence = function (value) {
            this.geofence = value;
        };
    
        /**
         * ID of the address
         *
         * @return {long|null}
         */
        Address.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long|null} value 
         */
        Address.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * Name of the address or geofence
         *
         * @return {string|null}
         */
        Address.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        Address.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * Notes associated with an address.
         *
         * @return {string|null}
         */
        Address.prototype.getNotes = function () {
            return this.notes;
        };
    
        /**
         * Setter for Notes
         * 
         * @param {string|null} value 
         */
        Address.prototype.setNotes = function (value) {
            this.notes = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        Address.prototype.getTags = function () {
            return this.tags;
        };
    
        /**
         * Setter for Tags
         * 
         * @param {array|null} value 
         */
        Address.prototype.setTags = function (value) {
            this.tags = value;
        };
    
        return Address;
    }

}(angular));
