/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of DiagnosticTroubleCode1
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('DiagnosticTroubleCode1', ['BaseModel', DiagnosticTroubleCode1Model]);

    function DiagnosticTroubleCode1Model(BaseModel) {
        var DiagnosticTroubleCode1 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.dtcDescription = this.getValue(obj.dtcDescription);
            this.dtcId = this.getValue(obj.dtcId);
            this.dtcShortCode = this.getValue(obj.dtcShortCode);
        };

        DiagnosticTroubleCode1.prototype = new BaseModel();
        DiagnosticTroubleCode1.prototype.constructor = DiagnosticTroubleCode1;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        DiagnosticTroubleCode1.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'dtcDescription', realName: 'dtcDescription' },
                { name: 'dtcId', realName: 'dtcId' },
                { name: 'dtcShortCode', realName: 'dtcShortCode' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        DiagnosticTroubleCode1.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DiagnosticTroubleCode1.prototype.getDtcDescription = function () {
            return this.dtcDescription;
        };
    
        /**
         * Setter for DtcDescription
         * 
         * @param {string|null} value 
         */
        DiagnosticTroubleCode1.prototype.setDtcDescription = function (value) {
            this.dtcDescription = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        DiagnosticTroubleCode1.prototype.getDtcId = function () {
            return this.dtcId;
        };
    
        /**
         * Setter for DtcId
         * 
         * @param {int|null} value 
         */
        DiagnosticTroubleCode1.prototype.setDtcId = function (value) {
            this.dtcId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DiagnosticTroubleCode1.prototype.getDtcShortCode = function () {
            return this.dtcShortCode;
        };
    
        /**
         * Setter for DtcShortCode
         * 
         * @param {string|null} value 
         */
        DiagnosticTroubleCode1.prototype.setDtcShortCode = function (value) {
            this.dtcShortCode = value;
        };
    
        return DiagnosticTroubleCode1;
    }

}(angular));
