/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of AddressParam
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('AddressParam', ['BaseModel', AddressParamModel]);

    function AddressParamModel(BaseModel) {
        var AddressParam = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.address = this.getValue(obj.address);
            this.groupId = this.getValue(obj.groupId);
            this.name = this.getValue(obj.name);
            this.radius = this.getValue(obj.radius);
        };

        AddressParam.prototype = new BaseModel();
        AddressParam.prototype.constructor = AddressParam;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        AddressParam.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'address', realName: 'address' },
                { name: 'groupId', realName: 'groupId' },
                { name: 'name', realName: 'name' },
                { name: 'radius', realName: 'radius' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        AddressParam.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The address of the entry to add, as it would be recognized if provided to maps.google.com.
         *
         * @return {string}
         */
        AddressParam.prototype.getAddress = function () {
            return this.address;
        };
    
        /**
         * Setter for Address
         * 
         * @param {string} value 
         */
        AddressParam.prototype.setAddress = function (value) {
            this.address = value;
        };
    
        /**
         * Group ID to query.
         *
         * @return {long}
         */
        AddressParam.prototype.getGroupId = function () {
            return this.groupId;
        };
    
        /**
         * Setter for GroupId
         * 
         * @param {long} value 
         */
        AddressParam.prototype.setGroupId = function (value) {
            this.groupId = value;
        };
    
        /**
         * Name of the location to add to the address book.
         *
         * @return {string}
         */
        AddressParam.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string} value 
         */
        AddressParam.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * Radius in meters of the address (used for matching vehicle trip stops to this location).
         *
         * @return {int}
         */
        AddressParam.prototype.getRadius = function () {
            return this.radius;
        };
    
        /**
         * Setter for Radius
         * 
         * @param {int} value 
         */
        AddressParam.prototype.setRadius = function (value) {
            this.radius = value;
        };
    
        return AddressParam;
    }

}(angular));
