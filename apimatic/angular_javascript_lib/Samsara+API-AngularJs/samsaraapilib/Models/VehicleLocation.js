/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of VehicleLocation
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('VehicleLocation', ['BaseModel', VehicleLocationModel]);

    function VehicleLocationModel(BaseModel) {
        var VehicleLocation = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.heading = this.getValue(obj.heading);
            this.id = this.getValue(obj.id);
            this.latitude = this.getValue(obj.latitude);
            this.location = this.getValue(obj.location);
            this.longitude = this.getValue(obj.longitude);
            this.name = this.getValue(obj.name);
            this.odometerMeters = this.getValue(obj.odometerMeters);
            this.onTrip = this.getValue(obj.onTrip);
            this.speed = this.getValue(obj.speed);
            this.time = this.getValue(obj.time);
            this.vin = this.getValue(obj.vin);
        };

        VehicleLocation.prototype = new BaseModel();
        VehicleLocation.prototype.constructor = VehicleLocation;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        VehicleLocation.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'heading', realName: 'heading' },
                { name: 'id', realName: 'id' },
                { name: 'latitude', realName: 'latitude' },
                { name: 'location', realName: 'location' },
                { name: 'longitude', realName: 'longitude' },
                { name: 'name', realName: 'name' },
                { name: 'odometerMeters', realName: 'odometerMeters' },
                { name: 'onTrip', realName: 'onTrip' },
                { name: 'speed', realName: 'speed' },
                { name: 'time', realName: 'time' },
                { name: 'vin', realName: 'vin' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        VehicleLocation.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Heading in degrees.
         *
         * @return {double|null}
         */
        VehicleLocation.prototype.getHeading = function () {
            return this.heading;
        };
    
        /**
         * Setter for Heading
         * 
         * @param {double|null} value 
         */
        VehicleLocation.prototype.setHeading = function (value) {
            this.heading = value;
        };
    
        /**
         * ID of the vehicle.
         *
         * @return {long}
         */
        VehicleLocation.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long} value 
         */
        VehicleLocation.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * Latitude in decimal degrees.
         *
         * @return {double|null}
         */
        VehicleLocation.prototype.getLatitude = function () {
            return this.latitude;
        };
    
        /**
         * Setter for Latitude
         * 
         * @param {double|null} value 
         */
        VehicleLocation.prototype.setLatitude = function (value) {
            this.latitude = value;
        };
    
        /**
         * Text representation of nearest identifiable location to (latitude, longitude) coordinates.
         *
         * @return {string|null}
         */
        VehicleLocation.prototype.getLocation = function () {
            return this.location;
        };
    
        /**
         * Setter for Location
         * 
         * @param {string|null} value 
         */
        VehicleLocation.prototype.setLocation = function (value) {
            this.location = value;
        };
    
        /**
         * Longitude in decimal degrees.
         *
         * @return {double|null}
         */
        VehicleLocation.prototype.getLongitude = function () {
            return this.longitude;
        };
    
        /**
         * Setter for Longitude
         * 
         * @param {double|null} value 
         */
        VehicleLocation.prototype.setLongitude = function (value) {
            this.longitude = value;
        };
    
        /**
         * Name of the vehicle.
         *
         * @return {string|null}
         */
        VehicleLocation.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        VehicleLocation.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * The number of meters reported by the odometer.
         *
         * @return {long|null}
         */
        VehicleLocation.prototype.getOdometerMeters = function () {
            return this.odometerMeters;
        };
    
        /**
         * Setter for OdometerMeters
         * 
         * @param {long|null} value 
         */
        VehicleLocation.prototype.setOdometerMeters = function (value) {
            this.odometerMeters = value;
        };
    
        /**
         * Whether or not a trip is currently in progress for this vehicle. More information available via
         * /fleet/trips endpoint.
         *
         * @return {bool|null}
         */
        VehicleLocation.prototype.getOnTrip = function () {
            return this.onTrip;
        };
    
        /**
         * Setter for OnTrip
         * 
         * @param {bool|null} value 
         */
        VehicleLocation.prototype.setOnTrip = function (value) {
            this.onTrip = value;
        };
    
        /**
         * Speed in miles per hour.
         *
         * @return {double|null}
         */
        VehicleLocation.prototype.getSpeed = function () {
            return this.speed;
        };
    
        /**
         * Setter for Speed
         * 
         * @param {double|null} value 
         */
        VehicleLocation.prototype.setSpeed = function (value) {
            this.speed = value;
        };
    
        /**
         * The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
         *
         * @return {long|null}
         */
        VehicleLocation.prototype.getTime = function () {
            return this.time;
        };
    
        /**
         * Setter for Time
         * 
         * @param {long|null} value 
         */
        VehicleLocation.prototype.setTime = function (value) {
            this.time = value;
        };
    
        /**
         * Vehicle Identification Number (VIN) of the vehicle.
         *
         * @return {string|null}
         */
        VehicleLocation.prototype.getVin = function () {
            return this.vin;
        };
    
        /**
         * Setter for Vin
         * 
         * @param {string|null} value 
         */
        VehicleLocation.prototype.setVin = function (value) {
            this.vin = value;
        };
    
        return VehicleLocation;
    }

}(angular));
