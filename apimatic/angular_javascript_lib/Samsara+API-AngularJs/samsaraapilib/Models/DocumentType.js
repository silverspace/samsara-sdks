/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of DocumentType
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('DocumentType', ['BaseModel', DocumentTypeModel]);

    function DocumentTypeModel(BaseModel) {
        var DocumentType = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.fieldTypes = this.getValue(obj.fieldTypes);
            this.name = this.getValue(obj.name);
            this.orgId = this.getValue(obj.orgId);
            this.uuid = this.getValue(obj.uuid);
        };

        DocumentType.prototype = new BaseModel();
        DocumentType.prototype.constructor = DocumentType;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        DocumentType.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'fieldTypes', realName: 'fieldTypes', array: true, type: 'DocumentFieldType' },
                { name: 'name', realName: 'name' },
                { name: 'orgId', realName: 'orgId' },
                { name: 'uuid', realName: 'uuid' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        DocumentType.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The field types determine the names of fields for this document type. They also determine the types of
         * values a document submitted for this document type can have.
         *
         * @return {array|null}
         */
        DocumentType.prototype.getFieldTypes = function () {
            return this.fieldTypes;
        };
    
        /**
         * Setter for FieldTypes
         * 
         * @param {array|null} value 
         */
        DocumentType.prototype.setFieldTypes = function (value) {
            this.fieldTypes = value;
        };
    
        /**
         * Name of the document type.
         *
         * @return {string}
         */
        DocumentType.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string} value 
         */
        DocumentType.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * ID for the organization this document belongs to.
         *
         * @return {long}
         */
        DocumentType.prototype.getOrgId = function () {
            return this.orgId;
        };
    
        /**
         * Setter for OrgId
         * 
         * @param {long} value 
         */
        DocumentType.prototype.setOrgId = function (value) {
            this.orgId = value;
        };
    
        /**
         * Universally unique identifier for the document type. Can be passed in as a documentTypeUuid when creating
         * a document for this document type.
         *
         * @return {string}
         */
        DocumentType.prototype.getUuid = function () {
            return this.uuid;
        };
    
        /**
         * Setter for Uuid
         * 
         * @param {string} value 
         */
        DocumentType.prototype.setUuid = function (value) {
            this.uuid = value;
        };
    
        return DocumentType;
    }

}(angular));
