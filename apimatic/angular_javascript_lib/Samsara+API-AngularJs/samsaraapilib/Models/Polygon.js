/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Polygon
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Polygon', ['BaseModel', PolygonModel]);

    function PolygonModel(BaseModel) {
        var Polygon = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.vertices = this.getValue(obj.vertices);
        };

        Polygon.prototype = new BaseModel();
        Polygon.prototype.constructor = Polygon;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Polygon.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'vertices', realName: 'vertices', array: true, type: 'Vertex' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Polygon.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and
         * must consist of at least 3 vertices and less than 40.
         *
         * @return {array|null}
         */
        Polygon.prototype.getVertices = function () {
            return this.vertices;
        };
    
        /**
         * Setter for Vertices
         * 
         * @param {array|null} value 
         */
        Polygon.prototype.setVertices = function (value) {
            this.vertices = value;
        };
    
        return Polygon;
    }

}(angular));
