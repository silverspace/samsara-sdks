/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of AddressGeofence
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('AddressGeofence', ['BaseModel', AddressGeofenceModel]);

    function AddressGeofenceModel(BaseModel) {
        var AddressGeofence = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.circle = this.getValue(obj.circle);
            this.polygon = this.getValue(obj.polygon);
        };

        AddressGeofence.prototype = new BaseModel();
        AddressGeofence.prototype.constructor = AddressGeofence;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        AddressGeofence.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'circle', realName: 'circle', type: 'Circle' },
                { name: 'polygon', realName: 'polygon', type: 'Polygon' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        AddressGeofence.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Information about a circular geofence. This field is only populated if the geofence is a circle.
         *
         * @return {Circle|null}
         */
        AddressGeofence.prototype.getCircle = function () {
            return this.circle;
        };
    
        /**
         * Setter for Circle
         * 
         * @param {Circle|null} value 
         */
        AddressGeofence.prototype.setCircle = function (value) {
            this.circle = value;
        };
    
        /**
         * Information about a polygon geofence. This field is only populated if the geofence is a polygon.
         *
         * @return {Polygon|null}
         */
        AddressGeofence.prototype.getPolygon = function () {
            return this.polygon;
        };
    
        /**
         * Setter for Polygon
         * 
         * @param {Polygon|null} value 
         */
        AddressGeofence.prototype.setPolygon = function (value) {
            this.polygon = value;
        };
    
        return AddressGeofence;
    }

}(angular));
