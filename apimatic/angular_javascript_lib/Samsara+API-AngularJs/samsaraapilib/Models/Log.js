/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Log
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Log', ['BaseModel', LogModel]);

    function LogModel(BaseModel) {
        var Log = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.codriverIds = this.getValue(obj.codriverIds);
            this.driverId = this.getValue(obj.driverId);
            this.groupId = this.getValue(obj.groupId);
            this.locCity = this.getValue(obj.locCity);
            this.locLat = this.getValue(obj.locLat);
            this.locLng = this.getValue(obj.locLng);
            this.locName = this.getValue(obj.locName);
            this.locState = this.getValue(obj.locState);
            this.logStartMs = this.getValue(obj.logStartMs);
            this.remark = this.getValue(obj.remark);
            this.statusType = this.getValue(obj.statusType);
            this.vehicleId = this.getValue(obj.vehicleId);
        };

        Log.prototype = new BaseModel();
        Log.prototype.constructor = Log;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Log.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'codriverIds', realName: 'codriverIds', array: true },
                { name: 'driverId', realName: 'driverId' },
                { name: 'groupId', realName: 'groupId' },
                { name: 'locCity', realName: 'locCity' },
                { name: 'locLat', realName: 'locLat' },
                { name: 'locLng', realName: 'locLng' },
                { name: 'locName', realName: 'locName' },
                { name: 'locState', realName: 'locState' },
                { name: 'logStartMs', realName: 'logStartMs' },
                { name: 'remark', realName: 'remark' },
                { name: 'statusType', realName: 'statusType' },
                { name: 'vehicleId', realName: 'vehicleId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Log.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        Log.prototype.getCodriverIds = function () {
            return this.codriverIds;
        };
    
        /**
         * Setter for CodriverIds
         * 
         * @param {array|null} value 
         */
        Log.prototype.setCodriverIds = function (value) {
            this.codriverIds = value;
        };
    
        /**
         * ID of the driver.
         *
         * @return {long|null}
         */
        Log.prototype.getDriverId = function () {
            return this.driverId;
        };
    
        /**
         * Setter for DriverId
         * 
         * @param {long|null} value 
         */
        Log.prototype.setDriverId = function (value) {
            this.driverId = value;
        };
    
        /**
         * ID of the group.
         *
         * @return {long|null}
         */
        Log.prototype.getGroupId = function () {
            return this.groupId;
        };
    
        /**
         * Setter for GroupId
         * 
         * @param {long|null} value 
         */
        Log.prototype.setGroupId = function (value) {
            this.groupId = value;
        };
    
        /**
         * City in which the log was recorded.
         *
         * @return {string|null}
         */
        Log.prototype.getLocCity = function () {
            return this.locCity;
        };
    
        /**
         * Setter for LocCity
         * 
         * @param {string|null} value 
         */
        Log.prototype.setLocCity = function (value) {
            this.locCity = value;
        };
    
        /**
         * Latitude at which the log was recorded.
         *
         * @return {double|null}
         */
        Log.prototype.getLocLat = function () {
            return this.locLat;
        };
    
        /**
         * Setter for LocLat
         * 
         * @param {double|null} value 
         */
        Log.prototype.setLocLat = function (value) {
            this.locLat = value;
        };
    
        /**
         * Longitude at which the log was recorded.
         *
         * @return {double|null}
         */
        Log.prototype.getLocLng = function () {
            return this.locLng;
        };
    
        /**
         * Setter for LocLng
         * 
         * @param {double|null} value 
         */
        Log.prototype.setLocLng = function (value) {
            this.locLng = value;
        };
    
        /**
         * Name of location at which the log was recorded.
         *
         * @return {string|null}
         */
        Log.prototype.getLocName = function () {
            return this.locName;
        };
    
        /**
         * Setter for LocName
         * 
         * @param {string|null} value 
         */
        Log.prototype.setLocName = function (value) {
            this.locName = value;
        };
    
        /**
         * State in which the log was recorded.
         *
         * @return {string|null}
         */
        Log.prototype.getLocState = function () {
            return this.locState;
        };
    
        /**
         * Setter for LocState
         * 
         * @param {string|null} value 
         */
        Log.prototype.setLocState = function (value) {
            this.locState = value;
        };
    
        /**
         * The time at which the log/HOS status started in UNIX milliseconds.
         *
         * @return {long|null}
         */
        Log.prototype.getLogStartMs = function () {
            return this.logStartMs;
        };
    
        /**
         * Setter for LogStartMs
         * 
         * @param {long|null} value 
         */
        Log.prototype.setLogStartMs = function (value) {
            this.logStartMs = value;
        };
    
        /**
         * Remark associated with the log entry.
         *
         * @return {string|null}
         */
        Log.prototype.getRemark = function () {
            return this.remark;
        };
    
        /**
         * Setter for Remark
         * 
         * @param {string|null} value 
         */
        Log.prototype.setRemark = function (value) {
            this.remark = value;
        };
    
        /**
         * The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
         * `PERSONAL_CONVEYANCE`.
         *
         * @return {string|null}
         */
        Log.prototype.getStatusType = function () {
            return this.statusType;
        };
    
        /**
         * Setter for StatusType
         * 
         * @param {string|null} value 
         */
        Log.prototype.setStatusType = function (value) {
            this.statusType = value;
        };
    
        /**
         * ID of the vehicle.
         *
         * @return {long|null}
         */
        Log.prototype.getVehicleId = function () {
            return this.vehicleId;
        };
    
        /**
         * Setter for VehicleId
         * 
         * @param {long|null} value 
         */
        Log.prototype.setVehicleId = function (value) {
            this.vehicleId = value;
        };
    
        return Log;
    }

}(angular));
