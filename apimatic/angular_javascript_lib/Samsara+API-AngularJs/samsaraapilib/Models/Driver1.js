/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Driver1
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Driver1', ['BaseModel', Driver1Model]);

    function Driver1Model(BaseModel) {
        var Driver1 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.cycleRemaining = this.getValue(obj.cycleRemaining);
            this.cycleTomorrow = this.getValue(obj.cycleTomorrow);
            this.driverId = this.getValue(obj.driverId);
            this.driverName = this.getValue(obj.driverName);
            this.drivingInViolationCycle = this.getValue(obj.drivingInViolationCycle);
            this.drivingInViolationToday = this.getValue(obj.drivingInViolationToday);
            this.dutyStatus = this.getValue(obj.dutyStatus);
            this.shiftDriveRemaining = this.getValue(obj.shiftDriveRemaining);
            this.shiftRemaining = this.getValue(obj.shiftRemaining);
            this.timeInCurrentStatus = this.getValue(obj.timeInCurrentStatus);
            this.timeUntilBreak = this.getValue(obj.timeUntilBreak);
            this.vehicleName = this.getValue(obj.vehicleName);
        };

        Driver1.prototype = new BaseModel();
        Driver1.prototype.constructor = Driver1;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Driver1.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'cycleRemaining', realName: 'cycleRemaining' },
                { name: 'cycleTomorrow', realName: 'cycleTomorrow' },
                { name: 'driverId', realName: 'driverId' },
                { name: 'driverName', realName: 'driverName' },
                { name: 'drivingInViolationCycle', realName: 'drivingInViolationCycle' },
                { name: 'drivingInViolationToday', realName: 'drivingInViolationToday' },
                { name: 'dutyStatus', realName: 'dutyStatus' },
                { name: 'shiftDriveRemaining', realName: 'shiftDriveRemaining' },
                { name: 'shiftRemaining', realName: 'shiftRemaining' },
                { name: 'timeInCurrentStatus', realName: 'timeInCurrentStatus' },
                { name: 'timeUntilBreak', realName: 'timeUntilBreak' },
                { name: 'vehicleName', realName: 'vehicleName' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Driver1.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The amount of remaining cycle time (in ms).
         *
         * @return {long|null}
         */
        Driver1.prototype.getCycleRemaining = function () {
            return this.cycleRemaining;
        };
    
        /**
         * Setter for CycleRemaining
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setCycleRemaining = function (value) {
            this.cycleRemaining = value;
        };
    
        /**
         * The amount of cycle time (in ms) available tomorrow.
         *
         * @return {long|null}
         */
        Driver1.prototype.getCycleTomorrow = function () {
            return this.cycleTomorrow;
        };
    
        /**
         * Setter for CycleTomorrow
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setCycleTomorrow = function (value) {
            this.cycleTomorrow = value;
        };
    
        /**
         * ID of the driver.
         *
         * @return {long|null}
         */
        Driver1.prototype.getDriverId = function () {
            return this.driverId;
        };
    
        /**
         * Setter for DriverId
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setDriverId = function (value) {
            this.driverId = value;
        };
    
        /**
         * Name of the driver.
         *
         * @return {string|null}
         */
        Driver1.prototype.getDriverName = function () {
            return this.driverName;
        };
    
        /**
         * Setter for DriverName
         * 
         * @param {string|null} value 
         */
        Driver1.prototype.setDriverName = function (value) {
            this.driverName = value;
        };
    
        /**
         * The amount of driving time in violation in this cycle (in ms).
         *
         * @return {long|null}
         */
        Driver1.prototype.getDrivingInViolationCycle = function () {
            return this.drivingInViolationCycle;
        };
    
        /**
         * Setter for DrivingInViolationCycle
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setDrivingInViolationCycle = function (value) {
            this.drivingInViolationCycle = value;
        };
    
        /**
         * The amount of driving time in violation today (in ms).
         *
         * @return {long|null}
         */
        Driver1.prototype.getDrivingInViolationToday = function () {
            return this.drivingInViolationToday;
        };
    
        /**
         * Setter for DrivingInViolationToday
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setDrivingInViolationToday = function (value) {
            this.drivingInViolationToday = value;
        };
    
        /**
         * The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
         * `PERSONAL_CONVEYANCE`.
         *
         * @return {string|null}
         */
        Driver1.prototype.getDutyStatus = function () {
            return this.dutyStatus;
        };
    
        /**
         * Setter for DutyStatus
         * 
         * @param {string|null} value 
         */
        Driver1.prototype.setDutyStatus = function (value) {
            this.dutyStatus = value;
        };
    
        /**
         * The amount of remaining shift drive time (in ms).
         *
         * @return {long|null}
         */
        Driver1.prototype.getShiftDriveRemaining = function () {
            return this.shiftDriveRemaining;
        };
    
        /**
         * Setter for ShiftDriveRemaining
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setShiftDriveRemaining = function (value) {
            this.shiftDriveRemaining = value;
        };
    
        /**
         * The amount of remaining shift time (in ms).
         *
         * @return {long|null}
         */
        Driver1.prototype.getShiftRemaining = function () {
            return this.shiftRemaining;
        };
    
        /**
         * Setter for ShiftRemaining
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setShiftRemaining = function (value) {
            this.shiftRemaining = value;
        };
    
        /**
         * The amount of time (in ms) that the driver has been in the current `dutyStatus`.
         *
         * @return {long|null}
         */
        Driver1.prototype.getTimeInCurrentStatus = function () {
            return this.timeInCurrentStatus;
        };
    
        /**
         * Setter for TimeInCurrentStatus
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setTimeInCurrentStatus = function (value) {
            this.timeInCurrentStatus = value;
        };
    
        /**
         * The amount of time (in ms) remaining until the driver cannot drive without a rest break.
         *
         * @return {long|null}
         */
        Driver1.prototype.getTimeUntilBreak = function () {
            return this.timeUntilBreak;
        };
    
        /**
         * Setter for TimeUntilBreak
         * 
         * @param {long|null} value 
         */
        Driver1.prototype.setTimeUntilBreak = function (value) {
            this.timeUntilBreak = value;
        };
    
        /**
         * Name of the vehicle.
         *
         * @return {string|null}
         */
        Driver1.prototype.getVehicleName = function () {
            return this.vehicleName;
        };
    
        /**
         * Setter for VehicleName
         * 
         * @param {string|null} value 
         */
        Driver1.prototype.setVehicleName = function (value) {
            this.vehicleName = value;
        };
    
        return Driver1;
    }

}(angular));
