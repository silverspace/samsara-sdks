/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of CreateDvirParam
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('CreateDvirParam', ['BaseModel', CreateDvirParamModel]);

    function CreateDvirParamModel(BaseModel) {
        var CreateDvirParam = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.inspectionType = this.getValue(obj.inspectionType, 'mechanic');
            this.mechanicNotes = this.getValue(obj.mechanicNotes);
            this.odometerMiles = this.getValue(obj.odometerMiles);
            this.previousDefectsCorrected = this.getValue(obj.previousDefectsCorrected);
            this.previousDefectsIgnored = this.getValue(obj.previousDefectsIgnored);
            this.safe = this.getValue(obj.safe);
            this.trailerId = this.getValue(obj.trailerId);
            this.userEmail = this.getValue(obj.userEmail);
            this.vehicleId = this.getValue(obj.vehicleId);
        };

        CreateDvirParam.prototype = new BaseModel();
        CreateDvirParam.prototype.constructor = CreateDvirParam;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        CreateDvirParam.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'inspectionType', realName: 'inspectionType' },
                { name: 'mechanicNotes', realName: 'mechanicNotes' },
                { name: 'odometerMiles', realName: 'odometerMiles' },
                { name: 'previousDefectsCorrected', realName: 'previousDefectsCorrected' },
                { name: 'previousDefectsIgnored', realName: 'previousDefectsIgnored' },
                { name: 'safe', realName: 'safe' },
                { name: 'trailerId', realName: 'trailerId' },
                { name: 'userEmail', realName: 'userEmail' },
                { name: 'vehicleId', realName: 'vehicleId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        CreateDvirParam.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Only type 'mechanic' is currently accepted.
         *
         * @return {string}
         */
        CreateDvirParam.prototype.getInspectionType = function () {
            return this.inspectionType;
        };
    
        /**
         * Setter for InspectionType
         * 
         * @param {string} value 
         */
        CreateDvirParam.prototype.setInspectionType = function (value) {
            this.inspectionType = value;
        };
    
        /**
         * Any notes from the mechanic.
         *
         * @return {string|null}
         */
        CreateDvirParam.prototype.getMechanicNotes = function () {
            return this.mechanicNotes;
        };
    
        /**
         * Setter for MechanicNotes
         * 
         * @param {string|null} value 
         */
        CreateDvirParam.prototype.setMechanicNotes = function (value) {
            this.mechanicNotes = value;
        };
    
        /**
         * The current odometer of the vehicle.
         *
         * @return {int|null}
         */
        CreateDvirParam.prototype.getOdometerMiles = function () {
            return this.odometerMiles;
        };
    
        /**
         * Setter for OdometerMiles
         * 
         * @param {int|null} value 
         */
        CreateDvirParam.prototype.setOdometerMiles = function (value) {
            this.odometerMiles = value;
        };
    
        /**
         * Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and
         * this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
         *
         * @return {bool|null}
         */
        CreateDvirParam.prototype.getPreviousDefectsCorrected = function () {
            return this.previousDefectsCorrected;
        };
    
        /**
         * Setter for PreviousDefectsCorrected
         * 
         * @param {bool|null} value 
         */
        CreateDvirParam.prototype.setPreviousDefectsCorrected = function (value) {
            this.previousDefectsCorrected = value;
        };
    
        /**
         * Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and
         * this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
         *
         * @return {bool|null}
         */
        CreateDvirParam.prototype.getPreviousDefectsIgnored = function () {
            return this.previousDefectsIgnored;
        };
    
        /**
         * Setter for PreviousDefectsIgnored
         * 
         * @param {bool|null} value 
         */
        CreateDvirParam.prototype.setPreviousDefectsIgnored = function (value) {
            this.previousDefectsIgnored = value;
        };
    
        /**
         * Whether or not this vehicle or trailer is safe to drive.
         *
         * @return {SafeEnum}
         */
        CreateDvirParam.prototype.getSafe = function () {
            return this.safe;
        };
    
        /**
         * Setter for Safe
         * 
         * @param {SafeEnum} value 
         */
        CreateDvirParam.prototype.setSafe = function (value) {
            this.safe = value;
        };
    
        /**
         * Id of trailer being inspected. Either vehicleId or trailerId must be provided.
         *
         * @return {int|null}
         */
        CreateDvirParam.prototype.getTrailerId = function () {
            return this.trailerId;
        };
    
        /**
         * Setter for TrailerId
         * 
         * @param {int|null} value 
         */
        CreateDvirParam.prototype.setTrailerId = function (value) {
            this.trailerId = value;
        };
    
        /**
         * The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's
         * email.
         *
         * @return {string}
         */
        CreateDvirParam.prototype.getUserEmail = function () {
            return this.userEmail;
        };
    
        /**
         * Setter for UserEmail
         * 
         * @param {string} value 
         */
        CreateDvirParam.prototype.setUserEmail = function (value) {
            this.userEmail = value;
        };
    
        /**
         * Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
         *
         * @return {int|null}
         */
        CreateDvirParam.prototype.getVehicleId = function () {
            return this.vehicleId;
        };
    
        /**
         * Setter for VehicleId
         * 
         * @param {int|null} value 
         */
        CreateDvirParam.prototype.setVehicleId = function (value) {
            this.vehicleId = value;
        };
    
        return CreateDvirParam;
    }

}(angular));
