/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of TagModify
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('TagModify', ['BaseModel', TagModifyModel]);

    function TagModifyModel(BaseModel) {
        var TagModify = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.add = this.getValue(obj.add);
            this.mdelete = this.getValue(obj.mdelete);
            this.name = this.getValue(obj.name);
            this.parentTagId = this.getValue(obj.parentTagId);
        };

        TagModify.prototype = new BaseModel();
        TagModify.prototype.constructor = TagModify;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        TagModify.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'add', realName: 'add', type: 'Add' },
                { name: 'mdelete', realName: 'delete', type: 'Delete' },
                { name: 'name', realName: 'name' },
                { name: 'parentTagId', realName: 'parentTagId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        TagModify.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Specify devices, etc. that should be added to the tag.
         *
         * @return {Add|null}
         */
        TagModify.prototype.getAdd = function () {
            return this.add;
        };
    
        /**
         * Setter for Add
         * 
         * @param {Add|null} value 
         */
        TagModify.prototype.setAdd = function (value) {
            this.add = value;
        };
    
        /**
         * Specify devices, etc. that should be removed from the tag.
         *
         * @return {Delete|null}
         */
        TagModify.prototype.getDelete = function () {
            return this.mdelete;
        };
    
        /**
         * Setter for Delete
         * 
         * @param {Delete|null} value 
         */
        TagModify.prototype.setDelete = function (value) {
            this.mdelete = value;
        };
    
        /**
         * Updated name of this tag.
         *
         * @return {string|null}
         */
        TagModify.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        TagModify.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's
         * parent tag.
         *
         * @return {long|null}
         */
        TagModify.prototype.getParentTagId = function () {
            return this.parentTagId;
        };
    
        /**
         * Setter for ParentTagId
         * 
         * @param {long|null} value 
         */
        TagModify.prototype.setParentTagId = function (value) {
            this.parentTagId = value;
        };
    
        return TagModify;
    }

}(angular));
