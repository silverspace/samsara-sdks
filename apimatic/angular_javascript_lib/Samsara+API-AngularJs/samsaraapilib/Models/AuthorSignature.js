/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of AuthorSignature
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('AuthorSignature', ['BaseModel', AuthorSignatureModel]);

    function AuthorSignatureModel(BaseModel) {
        var AuthorSignature = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.driverId = this.getValue(obj.driverId);
            this.email = this.getValue(obj.email);
            this.mechanicUserId = this.getValue(obj.mechanicUserId);
            this.name = this.getValue(obj.name);
            this.signedAt = this.getValue(obj.signedAt);
            this.type = this.getValue(obj.type);
            this.username = this.getValue(obj.username);
        };

        AuthorSignature.prototype = new BaseModel();
        AuthorSignature.prototype.constructor = AuthorSignature;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        AuthorSignature.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'driverId', realName: 'driverId' },
                { name: 'email', realName: 'email' },
                { name: 'mechanicUserId', realName: 'mechanicUserId' },
                { name: 'name', realName: 'name' },
                { name: 'signedAt', realName: 'signedAt' },
                { name: 'type', realName: 'type' },
                { name: 'username', realName: 'username' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        AuthorSignature.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
         *
         * @return {long|null}
         */
        AuthorSignature.prototype.getDriverId = function () {
            return this.driverId;
        };
    
        /**
         * Setter for DriverId
         * 
         * @param {long|null} value 
         */
        AuthorSignature.prototype.setDriverId = function (value) {
            this.driverId = value;
        };
    
        /**
         * Email of the  driver|mechanic who signed the DVIR.
         *
         * @return {string|null}
         */
        AuthorSignature.prototype.getEmail = function () {
            return this.email;
        };
    
        /**
         * Setter for Email
         * 
         * @param {string|null} value 
         */
        AuthorSignature.prototype.setEmail = function (value) {
            this.email = value;
        };
    
        /**
         * ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
         *
         * @return {long|null}
         */
        AuthorSignature.prototype.getMechanicUserId = function () {
            return this.mechanicUserId;
        };
    
        /**
         * Setter for MechanicUserId
         * 
         * @param {long|null} value 
         */
        AuthorSignature.prototype.setMechanicUserId = function (value) {
            this.mechanicUserId = value;
        };
    
        /**
         * The name of the driver or mechanic who signed the DVIR.
         *
         * @return {string|null}
         */
        AuthorSignature.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        AuthorSignature.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * The time in millis when the DVIR was signed
         *
         * @return {long|null}
         */
        AuthorSignature.prototype.getSignedAt = function () {
            return this.signedAt;
        };
    
        /**
         * Setter for SignedAt
         * 
         * @param {long|null} value 
         */
        AuthorSignature.prototype.setSignedAt = function (value) {
            this.signedAt = value;
        };
    
        /**
         * Type corresponds to whether the signature corresponds to driver|mechanic.
         *
         * @return {string|null}
         */
        AuthorSignature.prototype.getType = function () {
            return this.type;
        };
    
        /**
         * Setter for Type
         * 
         * @param {string|null} value 
         */
        AuthorSignature.prototype.setType = function (value) {
            this.type = value;
        };
    
        /**
         * Username of the  driver|mechanic who signed the DVIR.
         *
         * @return {string|null}
         */
        AuthorSignature.prototype.getUsername = function () {
            return this.username;
        };
    
        /**
         * Setter for Username
         * 
         * @param {string|null} value 
         */
        AuthorSignature.prototype.setUsername = function (value) {
            this.username = value;
        };
    
        return AuthorSignature;
    }

}(angular));
