/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of DiagnosticTroubleCode
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('DiagnosticTroubleCode', ['BaseModel', DiagnosticTroubleCodeModel]);

    function DiagnosticTroubleCodeModel(BaseModel) {
        var DiagnosticTroubleCode = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.fmiId = this.getValue(obj.fmiId);
            this.fmiText = this.getValue(obj.fmiText);
            this.occurrenceCount = this.getValue(obj.occurrenceCount);
            this.spnDescription = this.getValue(obj.spnDescription);
            this.spnId = this.getValue(obj.spnId);
            this.txId = this.getValue(obj.txId);
        };

        DiagnosticTroubleCode.prototype = new BaseModel();
        DiagnosticTroubleCode.prototype.constructor = DiagnosticTroubleCode;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        DiagnosticTroubleCode.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'fmiId', realName: 'fmiId' },
                { name: 'fmiText', realName: 'fmiText' },
                { name: 'occurrenceCount', realName: 'occurrenceCount' },
                { name: 'spnDescription', realName: 'spnDescription' },
                { name: 'spnId', realName: 'spnId' },
                { name: 'txId', realName: 'txId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        DiagnosticTroubleCode.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        DiagnosticTroubleCode.prototype.getFmiId = function () {
            return this.fmiId;
        };
    
        /**
         * Setter for FmiId
         * 
         * @param {int|null} value 
         */
        DiagnosticTroubleCode.prototype.setFmiId = function (value) {
            this.fmiId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DiagnosticTroubleCode.prototype.getFmiText = function () {
            return this.fmiText;
        };
    
        /**
         * Setter for FmiText
         * 
         * @param {string|null} value 
         */
        DiagnosticTroubleCode.prototype.setFmiText = function (value) {
            this.fmiText = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        DiagnosticTroubleCode.prototype.getOccurrenceCount = function () {
            return this.occurrenceCount;
        };
    
        /**
         * Setter for OccurrenceCount
         * 
         * @param {int|null} value 
         */
        DiagnosticTroubleCode.prototype.setOccurrenceCount = function (value) {
            this.occurrenceCount = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DiagnosticTroubleCode.prototype.getSpnDescription = function () {
            return this.spnDescription;
        };
    
        /**
         * Setter for SpnDescription
         * 
         * @param {string|null} value 
         */
        DiagnosticTroubleCode.prototype.setSpnDescription = function (value) {
            this.spnDescription = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        DiagnosticTroubleCode.prototype.getSpnId = function () {
            return this.spnId;
        };
    
        /**
         * Setter for SpnId
         * 
         * @param {int|null} value 
         */
        DiagnosticTroubleCode.prototype.setSpnId = function (value) {
            this.spnId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        DiagnosticTroubleCode.prototype.getTxId = function () {
            return this.txId;
        };
    
        /**
         * Setter for TxId
         * 
         * @param {int|null} value 
         */
        DiagnosticTroubleCode.prototype.setTxId = function (value) {
            this.txId = value;
        };
    
        return DiagnosticTroubleCode;
    }

}(angular));
