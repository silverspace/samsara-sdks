/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of JobUpdateObject
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('JobUpdateObject', ['BaseModel', JobUpdateObjectModel]);

    function JobUpdateObjectModel(BaseModel) {
        var JobUpdateObject = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.changedAtMs = this.getValue(obj.changedAtMs);
            this.jobId = this.getValue(obj.jobId);
            this.jobState = this.getValue(obj.jobState);
            this.prevJobState = this.getValue(obj.prevJobState);
            this.route = this.getValue(obj.route);
            this.routeId = this.getValue(obj.routeId);
        };

        JobUpdateObject.prototype = new BaseModel();
        JobUpdateObject.prototype.constructor = JobUpdateObject;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        JobUpdateObject.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'changedAtMs', realName: 'changed_at_ms' },
                { name: 'jobId', realName: 'job_id' },
                { name: 'jobState', realName: 'job_state' },
                { name: 'prevJobState', realName: 'prev_job_state' },
                { name: 'route', realName: 'route', type: 'DispatchRoute' },
                { name: 'routeId', realName: 'route_id' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        JobUpdateObject.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Timestamp that this event was updated, represented as Unix milliseconds since epoch.
         *
         * @return {long|null}
         */
        JobUpdateObject.prototype.getChangedAtMs = function () {
            return this.changedAtMs;
        };
    
        /**
         * Setter for ChangedAtMs
         * 
         * @param {long|null} value 
         */
        JobUpdateObject.prototype.setChangedAtMs = function (value) {
            this.changedAtMs = value;
        };
    
        /**
         * ID of the Samsara job.
         *
         * @return {long|null}
         */
        JobUpdateObject.prototype.getJobId = function () {
            return this.jobId;
        };
    
        /**
         * Setter for JobId
         * 
         * @param {long|null} value 
         */
        JobUpdateObject.prototype.setJobId = function (value) {
            this.jobId = value;
        };
    
        /**
         * The current state of the dispatch job.
         *
         * @return {JobStatusEnum|null}
         */
        JobUpdateObject.prototype.getJobState = function () {
            return this.jobState;
        };
    
        /**
         * Setter for JobState
         * 
         * @param {JobStatusEnum|null} value 
         */
        JobUpdateObject.prototype.setJobState = function (value) {
            this.jobState = value;
        };
    
        /**
         * The previous state of the dispatch job.
         *
         * @return {PrevJobStatusEnum|null}
         */
        JobUpdateObject.prototype.getPrevJobState = function () {
            return this.prevJobState;
        };
    
        /**
         * Setter for PrevJobState
         * 
         * @param {PrevJobStatusEnum|null} value 
         */
        JobUpdateObject.prototype.setPrevJobState = function (value) {
            this.prevJobState = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {DispatchRoute|null}
         */
        JobUpdateObject.prototype.getRoute = function () {
            return this.route;
        };
    
        /**
         * Setter for Route
         * 
         * @param {DispatchRoute|null} value 
         */
        JobUpdateObject.prototype.setRoute = function (value) {
            this.route = value;
        };
    
        /**
         * ID of the Samsara dispatch route.
         *
         * @return {long|null}
         */
        JobUpdateObject.prototype.getRouteId = function () {
            return this.routeId;
        };
    
        /**
         * Setter for RouteId
         * 
         * @param {long|null} value 
         */
        JobUpdateObject.prototype.setRouteId = function (value) {
            this.routeId = value;
        };
    
        return JobUpdateObject;
    }

}(angular));
