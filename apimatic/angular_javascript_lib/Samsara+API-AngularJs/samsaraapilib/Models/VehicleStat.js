/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of VehicleStat
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('VehicleStat', ['BaseModel', VehicleStatModel]);

    function VehicleStatModel(BaseModel) {
        var VehicleStat = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.auxInput1 = this.getValue(obj.auxInput1);
            this.auxInput2 = this.getValue(obj.auxInput2);
            this.engineState = this.getValue(obj.engineState);
            this.vehicleId = this.getValue(obj.vehicleId);
        };

        VehicleStat.prototype = new BaseModel();
        VehicleStat.prototype.constructor = VehicleStat;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        VehicleStat.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'auxInput1', realName: 'auxInput1', type: 'AuxInputSeries' },
                { name: 'auxInput2', realName: 'auxInput2', type: 'AuxInputSeries' },
                { name: 'engineState', realName: 'engineState', array: true, type: 'EngineState' },
                { name: 'vehicleId', realName: 'vehicleId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        VehicleStat.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * A list of aux input values over a timerange.
         *
         * @return {AuxInputSeries|null}
         */
        VehicleStat.prototype.getAuxInput1 = function () {
            return this.auxInput1;
        };
    
        /**
         * Setter for AuxInput1
         * 
         * @param {AuxInputSeries|null} value 
         */
        VehicleStat.prototype.setAuxInput1 = function (value) {
            this.auxInput1 = value;
        };
    
        /**
         * A list of aux input values over a timerange.
         *
         * @return {AuxInputSeries|null}
         */
        VehicleStat.prototype.getAuxInput2 = function () {
            return this.auxInput2;
        };
    
        /**
         * Setter for AuxInput2
         * 
         * @param {AuxInputSeries|null} value 
         */
        VehicleStat.prototype.setAuxInput2 = function (value) {
            this.auxInput2 = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        VehicleStat.prototype.getEngineState = function () {
            return this.engineState;
        };
    
        /**
         * Setter for EngineState
         * 
         * @param {array|null} value 
         */
        VehicleStat.prototype.setEngineState = function (value) {
            this.engineState = value;
        };
    
        /**
         * ID of the vehicle.
         *
         * @return {long}
         */
        VehicleStat.prototype.getVehicleId = function () {
            return this.vehicleId;
        };
    
        /**
         * Setter for VehicleId
         * 
         * @param {long} value 
         */
        VehicleStat.prototype.setVehicleId = function (value) {
            this.vehicleId = value;
        };
    
        return VehicleStat;
    }

}(angular));
