/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Delete
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Delete', ['BaseModel', DeleteModel]);

    function DeleteModel(BaseModel) {
        var Delete = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.assets = this.getValue(obj.assets);
            this.drivers = this.getValue(obj.drivers);
            this.machines = this.getValue(obj.machines);
            this.sensors = this.getValue(obj.sensors);
            this.vehicles = this.getValue(obj.vehicles);
        };

        Delete.prototype = new BaseModel();
        Delete.prototype.constructor = Delete;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Delete.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'assets', realName: 'assets', array: true, type: 'TaggedAssetBase' },
                { name: 'drivers', realName: 'drivers', array: true, type: 'TaggedDriverBase' },
                { name: 'machines', realName: 'machines', array: true, type: 'TaggedMachineBase' },
                { name: 'sensors', realName: 'sensors', array: true, type: 'TaggedSensorBase' },
                { name: 'vehicles', realName: 'vehicles', array: true, type: 'TaggedVehicleBase' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Delete.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The assets to be removed from this tag.
         *
         * @return {array|null}
         */
        Delete.prototype.getAssets = function () {
            return this.assets;
        };
    
        /**
         * Setter for Assets
         * 
         * @param {array|null} value 
         */
        Delete.prototype.setAssets = function (value) {
            this.assets = value;
        };
    
        /**
         * The drivers to be removed from this tag.
         *
         * @return {array|null}
         */
        Delete.prototype.getDrivers = function () {
            return this.drivers;
        };
    
        /**
         * Setter for Drivers
         * 
         * @param {array|null} value 
         */
        Delete.prototype.setDrivers = function (value) {
            this.drivers = value;
        };
    
        /**
         * The machines to be removed from this tag.
         *
         * @return {array|null}
         */
        Delete.prototype.getMachines = function () {
            return this.machines;
        };
    
        /**
         * Setter for Machines
         * 
         * @param {array|null} value 
         */
        Delete.prototype.setMachines = function (value) {
            this.machines = value;
        };
    
        /**
         * The sensors to be removed from this tag.
         *
         * @return {array|null}
         */
        Delete.prototype.getSensors = function () {
            return this.sensors;
        };
    
        /**
         * Setter for Sensors
         * 
         * @param {array|null} value 
         */
        Delete.prototype.setSensors = function (value) {
            this.sensors = value;
        };
    
        /**
         * The vehicles to be removed from this tag.
         *
         * @return {array|null}
         */
        Delete.prototype.getVehicles = function () {
            return this.vehicles;
        };
    
        /**
         * Setter for Vehicles
         * 
         * @param {array|null} value 
         */
        Delete.prototype.setVehicles = function (value) {
            this.vehicles = value;
        };
    
        return Delete;
    }

}(angular));
