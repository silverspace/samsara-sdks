/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Driver
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Driver', ['BaseModel', DriverModel]);

    function DriverModel(BaseModel) {
        var Driver = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.isDeactivated = this.getValue(obj.isDeactivated);
            this.tags = this.getValue(obj.tags);
            this.currentVehicleId = this.getValue(obj.currentVehicleId);
            this.eldAdverseWeatherExemptionEnabled = this.getValue(obj.eldAdverseWeatherExemptionEnabled);
            this.eldBigDayExemptionEnabled = this.getValue(obj.eldBigDayExemptionEnabled);
            this.eldDayStartHour = this.getValue(obj.eldDayStartHour);
            this.eldExempt = this.getValue(obj.eldExempt);
            this.eldExemptReason = this.getValue(obj.eldExemptReason);
            this.eldPcEnabled = this.getValue(obj.eldPcEnabled, false);
            this.eldYmEnabled = this.getValue(obj.eldYmEnabled, false);
            this.externalIds = this.getValue(obj.externalIds);
            this.groupId = this.getValue(obj.groupId);
            this.licenseNumber = this.getValue(obj.licenseNumber);
            this.licenseState = this.getValue(obj.licenseState);
            this.name = this.getValue(obj.name);
            this.notes = this.getValue(obj.notes);
            this.phone = this.getValue(obj.phone);
            this.username = this.getValue(obj.username);
            this.vehicleId = this.getValue(obj.vehicleId);
        };

        Driver.prototype = new BaseModel();
        Driver.prototype.constructor = Driver;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Driver.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'isDeactivated', realName: 'isDeactivated' },
                { name: 'tags', realName: 'tags', array: true, type: 'TagMetadata' },
                { name: 'currentVehicleId', realName: 'currentVehicleId' },
                { name: 'eldAdverseWeatherExemptionEnabled', realName: 'eldAdverseWeatherExemptionEnabled' },
                { name: 'eldBigDayExemptionEnabled', realName: 'eldBigDayExemptionEnabled' },
                { name: 'eldDayStartHour', realName: 'eldDayStartHour' },
                { name: 'eldExempt', realName: 'eldExempt' },
                { name: 'eldExemptReason', realName: 'eldExemptReason' },
                { name: 'eldPcEnabled', realName: 'eldPcEnabled' },
                { name: 'eldYmEnabled', realName: 'eldYmEnabled' },
                { name: 'externalIds', realName: 'externalIds' },
                { name: 'groupId', realName: 'groupId' },
                { name: 'licenseNumber', realName: 'licenseNumber' },
                { name: 'licenseState', realName: 'licenseState' },
                { name: 'name', realName: 'name' },
                { name: 'notes', realName: 'notes' },
                { name: 'phone', realName: 'phone' },
                { name: 'username', realName: 'username' },
                { name: 'vehicleId', realName: 'vehicleId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Driver.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * ID of the driver.
         *
         * @return {long}
         */
        Driver.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long} value 
         */
        Driver.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * True if the driver account has been deactivated.
         *
         * @return {bool|null}
         */
        Driver.prototype.getIsDeactivated = function () {
            return this.isDeactivated;
        };
    
        /**
         * Setter for IsDeactivated
         * 
         * @param {bool|null} value 
         */
        Driver.prototype.setIsDeactivated = function (value) {
            this.isDeactivated = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        Driver.prototype.getTags = function () {
            return this.tags;
        };
    
        /**
         * Setter for Tags
         * 
         * @param {array|null} value 
         */
        Driver.prototype.setTags = function (value) {
            this.tags = value;
        };
    
        /**
         * ID of the vehicle that this driver is currently assigned to. Omitted if there is no current vehicle
         * assignment for this driver.
         *
         * @return {long|null}
         */
        Driver.prototype.getCurrentVehicleId = function () {
            return this.currentVehicleId;
        };
    
        /**
         * Setter for CurrentVehicleId
         * 
         * @param {long|null} value 
         */
        Driver.prototype.setCurrentVehicleId = function (value) {
            this.currentVehicleId = value;
        };
    
        /**
         * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
         *
         * @return {bool|null}
         */
        Driver.prototype.getEldAdverseWeatherExemptionEnabled = function () {
            return this.eldAdverseWeatherExemptionEnabled;
        };
    
        /**
         * Setter for EldAdverseWeatherExemptionEnabled
         * 
         * @param {bool|null} value 
         */
        Driver.prototype.setEldAdverseWeatherExemptionEnabled = function (value) {
            this.eldAdverseWeatherExemptionEnabled = value;
        };
    
        /**
         * Flag indicating this driver may use Big Day excemptions in ELD logs.
         *
         * @return {bool|null}
         */
        Driver.prototype.getEldBigDayExemptionEnabled = function () {
            return this.eldBigDayExemptionEnabled;
        };
    
        /**
         * Setter for EldBigDayExemptionEnabled
         * 
         * @param {bool|null} value 
         */
        Driver.prototype.setEldBigDayExemptionEnabled = function (value) {
            this.eldBigDayExemptionEnabled = value;
        };
    
        /**
         * 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
         *
         * @return {int|null}
         */
        Driver.prototype.getEldDayStartHour = function () {
            return this.eldDayStartHour;
        };
    
        /**
         * Setter for EldDayStartHour
         * 
         * @param {int|null} value 
         */
        Driver.prototype.setEldDayStartHour = function (value) {
            this.eldDayStartHour = value;
        };
    
        /**
         * Flag indicating this driver is exempt from the Electronic Logging Mandate.
         *
         * @return {bool|null}
         */
        Driver.prototype.getEldExempt = function () {
            return this.eldExempt;
        };
    
        /**
         * Setter for EldExempt
         * 
         * @param {bool|null} value 
         */
        Driver.prototype.setEldExempt = function (value) {
            this.eldExempt = value;
        };
    
        /**
         * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
         *
         * @return {string|null}
         */
        Driver.prototype.getEldExemptReason = function () {
            return this.eldExemptReason;
        };
    
        /**
         * Setter for EldExemptReason
         * 
         * @param {string|null} value 
         */
        Driver.prototype.setEldExemptReason = function (value) {
            this.eldExemptReason = value;
        };
    
        /**
         * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
         *
         * @return {bool|null}
         */
        Driver.prototype.getEldPcEnabled = function () {
            return this.eldPcEnabled;
        };
    
        /**
         * Setter for EldPcEnabled
         * 
         * @param {bool|null} value 
         */
        Driver.prototype.setEldPcEnabled = function (value) {
            this.eldPcEnabled = value;
        };
    
        /**
         * Flag indicating this driver may select the Yard Move duty status in ELD logs.
         *
         * @return {bool|null}
         */
        Driver.prototype.getEldYmEnabled = function () {
            return this.eldYmEnabled;
        };
    
        /**
         * Setter for EldYmEnabled
         * 
         * @param {bool|null} value 
         */
        Driver.prototype.setEldYmEnabled = function (value) {
            this.eldYmEnabled = value;
        };
    
        /**
         * Dictionary of external IDs (string key-value pairs)
         *
         * @return {array|null}
         */
        Driver.prototype.getExternalIds = function () {
            return this.externalIds;
        };
    
        /**
         * Setter for ExternalIds
         * 
         * @param {array|null} value 
         */
        Driver.prototype.setExternalIds = function (value) {
            this.externalIds = value;
        };
    
        /**
         * ID of the group if the organization has multiple groups (uncommon).
         *
         * @return {long|null}
         */
        Driver.prototype.getGroupId = function () {
            return this.groupId;
        };
    
        /**
         * Setter for GroupId
         * 
         * @param {long|null} value 
         */
        Driver.prototype.setGroupId = function (value) {
            this.groupId = value;
        };
    
        /**
         * Driver's state issued license number.
         *
         * @return {string|null}
         */
        Driver.prototype.getLicenseNumber = function () {
            return this.licenseNumber;
        };
    
        /**
         * Setter for LicenseNumber
         * 
         * @param {string|null} value 
         */
        Driver.prototype.setLicenseNumber = function (value) {
            this.licenseNumber = value;
        };
    
        /**
         * Abbreviation of state that issued driver's license.
         *
         * @return {string|null}
         */
        Driver.prototype.getLicenseState = function () {
            return this.licenseState;
        };
    
        /**
         * Setter for LicenseState
         * 
         * @param {string|null} value 
         */
        Driver.prototype.setLicenseState = function (value) {
            this.licenseState = value;
        };
    
        /**
         * Driver's name.
         *
         * @return {string}
         */
        Driver.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string} value 
         */
        Driver.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * Notes about the driver.
         *
         * @return {string|null}
         */
        Driver.prototype.getNotes = function () {
            return this.notes;
        };
    
        /**
         * Setter for Notes
         * 
         * @param {string|null} value 
         */
        Driver.prototype.setNotes = function (value) {
            this.notes = value;
        };
    
        /**
         * Driver's phone number. Please include only digits, ex. 4157771234
         *
         * @return {string|null}
         */
        Driver.prototype.getPhone = function () {
            return this.phone;
        };
    
        /**
         * Setter for Phone
         * 
         * @param {string|null} value 
         */
        Driver.prototype.setPhone = function (value) {
            this.phone = value;
        };
    
        /**
         * Driver's login username into the driver app.
         *
         * @return {string|null}
         */
        Driver.prototype.getUsername = function () {
            return this.username;
        };
    
        /**
         * Setter for Username
         * 
         * @param {string|null} value 
         */
        Driver.prototype.setUsername = function (value) {
            this.username = value;
        };
    
        /**
         * ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
         *
         * @return {long|null}
         */
        Driver.prototype.getVehicleId = function () {
            return this.vehicleId;
        };
    
        /**
         * Setter for VehicleId
         * 
         * @param {long|null} value 
         */
        Driver.prototype.setVehicleId = function (value) {
            this.vehicleId = value;
        };
    
        return Driver;
    }

}(angular));
