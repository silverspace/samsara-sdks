/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Trip
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Trip', ['BaseModel', TripModel]);

    function TripModel(BaseModel) {
        var Trip = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.distanceMeters = this.getValue(obj.distanceMeters);
            this.driverId = this.getValue(obj.driverId);
            this.endAddress = this.getValue(obj.endAddress);
            this.endCoordinates = this.getValue(obj.endCoordinates);
            this.endLocation = this.getValue(obj.endLocation);
            this.endMs = this.getValue(obj.endMs);
            this.endOdometer = this.getValue(obj.endOdometer);
            this.fuelConsumedMl = this.getValue(obj.fuelConsumedMl);
            this.startAddress = this.getValue(obj.startAddress);
            this.startCoordinates = this.getValue(obj.startCoordinates);
            this.startLocation = this.getValue(obj.startLocation);
            this.startMs = this.getValue(obj.startMs);
            this.startOdometer = this.getValue(obj.startOdometer);
            this.tollMeters = this.getValue(obj.tollMeters);
        };

        Trip.prototype = new BaseModel();
        Trip.prototype.constructor = Trip;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Trip.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'distanceMeters', realName: 'distanceMeters' },
                { name: 'driverId', realName: 'driverId' },
                { name: 'endAddress', realName: 'endAddress' },
                { name: 'endCoordinates', realName: 'endCoordinates', type: 'EndCoordinates' },
                { name: 'endLocation', realName: 'endLocation' },
                { name: 'endMs', realName: 'endMs' },
                { name: 'endOdometer', realName: 'endOdometer' },
                { name: 'fuelConsumedMl', realName: 'fuelConsumedMl' },
                { name: 'startAddress', realName: 'startAddress' },
                { name: 'startCoordinates', realName: 'startCoordinates', type: 'StartCoordinates' },
                { name: 'startLocation', realName: 'startLocation' },
                { name: 'startMs', realName: 'startMs' },
                { name: 'startOdometer', realName: 'startOdometer' },
                { name: 'tollMeters', realName: 'tollMeters' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Trip.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Length of the trip in meters.
         *
         * @return {int|null}
         */
        Trip.prototype.getDistanceMeters = function () {
            return this.distanceMeters;
        };
    
        /**
         * Setter for DistanceMeters
         * 
         * @param {int|null} value 
         */
        Trip.prototype.setDistanceMeters = function (value) {
            this.distanceMeters = value;
        };
    
        /**
         * ID of the driver.
         *
         * @return {int|null}
         */
        Trip.prototype.getDriverId = function () {
            return this.driverId;
        };
    
        /**
         * Setter for DriverId
         * 
         * @param {int|null} value 
         */
        Trip.prototype.setDriverId = function (value) {
            this.driverId = value;
        };
    
        /**
         * Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
         *
         * @return {string|null}
         */
        Trip.prototype.getEndAddress = function () {
            return this.endAddress;
        };
    
        /**
         * Setter for EndAddress
         * 
         * @param {string|null} value 
         */
        Trip.prototype.setEndAddress = function (value) {
            this.endAddress = value;
        };
    
        /**
         * End (latitude, longitude) in decimal degrees.
         *
         * @return {EndCoordinates|null}
         */
        Trip.prototype.getEndCoordinates = function () {
            return this.endCoordinates;
        };
    
        /**
         * Setter for EndCoordinates
         * 
         * @param {EndCoordinates|null} value 
         */
        Trip.prototype.setEndCoordinates = function (value) {
            this.endCoordinates = value;
        };
    
        /**
         * Geocoded street address of start (latitude, longitude) coordinates.
         *
         * @return {string|null}
         */
        Trip.prototype.getEndLocation = function () {
            return this.endLocation;
        };
    
        /**
         * Setter for EndLocation
         * 
         * @param {string|null} value 
         */
        Trip.prototype.setEndLocation = function (value) {
            this.endLocation = value;
        };
    
        /**
         * End of the trip in UNIX milliseconds.
         *
         * @return {long|null}
         */
        Trip.prototype.getEndMs = function () {
            return this.endMs;
        };
    
        /**
         * Setter for EndMs
         * 
         * @param {long|null} value 
         */
        Trip.prototype.setEndMs = function (value) {
            this.endMs = value;
        };
    
        /**
         * Odometer reading at the end of the trip.
         *
         * @return {int|null}
         */
        Trip.prototype.getEndOdometer = function () {
            return this.endOdometer;
        };
    
        /**
         * Setter for EndOdometer
         * 
         * @param {int|null} value 
         */
        Trip.prototype.setEndOdometer = function (value) {
            this.endOdometer = value;
        };
    
        /**
         * Amount in milliliters of fuel consumed on this trip.
         *
         * @return {int|null}
         */
        Trip.prototype.getFuelConsumedMl = function () {
            return this.fuelConsumedMl;
        };
    
        /**
         * Setter for FuelConsumedMl
         * 
         * @param {int|null} value 
         */
        Trip.prototype.setFuelConsumedMl = function (value) {
            this.fuelConsumedMl = value;
        };
    
        /**
         * Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
         *
         * @return {string|null}
         */
        Trip.prototype.getStartAddress = function () {
            return this.startAddress;
        };
    
        /**
         * Setter for StartAddress
         * 
         * @param {string|null} value 
         */
        Trip.prototype.setStartAddress = function (value) {
            this.startAddress = value;
        };
    
        /**
         * Start (latitude, longitude) in decimal degrees.
         *
         * @return {StartCoordinates|null}
         */
        Trip.prototype.getStartCoordinates = function () {
            return this.startCoordinates;
        };
    
        /**
         * Setter for StartCoordinates
         * 
         * @param {StartCoordinates|null} value 
         */
        Trip.prototype.setStartCoordinates = function (value) {
            this.startCoordinates = value;
        };
    
        /**
         * Geocoded street address of start (latitude, longitude) coordinates.
         *
         * @return {string|null}
         */
        Trip.prototype.getStartLocation = function () {
            return this.startLocation;
        };
    
        /**
         * Setter for StartLocation
         * 
         * @param {string|null} value 
         */
        Trip.prototype.setStartLocation = function (value) {
            this.startLocation = value;
        };
    
        /**
         * Beginning of the trip in UNIX milliseconds.
         *
         * @return {long|null}
         */
        Trip.prototype.getStartMs = function () {
            return this.startMs;
        };
    
        /**
         * Setter for StartMs
         * 
         * @param {long|null} value 
         */
        Trip.prototype.setStartMs = function (value) {
            this.startMs = value;
        };
    
        /**
         * Odometer reading at the beginning of the trip.
         *
         * @return {int|null}
         */
        Trip.prototype.getStartOdometer = function () {
            return this.startOdometer;
        };
    
        /**
         * Setter for StartOdometer
         * 
         * @param {int|null} value 
         */
        Trip.prototype.setStartOdometer = function (value) {
            this.startOdometer = value;
        };
    
        /**
         * Length in meters trip spent on toll roads.
         *
         * @return {int|null}
         */
        Trip.prototype.getTollMeters = function () {
            return this.tollMeters;
        };
    
        /**
         * Setter for TollMeters
         * 
         * @param {int|null} value 
         */
        Trip.prototype.setTollMeters = function (value) {
            this.tollMeters = value;
        };
    
        return Trip;
    }

}(angular));
