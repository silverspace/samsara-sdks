/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Day
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Day', ['BaseModel', DayModel]);

    function DayModel(BaseModel) {
        var Day = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.activeHours = this.getValue(obj.activeHours);
            this.activeMs = this.getValue(obj.activeMs);
            this.certified = this.getValue(obj.certified);
            this.certifiedAtMs = this.getValue(obj.certifiedAtMs);
            this.distanceMiles = this.getValue(obj.distanceMiles);
            this.endMs = this.getValue(obj.endMs);
            this.startMs = this.getValue(obj.startMs);
            this.trailerIds = this.getValue(obj.trailerIds);
            this.vehicleIds = this.getValue(obj.vehicleIds);
        };

        Day.prototype = new BaseModel();
        Day.prototype.constructor = Day;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Day.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'activeHours', realName: 'activeHours' },
                { name: 'activeMs', realName: 'activeMs' },
                { name: 'certified', realName: 'certified' },
                { name: 'certifiedAtMs', realName: 'certifiedAtMs' },
                { name: 'distanceMiles', realName: 'distanceMiles' },
                { name: 'endMs', realName: 'endMs' },
                { name: 'startMs', realName: 'startMs' },
                { name: 'trailerIds', realName: 'trailerIds' },
                { name: 'vehicleIds', realName: 'vehicleIds' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Day.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Hours spent on duty or driving, rounded to two decimal places.
         *
         * @return {double|null}
         */
        Day.prototype.getActiveHours = function () {
            return this.activeHours;
        };
    
        /**
         * Setter for ActiveHours
         * 
         * @param {double|null} value 
         */
        Day.prototype.setActiveHours = function (value) {
            this.activeHours = value;
        };
    
        /**
         * Milliseconds spent on duty or driving.
         *
         * @return {long|null}
         */
        Day.prototype.getActiveMs = function () {
            return this.activeMs;
        };
    
        /**
         * Setter for ActiveMs
         * 
         * @param {long|null} value 
         */
        Day.prototype.setActiveMs = function (value) {
            this.activeMs = value;
        };
    
        /**
         * Whether this HOS day chart was certified by the driver.
         *
         * @return {bool|null}
         */
        Day.prototype.getCertified = function () {
            return this.certified;
        };
    
        /**
         * Setter for Certified
         * 
         * @param {bool|null} value 
         */
        Day.prototype.setCertified = function (value) {
            this.certified = value;
        };
    
        /**
         * Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.
         *
         * @return {long|null}
         */
        Day.prototype.getCertifiedAtMs = function () {
            return this.certifiedAtMs;
        };
    
        /**
         * Setter for CertifiedAtMs
         * 
         * @param {long|null} value 
         */
        Day.prototype.setCertifiedAtMs = function (value) {
            this.certifiedAtMs = value;
        };
    
        /**
         * Distance driven in miles, rounded to two decimal places.
         *
         * @return {double|null}
         */
        Day.prototype.getDistanceMiles = function () {
            return this.distanceMiles;
        };
    
        /**
         * Setter for DistanceMiles
         * 
         * @param {double|null} value 
         */
        Day.prototype.setDistanceMiles = function (value) {
            this.distanceMiles = value;
        };
    
        /**
         * End of the HOS day, specified in milliseconds UNIX time.
         *
         * @return {long|null}
         */
        Day.prototype.getEndMs = function () {
            return this.endMs;
        };
    
        /**
         * Setter for EndMs
         * 
         * @param {long|null} value 
         */
        Day.prototype.setEndMs = function (value) {
            this.endMs = value;
        };
    
        /**
         * End of the HOS day, specified in milliseconds UNIX time.
         *
         * @return {long|null}
         */
        Day.prototype.getStartMs = function () {
            return this.startMs;
        };
    
        /**
         * Setter for StartMs
         * 
         * @param {long|null} value 
         */
        Day.prototype.setStartMs = function (value) {
            this.startMs = value;
        };
    
        /**
         * List of trailer ID's associated with the driver for the day.
         *
         * @return {object|null}
         */
        Day.prototype.getTrailerIds = function () {
            return this.trailerIds;
        };
    
        /**
         * Setter for TrailerIds
         * 
         * @param {object|null} value 
         */
        Day.prototype.setTrailerIds = function (value) {
            this.trailerIds = value;
        };
    
        /**
         * List of vehicle ID's associated with the driver for the day.
         *
         * @return {object|null}
         */
        Day.prototype.getVehicleIds = function () {
            return this.vehicleIds;
        };
    
        /**
         * Setter for VehicleIds
         * 
         * @param {object|null} value 
         */
        Day.prototype.setVehicleIds = function (value) {
            this.vehicleIds = value;
        };
    
        return Day;
    }

}(angular));
