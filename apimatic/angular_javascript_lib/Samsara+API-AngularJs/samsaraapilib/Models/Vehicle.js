/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Vehicle
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Vehicle', ['BaseModel', VehicleModel]);

    function VehicleModel(BaseModel) {
        var Vehicle = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.engineHours = this.getValue(obj.engineHours);
            this.fuelLevelPercent = this.getValue(obj.fuelLevelPercent);
            this.id = this.getValue(obj.id);
            this.name = this.getValue(obj.name);
            this.note = this.getValue(obj.note);
            this.odometerMeters = this.getValue(obj.odometerMeters);
            this.vin = this.getValue(obj.vin);
        };

        Vehicle.prototype = new BaseModel();
        Vehicle.prototype.constructor = Vehicle;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Vehicle.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'engineHours', realName: 'engineHours' },
                { name: 'fuelLevelPercent', realName: 'fuelLevelPercent' },
                { name: 'id', realName: 'id' },
                { name: 'name', realName: 'name' },
                { name: 'note', realName: 'note' },
                { name: 'odometerMeters', realName: 'odometerMeters' },
                { name: 'vin', realName: 'vin' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Vehicle.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Total engine hours for the vehicle.
         *
         * @return {long|null}
         */
        Vehicle.prototype.getEngineHours = function () {
            return this.engineHours;
        };
    
        /**
         * Setter for EngineHours
         * 
         * @param {long|null} value 
         */
        Vehicle.prototype.setEngineHours = function (value) {
            this.engineHours = value;
        };
    
        /**
         * The fuel level of the vehicle as a percentage. (0.0 to 1.0)
         *
         * @return {double|null}
         */
        Vehicle.prototype.getFuelLevelPercent = function () {
            return this.fuelLevelPercent;
        };
    
        /**
         * Setter for FuelLevelPercent
         * 
         * @param {double|null} value 
         */
        Vehicle.prototype.setFuelLevelPercent = function (value) {
            this.fuelLevelPercent = value;
        };
    
        /**
         * ID of the vehicle.
         *
         * @return {long}
         */
        Vehicle.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long} value 
         */
        Vehicle.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * Name of the vehicle.
         *
         * @return {string|null}
         */
        Vehicle.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        Vehicle.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Vehicle.prototype.getNote = function () {
            return this.note;
        };
    
        /**
         * Setter for Note
         * 
         * @param {string|null} value 
         */
        Vehicle.prototype.setNote = function (value) {
            this.note = value;
        };
    
        /**
         * The number of meters reported by the odometer.
         *
         * @return {long|null}
         */
        Vehicle.prototype.getOdometerMeters = function () {
            return this.odometerMeters;
        };
    
        /**
         * Setter for OdometerMeters
         * 
         * @param {long|null} value 
         */
        Vehicle.prototype.setOdometerMeters = function (value) {
            this.odometerMeters = value;
        };
    
        /**
         * Vehicle Identification Number.
         *
         * @return {string|null}
         */
        Vehicle.prototype.getVin = function () {
            return this.vin;
        };
    
        /**
         * Setter for Vin
         * 
         * @param {string|null} value 
         */
        Vehicle.prototype.setVin = function (value) {
            this.vin = value;
        };
    
        return Vehicle;
    }

}(angular));
