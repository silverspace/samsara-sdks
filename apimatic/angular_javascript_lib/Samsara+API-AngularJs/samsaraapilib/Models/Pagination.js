/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Pagination
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Pagination', ['BaseModel', PaginationModel]);

    function PaginationModel(BaseModel) {
        var Pagination = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.endCursor = this.getValue(obj.endCursor);
            this.hasNextPage = this.getValue(obj.hasNextPage);
            this.hasPrevPage = this.getValue(obj.hasPrevPage);
            this.startCursor = this.getValue(obj.startCursor);
        };

        Pagination.prototype = new BaseModel();
        Pagination.prototype.constructor = Pagination;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Pagination.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'endCursor', realName: 'endCursor' },
                { name: 'hasNextPage', realName: 'hasNextPage' },
                { name: 'hasPrevPage', realName: 'hasPrevPage' },
                { name: 'startCursor', realName: 'startCursor' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Pagination.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Cursor identifier representing the last element in the response. This value should be used in conjunction
         * with a subsequent request's 'starting_after' query parameter.
         *
         * @return {string}
         */
        Pagination.prototype.getEndCursor = function () {
            return this.endCursor;
        };
    
        /**
         * Setter for EndCursor
         * 
         * @param {string} value 
         */
        Pagination.prototype.setEndCursor = function (value) {
            this.endCursor = value;
        };
    
        /**
         * True if there are more pages of results after this response.
         *
         * @return {bool}
         */
        Pagination.prototype.getHasNextPage = function () {
            return this.hasNextPage;
        };
    
        /**
         * Setter for HasNextPage
         * 
         * @param {bool} value 
         */
        Pagination.prototype.setHasNextPage = function (value) {
            this.hasNextPage = value;
        };
    
        /**
         * True if there are more pages of results before this response.
         *
         * @return {bool}
         */
        Pagination.prototype.getHasPrevPage = function () {
            return this.hasPrevPage;
        };
    
        /**
         * Setter for HasPrevPage
         * 
         * @param {bool} value 
         */
        Pagination.prototype.setHasPrevPage = function (value) {
            this.hasPrevPage = value;
        };
    
        /**
         * Cursor identifier representing the first element in the response. This value should be used in
         * conjunction with a subsequent request's 'ending_before' query parameter.
         *
         * @return {string}
         */
        Pagination.prototype.getStartCursor = function () {
            return this.startCursor;
        };
    
        /**
         * Setter for StartCursor
         * 
         * @param {string} value 
         */
        Pagination.prototype.setStartCursor = function (value) {
            this.startCursor = value;
        };
    
        return Pagination;
    }

}(angular));
