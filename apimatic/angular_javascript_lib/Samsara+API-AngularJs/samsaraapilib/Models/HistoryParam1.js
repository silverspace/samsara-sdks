/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of HistoryParam1
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('HistoryParam1', ['BaseModel', HistoryParam1Model]);

    function HistoryParam1Model(BaseModel) {
        var HistoryParam1 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.endMs = this.getValue(obj.endMs);
            this.fillMissing = this.getValue(obj.fillMissing, 'withNull');
            this.groupId = this.getValue(obj.groupId);
            this.series = this.getValue(obj.series);
            this.startMs = this.getValue(obj.startMs);
            this.stepMs = this.getValue(obj.stepMs);
        };

        HistoryParam1.prototype = new BaseModel();
        HistoryParam1.prototype.constructor = HistoryParam1;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        HistoryParam1.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'endMs', realName: 'endMs' },
                { name: 'fillMissing', realName: 'fillMissing' },
                { name: 'groupId', realName: 'groupId' },
                { name: 'series', realName: 'series', array: true, type: 'Series1' },
                { name: 'startMs', realName: 'startMs' },
                { name: 'stepMs', realName: 'stepMs' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        HistoryParam1.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * End of the time range, specified in milliseconds UNIX time.
         *
         * @return {long}
         */
        HistoryParam1.prototype.getEndMs = function () {
            return this.endMs;
        };
    
        /**
         * Setter for EndMs
         * 
         * @param {long} value 
         */
        HistoryParam1.prototype.setEndMs = function (value) {
            this.endMs = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {FillMissingEnum|null}
         */
        HistoryParam1.prototype.getFillMissing = function () {
            return this.fillMissing;
        };
    
        /**
         * Setter for FillMissing
         * 
         * @param {FillMissingEnum|null} value 
         */
        HistoryParam1.prototype.setFillMissing = function (value) {
            this.fillMissing = value;
        };
    
        /**
         * Group ID to query.
         *
         * @return {long}
         */
        HistoryParam1.prototype.getGroupId = function () {
            return this.groupId;
        };
    
        /**
         * Setter for GroupId
         * 
         * @param {long} value 
         */
        HistoryParam1.prototype.setGroupId = function (value) {
            this.groupId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        HistoryParam1.prototype.getSeries = function () {
            return this.series;
        };
    
        /**
         * Setter for Series
         * 
         * @param {array} value 
         */
        HistoryParam1.prototype.setSeries = function (value) {
            this.series = value;
        };
    
        /**
         * Beginning of the time range, specified in milliseconds UNIX time.
         *
         * @return {long}
         */
        HistoryParam1.prototype.getStartMs = function () {
            return this.startMs;
        };
    
        /**
         * Setter for StartMs
         * 
         * @param {long} value 
         */
        HistoryParam1.prototype.setStartMs = function (value) {
            this.startMs = value;
        };
    
        /**
         * Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data
         * at hour intervals.
         *
         * @return {int}
         */
        HistoryParam1.prototype.getStepMs = function () {
            return this.stepMs;
        };
    
        /**
         * Setter for StepMs
         * 
         * @param {int} value 
         */
        HistoryParam1.prototype.setStepMs = function (value) {
            this.stepMs = value;
        };
    
        return HistoryParam1;
    }

}(angular));
