/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of UserBase
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('UserBase', ['BaseModel', UserBaseModel]);

    function UserBaseModel(BaseModel) {
        var UserBase = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.authType = this.getValue(obj.authType);
            this.email = this.getValue(obj.email);
            this.name = this.getValue(obj.name);
            this.organizationRoleId = this.getValue(obj.organizationRoleId);
        };

        UserBase.prototype = new BaseModel();
        UserBase.prototype.constructor = UserBase;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        UserBase.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'authType', realName: 'authType' },
                { name: 'email', realName: 'email' },
                { name: 'name', realName: 'name' },
                { name: 'organizationRoleId', realName: 'organizationRoleId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        UserBase.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The authentication type the user uses to authenticate. To use SAML this organization must have a
         * configured SAML integration.
         *
         * @return {AuthTypeEnum}
         */
        UserBase.prototype.getAuthType = function () {
            return this.authType;
        };
    
        /**
         * Setter for AuthType
         * 
         * @param {AuthTypeEnum} value 
         */
        UserBase.prototype.setAuthType = function (value) {
            this.authType = value;
        };
    
        /**
         * The email address of this user.
         *
         * @return {string}
         */
        UserBase.prototype.getEmail = function () {
            return this.email;
        };
    
        /**
         * Setter for Email
         * 
         * @param {string} value 
         */
        UserBase.prototype.setEmail = function (value) {
            this.email = value;
        };
    
        /**
         * The first and last name of the user.
         *
         * @return {string|null}
         */
        UserBase.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        UserBase.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * The id of the role the user is assigned to at the organization level. This will be blank for users that
         * only have access to specific tags.
         *
         * @return {string|null}
         */
        UserBase.prototype.getOrganizationRoleId = function () {
            return this.organizationRoleId;
        };
    
        /**
         * Setter for OrganizationRoleId
         * 
         * @param {string|null} value 
         */
        UserBase.prototype.setOrganizationRoleId = function (value) {
            this.organizationRoleId = value;
        };
    
        return UserBase;
    }

}(angular));
