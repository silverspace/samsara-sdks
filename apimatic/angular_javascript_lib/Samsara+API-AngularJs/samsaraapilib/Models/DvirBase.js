/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of DvirBase
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('DvirBase', ['BaseModel', DvirBaseModel]);

    function DvirBaseModel(BaseModel) {
        var DvirBase = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.authorSignature = this.getValue(obj.authorSignature);
            this.defectsCorrected = this.getValue(obj.defectsCorrected);
            this.defectsNeedNotBeCorrected = this.getValue(obj.defectsNeedNotBeCorrected);
            this.id = this.getValue(obj.id);
            this.inspectionType = this.getValue(obj.inspectionType);
            this.mechanicNotes = this.getValue(obj.mechanicNotes);
            this.mechanicOrAgentSignature = this.getValue(obj.mechanicOrAgentSignature);
            this.nextDriverSignature = this.getValue(obj.nextDriverSignature);
            this.odometerMiles = this.getValue(obj.odometerMiles);
            this.timeMs = this.getValue(obj.timeMs);
            this.trailerDefects = this.getValue(obj.trailerDefects);
            this.trailerId = this.getValue(obj.trailerId);
            this.trailerName = this.getValue(obj.trailerName);
            this.vehicle = this.getValue(obj.vehicle);
            this.vehicleCondition = this.getValue(obj.vehicleCondition);
            this.vehicleDefects = this.getValue(obj.vehicleDefects);
        };

        DvirBase.prototype = new BaseModel();
        DvirBase.prototype.constructor = DvirBase;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        DvirBase.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'authorSignature', realName: 'authorSignature', type: 'AuthorSignature' },
                { name: 'defectsCorrected', realName: 'defectsCorrected' },
                { name: 'defectsNeedNotBeCorrected', realName: 'defectsNeedNotBeCorrected' },
                { name: 'id', realName: 'id' },
                { name: 'inspectionType', realName: 'inspectionType' },
                { name: 'mechanicNotes', realName: 'mechanicNotes' },
                {
                    name: 'mechanicOrAgentSignature',
                    realName: 'mechanicOrAgentSignature',
                    type: 'MechanicOrAgentSignature',
                },
                { name: 'nextDriverSignature', realName: 'nextDriverSignature', type: 'NextDriverSignature' },
                { name: 'odometerMiles', realName: 'odometerMiles' },
                { name: 'timeMs', realName: 'timeMs' },
                { name: 'trailerDefects', realName: 'trailerDefects', array: true, type: 'TrailerDefect' },
                { name: 'trailerId', realName: 'trailerId' },
                { name: 'trailerName', realName: 'trailerName' },
                { name: 'vehicle', realName: 'vehicle', type: 'Vehicle2' },
                { name: 'vehicleCondition', realName: 'vehicleCondition' },
                { name: 'vehicleDefects', realName: 'vehicleDefects', array: true, type: 'VehicleDefect' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        DvirBase.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The authors signature for the DVIR.
         *
         * @return {AuthorSignature|null}
         */
        DvirBase.prototype.getAuthorSignature = function () {
            return this.authorSignature;
        };
    
        /**
         * Setter for AuthorSignature
         * 
         * @param {AuthorSignature|null} value 
         */
        DvirBase.prototype.setAuthorSignature = function (value) {
            this.authorSignature = value;
        };
    
        /**
         * Signifies if the defects on the vehicle corrected after the DVIR is done.
         *
         * @return {bool|null}
         */
        DvirBase.prototype.getDefectsCorrected = function () {
            return this.defectsCorrected;
        };
    
        /**
         * Setter for DefectsCorrected
         * 
         * @param {bool|null} value 
         */
        DvirBase.prototype.setDefectsCorrected = function (value) {
            this.defectsCorrected = value;
        };
    
        /**
         * Signifies if the defects on this vehicle can be ignored.
         *
         * @return {bool|null}
         */
        DvirBase.prototype.getDefectsNeedNotBeCorrected = function () {
            return this.defectsNeedNotBeCorrected;
        };
    
        /**
         * Setter for DefectsNeedNotBeCorrected
         * 
         * @param {bool|null} value 
         */
        DvirBase.prototype.setDefectsNeedNotBeCorrected = function (value) {
            this.defectsNeedNotBeCorrected = value;
        };
    
        /**
         * The id of this DVIR record.
         *
         * @return {long|null}
         */
        DvirBase.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long|null} value 
         */
        DvirBase.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * Inspection type of the DVIR.
         *
         * @return {string|null}
         */
        DvirBase.prototype.getInspectionType = function () {
            return this.inspectionType;
        };
    
        /**
         * Setter for InspectionType
         * 
         * @param {string|null} value 
         */
        DvirBase.prototype.setInspectionType = function (value) {
            this.inspectionType = value;
        };
    
        /**
         * The mechanics notes on the DVIR.
         *
         * @return {string|null}
         */
        DvirBase.prototype.getMechanicNotes = function () {
            return this.mechanicNotes;
        };
    
        /**
         * Setter for MechanicNotes
         * 
         * @param {string|null} value 
         */
        DvirBase.prototype.setMechanicNotes = function (value) {
            this.mechanicNotes = value;
        };
    
        /**
         * The mechanic's or agent's signature for the DVIR.
         *
         * @return {MechanicOrAgentSignature|null}
         */
        DvirBase.prototype.getMechanicOrAgentSignature = function () {
            return this.mechanicOrAgentSignature;
        };
    
        /**
         * Setter for MechanicOrAgentSignature
         * 
         * @param {MechanicOrAgentSignature|null} value 
         */
        DvirBase.prototype.setMechanicOrAgentSignature = function (value) {
            this.mechanicOrAgentSignature = value;
        };
    
        /**
         * The next driver signature for the DVIR.
         *
         * @return {NextDriverSignature|null}
         */
        DvirBase.prototype.getNextDriverSignature = function () {
            return this.nextDriverSignature;
        };
    
        /**
         * Setter for NextDriverSignature
         * 
         * @param {NextDriverSignature|null} value 
         */
        DvirBase.prototype.setNextDriverSignature = function (value) {
            this.nextDriverSignature = value;
        };
    
        /**
         * The odometer reading in miles for the vehicle when the DVIR was done.
         *
         * @return {long|null}
         */
        DvirBase.prototype.getOdometerMiles = function () {
            return this.odometerMiles;
        };
    
        /**
         * Setter for OdometerMiles
         * 
         * @param {long|null} value 
         */
        DvirBase.prototype.setOdometerMiles = function (value) {
            this.odometerMiles = value;
        };
    
        /**
         * Timestamp of this DVIR in UNIX milliseconds.
         *
         * @return {long|null}
         */
        DvirBase.prototype.getTimeMs = function () {
            return this.timeMs;
        };
    
        /**
         * Setter for TimeMs
         * 
         * @param {long|null} value 
         */
        DvirBase.prototype.setTimeMs = function (value) {
            this.timeMs = value;
        };
    
        /**
         * Defects registered for the trailer which was part of the DVIR.
         *
         * @return {array|null}
         */
        DvirBase.prototype.getTrailerDefects = function () {
            return this.trailerDefects;
        };
    
        /**
         * Setter for TrailerDefects
         * 
         * @param {array|null} value 
         */
        DvirBase.prototype.setTrailerDefects = function (value) {
            this.trailerDefects = value;
        };
    
        /**
         * The id of the trailer which was part of the DVIR.
         *
         * @return {int|null}
         */
        DvirBase.prototype.getTrailerId = function () {
            return this.trailerId;
        };
    
        /**
         * Setter for TrailerId
         * 
         * @param {int|null} value 
         */
        DvirBase.prototype.setTrailerId = function (value) {
            this.trailerId = value;
        };
    
        /**
         * The name of the trailer which was part of the DVIR.
         *
         * @return {string|null}
         */
        DvirBase.prototype.getTrailerName = function () {
            return this.trailerName;
        };
    
        /**
         * Setter for TrailerName
         * 
         * @param {string|null} value 
         */
        DvirBase.prototype.setTrailerName = function (value) {
            this.trailerName = value;
        };
    
        /**
         * The vehicle on which DVIR was done.
         *
         * @return {Vehicle2|null}
         */
        DvirBase.prototype.getVehicle = function () {
            return this.vehicle;
        };
    
        /**
         * Setter for Vehicle
         * 
         * @param {Vehicle2|null} value 
         */
        DvirBase.prototype.setVehicle = function (value) {
            this.vehicle = value;
        };
    
        /**
         * The condition of vechile on which DVIR was done.
         *
         * @return {string|null}
         */
        DvirBase.prototype.getVehicleCondition = function () {
            return this.vehicleCondition;
        };
    
        /**
         * Setter for VehicleCondition
         * 
         * @param {string|null} value 
         */
        DvirBase.prototype.setVehicleCondition = function (value) {
            this.vehicleCondition = value;
        };
    
        /**
         * Defects registered for the vehicle which was part of the DVIR.
         *
         * @return {array|null}
         */
        DvirBase.prototype.getVehicleDefects = function () {
            return this.vehicleDefects;
        };
    
        /**
         * Setter for VehicleDefects
         * 
         * @param {array|null} value 
         */
        DvirBase.prototype.setVehicleDefects = function (value) {
            this.vehicleDefects = value;
        };
    
        return DvirBase;
    }

}(angular));
