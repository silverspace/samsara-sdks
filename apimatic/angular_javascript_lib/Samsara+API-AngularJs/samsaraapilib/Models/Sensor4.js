/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Sensor4
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Sensor4', ['BaseModel', Sensor4Model]);

    function Sensor4Model(BaseModel) {
        var Sensor4 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.ambientTemperature = this.getValue(obj.ambientTemperature);
            this.id = this.getValue(obj.id);
            this.name = this.getValue(obj.name);
            this.probeTemperature = this.getValue(obj.probeTemperature);
        };

        Sensor4.prototype = new BaseModel();
        Sensor4.prototype.constructor = Sensor4;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Sensor4.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'ambientTemperature', realName: 'ambientTemperature' },
                { name: 'id', realName: 'id' },
                { name: 'name', realName: 'name' },
                { name: 'probeTemperature', realName: 'probeTemperature' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Sensor4.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Currently reported ambient temperature in millidegrees celsius.
         *
         * @return {int|null}
         */
        Sensor4.prototype.getAmbientTemperature = function () {
            return this.ambientTemperature;
        };
    
        /**
         * Setter for AmbientTemperature
         * 
         * @param {int|null} value 
         */
        Sensor4.prototype.setAmbientTemperature = function (value) {
            this.ambientTemperature = value;
        };
    
        /**
         * ID of the sensor.
         *
         * @return {long|null}
         */
        Sensor4.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long|null} value 
         */
        Sensor4.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * Name of the sensor.
         *
         * @return {string|null}
         */
        Sensor4.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        Sensor4.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter
         * will not be reported.
         *
         * @return {int|null}
         */
        Sensor4.prototype.getProbeTemperature = function () {
            return this.probeTemperature;
        };
    
        /**
         * Setter for ProbeTemperature
         * 
         * @param {int|null} value 
         */
        Sensor4.prototype.setProbeTemperature = function (value) {
            this.probeTemperature = value;
        };
    
        return Sensor4;
    }

}(angular));
