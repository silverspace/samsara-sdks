/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Document
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('Document', ['BaseModel', DocumentModel]);

    function DocumentModel(BaseModel) {
        var Document = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.documentType = this.getValue(obj.documentType);
            this.driverCreatedAtMs = this.getValue(obj.driverCreatedAtMs);
            this.driverId = this.getValue(obj.driverId);
            this.fields = this.getValue(obj.fields);
            this.vehicleId = this.getValue(obj.vehicleId);
            this.dispatchJobId = this.getValue(obj.dispatchJobId);
            this.notes = this.getValue(obj.notes);
        };

        Document.prototype = new BaseModel();
        Document.prototype.constructor = Document;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Document.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'documentType', realName: 'documentType' },
                { name: 'driverCreatedAtMs', realName: 'driverCreatedAtMs' },
                { name: 'driverId', realName: 'driverId' },
                { name: 'fields', realName: 'fields', array: true, type: 'DocumentField' },
                { name: 'vehicleId', realName: 'vehicleId' },
                { name: 'dispatchJobId', realName: 'dispatchJobId' },
                { name: 'notes', realName: 'notes' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Document.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Descriptive name of this type of document.
         *
         * @return {string}
         */
        Document.prototype.getDocumentType = function () {
            return this.documentType;
        };
    
        /**
         * Setter for DocumentType
         * 
         * @param {string} value 
         */
        Document.prototype.setDocumentType = function (value) {
            this.documentType = value;
        };
    
        /**
         * The time in Unix epoch milliseconds that the document is created.
         *
         * @return {long}
         */
        Document.prototype.getDriverCreatedAtMs = function () {
            return this.driverCreatedAtMs;
        };
    
        /**
         * Setter for DriverCreatedAtMs
         * 
         * @param {long} value 
         */
        Document.prototype.setDriverCreatedAtMs = function (value) {
            this.driverCreatedAtMs = value;
        };
    
        /**
         * ID of the driver for whom the document is submitted
         *
         * @return {long}
         */
        Document.prototype.getDriverId = function () {
            return this.driverId;
        };
    
        /**
         * Setter for DriverId
         * 
         * @param {long} value 
         */
        Document.prototype.setDriverId = function (value) {
            this.driverId = value;
        };
    
        /**
         * The fields associated with this document.
         *
         * @return {array}
         */
        Document.prototype.getFields = function () {
            return this.fields;
        };
    
        /**
         * Setter for Fields
         * 
         * @param {array} value 
         */
        Document.prototype.setFields = function (value) {
            this.fields = value;
        };
    
        /**
         * VehicleID of the driver at document creation.
         *
         * @return {long|null}
         */
        Document.prototype.getVehicleId = function () {
            return this.vehicleId;
        };
    
        /**
         * Setter for VehicleId
         * 
         * @param {long|null} value 
         */
        Document.prototype.setVehicleId = function (value) {
            this.vehicleId = value;
        };
    
        /**
         * ID of the Samsara dispatch job for which the document is submitted
         *
         * @return {long|null}
         */
        Document.prototype.getDispatchJobId = function () {
            return this.dispatchJobId;
        };
    
        /**
         * Setter for DispatchJobId
         * 
         * @param {long|null} value 
         */
        Document.prototype.setDispatchJobId = function (value) {
            this.dispatchJobId = value;
        };
    
        /**
         * Notes submitted with this document.
         *
         * @return {string|null}
         */
        Document.prototype.getNotes = function () {
            return this.notes;
        };
    
        /**
         * Setter for Notes
         * 
         * @param {string|null} value 
         */
        Document.prototype.setNotes = function (value) {
            this.notes = value;
        };
    
        return Document;
    }

}(angular));
