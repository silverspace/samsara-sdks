/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of DocumentBase
 *
 * @constructor
 */
angular.module('SamsaraAPILib')
    .factory('DocumentBase', ['BaseModel', DocumentBaseModel]);

    function DocumentBaseModel(BaseModel) {
        var DocumentBase = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.dispatchJobId = this.getValue(obj.dispatchJobId);
            this.notes = this.getValue(obj.notes);
        };

        DocumentBase.prototype = new BaseModel();
        DocumentBase.prototype.constructor = DocumentBase;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        DocumentBase.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'dispatchJobId', realName: 'dispatchJobId' },
                { name: 'notes', realName: 'notes' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        DocumentBase.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * ID of the Samsara dispatch job for which the document is submitted
         *
         * @return {long|null}
         */
        DocumentBase.prototype.getDispatchJobId = function () {
            return this.dispatchJobId;
        };
    
        /**
         * Setter for DispatchJobId
         * 
         * @param {long|null} value 
         */
        DocumentBase.prototype.setDispatchJobId = function (value) {
            this.dispatchJobId = value;
        };
    
        /**
         * Notes submitted with this document.
         *
         * @return {string|null}
         */
        DocumentBase.prototype.getNotes = function () {
            return this.notes;
        };
    
        /**
         * Setter for Notes
         * 
         * @param {string|null} value 
         */
        DocumentBase.prototype.setNotes = function (value) {
            this.notes = value;
        };
    
        return DocumentBase;
    }

}(angular));
