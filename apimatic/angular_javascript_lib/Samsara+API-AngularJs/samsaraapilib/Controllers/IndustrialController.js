/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('SamsaraAPILib')
    .factory('IndustrialController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        IndustrialController
    ]);

    function IndustrialController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Fetch datapoints from a given data input.
             *
             * @param {string} accessToken Samsara API access token.
             * @param {long} dataInputId ID of the data input
             * @param {long|null} startMs [Optional] Timestamp in unix milliseconds representing the start of the
             * period to fetch, inclusive. Used in combination with endMs. defaults to
             * nowMs.
             * @param {long|null} endMs [Optional] Timestamp in unix milliseconds representing the end of the
             * period to fetch, inclusive. Used in combination with startMs. Defaults to
             * nowMs.
             *
             * @return {promise<DataInputHistoryResponse>}
             */
            getDataInput: function (accessToken, dataInputId, startMs, endMs) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/industrial/data/{data_input_id}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'data_input_id': dataInputId
                });

                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'access_token': accessToken,
                    'startMs': startMs,
                    'endMs': endMs
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json'
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'DataInputHistoryResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                     else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Fetch all of the data inputs for a group.
             *
             * @param {string} accessToken Samsara API access token.
             * @param {long|null} groupId [Optional] Optional group ID if the organization has multiple groups
             * (uncommon).
             * @param {long|null} startMs [Optional] Timestamp in unix milliseconds representing the start of the
             * period to fetch, inclusive. Used in combination with endMs. defaults to
             * nowMs.
             * @param {long|null} endMs [Optional] Timestamp in unix milliseconds representing the end of the
             * period to fetch, inclusive. Used in combination with startMs. Defaults to
             * nowMs.
             *
             * @return {promise<GetAllDataInputsResponse>}
             */
            getAllDataInputs: function (accessToken, groupId, startMs, endMs) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/industrial/data';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'access_token': accessToken,
                    'group_id': groupId,
                    'startMs': startMs,
                    'endMs': endMs
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json'
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'GetAllDataInputsResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                     else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and
             * information about them.
             *
             * @param {string} accessToken Samsara API access token.
             * @param {GroupParam} groupParam Group ID to query.
             *
             * @return {promise<get_machinesResponse>}
             */
            createGetMachines: function (accessToken, groupParam) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/machines/list';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'access_token': accessToken
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(groupParam);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: groupParam.toJSON()
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'GetMachinesResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                     else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Get historical data for machine objects. This method returns a set of historical data for all
             * machines in a group
             *
             * @param {string} accessToken Samsara API access token.
             * @param {HistoryParam} historyParam Group ID and time range to query for events
             *
             * @return {promise<MachineHistoryResponse>}
             */
            createGetMachinesHistory: function (accessToken, historyParam) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/machines/history';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'access_token': accessToken
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(historyParam);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: historyParam.toJSON()
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'MachineHistoryResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                     else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
