/*
 * samsaraapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg



/*
 * Structure for the custom type Vibration
 */
type Vibration struct {
    X               *float64        `json:"X,omitempty" form:"X,omitempty"` //TODO: Write general description for this field
    Y               *float64        `json:"Y,omitempty" form:"Y,omitempty"` //TODO: Write general description for this field
    Z               *float64        `json:"Z,omitempty" form:"Z,omitempty"` //TODO: Write general description for this field
    Time            *int64          `json:"time,omitempty" form:"time,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Vertex
 */
type Vertex struct {
    Latitude        *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //The longitude of a geofence vertex
    Longitude       *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //The longitude of a geofence vertex
}

/*
 * Structure for the custom type VehicleUpdateParam
 */
type VehicleUpdateParam struct {
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    Vehicles        []*Vehicle      `json:"vehicles" form:"vehicles"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type VehicleStat
 */
type VehicleStat struct {
    AuxInput1       AuxInputSeries  `json:"auxInput1,omitempty" form:"auxInput1,omitempty"` //A list of aux input values over a timerange.
    AuxInput2       AuxInputSeries  `json:"auxInput2,omitempty" form:"auxInput2,omitempty"` //A list of aux input values over a timerange.
    EngineState     []*EngineState  `json:"engineState,omitempty" form:"engineState,omitempty"` //TODO: Write general description for this field
    VehicleId       int64           `json:"vehicleId" form:"vehicleId"` //ID of the vehicle.
}

/*
 * Structure for the custom type TripsParam
 */
type TripsParam struct {
    EndMs           int64           `json:"endMs" form:"endMs"` //End of the time range, specified in milliseconds UNIX time.
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    StartMs         int64           `json:"startMs" form:"startMs"` //Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
    VehicleId       int64           `json:"vehicleId" form:"vehicleId"` //Vehicle ID to query.
}

/*
 * Structure for the custom type VehicleInfo
 */
type VehicleInfo struct {
    Make            *string         `json:"make,omitempty" form:"make,omitempty"` //Make of the vehicle.
    Model           *string         `json:"model,omitempty" form:"model,omitempty"` //Model of the Vehicle.
    Vin             *string         `json:"vin,omitempty" form:"vin,omitempty"` //Vehicle Identification Number.
    Year            *int64          `json:"year,omitempty" form:"year,omitempty"` //Year of the vehicle.
}

/*
 * Structure for the custom type VehicleDefect
 */
type VehicleDefect struct {
    Comment         *string         `json:"comment,omitempty" form:"comment,omitempty"` //The comment describing the type of DVIR defect
    DefectType      *string         `json:"defectType,omitempty" form:"defectType,omitempty"` //The type of DVIR defect
}

/*
 * Structure for the custom type ReactivateDriverParam
 */
type ReactivateDriverParam struct {
    Reactivate      bool            `json:"reactivate" form:"reactivate"` //True indicates that this driver should be reactivated.
}

/*
 * Structure for the custom type Vehicle2
 */
type Vehicle2 struct {
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //The vehicle id on which DVIR was done.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //The vehicle on which DVIR was done.
}

/*
 * Structure for the custom type Summary
 */
type Summary struct {
    ActiveMs        *int64          `json:"activeMs,omitempty" form:"activeMs,omitempty"` //Duration in milliseconds that driver was on duty or driving during the requested time range
    DistanceMiles   *float64        `json:"distanceMiles,omitempty" form:"distanceMiles,omitempty"` //Distance driven in miles, rounded to two decimal places.
    DriveMs         *int64          `json:"driveMs,omitempty" form:"driveMs,omitempty"` //Duration in milliseconds that driver was driving during the requested time range
    DriverId        *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver.
    DriverName      *string         `json:"driverName,omitempty" form:"driverName,omitempty"` //Name of the driver.
    DriverUsername  *string         `json:"driverUsername,omitempty" form:"driverUsername,omitempty"` //Username of the driver.
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //Group of the driver.
    OnDutyMs        *int64          `json:"onDutyMs,omitempty" form:"onDutyMs,omitempty"` //Duration in milliseconds that driver was on duty during the requested time range
}

/*
 * Structure for the custom type Sensor4
 */
type Sensor4 struct {
    AmbientTemperature *int64          `json:"ambientTemperature,omitempty" form:"ambientTemperature,omitempty"` //Currently reported ambient temperature in millidegrees celsius.
    Id                 *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the sensor.
    Name               *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the sensor.
    ProbeTemperature   *int64          `json:"probeTemperature,omitempty" form:"probeTemperature,omitempty"` //Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.
}

/*
 * Structure for the custom type ReeferStats
 */
type ReeferStats struct {
    Alarms          []*Alarm        `json:"alarms,omitempty" form:"alarms,omitempty"` //Reefer alarms
    EngineHours     []*EngineHour   `json:"engineHours,omitempty" form:"engineHours,omitempty"` //Engine hours of the reefer
    FuelPercentage  []*FuelPercentage `json:"fuelPercentage,omitempty" form:"fuelPercentage,omitempty"` //Fuel percentage of the reefer
    PowerStatus     []*PowerStatus  `json:"powerStatus,omitempty" form:"powerStatus,omitempty"` //Power status of the reefer
    ReturnAirTemp   []*ReturnAirTemp `json:"returnAirTemp,omitempty" form:"returnAirTemp,omitempty"` //Return air temperature of the reefer
    SetPoint        []*SetPoint     `json:"setPoint,omitempty" form:"setPoint,omitempty"` //Set point temperature of the reefer
}

/*
 * Structure for the custom type NextDriverSignature
 */
type NextDriverSignature struct {
    DriverId        *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver who signed the DVIR
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Email of the  driver who signed the next DVIR on this vehicle.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //The name of the driver who signed the next DVIR on this vehicle.
    SignedAt        *int64          `json:"signedAt,omitempty" form:"signedAt,omitempty"` //The time in millis when the next driver signed the DVIR on this vehicle.
    Type            *string         `json:"type,omitempty" form:"type,omitempty"` //Type corresponds to driver.
    Username        *string         `json:"username,omitempty" form:"username,omitempty"` //Username of the  driver who signed the next DVIR on this vehicle.
}

/*
 * Structure for the custom type DriverForCreate
 */
type DriverForCreate struct {
    Password                          string          `json:"password" form:"password"` //Driver's password for the driver app.
    TagIds                            *[]int64        `json:"tagIds,omitempty" form:"tagIds,omitempty"` //A list of tag IDs.
    EldAdverseWeatherExemptionEnabled *bool           `json:"eldAdverseWeatherExemptionEnabled,omitempty" form:"eldAdverseWeatherExemptionEnabled,omitempty"` //Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
    EldBigDayExemptionEnabled         *bool           `json:"eldBigDayExemptionEnabled,omitempty" form:"eldBigDayExemptionEnabled,omitempty"` //Flag indicating this driver may use Big Day excemptions in ELD logs.
    EldDayStartHour                   *int64          `json:"eldDayStartHour,omitempty" form:"eldDayStartHour,omitempty"` //0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
    EldExempt                         *bool           `json:"eldExempt,omitempty" form:"eldExempt,omitempty"` //Flag indicating this driver is exempt from the Electronic Logging Mandate.
    EldExemptReason                   *string         `json:"eldExemptReason,omitempty" form:"eldExemptReason,omitempty"` //Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
    EldPcEnabled                      *bool           `json:"eldPcEnabled,omitempty" form:"eldPcEnabled,omitempty"` //Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
    EldYmEnabled                      *bool           `json:"eldYmEnabled,omitempty" form:"eldYmEnabled,omitempty"` //Flag indicating this driver may select the Yard Move duty status in ELD logs.
    ExternalIds                       *map[string]string `json:"externalIds,omitempty" form:"externalIds,omitempty"` //Dictionary of external IDs (string key-value pairs)
    GroupId                           *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //ID of the group if the organization has multiple groups (uncommon).
    LicenseNumber                     *string         `json:"licenseNumber,omitempty" form:"licenseNumber,omitempty"` //Driver's state issued license number.
    LicenseState                      *string         `json:"licenseState,omitempty" form:"licenseState,omitempty"` //Abbreviation of state that issued driver's license.
    Name                              string          `json:"name" form:"name"` //Driver's name.
    Notes                             *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes about the driver.
    Phone                             *string         `json:"phone,omitempty" form:"phone,omitempty"` //Driver's phone number. Please include only digits, ex. 4157771234
    Username                          *string         `json:"username,omitempty" form:"username,omitempty"` //Driver's login username into the driver app.
    VehicleId                         *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
}

/*
 * Structure for the custom type DispatchRouteCreate
 */
type DispatchRouteCreate struct {
    DispatchJobs              []*DispatchJobCreate `json:"dispatch_jobs" form:"dispatch_jobs"` //The dispatch jobs to create for this route.
    ActualEndMs               *int64          `json:"actual_end_ms,omitempty" form:"actual_end_ms,omitempty"` //The time in Unix epoch milliseconds that the route actually ended.
    ActualStartMs             *int64          `json:"actual_start_ms,omitempty" form:"actual_start_ms,omitempty"` //The time in Unix epoch milliseconds that the route actually started.
    DriverId                  *int64          `json:"driver_id,omitempty" form:"driver_id,omitempty"` //ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
    GroupId                   *int64          `json:"group_id,omitempty" form:"group_id,omitempty"` //ID of the group if the organization has multiple groups (optional).
    Name                      string          `json:"name" form:"name"` //Descriptive name of this route.
    ScheduledEndMs            int64           `json:"scheduled_end_ms" form:"scheduled_end_ms"` //The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
    ScheduledMeters           *int64          `json:"scheduled_meters,omitempty" form:"scheduled_meters,omitempty"` //The distance expected to be traveled for this route in meters.
    ScheduledStartMs          int64           `json:"scheduled_start_ms" form:"scheduled_start_ms"` //The time in Unix epoch milliseconds that the route is scheduled to start.
    StartLocationAddress      *string         `json:"start_location_address,omitempty" form:"start_location_address,omitempty"` //The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
    StartLocationAddressId    *int64          `json:"start_location_address_id,omitempty" form:"start_location_address_id,omitempty"` //ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
    StartLocationLat          *float64        `json:"start_location_lat,omitempty" form:"start_location_lat,omitempty"` //Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    StartLocationLng          *float64        `json:"start_location_lng,omitempty" form:"start_location_lng,omitempty"` //Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    StartLocationName         *string         `json:"start_location_name,omitempty" form:"start_location_name,omitempty"` //The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
    TrailerId                 *int64          `json:"trailer_id,omitempty" form:"trailer_id,omitempty"` //ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
    VehicleId                 *int64          `json:"vehicle_id,omitempty" form:"vehicle_id,omitempty"` //ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
}

/*
 * Structure for the custom type Trip
 */
type Trip struct {
    DistanceMeters   *int64          `json:"distanceMeters,omitempty" form:"distanceMeters,omitempty"` //Length of the trip in meters.
    DriverId         *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver.
    EndAddress       *string         `json:"endAddress,omitempty" form:"endAddress,omitempty"` //Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
    EndCoordinates   EndCoordinates  `json:"endCoordinates,omitempty" form:"endCoordinates,omitempty"` //End (latitude, longitude) in decimal degrees.
    EndLocation      *string         `json:"endLocation,omitempty" form:"endLocation,omitempty"` //Geocoded street address of start (latitude, longitude) coordinates.
    EndMs            *int64          `json:"endMs,omitempty" form:"endMs,omitempty"` //End of the trip in UNIX milliseconds.
    EndOdometer      *int64          `json:"endOdometer,omitempty" form:"endOdometer,omitempty"` //Odometer reading at the end of the trip.
    FuelConsumedMl   *int64          `json:"fuelConsumedMl,omitempty" form:"fuelConsumedMl,omitempty"` //Amount in milliliters of fuel consumed on this trip.
    StartAddress     *string         `json:"startAddress,omitempty" form:"startAddress,omitempty"` //Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
    StartCoordinates StartCoordinates `json:"startCoordinates,omitempty" form:"startCoordinates,omitempty"` //Start (latitude, longitude) in decimal degrees.
    StartLocation    *string         `json:"startLocation,omitempty" form:"startLocation,omitempty"` //Geocoded street address of start (latitude, longitude) coordinates.
    StartMs          *int64          `json:"startMs,omitempty" form:"startMs,omitempty"` //Beginning of the trip in UNIX milliseconds.
    StartOdometer    *int64          `json:"startOdometer,omitempty" form:"startOdometer,omitempty"` //Odometer reading at the beginning of the trip.
    TollMeters       *int64          `json:"tollMeters,omitempty" form:"tollMeters,omitempty"` //Length in meters trip spent on toll roads.
}

/*
 * Structure for the custom type DispatchRouteBase
 */
type DispatchRouteBase struct {
    ActualEndMs               *int64          `json:"actual_end_ms,omitempty" form:"actual_end_ms,omitempty"` //The time in Unix epoch milliseconds that the route actually ended.
    ActualStartMs             *int64          `json:"actual_start_ms,omitempty" form:"actual_start_ms,omitempty"` //The time in Unix epoch milliseconds that the route actually started.
    DriverId                  *int64          `json:"driver_id,omitempty" form:"driver_id,omitempty"` //ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
    GroupId                   *int64          `json:"group_id,omitempty" form:"group_id,omitempty"` //ID of the group if the organization has multiple groups (optional).
    Name                      string          `json:"name" form:"name"` //Descriptive name of this route.
    ScheduledEndMs            int64           `json:"scheduled_end_ms" form:"scheduled_end_ms"` //The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
    ScheduledMeters           *int64          `json:"scheduled_meters,omitempty" form:"scheduled_meters,omitempty"` //The distance expected to be traveled for this route in meters.
    ScheduledStartMs          int64           `json:"scheduled_start_ms" form:"scheduled_start_ms"` //The time in Unix epoch milliseconds that the route is scheduled to start.
    StartLocationAddress      *string         `json:"start_location_address,omitempty" form:"start_location_address,omitempty"` //The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
    StartLocationAddressId    *int64          `json:"start_location_address_id,omitempty" form:"start_location_address_id,omitempty"` //ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
    StartLocationLat          *float64        `json:"start_location_lat,omitempty" form:"start_location_lat,omitempty"` //Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    StartLocationLng          *float64        `json:"start_location_lng,omitempty" form:"start_location_lng,omitempty"` //Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    StartLocationName         *string         `json:"start_location_name,omitempty" form:"start_location_name,omitempty"` //The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
    TrailerId                 *int64          `json:"trailer_id,omitempty" form:"trailer_id,omitempty"` //ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
    VehicleId                 *int64          `json:"vehicle_id,omitempty" form:"vehicle_id,omitempty"` //ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
}

/*
 * Structure for the custom type DispatchRoute
 */
type DispatchRoute struct {
    DispatchJobs              []*DispatchJob  `json:"dispatch_jobs" form:"dispatch_jobs"` //The dispatch jobs associated with this route.
    Id                        int64           `json:"id" form:"id"` //ID of the Samsara dispatch route.
    ActualEndMs               *int64          `json:"actual_end_ms,omitempty" form:"actual_end_ms,omitempty"` //The time in Unix epoch milliseconds that the route actually ended.
    ActualStartMs             *int64          `json:"actual_start_ms,omitempty" form:"actual_start_ms,omitempty"` //The time in Unix epoch milliseconds that the route actually started.
    DriverId                  *int64          `json:"driver_id,omitempty" form:"driver_id,omitempty"` //ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
    GroupId                   *int64          `json:"group_id,omitempty" form:"group_id,omitempty"` //ID of the group if the organization has multiple groups (optional).
    Name                      string          `json:"name" form:"name"` //Descriptive name of this route.
    ScheduledEndMs            int64           `json:"scheduled_end_ms" form:"scheduled_end_ms"` //The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
    ScheduledMeters           *int64          `json:"scheduled_meters,omitempty" form:"scheduled_meters,omitempty"` //The distance expected to be traveled for this route in meters.
    ScheduledStartMs          int64           `json:"scheduled_start_ms" form:"scheduled_start_ms"` //The time in Unix epoch milliseconds that the route is scheduled to start.
    StartLocationAddress      *string         `json:"start_location_address,omitempty" form:"start_location_address,omitempty"` //The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
    StartLocationAddressId    *int64          `json:"start_location_address_id,omitempty" form:"start_location_address_id,omitempty"` //ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
    StartLocationLat          *float64        `json:"start_location_lat,omitempty" form:"start_location_lat,omitempty"` //Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    StartLocationLng          *float64        `json:"start_location_lng,omitempty" form:"start_location_lng,omitempty"` //Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    StartLocationName         *string         `json:"start_location_name,omitempty" form:"start_location_name,omitempty"` //The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
    TrailerId                 *int64          `json:"trailer_id,omitempty" form:"trailer_id,omitempty"` //ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
    VehicleId                 *int64          `json:"vehicle_id,omitempty" form:"vehicle_id,omitempty"` //ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
}

/*
 * Structure for the custom type DispatchJob
 */
type DispatchJob struct {
    ArrivedAtMs                 *int64          `json:"arrived_at_ms,omitempty" form:"arrived_at_ms,omitempty"` //The time at which the driver arrived at the job destination.
    CompletedAtMs               *int64          `json:"completed_at_ms,omitempty" form:"completed_at_ms,omitempty"` //The time at which the job was marked complete (e.g. started driving to the next destination).
    DispatchRouteId             int64           `json:"dispatch_route_id" form:"dispatch_route_id"` //ID of the route that this job belongs to.
    DriverId                    *int64          `json:"driver_id,omitempty" form:"driver_id,omitempty"` //ID of the driver assigned to the dispatch job.
    EnRouteAtMs                 *int64          `json:"en_route_at_ms,omitempty" form:"en_route_at_ms,omitempty"` //The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
    EstimatedArrivalMs          *int64          `json:"estimated_arrival_ms,omitempty" form:"estimated_arrival_ms,omitempty"` //The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.
    FleetViewerUrl              *string         `json:"fleet_viewer_url,omitempty" form:"fleet_viewer_url,omitempty"` //Fleet viewer url of the dispatch job.
    GroupId                     int64           `json:"group_id" form:"group_id"` //TODO: Write general description for this field
    Id                          int64           `json:"id" form:"id"` //ID of the Samsara dispatch job.
    JobState                    JobStatusEnum   `json:"job_state" form:"job_state"` //The current state of the dispatch job.
    SkippedAtMs                 *int64          `json:"skipped_at_ms,omitempty" form:"skipped_at_ms,omitempty"` //The time at which the job was marked skipped.
    VehicleId                   *int64          `json:"vehicle_id,omitempty" form:"vehicle_id,omitempty"` //ID of the vehicle used for the dispatch job.
    DestinationAddress          *string         `json:"destination_address,omitempty" form:"destination_address,omitempty"` //The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
    DestinationAddressId        *int64          `json:"destination_address_id,omitempty" form:"destination_address_id,omitempty"` //ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
    DestinationLat              *float64        `json:"destination_lat,omitempty" form:"destination_lat,omitempty"` //Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
    DestinationLng              *float64        `json:"destination_lng,omitempty" form:"destination_lng,omitempty"` //Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
    DestinationName             *string         `json:"destination_name,omitempty" form:"destination_name,omitempty"` //The name of the job destination. If provided, it will take precedence over the name of the address book entry.
    Notes                       *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes regarding the details of this job.
    ScheduledArrivalTimeMs      int64           `json:"scheduled_arrival_time_ms" form:"scheduled_arrival_time_ms"` //The time at which the assigned driver is scheduled to arrive at the job destination.
    ScheduledDepartureTimeMs    *int64          `json:"scheduled_departure_time_ms,omitempty" form:"scheduled_departure_time_ms,omitempty"` //The time at which the assigned driver is scheduled to depart from the job destination.
}

/*
 * Structure for the custom type MechanicOrAgentSignature
 */
type MechanicOrAgentSignature struct {
    DriverId        *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Email of the  agent|mechanic who signed the DVIR.
    MechanicUserId  *int64          `json:"mechanicUserId,omitempty" form:"mechanicUserId,omitempty"` //ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //The name of the agent or mechanic who signed the DVIR.
    SignedAt        *int64          `json:"signedAt,omitempty" form:"signedAt,omitempty"` //The time in millis when the DVIR was signed
    Type            *string         `json:"type,omitempty" form:"type,omitempty"` //Type corresponds to whether the signature corresponds to driver|mechanic.
    Username        *string         `json:"username,omitempty" form:"username,omitempty"` //Username of the  agent|mechanic who signed the DVIR.
}

/*
 * Structure for the custom type HosLogsParam
 */
type HosLogsParam struct {
    DriverId        int64           `json:"driverId" form:"driverId"` //Driver ID to query.
    EndMs           int64           `json:"endMs" form:"endMs"` //End of the time range, specified in milliseconds UNIX time.
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    StartMs         int64           `json:"startMs" form:"startMs"` //Beginning of the time range, specified in milliseconds UNIX time.
}

/*
 * Structure for the custom type HosAuthenticationLogsParam
 */
type HosAuthenticationLogsParam struct {
    DriverId        int64           `json:"driverId" form:"driverId"` //Driver ID to query.
    EndMs           int64           `json:"endMs" form:"endMs"` //End of the time range, specified in milliseconds UNIX time.
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    StartMs         int64           `json:"startMs" form:"startMs"` //Beginning of the time range, specified in milliseconds UNIX time.
}

/*
 * Structure for the custom type TrailerDefect
 */
type TrailerDefect struct {
    Comment         *string         `json:"comment,omitempty" form:"comment,omitempty"` //The comment describing the type of DVIR defect
    DefectType      *string         `json:"defectType,omitempty" form:"defectType,omitempty"` //The type of DVIR defect
}

/*
 * Structure for the custom type HistoryParam1
 */
type HistoryParam1 struct {
    EndMs           int64           `json:"endMs" form:"endMs"` //End of the time range, specified in milliseconds UNIX time.
    FillMissing     FillMissingEnum `json:"fillMissing,omitempty" form:"fillMissing,omitempty"` //TODO: Write general description for this field
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    Series          []*Series1      `json:"series" form:"series"` //TODO: Write general description for this field
    StartMs         int64           `json:"startMs" form:"startMs"` //Beginning of the time range, specified in milliseconds UNIX time.
    StepMs          int64           `json:"stepMs" form:"stepMs"` //Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.
}

/*
 * Structure for the custom type Tag1
 */
type Tag1 struct {
    Id              int64           `json:"id" form:"id"` //The ID of this tag.
    Name            string          `json:"name" form:"name"` //Name of this tag.
    ParentTagId     *int64          `json:"parentTagId,omitempty" form:"parentTagId,omitempty"` //The ID of this tag.
}

/*
 * Structure for the custom type Log
 */
type Log struct {
    CodriverIds     *[]float64      `json:"codriverIds,omitempty" form:"codriverIds,omitempty"` //TODO: Write general description for this field
    DriverId        *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver.
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //ID of the group.
    LocCity         *string         `json:"locCity,omitempty" form:"locCity,omitempty"` //City in which the log was recorded.
    LocLat          *float64        `json:"locLat,omitempty" form:"locLat,omitempty"` //Latitude at which the log was recorded.
    LocLng          *float64        `json:"locLng,omitempty" form:"locLng,omitempty"` //Longitude at which the log was recorded.
    LocName         *string         `json:"locName,omitempty" form:"locName,omitempty"` //Name of location at which the log was recorded.
    LocState        *string         `json:"locState,omitempty" form:"locState,omitempty"` //State in which the log was recorded.
    LogStartMs      *int64          `json:"logStartMs,omitempty" form:"logStartMs,omitempty"` //The time at which the log/HOS status started in UNIX milliseconds.
    Remark          *string         `json:"remark,omitempty" form:"remark,omitempty"` //Remark associated with the log entry.
    StatusType      *string         `json:"statusType,omitempty" form:"statusType,omitempty"` //The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
    VehicleId       *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //ID of the vehicle.
}

/*
 * Structure for the custom type Polygon
 */
type Polygon struct {
    Vertices        []*Vertex       `json:"vertices,omitempty" form:"vertices,omitempty"` //The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.
}

/*
 * Structure for the custom type Driver
 */
type Driver struct {
    Id                                int64           `json:"id" form:"id"` //ID of the driver.
    IsDeactivated                     *bool           `json:"isDeactivated,omitempty" form:"isDeactivated,omitempty"` //True if the driver account has been deactivated.
    Tags                              []*TagMetadata  `json:"tags,omitempty" form:"tags,omitempty"` //TODO: Write general description for this field
    CurrentVehicleId                  *int64          `json:"currentVehicleId,omitempty" form:"currentVehicleId,omitempty"` //ID of the vehicle that this driver is currently assigned to. Omitted if there is no current vehicle assignment for this driver.
    EldAdverseWeatherExemptionEnabled *bool           `json:"eldAdverseWeatherExemptionEnabled,omitempty" form:"eldAdverseWeatherExemptionEnabled,omitempty"` //Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
    EldBigDayExemptionEnabled         *bool           `json:"eldBigDayExemptionEnabled,omitempty" form:"eldBigDayExemptionEnabled,omitempty"` //Flag indicating this driver may use Big Day excemptions in ELD logs.
    EldDayStartHour                   *int64          `json:"eldDayStartHour,omitempty" form:"eldDayStartHour,omitempty"` //0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
    EldExempt                         *bool           `json:"eldExempt,omitempty" form:"eldExempt,omitempty"` //Flag indicating this driver is exempt from the Electronic Logging Mandate.
    EldExemptReason                   *string         `json:"eldExemptReason,omitempty" form:"eldExemptReason,omitempty"` //Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
    EldPcEnabled                      *bool           `json:"eldPcEnabled,omitempty" form:"eldPcEnabled,omitempty"` //Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
    EldYmEnabled                      *bool           `json:"eldYmEnabled,omitempty" form:"eldYmEnabled,omitempty"` //Flag indicating this driver may select the Yard Move duty status in ELD logs.
    ExternalIds                       *map[string]string `json:"externalIds,omitempty" form:"externalIds,omitempty"` //Dictionary of external IDs (string key-value pairs)
    GroupId                           *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //ID of the group if the organization has multiple groups (uncommon).
    LicenseNumber                     *string         `json:"licenseNumber,omitempty" form:"licenseNumber,omitempty"` //Driver's state issued license number.
    LicenseState                      *string         `json:"licenseState,omitempty" form:"licenseState,omitempty"` //Abbreviation of state that issued driver's license.
    Name                              string          `json:"name" form:"name"` //Driver's name.
    Notes                             *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes about the driver.
    Phone                             *string         `json:"phone,omitempty" form:"phone,omitempty"` //Driver's phone number. Please include only digits, ex. 4157771234
    Username                          *string         `json:"username,omitempty" form:"username,omitempty"` //Driver's login username into the driver app.
    VehicleId                         *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
}

/*
 * Structure for the custom type PhotoValue
 */
type PhotoValue struct {
    Url             *string         `json:"url,omitempty" form:"url,omitempty"` //Photo URL for a JPG image
}

/*
 * Structure for the custom type Passenger
 */
type Passenger struct {
    CheckEngineLight       CheckEngineLight1 `json:"checkEngineLight,omitempty" form:"checkEngineLight,omitempty"` //Passenger vehicle check engine light.
    DiagnosticTroubleCodes []*DiagnosticTroubleCode1 `json:"diagnosticTroubleCodes,omitempty" form:"diagnosticTroubleCodes,omitempty"` //Passenger vehicle DTCs.
}

/*
 * Structure for the custom type Driver1
 */
type Driver1 struct {
    CycleRemaining          *int64          `json:"cycleRemaining,omitempty" form:"cycleRemaining,omitempty"` //The amount of remaining cycle time (in ms).
    CycleTomorrow           *int64          `json:"cycleTomorrow,omitempty" form:"cycleTomorrow,omitempty"` //The amount of cycle time (in ms) available tomorrow.
    DriverId                *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver.
    DriverName              *string         `json:"driverName,omitempty" form:"driverName,omitempty"` //Name of the driver.
    DrivingInViolationCycle *int64          `json:"drivingInViolationCycle,omitempty" form:"drivingInViolationCycle,omitempty"` //The amount of driving time in violation in this cycle (in ms).
    DrivingInViolationToday *int64          `json:"drivingInViolationToday,omitempty" form:"drivingInViolationToday,omitempty"` //The amount of driving time in violation today (in ms).
    DutyStatus              *string         `json:"dutyStatus,omitempty" form:"dutyStatus,omitempty"` //The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
    ShiftDriveRemaining     *int64          `json:"shiftDriveRemaining,omitempty" form:"shiftDriveRemaining,omitempty"` //The amount of remaining shift drive time (in ms).
    ShiftRemaining          *int64          `json:"shiftRemaining,omitempty" form:"shiftRemaining,omitempty"` //The amount of remaining shift time (in ms).
    TimeInCurrentStatus     *int64          `json:"timeInCurrentStatus,omitempty" form:"timeInCurrentStatus,omitempty"` //The amount of time (in ms) that the driver has been in the current `dutyStatus`.
    TimeUntilBreak          *int64          `json:"timeUntilBreak,omitempty" form:"timeUntilBreak,omitempty"` //The amount of time (in ms) remaining until the driver cannot drive without a rest break.
    VehicleName             *string         `json:"vehicleName,omitempty" form:"vehicleName,omitempty"` //Name of the vehicle.
}

/*
 * Structure for the custom type NumberValueTypeMetadata
 */
type NumberValueTypeMetadata struct {
    NumDecimalPlaces *int64          `json:"numDecimalPlaces,omitempty" form:"numDecimalPlaces,omitempty"` //Number of decimal places that values for this field type can have.
}

/*
 * Structure for the custom type StartCoordinates
 */
type StartCoordinates struct {
    Latitude        *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //TODO: Write general description for this field
    Longitude       *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DiagnosticTroubleCode
 */
type DiagnosticTroubleCode struct {
    FmiId           *int64          `json:"fmiId,omitempty" form:"fmiId,omitempty"` //TODO: Write general description for this field
    FmiText         *string         `json:"fmiText,omitempty" form:"fmiText,omitempty"` //TODO: Write general description for this field
    OccurrenceCount *int64          `json:"occurrenceCount,omitempty" form:"occurrenceCount,omitempty"` //TODO: Write general description for this field
    SpnDescription  *string         `json:"spnDescription,omitempty" form:"spnDescription,omitempty"` //TODO: Write general description for this field
    SpnId           *int64          `json:"spnId,omitempty" form:"spnId,omitempty"` //TODO: Write general description for this field
    TxId            *int64          `json:"txId,omitempty" form:"txId,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type J1939
 */
type J1939 struct {
    CheckEngineLight       CheckEngineLight `json:"checkEngineLight,omitempty" form:"checkEngineLight,omitempty"` //J1939 check engine lights.
    DiagnosticTroubleCodes []*DiagnosticTroubleCode `json:"diagnosticTroubleCodes,omitempty" form:"diagnosticTroubleCodes,omitempty"` //J1939 DTCs.
}

/*
 * Structure for the custom type HosLogsParam2
 */
type HosLogsParam2 struct {
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
}

/*
 * Structure for the custom type GroupParam
 */
type GroupParam struct {
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
}

/*
 * Structure for the custom type SetPoint
 */
type SetPoint struct {
    ChangedAtMs     *int64          `json:"changedAtMs,omitempty" form:"changedAtMs,omitempty"` //Timestamp in Unix milliseconds since epoch.
    TempInMilliC    *int64          `json:"tempInMilliC,omitempty" form:"tempInMilliC,omitempty"` //Set point temperature in millidegree Celsius.
}

/*
 * Structure for the custom type Series1
 */
type Series1 struct {
    Field           FieldEnum       `json:"field" form:"field"` //Field to query.
    WidgetId        int64           `json:"widgetId" form:"widgetId"` //Sensor ID to query.
}

/*
 * Structure for the custom type GroupDriversParam
 */
type GroupDriversParam struct {
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
}

/*
 * Structure for the custom type Delete
 */
type Delete struct {
    Assets          []*TaggedAssetBase `json:"assets,omitempty" form:"assets,omitempty"` //The assets to be removed from this tag.
    Drivers         []*TaggedDriverBase `json:"drivers,omitempty" form:"drivers,omitempty"` //The drivers to be removed from this tag.
    Machines        []*TaggedMachineBase `json:"machines,omitempty" form:"machines,omitempty"` //The machines to be removed from this tag.
    Sensors         []*TaggedSensorBase `json:"sensors,omitempty" form:"sensors,omitempty"` //The sensors to be removed from this tag.
    Vehicles        []*TaggedVehicleBase `json:"vehicles,omitempty" form:"vehicles,omitempty"` //The vehicles to be removed from this tag.
}

/*
 * Structure for the custom type SensorParam
 */
type SensorParam struct {
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    Sensors         []int64         `json:"sensors" form:"sensors"` //List of sensor IDs to query.
}

/*
 * Structure for the custom type GetVehicleStatsResponse
 */
type GetVehicleStatsResponse struct {
    Pagination      Pagination      `json:"pagination,omitempty" form:"pagination,omitempty"` //TODO: Write general description for this field
    VehicleStats    []*VehicleStat  `json:"vehicleStats" form:"vehicleStats"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Day
 */
type Day struct {
    ActiveHours     *float64        `json:"activeHours,omitempty" form:"activeHours,omitempty"` //Hours spent on duty or driving, rounded to two decimal places.
    ActiveMs        *int64          `json:"activeMs,omitempty" form:"activeMs,omitempty"` //Milliseconds spent on duty or driving.
    Certified       *bool           `json:"certified,omitempty" form:"certified,omitempty"` //Whether this HOS day chart was certified by the driver.
    CertifiedAtMs   *int64          `json:"certifiedAtMs,omitempty" form:"certifiedAtMs,omitempty"` //Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.
    DistanceMiles   *float64        `json:"distanceMiles,omitempty" form:"distanceMiles,omitempty"` //Distance driven in miles, rounded to two decimal places.
    EndMs           *int64          `json:"endMs,omitempty" form:"endMs,omitempty"` //End of the HOS day, specified in milliseconds UNIX time.
    StartMs         *int64          `json:"startMs,omitempty" form:"startMs,omitempty"` //End of the HOS day, specified in milliseconds UNIX time.
    TrailerIds      *interface{}    `json:"trailerIds,omitempty" form:"trailerIds,omitempty"` //List of trailer ID's associated with the driver for the day.
    VehicleIds      *interface{}    `json:"vehicleIds,omitempty" form:"vehicleIds,omitempty"` //List of vehicle ID's associated with the driver for the day.
}

/*
 * Structure for the custom type AuthorSignature
 */
type AuthorSignature struct {
    DriverId        *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Email of the  driver|mechanic who signed the DVIR.
    MechanicUserId  *int64          `json:"mechanicUserId,omitempty" form:"mechanicUserId,omitempty"` //ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //The name of the driver or mechanic who signed the DVIR.
    SignedAt        *int64          `json:"signedAt,omitempty" form:"signedAt,omitempty"` //The time in millis when the DVIR was signed
    Type            *string         `json:"type,omitempty" form:"type,omitempty"` //Type corresponds to whether the signature corresponds to driver|mechanic.
    Username        *string         `json:"username,omitempty" form:"username,omitempty"` //Username of the  driver|mechanic who signed the DVIR.
}

/*
 * Structure for the custom type Sensor5
 */
type Sensor5 struct {
    CargoEmpty      *bool           `json:"cargoEmpty,omitempty" form:"cargoEmpty,omitempty"` //Flag indicating whether the current cargo is empty or loaded.
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the sensor.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the sensor.
}

/*
 * Structure for the custom type Sensor2
 */
type Sensor2 struct {
    Humidity        *int64          `json:"humidity,omitempty" form:"humidity,omitempty"` //Currently reported relative humidity in percent, from 0-100.
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the sensor.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the sensor.
}

/*
 * Structure for the custom type AuthenticationLog
 */
type AuthenticationLog struct {
    ActionType      *string         `json:"actionType,omitempty" form:"actionType,omitempty"` //The log type - one of 'signin' or 'signout'
    Address         *string         `json:"address,omitempty" form:"address,omitempty"` //Address at which the log was recorded, if applicable.
    AddressName     *string         `json:"addressName,omitempty" form:"addressName,omitempty"` //Address name from the group address book at which the log was recorded, if applicable.
    City            *string         `json:"city,omitempty" form:"city,omitempty"` //City in which the log was recorded, if applicable.
    HappenedAtMs    *int64          `json:"happenedAtMs,omitempty" form:"happenedAtMs,omitempty"` //The time at which the event was recorded in UNIX milliseconds.
    State           *string         `json:"state,omitempty" form:"state,omitempty"` //State in which the log was recorded, if applicable.
}

/*
 * Structure for the custom type Sensor1
 */
type Sensor1 struct {
    DoorClosed      *bool           `json:"doorClosed,omitempty" form:"doorClosed,omitempty"` //Flag indicating whether the current door is closed or open.
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the sensor.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the sensor.
}

/*
 * Structure for the custom type GetAllTagsResponse
 */
type GetAllTagsResponse struct {
    Tags            []*Tag          `json:"tags,omitempty" form:"tags,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type GetAllDataInputsResponse
 */
type GetAllDataInputsResponse struct {
    DataInputs      []*DataInputHistoryResponse `json:"dataInputs,omitempty" form:"dataInputs,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ReturnAirTemp
 */
type ReturnAirTemp struct {
    ChangedAtMs     *int64          `json:"changedAtMs,omitempty" form:"changedAtMs,omitempty"` //Timestamp in Unix milliseconds since epoch.
    TempInMilliC    *int64          `json:"tempInMilliC,omitempty" form:"tempInMilliC,omitempty"` //Return air temperature in millidegree Celsius.
}

/*
 * Structure for the custom type GetAllAssetsResponse
 */
type GetAllAssetsResponse struct {
    Assets          []*Asset        `json:"assets,omitempty" form:"assets,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Result
 */
type Result struct {
    Series          *[]int64        `json:"series,omitempty" form:"series,omitempty"` //List of datapoints, one for each requested (sensor, field) pair.
    TimeMs          *int64          `json:"timeMs,omitempty" form:"timeMs,omitempty"` //Timestamp in UNIX milliseconds.
}

/*
 * Structure for the custom type GetAllAssetCurrentLocationsResponse
 */
type GetAllAssetCurrentLocationsResponse struct {
    Assets          []*AssetCurrentLocationsResponse `json:"assets,omitempty" form:"assets,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type PowerStatus
 */
type PowerStatus struct {
    ChangedAtMs     *int64          `json:"changedAtMs,omitempty" form:"changedAtMs,omitempty"` //Timestamp in Unix milliseconds since epoch.
    Status          *string         `json:"status,omitempty" form:"status,omitempty"` //Power status of the reefer.
}

/*
 * Structure for the custom type GetSensorsResponse
 */
type GetSensorsResponse struct {
    Sensors         []*Sensor       `json:"sensors,omitempty" form:"sensors,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Point
 */
type Point struct {
    TimeMs          *int64          `json:"timeMs,omitempty" form:"timeMs,omitempty"` //TODO: Write general description for this field
    Value           *float64        `json:"value,omitempty" form:"value,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type GetMachinesResponse
 */
type GetMachinesResponse struct {
    Machines        []*Machine      `json:"machines,omitempty" form:"machines,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Machine1
 */
type Machine1 struct {
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //Machine ID
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Machine name
    Vibrations      []*Vibration    `json:"vibrations,omitempty" form:"vibrations,omitempty"` //List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s
}

/*
 * Structure for the custom type GetFleetMaintenanceListResponse
 */
type GetFleetMaintenanceListResponse struct {
    Vehicles        []*VehicleMaintenance `json:"vehicles,omitempty" form:"vehicles,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AssetLocationResponse
 */
type AssetLocationResponse struct {
    Latitude          *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //The latitude of the location in degrees.
    Location          *string         `json:"location,omitempty" form:"location,omitempty"` //The best effort (street,city,state) for the latitude and longitude.
    Longitude         *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //The longitude of the location in degrees.
    SpeedMilesPerHour *float64        `json:"speedMilesPerHour,omitempty" form:"speedMilesPerHour,omitempty"` //The speed calculated from GPS that the asset was traveling at in miles per hour.
    Time              *float64        `json:"time,omitempty" form:"time,omitempty"` //Time in Unix milliseconds since epoch when the asset was at the location.
}

/*
 * Structure for the custom type Alarm1
 */
type Alarm1 struct {
    AlarmCode       *int64          `json:"alarmCode,omitempty" form:"alarmCode,omitempty"` //ID of the alarm
    Description     *string         `json:"description,omitempty" form:"description,omitempty"` //Description of the alarm
    OperatorAction  *string         `json:"operatorAction,omitempty" form:"operatorAction,omitempty"` //Recommended operator action
    Severity        *int64          `json:"severity,omitempty" form:"severity,omitempty"` //Severity of the alarm: 1: OK to run, 2: Check as specified, 3: Take immediate action
}

/*
 * Structure for the custom type Location
 */
type Location struct {
    Address         *string         `json:"address,omitempty" form:"address,omitempty"` //Address of location where the harsh event occurred
    Latitude        *string         `json:"latitude,omitempty" form:"latitude,omitempty"` //Latitude of location where the harsh event occurred
    Longitude       *string         `json:"longitude,omitempty" form:"longitude,omitempty"` //Longitude of location where the harsh event occurred
}

/*
 * Structure for the custom type ListFleetResponse
 */
type ListFleetResponse struct {
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //Group ID to query.
    Pagination      Pagination      `json:"pagination,omitempty" form:"pagination,omitempty"` //TODO: Write general description for this field
    Vehicles        []*Vehicle      `json:"vehicles,omitempty" form:"vehicles,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AddressParam
 */
type AddressParam struct {
    Address         string          `json:"address" form:"address"` //The address of the entry to add, as it would be recognized if provided to maps.google.com.
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    Name            string          `json:"name" form:"name"` //Name of the location to add to the address book.
    Radius          int64           `json:"radius" form:"radius"` //Radius in meters of the address (used for matching vehicle trip stops to this location).
}

/*
 * Structure for the custom type Addresses1
 */
type Addresses1 struct {
    ContactIds       *[]int64        `json:"contactIds,omitempty" form:"contactIds,omitempty"` //A list of IDs for contact book entries.
    FormattedAddress string          `json:"formattedAddress" form:"formattedAddress"` //The full address associated with this address/geofence, as it might be recognized by maps.google.com
    Geofence         AddressGeofence `json:"geofence" form:"geofence"` //The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.
    Name             string          `json:"name" form:"name"` //The name of this address/geofence
    Notes            *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes associated with an address.
    TagIds           *[]int64        `json:"tagIds,omitempty" form:"tagIds,omitempty"` //A list of tag IDs.
}

/*
 * Structure for the custom type CreateDvirParam
 */
type CreateDvirParam struct {
    InspectionType           string          `json:"inspectionType" form:"inspectionType"` //Only type 'mechanic' is currently accepted.
    MechanicNotes            *string         `json:"mechanicNotes,omitempty" form:"mechanicNotes,omitempty"` //Any notes from the mechanic.
    OdometerMiles            *int64          `json:"odometerMiles,omitempty" form:"odometerMiles,omitempty"` //The current odometer of the vehicle.
    PreviousDefectsCorrected *bool           `json:"previousDefectsCorrected,omitempty" form:"previousDefectsCorrected,omitempty"` //Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
    PreviousDefectsIgnored   *bool           `json:"previousDefectsIgnored,omitempty" form:"previousDefectsIgnored,omitempty"` //Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
    Safe                     SafeEnum        `json:"safe" form:"safe"` //Whether or not this vehicle or trailer is safe to drive.
    TrailerId                *int64          `json:"trailerId,omitempty" form:"trailerId,omitempty"` //Id of trailer being inspected. Either vehicleId or trailerId must be provided.
    UserEmail                string          `json:"userEmail" form:"userEmail"` //The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
    VehicleId                *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
}

/*
 * Structure for the custom type HistoryParam
 */
type HistoryParam struct {
    EndMs           int64           `json:"endMs" form:"endMs"` //End of the time range, specified in milliseconds UNIX time.
    GroupId         int64           `json:"groupId" form:"groupId"` //Group ID to query.
    StartMs         int64           `json:"startMs" form:"startMs"` //Beginning of the time range, specified in milliseconds UNIX time.
}

/*
 * Structure for the custom type VehicleSafetyScoreResponse
 */
type VehicleSafetyScoreResponse struct {
    CrashCount                *int64          `json:"crashCount,omitempty" form:"crashCount,omitempty"` //Crash event count
    HarshAccelCount           *int64          `json:"harshAccelCount,omitempty" form:"harshAccelCount,omitempty"` //Harsh acceleration event count
    HarshBrakingCount         *int64          `json:"harshBrakingCount,omitempty" form:"harshBrakingCount,omitempty"` //Harsh braking event count
    HarshEvents               []*SafetyReportHarshEvent `json:"harshEvents,omitempty" form:"harshEvents,omitempty"` //TODO: Write general description for this field
    HarshTurningCount         *int64          `json:"harshTurningCount,omitempty" form:"harshTurningCount,omitempty"` //Harsh turning event count
    SafetyScore               *int64          `json:"safetyScore,omitempty" form:"safetyScore,omitempty"` //Safety Score
    SafetyScoreRank           *string         `json:"safetyScoreRank,omitempty" form:"safetyScoreRank,omitempty"` //Safety Score Rank
    TimeOverSpeedLimitMs      *int64          `json:"timeOverSpeedLimitMs,omitempty" form:"timeOverSpeedLimitMs,omitempty"` //Amount of time driven over the speed limit in milliseconds
    TotalDistanceDrivenMeters *int64          `json:"totalDistanceDrivenMeters,omitempty" form:"totalDistanceDrivenMeters,omitempty"` //Total distance driven in meters
    TotalHarshEventCount      *int64          `json:"totalHarshEventCount,omitempty" form:"totalHarshEventCount,omitempty"` //Total harsh event count
    TotalTimeDrivenMs         *int64          `json:"totalTimeDrivenMs,omitempty" form:"totalTimeDrivenMs,omitempty"` //Amount of time driven in milliseconds
    VehicleId                 *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //Vehicle ID
}

/*
 * Structure for the custom type GetFleetLocationsResponse
 */
type GetFleetLocationsResponse struct {
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //Group ID to query.
    Vehicles        []*VehicleLocation `json:"vehicles,omitempty" form:"vehicles,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Address1
 */
type Address1 struct {
    ContactIds       *[]int64        `json:"contactIds,omitempty" form:"contactIds,omitempty"` //A list of IDs for contact book entries.
    FormattedAddress *string         `json:"formattedAddress,omitempty" form:"formattedAddress,omitempty"` //The full address associated with this address/geofence, as it might be recognized by maps.google.com
    Geofence         AddressGeofence `json:"geofence,omitempty" form:"geofence,omitempty"` //The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.
    Name             *string         `json:"name,omitempty" form:"name,omitempty"` //The name of this address/geofence
    Notes            *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes associated with an address.
    TagIds           *[]int64        `json:"tagIds,omitempty" form:"tagIds,omitempty"` //A list of tag IDs.
}

/*
 * Structure for the custom type Add
 */
type Add struct {
    Assets          []*TaggedAssetBase `json:"assets,omitempty" form:"assets,omitempty"` //The assets to be added to this tag.
    Drivers         []*TaggedDriverBase `json:"drivers,omitempty" form:"drivers,omitempty"` //The drivers to be added to this tag.
    Machines        []*TaggedMachineBase `json:"machines,omitempty" form:"machines,omitempty"` //The machines to be added to this tag.
    Sensors         []*TaggedSensorBase `json:"sensors,omitempty" form:"sensors,omitempty"` //The sensors to be added to this tag.
    Vehicles        []*TaggedVehicleBase `json:"vehicles,omitempty" form:"vehicles,omitempty"` //The vehicles to be added to this tag.
}

/*
 * Structure for the custom type JobUpdateObject
 */
type JobUpdateObject struct {
    ChangedAtMs     *int64          `json:"changed_at_ms,omitempty" form:"changed_at_ms,omitempty"` //Timestamp that this event was updated, represented as Unix milliseconds since epoch.
    JobId           *int64          `json:"job_id,omitempty" form:"job_id,omitempty"` //ID of the Samsara job.
    JobState        JobStatusEnum   `json:"job_state,omitempty" form:"job_state,omitempty"` //The current state of the dispatch job.
    PrevJobState    PrevJobStatusEnum `json:"prev_job_state,omitempty" form:"prev_job_state,omitempty"` //The previous state of the dispatch job.
    Route           DispatchRoute   `json:"route,omitempty" form:"route,omitempty"` //TODO: Write general description for this field
    RouteId         *int64          `json:"route_id,omitempty" form:"route_id,omitempty"` //ID of the Samsara dispatch route.
}

/*
 * Structure for the custom type VehicleHarshEventResponse
 */
type VehicleHarshEventResponse struct {
    DownloadForwardVideoUrl       *string         `json:"downloadForwardVideoUrl,omitempty" form:"downloadForwardVideoUrl,omitempty"` //URL for downloading the forward facing video
    DownloadInwardVideoUrl        *string         `json:"downloadInwardVideoUrl,omitempty" form:"downloadInwardVideoUrl,omitempty"` //URL for downloading the inward facing video
    DownloadTrackedInwardVideoUrl *string         `json:"downloadTrackedInwardVideoUrl,omitempty" form:"downloadTrackedInwardVideoUrl,omitempty"` //URL for downloading the tracked inward facing video
    HarshEventType                string          `json:"harshEventType" form:"harshEventType"` //Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]
    IncidentReportUrl             string          `json:"incidentReportUrl" form:"incidentReportUrl"` //URL of the associated incident report page
    IsDistracted                  *bool           `json:"isDistracted,omitempty" form:"isDistracted,omitempty"` //Whether the driver was deemed distracted during this harsh event
    Location                      Location        `json:"location,omitempty" form:"location,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Vehicle
 */
type Vehicle struct {
    EngineHours      *int64          `json:"engineHours,omitempty" form:"engineHours,omitempty"` //Total engine hours for the vehicle.
    FuelLevelPercent *float64        `json:"fuelLevelPercent,omitempty" form:"fuelLevelPercent,omitempty"` //The fuel level of the vehicle as a percentage. (0.0 to 1.0)
    Id               int64           `json:"id" form:"id"` //ID of the vehicle.
    Name             *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the vehicle.
    Note             *string         `json:"note,omitempty" form:"note,omitempty"` //TODO: Write general description for this field
    OdometerMeters   *int64          `json:"odometerMeters,omitempty" form:"odometerMeters,omitempty"` //The number of meters reported by the odometer.
    Vin              *string         `json:"vin,omitempty" form:"vin,omitempty"` //Vehicle Identification Number.
}

/*
 * Structure for the custom type FuelPercentage
 */
type FuelPercentage struct {
    ChangedAtMs     *int64          `json:"changedAtMs,omitempty" form:"changedAtMs,omitempty"` //Timestamp in Unix milliseconds since epoch.
    FuelPercentage  *int64          `json:"fuelPercentage,omitempty" form:"fuelPercentage,omitempty"` //Fuel percentage of the reefer.
}

/*
 * Structure for the custom type UserBase
 */
type UserBase struct {
    AuthType           AuthTypeEnum    `json:"authType" form:"authType"` //The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.
    Email              string          `json:"email" form:"email"` //The email address of this user.
    Name               *string         `json:"name,omitempty" form:"name,omitempty"` //The first and last name of the user.
    OrganizationRoleId *string         `json:"organizationRoleId,omitempty" form:"organizationRoleId,omitempty"` //The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
}

/*
 * Structure for the custom type User
 */
type User struct {
    AuthType           AuthTypeEnum    `json:"authType" form:"authType"` //The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.
    Email              string          `json:"email" form:"email"` //The email address of this user.
    Name               *string         `json:"name,omitempty" form:"name,omitempty"` //The first and last name of the user.
    OrganizationRoleId *string         `json:"organizationRoleId,omitempty" form:"organizationRoleId,omitempty"` //The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
    Id                 *int64          `json:"id,omitempty" form:"id,omitempty"` //The ID of the User record.
    OrganizationRole   *string         `json:"organizationRole,omitempty" form:"organizationRole,omitempty"` //The name of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
    TagRoles           []*UserTagRole  `json:"tagRoles,omitempty" form:"tagRoles,omitempty"` //The specific tags this user has access to. This will be blank for users that have full access to the organization.
}

/*
 * Structure for the custom type TagUpdate
 */
type TagUpdate struct {
    Assets          []*TaggedAssetBase `json:"assets,omitempty" form:"assets,omitempty"` //The assets that belong to this tag.
    Drivers         []*TaggedDriverBase `json:"drivers,omitempty" form:"drivers,omitempty"` //The drivers that belong to this tag.
    Machines        []*TaggedMachineBase `json:"machines,omitempty" form:"machines,omitempty"` //The machines that belong to this tag.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Updated name of this tag.
    ParentTagId     *int64          `json:"parentTagId,omitempty" form:"parentTagId,omitempty"` //If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
    Sensors         []*TaggedSensorBase `json:"sensors,omitempty" form:"sensors,omitempty"` //The sensors that belong to this tag.
    Vehicles        []*TaggedVehicleBase `json:"vehicles,omitempty" form:"vehicles,omitempty"` //The vehicles that belong to this tag.
}

/*
 * Structure for the custom type TagCreate
 */
type TagCreate struct {
    Assets          []*TaggedAssetBase `json:"assets,omitempty" form:"assets,omitempty"` //The assets that belong to this tag.
    Drivers         []*TaggedDriverBase `json:"drivers,omitempty" form:"drivers,omitempty"` //The drivers that belong to this tag.
    Machines        []*TaggedMachineBase `json:"machines,omitempty" form:"machines,omitempty"` //The machines that belong to this tag.
    Name            string          `json:"name" form:"name"` //Name of this tag.
    ParentTagId     *int64          `json:"parentTagId,omitempty" form:"parentTagId,omitempty"` //If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
    Sensors         []*TaggedSensorBase `json:"sensors,omitempty" form:"sensors,omitempty"` //The sensors that belong to this tag.
    Vehicles        []*TaggedVehicleBase `json:"vehicles,omitempty" form:"vehicles,omitempty"` //The vehicles that belong to this tag.
}

/*
 * Structure for the custom type FleetVehiclesLocation
 */
type FleetVehiclesLocation struct {
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the vehicle.
    Locations       []*FleetVehicleLocation `json:"locations,omitempty" form:"locations,omitempty"` //TODO: Write general description for this field
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the vehicle.
}

/*
 * Structure for the custom type CheckEngineLight1
 */
type CheckEngineLight1 struct {
    IsOn            *bool           `json:"isOn,omitempty" form:"isOn,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type EngineHour
 */
type EngineHour struct {
    ChangedAtMs     *int64          `json:"changedAtMs,omitempty" form:"changedAtMs,omitempty"` //Timestamp in Unix milliseconds since epoch.
    EngineHours     *int64          `json:"engineHours,omitempty" form:"engineHours,omitempty"` //Engine hours of the reefer.
}

/*
 * Structure for the custom type Cable
 */
type Cable struct {
    AssetType       *string         `json:"assetType,omitempty" form:"assetType,omitempty"` //Asset type
}

/*
 * Structure for the custom type EndCoordinates
 */
type EndCoordinates struct {
    Latitude        *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //TODO: Write general description for this field
    Longitude       *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type VehicleLocation
 */
type VehicleLocation struct {
    Heading         *float64        `json:"heading,omitempty" form:"heading,omitempty"` //Heading in degrees.
    Id              int64           `json:"id" form:"id"` //ID of the vehicle.
    Latitude        *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //Latitude in decimal degrees.
    Location        *string         `json:"location,omitempty" form:"location,omitempty"` //Text representation of nearest identifiable location to (latitude, longitude) coordinates.
    Longitude       *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //Longitude in decimal degrees.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the vehicle.
    OdometerMeters  *int64          `json:"odometerMeters,omitempty" form:"odometerMeters,omitempty"` //The number of meters reported by the odometer.
    OnTrip          *bool           `json:"onTrip,omitempty" form:"onTrip,omitempty"` //Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
    Speed           *float64        `json:"speed,omitempty" form:"speed,omitempty"` //Speed in miles per hour.
    Time            *int64          `json:"time,omitempty" form:"time,omitempty"` //The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
    Vin             *string         `json:"vin,omitempty" form:"vin,omitempty"` //Vehicle Identification Number (VIN) of the vehicle.
}

/*
 * Structure for the custom type DriversSummaryParam
 */
type DriversSummaryParam struct {
    EndMs           int64           `json:"endMs" form:"endMs"` //End time (ms) of queried time period.
    OrgId           int64           `json:"orgId" form:"orgId"` //Org ID to query.
    StartMs         int64           `json:"startMs" form:"startMs"` //Start time (ms) of queried time period.
}

/*
 * Structure for the custom type Tag
 */
type Tag struct {
    Addresses       []*TaggedAddress `json:"addresses,omitempty" form:"addresses,omitempty"` //The addresses that belong to this tag.
    Assets          []*TaggedAsset  `json:"assets,omitempty" form:"assets,omitempty"` //The assets that belong to this tag.
    Drivers         []*TaggedDriver `json:"drivers,omitempty" form:"drivers,omitempty"` //The drivers that belong to this tag.
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //The GroupID that this tag belongs to.
    Id              int64           `json:"id" form:"id"` //The ID of this tag.
    Machines        []*TaggedMachine `json:"machines,omitempty" form:"machines,omitempty"` //The machines that belong to this tag.
    Name            string          `json:"name" form:"name"` //Name of this tag.
    ParentTagId     *int64          `json:"parentTagId,omitempty" form:"parentTagId,omitempty"` //If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
    Sensors         []*TaggedSensor `json:"sensors,omitempty" form:"sensors,omitempty"` //The sensors that belong to this tag.
    Vehicles        []*TaggedVehicle `json:"vehicles,omitempty" form:"vehicles,omitempty"` //The vehicles that belong to this tag.
}

/*
 * Structure for the custom type Pagination
 */
type Pagination struct {
    EndCursor       string          `json:"endCursor" form:"endCursor"` //Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'starting_after' query parameter.
    HasNextPage     bool            `json:"hasNextPage" form:"hasNextPage"` //True if there are more pages of results after this response.
    HasPrevPage     bool            `json:"hasPrevPage" form:"hasPrevPage"` //True if there are more pages of results before this response.
    StartCursor     string          `json:"startCursor" form:"startCursor"` //Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request's 'ending_before' query parameter.
}

/*
 * Structure for the custom type FleetVehicleResponse
 */
type FleetVehicleResponse struct {
    ExternalIds       *map[string]string `json:"externalIds,omitempty" form:"externalIds,omitempty"` //TODO: Write general description for this field
    HarshAccelSetting *string         `json:"harshAccelSetting,omitempty" form:"harshAccelSetting,omitempty"` //Harsh event detection setting.
    Id                int64           `json:"id" form:"id"` //ID of the vehicle.
    Name              string          `json:"name" form:"name"` //Name of the vehicle.
    VehicleInfo       VehicleInfo     `json:"vehicleInfo,omitempty" form:"vehicleInfo,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DiagnosticTroubleCode1
 */
type DiagnosticTroubleCode1 struct {
    DtcDescription  *string         `json:"dtcDescription,omitempty" form:"dtcDescription,omitempty"` //TODO: Write general description for this field
    DtcId           *int64          `json:"dtcId,omitempty" form:"dtcId,omitempty"` //TODO: Write general description for this field
    DtcShortCode    *string         `json:"dtcShortCode,omitempty" form:"dtcShortCode,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DvirBase
 */
type DvirBase struct {
    AuthorSignature           AuthorSignature `json:"authorSignature,omitempty" form:"authorSignature,omitempty"` //The authors signature for the DVIR.
    DefectsCorrected          *bool           `json:"defectsCorrected,omitempty" form:"defectsCorrected,omitempty"` //Signifies if the defects on the vehicle corrected after the DVIR is done.
    DefectsNeedNotBeCorrected *bool           `json:"defectsNeedNotBeCorrected,omitempty" form:"defectsNeedNotBeCorrected,omitempty"` //Signifies if the defects on this vehicle can be ignored.
    Id                        *int64          `json:"id,omitempty" form:"id,omitempty"` //The id of this DVIR record.
    InspectionType            *string         `json:"inspectionType,omitempty" form:"inspectionType,omitempty"` //Inspection type of the DVIR.
    MechanicNotes             *string         `json:"mechanicNotes,omitempty" form:"mechanicNotes,omitempty"` //The mechanics notes on the DVIR.
    MechanicOrAgentSignature  MechanicOrAgentSignature `json:"mechanicOrAgentSignature,omitempty" form:"mechanicOrAgentSignature,omitempty"` //The mechanic's or agent's signature for the DVIR.
    NextDriverSignature       NextDriverSignature `json:"nextDriverSignature,omitempty" form:"nextDriverSignature,omitempty"` //The next driver signature for the DVIR.
    OdometerMiles             *int64          `json:"odometerMiles,omitempty" form:"odometerMiles,omitempty"` //The odometer reading in miles for the vehicle when the DVIR was done.
    TimeMs                    *int64          `json:"timeMs,omitempty" form:"timeMs,omitempty"` //Timestamp of this DVIR in UNIX milliseconds.
    TrailerDefects            []*TrailerDefect `json:"trailerDefects,omitempty" form:"trailerDefects,omitempty"` //Defects registered for the trailer which was part of the DVIR.
    TrailerId                 *int64          `json:"trailerId,omitempty" form:"trailerId,omitempty"` //The id of the trailer which was part of the DVIR.
    TrailerName               *string         `json:"trailerName,omitempty" form:"trailerName,omitempty"` //The name of the trailer which was part of the DVIR.
    Vehicle                   Vehicle2        `json:"vehicle,omitempty" form:"vehicle,omitempty"` //The vehicle on which DVIR was done.
    VehicleCondition          *string         `json:"vehicleCondition,omitempty" form:"vehicleCondition,omitempty"` //The condition of vechile on which DVIR was done.
    VehicleDefects            []*VehicleDefect `json:"vehicleDefects,omitempty" form:"vehicleDefects,omitempty"` //Defects registered for the vehicle which was part of the DVIR.
}

/*
 * Structure for the custom type Data
 */
type Data struct {
    ExternalIds         *map[string]string `json:"externalIds,omitempty" form:"externalIds,omitempty"` //TODO: Write general description for this field
    HarshAccelSetting   HarshAccelSettingEnum `json:"harsh_accel_setting,omitempty" form:"harsh_accel_setting,omitempty"` //Harsh Event Detection Setting
    Name                *string         `json:"name,omitempty" form:"name,omitempty"` //Name
}

/*
 * Structure for the custom type Circle
 */
type Circle struct {
    Latitude        *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //The latitude of the center of the circular geofence
    Longitude       *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //The longitude of the center of the circular geofence
    RadiusMeters    *float64        `json:"radiusMeters,omitempty" form:"radiusMeters,omitempty"` //The radius of the circular geofence
}

/*
 * Structure for the custom type CheckEngineLight
 */
type CheckEngineLight struct {
    EmissionsIsOn   *bool           `json:"emissionsIsOn,omitempty" form:"emissionsIsOn,omitempty"` //TODO: Write general description for this field
    ProtectIsOn     *bool           `json:"protectIsOn,omitempty" form:"protectIsOn,omitempty"` //TODO: Write general description for this field
    StopIsOn        *bool           `json:"stopIsOn,omitempty" form:"stopIsOn,omitempty"` //TODO: Write general description for this field
    WarningIsOn     *bool           `json:"warningIsOn,omitempty" form:"warningIsOn,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DriverSafetyScoreResponse
 */
type DriverSafetyScoreResponse struct {
    CrashCount                *int64          `json:"crashCount,omitempty" form:"crashCount,omitempty"` //Crash event count
    DriverId                  *int64          `json:"driverId,omitempty" form:"driverId,omitempty"` //Driver ID
    HarshAccelCount           *int64          `json:"harshAccelCount,omitempty" form:"harshAccelCount,omitempty"` //Harsh acceleration event count
    HarshBrakingCount         *int64          `json:"harshBrakingCount,omitempty" form:"harshBrakingCount,omitempty"` //Harsh braking event count
    HarshEvents               []*SafetyReportHarshEvent `json:"harshEvents,omitempty" form:"harshEvents,omitempty"` //TODO: Write general description for this field
    HarshTurningCount         *int64          `json:"harshTurningCount,omitempty" form:"harshTurningCount,omitempty"` //Harsh turning event count
    SafetyScore               *int64          `json:"safetyScore,omitempty" form:"safetyScore,omitempty"` //Safety Score
    SafetyScoreRank           *string         `json:"safetyScoreRank,omitempty" form:"safetyScoreRank,omitempty"` //Safety Score Rank
    TimeOverSpeedLimitMs      *int64          `json:"timeOverSpeedLimitMs,omitempty" form:"timeOverSpeedLimitMs,omitempty"` //Amount of time driven over the speed limit in milliseconds
    TotalDistanceDrivenMeters *int64          `json:"totalDistanceDrivenMeters,omitempty" form:"totalDistanceDrivenMeters,omitempty"` //Total distance driven in meters
    TotalHarshEventCount      *int64          `json:"totalHarshEventCount,omitempty" form:"totalHarshEventCount,omitempty"` //Total harsh event count
    TotalTimeDrivenMs         *int64          `json:"totalTimeDrivenMs,omitempty" form:"totalTimeDrivenMs,omitempty"` //Amount of time driven in milliseconds
}

/*
 * Structure for the custom type Addresses
 */
type Addresses struct {
    Addresses       []*Addresses1   `json:"addresses" form:"addresses"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Alarm
 */
type Alarm struct {
    Alarms          []*Alarm1       `json:"alarms,omitempty" form:"alarms,omitempty"` //TODO: Write general description for this field
    ChangedAtMs     *int64          `json:"changedAtMs,omitempty" form:"changedAtMs,omitempty"` //Timestamp when the alarms were reported, in Unix milliseconds since epoch
}

/*
 * Structure for the custom type AllRouteJobUpdates
 */
type AllRouteJobUpdates struct {
    JobUpdates      []*JobUpdateObject `json:"job_updates,omitempty" form:"job_updates,omitempty"` //TODO: Write general description for this field
    SequenceId      *string         `json:"sequence_id,omitempty" form:"sequence_id,omitempty"` //Sequence ID of the last update returned in the response
}

/*
 * Structure for the custom type TripResponse
 */
type TripResponse struct {
    Trips           []*Trip         `json:"trips,omitempty" form:"trips,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TaggedVehicleBase
 */
type TaggedVehicleBase struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Vehicle being tagged.
}

/*
 * Structure for the custom type TaggedSensorBase
 */
type TaggedSensorBase struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Sensor being tagged.
}

/*
 * Structure for the custom type TaggedMachineBase
 */
type TaggedMachineBase struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Machine being tagged.
}

/*
 * Structure for the custom type TaggedDriverBase
 */
type TaggedDriverBase struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Driver being tagged.
}

/*
 * Structure for the custom type TaggedAssetBase
 */
type TaggedAssetBase struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Asset being tagged.
}

/*
 * Structure for the custom type TaggedAddressBase
 */
type TaggedAddressBase struct {
    Id              int64           `json:"id" form:"id"` //The ID of the address being tagged.
}

/*
 * Structure for the custom type SensorHistoryResponse
 */
type SensorHistoryResponse struct {
    Results         []*Result       `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MachineHistoryResponse
 */
type MachineHistoryResponse struct {
    Machines        []*Machine1     `json:"machines,omitempty" form:"machines,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type HosLogsSummaryResponse
 */
type HosLogsSummaryResponse struct {
    Drivers         []*Driver1      `json:"drivers,omitempty" form:"drivers,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type FleetVehicleLocation
 */
type FleetVehicleLocation struct {
    Latitude          *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //The latitude of the location in degrees.
    Location          *string         `json:"location,omitempty" form:"location,omitempty"` //The best effort (street,city,state) for the latitude and longitude.
    Longitude         *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //The longitude of the location in degrees.
    SpeedMilesPerHour *float64        `json:"speedMilesPerHour,omitempty" form:"speedMilesPerHour,omitempty"` //The speed calculated from GPS that the asset was traveling at in miles per hour.
    TimeMs            *int64          `json:"timeMs,omitempty" form:"timeMs,omitempty"` //Time in Unix milliseconds since epoch when the asset was at the location.
}

/*
 * Structure for the custom type VehicleMaintenance
 */
type VehicleMaintenance struct {
    Id              int64           `json:"id" form:"id"` //ID of the vehicle.
    J1939           J1939           `json:"j1939,omitempty" form:"j1939,omitempty"` //J1939 based data. Null if no data is available.
    Passenger       Passenger       `json:"passenger,omitempty" form:"passenger,omitempty"` //Passenger vehicle data. Null if no data is available.
}

/*
 * Structure for the custom type DocumentType
 */
type DocumentType struct {
    FieldTypes      []*DocumentFieldType `json:"fieldTypes,omitempty" form:"fieldTypes,omitempty"` //The field types determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.
    Name            string          `json:"name" form:"name"` //Name of the document type.
    OrgId           int64           `json:"orgId" form:"orgId"` //ID for the organization this document belongs to.
    Uuid            string          `json:"uuid" form:"uuid"` //Universally unique identifier for the document type. Can be passed in as a documentTypeUuid when creating a document for this document type.
}

/*
 * Structure for the custom type DocumentFieldCreate
 */
type DocumentFieldCreate struct {
    NumberValue     *float64        `json:"numberValue,omitempty" form:"numberValue,omitempty"` //Value of this field if this document field has valueType: ValueType_Number.
    PhotoValue      []*PhotoValue   `json:"photoValue,omitempty" form:"photoValue,omitempty"` //Value of this field if this document field has valueType: ValueType_Photo. Array of photo objects where each object contains a URL for a photo.
    StringValue     *string         `json:"stringValue,omitempty" form:"stringValue,omitempty"` //Value of this field if this document field has valueType: ValueType_String.
    ValueType       string          `json:"valueType" form:"valueType"` //Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
}

/*
 * Structure for the custom type DocumentField
 */
type DocumentField struct {
    Label           string          `json:"label" form:"label"` //Descriptive name of this field.
    Value           *interface{}    `json:"value,omitempty" form:"value,omitempty"` //DEPRECATED: Please use stringValue, numberValue, or photoValue instead. Value of this field. Depending on what kind of field it is, this may be one of the following: an array of image urls, a float, an integer, or a string.
    NumberValue     *float64        `json:"numberValue,omitempty" form:"numberValue,omitempty"` //Value of this field if this document field has valueType: ValueType_Number.
    PhotoValue      []*PhotoValue   `json:"photoValue,omitempty" form:"photoValue,omitempty"` //Value of this field if this document field has valueType: ValueType_Photo. Array of photo objects where each object contains a URL for a photo.
    StringValue     *string         `json:"stringValue,omitempty" form:"stringValue,omitempty"` //Value of this field if this document field has valueType: ValueType_String.
    ValueType       string          `json:"valueType" form:"valueType"` //Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
}

/*
 * Structure for the custom type HosLogsResponse
 */
type HosLogsResponse struct {
    Logs            []*Log          `json:"logs,omitempty" form:"logs,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type HosAuthenticationLogsResponse
 */
type HosAuthenticationLogsResponse struct {
    AuthenticationLogs []*AuthenticationLog `json:"authenticationLogs,omitempty" form:"authenticationLogs,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserTagRole
 */
type UserTagRole struct {
    Role            *string         `json:"role,omitempty" form:"role,omitempty"` //The name of the role the user has been granted on this tag.
    RoleId          string          `json:"roleId" form:"roleId"` //The id of the role the user has been granted on this tag.
    Tag             Tag1            `json:"tag" form:"tag"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserRole
 */
type UserRole struct {
    Id              *string         `json:"id,omitempty" form:"id,omitempty"` //TODO: Write general description for this field
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DriverBase
 */
type DriverBase struct {
    EldAdverseWeatherExemptionEnabled *bool           `json:"eldAdverseWeatherExemptionEnabled,omitempty" form:"eldAdverseWeatherExemptionEnabled,omitempty"` //Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
    EldBigDayExemptionEnabled         *bool           `json:"eldBigDayExemptionEnabled,omitempty" form:"eldBigDayExemptionEnabled,omitempty"` //Flag indicating this driver may use Big Day excemptions in ELD logs.
    EldDayStartHour                   *int64          `json:"eldDayStartHour,omitempty" form:"eldDayStartHour,omitempty"` //0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
    EldExempt                         *bool           `json:"eldExempt,omitempty" form:"eldExempt,omitempty"` //Flag indicating this driver is exempt from the Electronic Logging Mandate.
    EldExemptReason                   *string         `json:"eldExemptReason,omitempty" form:"eldExemptReason,omitempty"` //Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
    EldPcEnabled                      *bool           `json:"eldPcEnabled,omitempty" form:"eldPcEnabled,omitempty"` //Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
    EldYmEnabled                      *bool           `json:"eldYmEnabled,omitempty" form:"eldYmEnabled,omitempty"` //Flag indicating this driver may select the Yard Move duty status in ELD logs.
    ExternalIds                       *map[string]string `json:"externalIds,omitempty" form:"externalIds,omitempty"` //Dictionary of external IDs (string key-value pairs)
    GroupId                           *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //ID of the group if the organization has multiple groups (uncommon).
    LicenseNumber                     *string         `json:"licenseNumber,omitempty" form:"licenseNumber,omitempty"` //Driver's state issued license number.
    LicenseState                      *string         `json:"licenseState,omitempty" form:"licenseState,omitempty"` //Abbreviation of state that issued driver's license.
    Name                              string          `json:"name" form:"name"` //Driver's name.
    Notes                             *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes about the driver.
    Phone                             *string         `json:"phone,omitempty" form:"phone,omitempty"` //Driver's phone number. Please include only digits, ex. 4157771234
    Username                          *string         `json:"username,omitempty" form:"username,omitempty"` //Driver's login username into the driver app.
    VehicleId                         *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
}

/*
 * Structure for the custom type TemperatureResponse
 */
type TemperatureResponse struct {
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //TODO: Write general description for this field
    Sensors         []*Sensor4      `json:"sensors,omitempty" form:"sensors,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DocumentCreate
 */
type DocumentCreate struct {
    DocumentTypeUuid string          `json:"documentTypeUuid" form:"documentTypeUuid"` //Universally unique identifier for the document type this document is being created for.
    Fields           []*DocumentField `json:"fields" form:"fields"` //List of fields should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
    DispatchJobId    *int64          `json:"dispatchJobId,omitempty" form:"dispatchJobId,omitempty"` //ID of the Samsara dispatch job for which the document is submitted
    Notes            *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes submitted with this document.
}

/*
 * Structure for the custom type Document
 */
type Document struct {
    DocumentType      string          `json:"documentType" form:"documentType"` //Descriptive name of this type of document.
    DriverCreatedAtMs int64           `json:"driverCreatedAtMs" form:"driverCreatedAtMs"` //The time in Unix epoch milliseconds that the document is created.
    DriverId          int64           `json:"driverId" form:"driverId"` //ID of the driver for whom the document is submitted
    Fields            []*DocumentField `json:"fields" form:"fields"` //The fields associated with this document.
    VehicleId         *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //VehicleID of the driver at document creation.
    DispatchJobId     *int64          `json:"dispatchJobId,omitempty" form:"dispatchJobId,omitempty"` //ID of the Samsara dispatch job for which the document is submitted
    Notes             *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes submitted with this document.
}

/*
 * Structure for the custom type Contact
 */
type Contact struct {
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Email address of the contact
    FirstName       *string         `json:"firstName,omitempty" form:"firstName,omitempty"` //First name of the contact
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the contact
    LastName        *string         `json:"lastName,omitempty" form:"lastName,omitempty"` //Last name of the contact
    Phone           *string         `json:"phone,omitempty" form:"phone,omitempty"` //Phone number of the contact
}

/*
 * Structure for the custom type DvirListResponse
 */
type DvirListResponse struct {
    Dvirs           []*DvirBase     `json:"dvirs,omitempty" form:"dvirs,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DriversSummaryResponse
 */
type DriversSummaryResponse struct {
    Summaries       []*Summary      `json:"Summaries,omitempty" form:"Summaries,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DriversResponse
 */
type DriversResponse struct {
    Drivers         []*Driver       `json:"drivers,omitempty" form:"drivers,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TaggedVehicle
 */
type TaggedVehicle struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Vehicle being tagged.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the Vehicle being tagged.
}

/*
 * Structure for the custom type DriverDailyLogResponse
 */
type DriverDailyLogResponse struct {
    Days            []*Day          `json:"days,omitempty" form:"days,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TaggedSensor
 */
type TaggedSensor struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Sensor being tagged.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the Sensor being tagged.
}

/*
 * Structure for the custom type DispatchRouteHistory
 */
type DispatchRouteHistory struct {
    History         []*DispatchRouteHistoricalEntry `json:"history,omitempty" form:"history,omitempty"` //History of the route's state changes.
}

/*
 * Structure for the custom type AssetCurrentLocationsResponse
 */
type AssetCurrentLocationsResponse struct {
    Cable           []*Cable        `json:"cable,omitempty" form:"cable,omitempty"` //The cable connected to the asset
    EngineHours     *int64          `json:"engineHours,omitempty" form:"engineHours,omitempty"` //Engine hours
    Id              int64           `json:"id" form:"id"` //Asset ID
    Location        []*AssetCurrentLocation `json:"location,omitempty" form:"location,omitempty"` //Current location of an asset
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Asset name
}

/*
 * Structure for the custom type TaggedMachine
 */
type TaggedMachine struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Machine being tagged.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the Machine being tagged.
}

/*
 * Structure for the custom type TaggedDriver
 */
type TaggedDriver struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Driver being tagged.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the Driver being tagged.
}

/*
 * Structure for the custom type TaggedAsset
 */
type TaggedAsset struct {
    Id              int64           `json:"id" form:"id"` //The ID of the Asset being tagged.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the Asset being tagged.
}

/*
 * Structure for the custom type TaggedAddress
 */
type TaggedAddress struct {
    Id              int64           `json:"id" form:"id"` //The ID of the address being tagged.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the address being tagged.
}

/*
 * Structure for the custom type TagModify
 */
type TagModify struct {
    Add             Add             `json:"add,omitempty" form:"add,omitempty"` //Specify devices, etc. that should be added to the tag.
    Delete          Delete          `json:"delete,omitempty" form:"delete,omitempty"` //Specify devices, etc. that should be removed from the tag.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Updated name of this tag.
    ParentTagId     *int64          `json:"parentTagId,omitempty" form:"parentTagId,omitempty"` //If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
}

/*
 * Structure for the custom type AssetCurrentLocation
 */
type AssetCurrentLocation struct {
    Latitude          *float64        `json:"latitude,omitempty" form:"latitude,omitempty"` //The latitude of the location in degrees.
    Location          *string         `json:"location,omitempty" form:"location,omitempty"` //The best effort (street,city,state) for the latitude and longitude.
    Longitude         *float64        `json:"longitude,omitempty" form:"longitude,omitempty"` //The longitude of the location in degrees.
    SpeedMilesPerHour *float64        `json:"speedMilesPerHour,omitempty" form:"speedMilesPerHour,omitempty"` //The speed calculated from GPS that the asset was traveling at in miles per hour.
    TimeMs            *float64        `json:"timeMs,omitempty" form:"timeMs,omitempty"` //Time in Unix milliseconds since epoch when the asset was at the location.
}

/*
 * Structure for the custom type TagMetadata
 */
type TagMetadata struct {
    Id              int64           `json:"id" form:"id"` //The ID of this tag.
    Name            string          `json:"name" form:"name"` //Name of this tag.
}

/*
 * Structure for the custom type Sensor
 */
type Sensor struct {
    Id              int64           `json:"id" form:"id"` //ID of the sensor.
    MacAddress      *string         `json:"macAddress,omitempty" form:"macAddress,omitempty"` //MAC address of the sensor.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the sensor.
}

/*
 * Structure for the custom type SafetyReportHarshEvent
 */
type SafetyReportHarshEvent struct {
    HarshEventType  *string         `json:"harshEventType,omitempty" form:"harshEventType,omitempty"` //Type of the harsh event
    TimestampMs     *int64          `json:"timestampMs,omitempty" form:"timestampMs,omitempty"` //Timestamp that the harsh event occurred in Unix milliseconds since epoch
    VehicleId       *int64          `json:"vehicleId,omitempty" form:"vehicleId,omitempty"` //Vehicle associated with the harsh event
}

/*
 * Structure for the custom type Machine
 */
type Machine struct {
    Id              int64           `json:"id" form:"id"` //ID of the machine.
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the machine.
    Notes           *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes about the machine
}

/*
 * Structure for the custom type HumidityResponse
 */
type HumidityResponse struct {
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //TODO: Write general description for this field
    Sensors         []*Sensor2      `json:"sensors,omitempty" form:"sensors,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type EngineState
 */
type EngineState struct {
    TimeMs          int64           `json:"timeMs" form:"timeMs"` //Timestamp in Unix epoch milliseconds.
    Value           ValueEnum       `json:"value" form:"value"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Asset
 */
type Asset struct {
    AssetSerialNumber *string         `json:"assetSerialNumber,omitempty" form:"assetSerialNumber,omitempty"` //Serial number of the host asset
    Cable             []*Cable        `json:"cable,omitempty" form:"cable,omitempty"` //The cable connected to the asset
    EngineHours       *int64          `json:"engineHours,omitempty" form:"engineHours,omitempty"` //Engine hours
    Id                int64           `json:"id" form:"id"` //Asset ID
    Name              *string         `json:"name,omitempty" form:"name,omitempty"` //Asset name
}

/*
 * Structure for the custom type DoorResponse
 */
type DoorResponse struct {
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //TODO: Write general description for this field
    Sensors         []*Sensor1      `json:"sensors,omitempty" form:"sensors,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DocumentFieldType
 */
type DocumentFieldType struct {
    Label                   string          `json:"label" form:"label"` //Descriptive name of this field type.
    NumberValueTypeMetadata NumberValueTypeMetadata `json:"numberValueTypeMetadata,omitempty" form:"numberValueTypeMetadata,omitempty"` //Additional metadata information for a number field type. Only defined when a field type has valueType: ValueType_Number.
    ValueType               string          `json:"valueType" form:"valueType"` //The kind of value that can be submitted for this fieldType. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
}

/*
 * Structure for the custom type DispatchJobCreate
 */
type DispatchJobCreate struct {
    DestinationAddress          *string         `json:"destination_address,omitempty" form:"destination_address,omitempty"` //The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
    DestinationAddressId        *int64          `json:"destination_address_id,omitempty" form:"destination_address_id,omitempty"` //ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
    DestinationLat              *float64        `json:"destination_lat,omitempty" form:"destination_lat,omitempty"` //Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
    DestinationLng              *float64        `json:"destination_lng,omitempty" form:"destination_lng,omitempty"` //Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
    DestinationName             *string         `json:"destination_name,omitempty" form:"destination_name,omitempty"` //The name of the job destination. If provided, it will take precedence over the name of the address book entry.
    Notes                       *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes regarding the details of this job.
    ScheduledArrivalTimeMs      int64           `json:"scheduled_arrival_time_ms" form:"scheduled_arrival_time_ms"` //The time at which the assigned driver is scheduled to arrive at the job destination.
    ScheduledDepartureTimeMs    *int64          `json:"scheduled_departure_time_ms,omitempty" form:"scheduled_departure_time_ms,omitempty"` //The time at which the assigned driver is scheduled to depart from the job destination.
}

/*
 * Structure for the custom type Address
 */
type Address struct {
    Contacts         []*Contact      `json:"contacts,omitempty" form:"contacts,omitempty"` //TODO: Write general description for this field
    FormattedAddress *string         `json:"formattedAddress,omitempty" form:"formattedAddress,omitempty"` //The full address associated with this address/geofence, as it might be recognized by maps.google.com
    Geofence         AddressGeofence `json:"geofence,omitempty" form:"geofence,omitempty"` //The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.
    Id               *int64          `json:"id,omitempty" form:"id,omitempty"` //ID of the address
    Name             *string         `json:"name,omitempty" form:"name,omitempty"` //Name of the address or geofence
    Notes            *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes associated with an address.
    Tags             []*TagMetadata  `json:"tags,omitempty" form:"tags,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DocumentBase
 */
type DocumentBase struct {
    DispatchJobId   *int64          `json:"dispatchJobId,omitempty" form:"dispatchJobId,omitempty"` //ID of the Samsara dispatch job for which the document is submitted
    Notes           *string         `json:"notes,omitempty" form:"notes,omitempty"` //Notes submitted with this document.
}

/*
 * Structure for the custom type DispatchRouteHistoricalEntry
 */
type DispatchRouteHistoricalEntry struct {
    ChangedAtMs     *int64          `json:"changed_at_ms,omitempty" form:"changed_at_ms,omitempty"` //Timestamp that the route was updated, represented as Unix milliseconds since epoch.
    Route           DispatchRoute   `json:"route,omitempty" form:"route,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type DataInputHistoryResponse
 */
type DataInputHistoryResponse struct {
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //The ID of this data input
    Name            string          `json:"name" form:"name"` //Name of this data input
    Points          []*Point        `json:"points,omitempty" form:"points,omitempty"` //Data points from this data input
}

/*
 * Structure for the custom type CargoResponse
 */
type CargoResponse struct {
    GroupId         *int64          `json:"groupId,omitempty" form:"groupId,omitempty"` //TODO: Write general description for this field
    Sensors         []*Sensor5      `json:"sensors,omitempty" form:"sensors,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AuxInput
 */
type AuxInput struct {
    TimeMs          int64           `json:"timeMs" form:"timeMs"` //Timestamp in Unix epoch milliseconds.
    Value           bool            `json:"value" form:"value"` //Boolean representing the digital value of the aux input.
}

/*
 * Structure for the custom type AuxInputSeries
 */
type AuxInputSeries struct {
    Name            NameEnum        `json:"name" form:"name"` //The name of the aux input.
    Values          []*AuxInput     `json:"values" form:"values"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AssetReeferResponse
 */
type AssetReeferResponse struct {
    AssetType       *string         `json:"assetType,omitempty" form:"assetType,omitempty"` //Asset type
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //Asset ID
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Asset name
    ReeferStats     ReeferStats     `json:"reeferStats,omitempty" form:"reeferStats,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AddressGeofence
 */
type AddressGeofence struct {
    Circle          Circle          `json:"circle,omitempty" form:"circle,omitempty"` //Information about a circular geofence. This field is only populated if the geofence is a circle.
    Polygon         Polygon         `json:"polygon,omitempty" form:"polygon,omitempty"` //Information about a polygon geofence. This field is only populated if the geofence is a polygon.
}
