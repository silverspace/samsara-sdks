/*
 * samsaraapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for FieldEnum enum
 */
type FieldEnum int

/**
 * Value collection for FieldEnum enum
 */
const (
    Field_AMBIENTTEMPERATURE FieldEnum = 1 + iota
    Field_PROBETEMPERATURE
    Field_CURRENTLOOP1RAW
    Field_CURRENTLOOP1MAPPED
    Field_CURRENTLOOP2RAW
    Field_CURRENTLOOP2MAPPED
    Field_PMPOWERTOTAL
    Field_PMPHASE1POWER
    Field_PMPHASE2POWER
    Field_PMPHASE3POWER
    Field_PMPHASE1POWERFACTOR
    Field_PMPHASE2POWERFACTOR
    Field_PMPHASE3POWERFACTOR
)

func (r FieldEnum) MarshalJSON() ([]byte, error) { 
    s := FieldEnumToValue(r)
    return json.Marshal(s) 
} 

func (r *FieldEnum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  FieldEnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts FieldEnum to its string representation
 */
func FieldEnumToValue(fieldEnum FieldEnum) string {
    switch fieldEnum {
        case Field_AMBIENTTEMPERATURE:
    		return "ambientTemperature"		
        case Field_PROBETEMPERATURE:
    		return "probeTemperature"		
        case Field_CURRENTLOOP1RAW:
    		return "currentLoop1Raw"		
        case Field_CURRENTLOOP1MAPPED:
    		return "currentLoop1Mapped"		
        case Field_CURRENTLOOP2RAW:
    		return "currentLoop2Raw"		
        case Field_CURRENTLOOP2MAPPED:
    		return "currentLoop2Mapped"		
        case Field_PMPOWERTOTAL:
    		return "pmPowerTotal"		
        case Field_PMPHASE1POWER:
    		return "pmPhase1Power"		
        case Field_PMPHASE2POWER:
    		return "pmPhase2Power"		
        case Field_PMPHASE3POWER:
    		return "pmPhase3Power"		
        case Field_PMPHASE1POWERFACTOR:
    		return "pmPhase1PowerFactor"		
        case Field_PMPHASE2POWERFACTOR:
    		return "pmPhase2PowerFactor"		
        case Field_PMPHASE3POWERFACTOR:
    		return "pmPhase3PowerFactor"		
        default:
        	return "ambientTemperature"
    }
}

/**
 * Converts FieldEnum Array to its string Array representation
*/
func FieldEnumArrayToValue(fieldEnum []FieldEnum) []string {
    convArray := make([]string,len( fieldEnum))
    for i:=0; i<len(fieldEnum);i++ {
        convArray[i] = FieldEnumToValue(fieldEnum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func FieldEnumFromValue(value string) FieldEnum {
    switch value {
        case "ambientTemperature":
            return Field_AMBIENTTEMPERATURE
        case "probeTemperature":
            return Field_PROBETEMPERATURE
        case "currentLoop1Raw":
            return Field_CURRENTLOOP1RAW
        case "currentLoop1Mapped":
            return Field_CURRENTLOOP1MAPPED
        case "currentLoop2Raw":
            return Field_CURRENTLOOP2RAW
        case "currentLoop2Mapped":
            return Field_CURRENTLOOP2MAPPED
        case "pmPowerTotal":
            return Field_PMPOWERTOTAL
        case "pmPhase1Power":
            return Field_PMPHASE1POWER
        case "pmPhase2Power":
            return Field_PMPHASE2POWER
        case "pmPhase3Power":
            return Field_PMPHASE3POWER
        case "pmPhase1PowerFactor":
            return Field_PMPHASE1POWERFACTOR
        case "pmPhase2PowerFactor":
            return Field_PMPHASE2POWERFACTOR
        case "pmPhase3PowerFactor":
            return Field_PMPHASE3POWERFACTOR
        default:
            return Field_AMBIENTTEMPERATURE
    }
}
