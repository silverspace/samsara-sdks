/*
 * samsaraapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package industrial_pkg


import(
	"errors"
	"fmt"
	"encoding/json"
	"samsaraapi_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"samsaraapi_lib/apihelper_pkg"
	"samsaraapi_lib/configuration_pkg"
)
/*
 * Client structure as interface implementation
 */
type INDUSTRIAL_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * Fetch datapoints from a given data input.
 * @param    string        accessToken       parameter: Required
 * @param    int64         dataInputId       parameter: Required
 * @param    *int64        startMs           parameter: Optional
 * @param    *int64        endMs             parameter: Optional
 * @return	Returns the *models_pkg.DataInputHistoryResponse response from the API call
 */
func (me *INDUSTRIAL_IMPL) GetDataInput (
            accessToken string,
            dataInputId int64,
            startMs *int64,
            endMs *int64) (*models_pkg.DataInputHistoryResponse, error) {
    //the endpoint path uri
    _pathUrl := "/industrial/data/{data_input_id}"

    //variable to hold errors
    var err error = nil
    //process optional template parameters
    _pathUrl, err = apihelper_pkg.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{} {
        "data_input_id" : dataInputId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "access_token" : accessToken,
        "startMs" : startMs,
        "endMs" : endMs,
        "access_token" : samsaraapi_lib.config.AccessToken,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.DataInputHistoryResponse = &models_pkg.DataInputHistoryResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Fetch all of the data inputs for a group.
 * @param    string        accessToken      parameter: Required
 * @param    *int64        groupId          parameter: Optional
 * @param    *int64        startMs          parameter: Optional
 * @param    *int64        endMs            parameter: Optional
 * @return	Returns the *models_pkg.GetAllDataInputsResponse response from the API call
 */
func (me *INDUSTRIAL_IMPL) GetAllDataInputs (
            accessToken string,
            groupId *int64,
            startMs *int64,
            endMs *int64) (*models_pkg.GetAllDataInputsResponse, error) {
    //the endpoint path uri
    _pathUrl := "/industrial/data"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "access_token" : accessToken,
        "group_id" : groupId,
        "startMs" : startMs,
        "endMs" : endMs,
        "access_token" : samsaraapi_lib.config.AccessToken,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetAllDataInputsResponse = &models_pkg.GetAllDataInputsResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
 * @param    string                        accessToken      parameter: Required
 * @param    *models_pkg.GroupParam        groupParam       parameter: Required
 * @return	Returns the *models_pkg.GetMachinesResponse response from the API call
 */
func (me *INDUSTRIAL_IMPL) CreateGetMachines (
            accessToken string,
            groupParam *models_pkg.GroupParam) (*models_pkg.GetMachinesResponse, error) {
    //the endpoint path uri
    _pathUrl := "/machines/list"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "access_token" : accessToken,
        "access_token" : samsaraapi_lib.config.AccessToken,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, groupParam)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetMachinesResponse = &models_pkg.GetMachinesResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Get historical data for machine objects. This method returns a set of historical data for all machines in a group
 * @param    string                          accessToken      parameter: Required
 * @param    *models_pkg.HistoryParam        historyParam     parameter: Required
 * @return	Returns the *models_pkg.MachineHistoryResponse response from the API call
 */
func (me *INDUSTRIAL_IMPL) CreateGetMachinesHistory (
            accessToken string,
            historyParam *models_pkg.HistoryParam) (*models_pkg.MachineHistoryResponse, error) {
    //the endpoint path uri
    _pathUrl := "/machines/history"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "access_token" : accessToken,
        "access_token" : samsaraapi_lib.config.AccessToken,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, historyParam)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.MachineHistoryResponse = &models_pkg.MachineHistoryResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

