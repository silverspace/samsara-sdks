/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of DispatchRouteBase
 */
class DispatchRouteBase extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.actualEndMs = this.constructor.getValue(obj.actualEndMs || obj.actual_end_ms);
        this.actualStartMs = this.constructor.getValue(obj.actualStartMs || obj.actual_start_ms);
        this.driverId = this.constructor.getValue(obj.driverId || obj.driver_id);
        this.groupId = this.constructor.getValue(obj.groupId || obj.group_id);
        this.name = this.constructor.getValue(obj.name);
        this.scheduledEndMs = this.constructor.getValue(obj.scheduledEndMs || obj.scheduled_end_ms);
        this.scheduledMeters =
          this.constructor.getValue(obj.scheduledMeters
     || obj.scheduled_meters);
        this.scheduledStartMs =
          this.constructor.getValue(obj.scheduledStartMs
     || obj.scheduled_start_ms);
        this.startLocationAddress =
          this.constructor.getValue(obj.startLocationAddress
     || obj.start_location_address);
        this.startLocationAddressId =
          this.constructor.getValue(obj.startLocationAddressId
     || obj.start_location_address_id);
        this.startLocationLat =
          this.constructor.getValue(obj.startLocationLat
     || obj.start_location_lat);
        this.startLocationLng =
          this.constructor.getValue(obj.startLocationLng
     || obj.start_location_lng);
        this.startLocationName =
          this.constructor.getValue(obj.startLocationName
     || obj.start_location_name);
        this.trailerId = this.constructor.getValue(obj.trailerId || obj.trailer_id);
        this.vehicleId = this.constructor.getValue(obj.vehicleId || obj.vehicle_id);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'actualEndMs', realName: 'actual_end_ms' },
            { name: 'actualStartMs', realName: 'actual_start_ms' },
            { name: 'driverId', realName: 'driver_id' },
            { name: 'groupId', realName: 'group_id' },
            { name: 'name', realName: 'name' },
            { name: 'scheduledEndMs', realName: 'scheduled_end_ms' },
            { name: 'scheduledMeters', realName: 'scheduled_meters' },
            { name: 'scheduledStartMs', realName: 'scheduled_start_ms' },
            { name: 'startLocationAddress', realName: 'start_location_address' },
            { name: 'startLocationAddressId', realName: 'start_location_address_id' },
            { name: 'startLocationLat', realName: 'start_location_lat' },
            { name: 'startLocationLng', realName: 'start_location_lng' },
            { name: 'startLocationName', realName: 'start_location_name' },
            { name: 'trailerId', realName: 'trailer_id' },
            { name: 'vehicleId', realName: 'vehicle_id' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = DispatchRouteBase;
