/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of CreateDvirParam
 */
class CreateDvirParam extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.inspectionType = this.constructor.getValue(obj.inspectionType, 'mechanic');
        this.mechanicNotes = this.constructor.getValue(obj.mechanicNotes);
        this.odometerMiles = this.constructor.getValue(obj.odometerMiles);
        this.previousDefectsCorrected = this.constructor.getValue(obj.previousDefectsCorrected);
        this.previousDefectsIgnored = this.constructor.getValue(obj.previousDefectsIgnored);
        this.safe = this.constructor.getValue(obj.safe);
        this.trailerId = this.constructor.getValue(obj.trailerId);
        this.userEmail = this.constructor.getValue(obj.userEmail);
        this.vehicleId = this.constructor.getValue(obj.vehicleId);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'inspectionType', realName: 'inspectionType' },
            { name: 'mechanicNotes', realName: 'mechanicNotes' },
            { name: 'odometerMiles', realName: 'odometerMiles' },
            { name: 'previousDefectsCorrected', realName: 'previousDefectsCorrected' },
            { name: 'previousDefectsIgnored', realName: 'previousDefectsIgnored' },
            { name: 'safe', realName: 'safe' },
            { name: 'trailerId', realName: 'trailerId' },
            { name: 'userEmail', realName: 'userEmail' },
            { name: 'vehicleId', realName: 'vehicleId' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = CreateDvirParam;
