/**
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of DvirBase
 */
class DvirBase extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.authorSignature = this.constructor.getValue(obj.authorSignature);
        this.defectsCorrected = this.constructor.getValue(obj.defectsCorrected);
        this.defectsNeedNotBeCorrected = this.constructor.getValue(obj.defectsNeedNotBeCorrected);
        this.id = this.constructor.getValue(obj.id);
        this.inspectionType = this.constructor.getValue(obj.inspectionType);
        this.mechanicNotes = this.constructor.getValue(obj.mechanicNotes);
        this.mechanicOrAgentSignature = this.constructor.getValue(obj.mechanicOrAgentSignature);
        this.nextDriverSignature = this.constructor.getValue(obj.nextDriverSignature);
        this.odometerMiles = this.constructor.getValue(obj.odometerMiles);
        this.timeMs = this.constructor.getValue(obj.timeMs);
        this.trailerDefects = this.constructor.getValue(obj.trailerDefects);
        this.trailerId = this.constructor.getValue(obj.trailerId);
        this.trailerName = this.constructor.getValue(obj.trailerName);
        this.vehicle = this.constructor.getValue(obj.vehicle);
        this.vehicleCondition = this.constructor.getValue(obj.vehicleCondition);
        this.vehicleDefects = this.constructor.getValue(obj.vehicleDefects);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'authorSignature', realName: 'authorSignature', type: 'AuthorSignature' },
            { name: 'defectsCorrected', realName: 'defectsCorrected' },
            { name: 'defectsNeedNotBeCorrected', realName: 'defectsNeedNotBeCorrected' },
            { name: 'id', realName: 'id' },
            { name: 'inspectionType', realName: 'inspectionType' },
            { name: 'mechanicNotes', realName: 'mechanicNotes' },
            {
                name: 'mechanicOrAgentSignature',
                realName: 'mechanicOrAgentSignature',
                type: 'MechanicOrAgentSignature',
            },
            {
                name: 'nextDriverSignature',
                realName: 'nextDriverSignature',
                type: 'NextDriverSignature',
            },
            { name: 'odometerMiles', realName: 'odometerMiles' },
            { name: 'timeMs', realName: 'timeMs' },
            {
                name: 'trailerDefects',
                realName: 'trailerDefects',
                array: true,
                type: 'TrailerDefect',
            },
            { name: 'trailerId', realName: 'trailerId' },
            { name: 'trailerName', realName: 'trailerName' },
            { name: 'vehicle', realName: 'vehicle', type: 'Vehicle2' },
            { name: 'vehicleCondition', realName: 'vehicleCondition' },
            {
                name: 'vehicleDefects',
                realName: 'vehicleDefects',
                array: true,
                type: 'VehicleDefect',
            },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = DvirBase;
