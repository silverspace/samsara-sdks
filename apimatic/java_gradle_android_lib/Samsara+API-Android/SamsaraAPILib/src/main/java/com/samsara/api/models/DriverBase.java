/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class DriverBase 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 6343119110859227876L;
    private Boolean eldAdverseWeatherExemptionEnabled;
    private Boolean eldBigDayExemptionEnabled;
    private Integer eldDayStartHour;
    private Boolean eldExempt;
    private String eldExemptReason;
    private Boolean eldPcEnabled = false;
    private Boolean eldYmEnabled = false;
    private LinkedHashMap<String, String> externalIds;
    private Long groupId;
    private String licenseNumber;
    private String licenseState;
    private String name;
    private String notes;
    private String phone;
    private String username;
    private Long vehicleId;
    /** GETTER
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     */
    @JsonGetter("eldAdverseWeatherExemptionEnabled")
    public Boolean getEldAdverseWeatherExemptionEnabled ( ) { 
        return this.eldAdverseWeatherExemptionEnabled;
    }
    
    /** SETTER
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     */
    @JsonSetter("eldAdverseWeatherExemptionEnabled")
    public void setEldAdverseWeatherExemptionEnabled (Boolean value) { 
        this.eldAdverseWeatherExemptionEnabled = value;
        notifyObservers(this.eldAdverseWeatherExemptionEnabled);
    }
 
    /** GETTER
     * Flag indicating this driver may use Big Day excemptions in ELD logs.
     */
    @JsonGetter("eldBigDayExemptionEnabled")
    public Boolean getEldBigDayExemptionEnabled ( ) { 
        return this.eldBigDayExemptionEnabled;
    }
    
    /** SETTER
     * Flag indicating this driver may use Big Day excemptions in ELD logs.
     */
    @JsonSetter("eldBigDayExemptionEnabled")
    public void setEldBigDayExemptionEnabled (Boolean value) { 
        this.eldBigDayExemptionEnabled = value;
        notifyObservers(this.eldBigDayExemptionEnabled);
    }
 
    /** GETTER
     * 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
     */
    @JsonGetter("eldDayStartHour")
    public Integer getEldDayStartHour ( ) { 
        return this.eldDayStartHour;
    }
    
    /** SETTER
     * 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
     */
    @JsonSetter("eldDayStartHour")
    public void setEldDayStartHour (Integer value) { 
        this.eldDayStartHour = value;
        notifyObservers(this.eldDayStartHour);
    }
 
    /** GETTER
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     */
    @JsonGetter("eldExempt")
    public Boolean getEldExempt ( ) { 
        return this.eldExempt;
    }
    
    /** SETTER
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     */
    @JsonSetter("eldExempt")
    public void setEldExempt (Boolean value) { 
        this.eldExempt = value;
        notifyObservers(this.eldExempt);
    }
 
    /** GETTER
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     */
    @JsonGetter("eldExemptReason")
    public String getEldExemptReason ( ) { 
        return this.eldExemptReason;
    }
    
    /** SETTER
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     */
    @JsonSetter("eldExemptReason")
    public void setEldExemptReason (String value) { 
        this.eldExemptReason = value;
        notifyObservers(this.eldExemptReason);
    }
 
    /** GETTER
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     */
    @JsonGetter("eldPcEnabled")
    public Boolean getEldPcEnabled ( ) { 
        return this.eldPcEnabled;
    }
    
    /** SETTER
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     */
    @JsonSetter("eldPcEnabled")
    public void setEldPcEnabled (Boolean value) { 
        this.eldPcEnabled = value;
        notifyObservers(this.eldPcEnabled);
    }
 
    /** GETTER
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     */
    @JsonGetter("eldYmEnabled")
    public Boolean getEldYmEnabled ( ) { 
        return this.eldYmEnabled;
    }
    
    /** SETTER
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     */
    @JsonSetter("eldYmEnabled")
    public void setEldYmEnabled (Boolean value) { 
        this.eldYmEnabled = value;
        notifyObservers(this.eldYmEnabled);
    }
 
    /** GETTER
     * Dictionary of external IDs (string key-value pairs)
     */
    @JsonGetter("externalIds")
    public LinkedHashMap<String, String> getExternalIds ( ) { 
        return this.externalIds;
    }
    
    /** SETTER
     * Dictionary of external IDs (string key-value pairs)
     */
    @JsonSetter("externalIds")
    public void setExternalIds (LinkedHashMap<String, String> value) { 
        this.externalIds = value;
        notifyObservers(this.externalIds);
    }
 
    /** GETTER
     * ID of the group if the organization has multiple groups (uncommon).
     */
    @JsonGetter("groupId")
    public Long getGroupId ( ) { 
        return this.groupId;
    }
    
    /** SETTER
     * ID of the group if the organization has multiple groups (uncommon).
     */
    @JsonSetter("groupId")
    public void setGroupId (Long value) { 
        this.groupId = value;
        notifyObservers(this.groupId);
    }
 
    /** GETTER
     * Driver's state issued license number.
     */
    @JsonGetter("licenseNumber")
    public String getLicenseNumber ( ) { 
        return this.licenseNumber;
    }
    
    /** SETTER
     * Driver's state issued license number.
     */
    @JsonSetter("licenseNumber")
    public void setLicenseNumber (String value) { 
        this.licenseNumber = value;
        notifyObservers(this.licenseNumber);
    }
 
    /** GETTER
     * Abbreviation of state that issued driver's license.
     */
    @JsonGetter("licenseState")
    public String getLicenseState ( ) { 
        return this.licenseState;
    }
    
    /** SETTER
     * Abbreviation of state that issued driver's license.
     */
    @JsonSetter("licenseState")
    public void setLicenseState (String value) { 
        this.licenseState = value;
        notifyObservers(this.licenseState);
    }
 
    /** GETTER
     * Driver's name.
     */
    @JsonGetter("name")
    public String getName ( ) { 
        return this.name;
    }
    
    /** SETTER
     * Driver's name.
     */
    @JsonSetter("name")
    public void setName (String value) { 
        this.name = value;
        notifyObservers(this.name);
    }
 
    /** GETTER
     * Notes about the driver.
     */
    @JsonGetter("notes")
    public String getNotes ( ) { 
        return this.notes;
    }
    
    /** SETTER
     * Notes about the driver.
     */
    @JsonSetter("notes")
    public void setNotes (String value) { 
        this.notes = value;
        notifyObservers(this.notes);
    }
 
    /** GETTER
     * Driver's phone number. Please include only digits, ex. 4157771234
     */
    @JsonGetter("phone")
    public String getPhone ( ) { 
        return this.phone;
    }
    
    /** SETTER
     * Driver's phone number. Please include only digits, ex. 4157771234
     */
    @JsonSetter("phone")
    public void setPhone (String value) { 
        this.phone = value;
        notifyObservers(this.phone);
    }
 
    /** GETTER
     * Driver's login username into the driver app.
     */
    @JsonGetter("username")
    public String getUsername ( ) { 
        return this.username;
    }
    
    /** SETTER
     * Driver's login username into the driver app.
     */
    @JsonSetter("username")
    public void setUsername (String value) { 
        this.username = value;
        notifyObservers(this.username);
    }
 
    /** GETTER
     * ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
     */
    @JsonGetter("vehicleId")
    public Long getVehicleId ( ) { 
        return this.vehicleId;
    }
    
    /** SETTER
     * ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
     */
    @JsonSetter("vehicleId")
    public void setVehicleId (Long value) { 
        this.vehicleId = value;
        notifyObservers(this.vehicleId);
    }
 
}
