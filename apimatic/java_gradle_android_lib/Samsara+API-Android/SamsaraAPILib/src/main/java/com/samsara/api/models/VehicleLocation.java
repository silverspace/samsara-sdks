/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class VehicleLocation 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = -3219481890717241014L;
    private Double heading;
    private long id;
    private Double latitude;
    private String location;
    private Double longitude;
    private String name;
    private Long odometerMeters;
    private Boolean onTrip;
    private Double speed;
    private Long time;
    private String vin;
    /** GETTER
     * Heading in degrees.
     */
    @JsonGetter("heading")
    public Double getHeading ( ) { 
        return this.heading;
    }
    
    /** SETTER
     * Heading in degrees.
     */
    @JsonSetter("heading")
    public void setHeading (Double value) { 
        this.heading = value;
        notifyObservers(this.heading);
    }
 
    /** GETTER
     * ID of the vehicle.
     */
    @JsonGetter("id")
    public long getId ( ) { 
        return this.id;
    }
    
    /** SETTER
     * ID of the vehicle.
     */
    @JsonSetter("id")
    public void setId (long value) { 
        this.id = value;
        notifyObservers(this.id);
    }
 
    /** GETTER
     * Latitude in decimal degrees.
     */
    @JsonGetter("latitude")
    public Double getLatitude ( ) { 
        return this.latitude;
    }
    
    /** SETTER
     * Latitude in decimal degrees.
     */
    @JsonSetter("latitude")
    public void setLatitude (Double value) { 
        this.latitude = value;
        notifyObservers(this.latitude);
    }
 
    /** GETTER
     * Text representation of nearest identifiable location to (latitude, longitude) coordinates.
     */
    @JsonGetter("location")
    public String getLocation ( ) { 
        return this.location;
    }
    
    /** SETTER
     * Text representation of nearest identifiable location to (latitude, longitude) coordinates.
     */
    @JsonSetter("location")
    public void setLocation (String value) { 
        this.location = value;
        notifyObservers(this.location);
    }
 
    /** GETTER
     * Longitude in decimal degrees.
     */
    @JsonGetter("longitude")
    public Double getLongitude ( ) { 
        return this.longitude;
    }
    
    /** SETTER
     * Longitude in decimal degrees.
     */
    @JsonSetter("longitude")
    public void setLongitude (Double value) { 
        this.longitude = value;
        notifyObservers(this.longitude);
    }
 
    /** GETTER
     * Name of the vehicle.
     */
    @JsonGetter("name")
    public String getName ( ) { 
        return this.name;
    }
    
    /** SETTER
     * Name of the vehicle.
     */
    @JsonSetter("name")
    public void setName (String value) { 
        this.name = value;
        notifyObservers(this.name);
    }
 
    /** GETTER
     * The number of meters reported by the odometer.
     */
    @JsonGetter("odometerMeters")
    public Long getOdometerMeters ( ) { 
        return this.odometerMeters;
    }
    
    /** SETTER
     * The number of meters reported by the odometer.
     */
    @JsonSetter("odometerMeters")
    public void setOdometerMeters (Long value) { 
        this.odometerMeters = value;
        notifyObservers(this.odometerMeters);
    }
 
    /** GETTER
     * Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
     */
    @JsonGetter("onTrip")
    public Boolean getOnTrip ( ) { 
        return this.onTrip;
    }
    
    /** SETTER
     * Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
     */
    @JsonSetter("onTrip")
    public void setOnTrip (Boolean value) { 
        this.onTrip = value;
        notifyObservers(this.onTrip);
    }
 
    /** GETTER
     * Speed in miles per hour.
     */
    @JsonGetter("speed")
    public Double getSpeed ( ) { 
        return this.speed;
    }
    
    /** SETTER
     * Speed in miles per hour.
     */
    @JsonSetter("speed")
    public void setSpeed (Double value) { 
        this.speed = value;
        notifyObservers(this.speed);
    }
 
    /** GETTER
     * The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
     */
    @JsonGetter("time")
    public Long getTime ( ) { 
        return this.time;
    }
    
    /** SETTER
     * The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
     */
    @JsonSetter("time")
    public void setTime (Long value) { 
        this.time = value;
        notifyObservers(this.time);
    }
 
    /** GETTER
     * Vehicle Identification Number (VIN) of the vehicle.
     */
    @JsonGetter("vin")
    public String getVin ( ) { 
        return this.vin;
    }
    
    /** SETTER
     * Vehicle Identification Number (VIN) of the vehicle.
     */
    @JsonSetter("vin")
    public void setVin (String value) { 
        this.vin = value;
        notifyObservers(this.vin);
    }
 
}
