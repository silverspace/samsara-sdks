/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.samsara.api.*;
import com.samsara.api.models.*;
import com.samsara.api.exceptions.*;
import com.samsara.api.http.client.HttpClient;
import com.samsara.api.http.client.HttpContext;
import com.samsara.api.http.request.HttpRequest;
import com.samsara.api.http.response.HttpResponse;
import com.samsara.api.http.response.HttpStringResponse;
import com.samsara.api.http.client.APICallBack;
import com.samsara.api.controllers.syncwrapper.APICallBackCatcher;

public class FleetController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static FleetController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the FleetController class 
     */
    public static FleetController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new FleetController();
                }
            }
        }
        return instance;
    }

    /**
     * Fetch all of the document types.
     * @return    Returns the List<DocumentType> response from the API call 
     */
    public List<DocumentType> getDriverDocumentTypesByOrgId(
    ) throws Throwable {
        APICallBackCatcher<List<DocumentType>> callback = new APICallBackCatcher<List<DocumentType>>();
        getDriverDocumentTypesByOrgIdAsync(callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the document types.
     * @return    Returns the void response from the API call 
     */
    public void getDriverDocumentTypesByOrgIdAsync(
                final APICallBack<List<DocumentType>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/document_types");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<DocumentType> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<DocumentType>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleId    Required parameter: ID of the vehicle with the associated routes.
     * @param    startMs    Required parameter: Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
     * @param    endMs    Required parameter: Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
     * @return    Returns the List<FleetVehicleLocation> response from the API call 
     */
    public List<FleetVehicleLocation> getVehicleLocations(
                final String accessToken,
                final long vehicleId,
                final long startMs,
                final long endMs
    ) throws Throwable {
        APICallBackCatcher<List<FleetVehicleLocation>> callback = new APICallBackCatcher<List<FleetVehicleLocation>>();
        getVehicleLocationsAsync(accessToken, vehicleId, startMs, endMs, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleId    Required parameter: ID of the vehicle with the associated routes.
     * @param    startMs    Required parameter: Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
     * @param    endMs    Required parameter: Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
     * @return    Returns the void response from the API call 
     */
    public void getVehicleLocationsAsync(
                final String accessToken,
                final long vehicleId,
                final long startMs,
                final long endMs,
                final APICallBack<List<FleetVehicleLocation>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicle_id}/locations");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicle_id", vehicleId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<FleetVehicleLocation> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<FleetVehicleLocation>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new dispatch route for the vehicle with vehicle_id.
     * @param    createDispatchRouteParams    Required parameter: Example: 
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleId    Required parameter: ID of the vehicle with the associated routes.
     * @return    Returns the DispatchRoute response from the API call 
     */
    public DispatchRoute createVehicleDispatchRoute(
                final DispatchRouteCreate createDispatchRouteParams,
                final String accessToken,
                final long vehicleId
    ) throws Throwable {
        APICallBackCatcher<DispatchRoute> callback = new APICallBackCatcher<DispatchRoute>();
        createVehicleDispatchRouteAsync(createDispatchRouteParams, accessToken, vehicleId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new dispatch route for the vehicle with vehicle_id.
     * @param    createDispatchRouteParams    Required parameter: Example: 
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleId    Required parameter: ID of the vehicle with the associated routes.
     * @return    Returns the void response from the API call 
     */
    public void createVehicleDispatchRouteAsync(
                final DispatchRouteCreate createDispatchRouteParams,
                final String accessToken,
                final long vehicleId,
                final APICallBack<DispatchRoute> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicle_id}/dispatch/routes");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicle_id", vehicleId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(createDispatchRouteParams);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DispatchRoute _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DispatchRoute>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all of the dispatch routes for a given vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleId    Required parameter: ID of the vehicle with the associated routes.
     * @param    endTime    Optional parameter: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
     * @param    duration    Optional parameter: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
     * @return    Returns the List<DispatchRoute> response from the API call 
     */
    public List<DispatchRoute> getDispatchRoutesByVehicleId(
                final String accessToken,
                final long vehicleId,
                final Long endTime,
                final Long duration
    ) throws Throwable {
        APICallBackCatcher<List<DispatchRoute>> callback = new APICallBackCatcher<List<DispatchRoute>>();
        getDispatchRoutesByVehicleIdAsync(accessToken, vehicleId, endTime, duration, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the dispatch routes for a given vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleId    Required parameter: ID of the vehicle with the associated routes.
     * @param    endTime    Optional parameter: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
     * @param    duration    Optional parameter: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
     * @return    Returns the void response from the API call 
     */
    public void getDispatchRoutesByVehicleIdAsync(
                final String accessToken,
                final long vehicleId,
                final Long endTime,
                final Long duration,
                final APICallBack<List<DispatchRoute>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicle_id}/dispatch/routes");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicle_id", vehicleId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (endTime != null) {
                    _queryParameters.put("end_time", endTime);
                }
                if (duration != null) {
                    _queryParameters.put("duration", duration);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<DispatchRoute> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<DispatchRoute>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleIdOrExternalId    Required parameter: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
     * @param    data    Required parameter: Example: 
     * @return    Returns the FleetVehicleResponse response from the API call 
     */
    public FleetVehicleResponse patchFleetVehicle(
                final String accessToken,
                final String vehicleIdOrExternalId,
                final Data data
    ) throws Throwable {
        APICallBackCatcher<FleetVehicleResponse> callback = new APICallBackCatcher<FleetVehicleResponse>();
        patchFleetVehicleAsync(accessToken, vehicleIdOrExternalId, data, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleIdOrExternalId    Required parameter: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
     * @param    data    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void patchFleetVehicleAsync(
                final String accessToken,
                final String vehicleIdOrExternalId,
                final Data data,
                final APICallBack<FleetVehicleResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicle_id_or_external_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicle_id_or_external_id", vehicleIdOrExternalId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(data);
                    _request = getClientInstance().patchBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            FleetVehicleResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<FleetVehicleResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch the safety score for the vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @param    vehicleId    Required parameter: ID of the vehicle
     * @return    Returns the VehicleSafetyScoreResponse response from the API call 
     */
    public VehicleSafetyScoreResponse getVehicleSafetyScore(
                final String accessToken,
                final long startMs,
                final long endMs,
                final long vehicleId
    ) throws Throwable {
        APICallBackCatcher<VehicleSafetyScoreResponse> callback = new APICallBackCatcher<VehicleSafetyScoreResponse>();
        getVehicleSafetyScoreAsync(accessToken, startMs, endMs, vehicleId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch the safety score for the vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @param    vehicleId    Required parameter: ID of the vehicle
     * @return    Returns the void response from the API call 
     */
    public void getVehicleSafetyScoreAsync(
                final String accessToken,
                final long startMs,
                final long endMs,
                final long vehicleId,
                final APICallBack<VehicleSafetyScoreResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicleId}/safety/score");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicleId", vehicleId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            VehicleSafetyScoreResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<VehicleSafetyScoreResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch harsh event details for a vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    timestamp    Required parameter: Timestamp in milliseconds representing the timestamp of a harsh event.
     * @param    vehicleId    Required parameter: ID of the vehicle
     * @return    Returns the VehicleHarshEventResponse response from the API call 
     */
    public VehicleHarshEventResponse getVehicleHarshEvent(
                final String accessToken,
                final long timestamp,
                final long vehicleId
    ) throws Throwable {
        APICallBackCatcher<VehicleHarshEventResponse> callback = new APICallBackCatcher<VehicleHarshEventResponse>();
        getVehicleHarshEventAsync(accessToken, timestamp, vehicleId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch harsh event details for a vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    timestamp    Required parameter: Timestamp in milliseconds representing the timestamp of a harsh event.
     * @param    vehicleId    Required parameter: ID of the vehicle
     * @return    Returns the void response from the API call 
     */
    public void getVehicleHarshEventAsync(
                final String accessToken,
                final long timestamp,
                final long vehicleId,
                final APICallBack<VehicleHarshEventResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicleId}/safety/harsh_event");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicleId", vehicleId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("timestamp", timestamp);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            VehicleHarshEventResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<VehicleHarshEventResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)
     * @param    endMs    Required parameter: Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
     * @return    Returns the List<FleetVehiclesLocation> response from the API call 
     */
    public List<FleetVehiclesLocation> getVehiclesLocations(
                final String accessToken,
                final int startMs,
                final int endMs
    ) throws Throwable {
        APICallBackCatcher<List<FleetVehiclesLocation>> callback = new APICallBackCatcher<List<FleetVehiclesLocation>>();
        getVehiclesLocationsAsync(accessToken, startMs, endMs, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)
     * @param    endMs    Required parameter: Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
     * @return    Returns the void response from the API call 
     */
    public void getVehiclesLocationsAsync(
                final String accessToken,
                final int startMs,
                final int endMs,
                final APICallBack<List<FleetVehiclesLocation>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/locations");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<FleetVehiclesLocation> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<FleetVehiclesLocation>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get DVIRs for the org within provided time constraints
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    endMs    Required parameter: time in millis until the last dvir log.
     * @param    durationMs    Required parameter: time in millis which corresponds to the duration before the end_ms.
     * @param    groupId    Optional parameter: Group ID to query.
     * @return    Returns the DvirListResponse response from the API call 
     */
    public DvirListResponse getDvirs(
                final String accessToken,
                final int endMs,
                final int durationMs,
                final Integer groupId
    ) throws Throwable {
        APICallBackCatcher<DvirListResponse> callback = new APICallBackCatcher<DvirListResponse>();
        getDvirsAsync(accessToken, endMs, durationMs, groupId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get DVIRs for the org within provided time constraints
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    endMs    Required parameter: time in millis until the last dvir log.
     * @param    durationMs    Required parameter: time in millis which corresponds to the duration before the end_ms.
     * @param    groupId    Optional parameter: Group ID to query.
     * @return    Returns the void response from the API call 
     */
    public void getDvirsAsync(
                final String accessToken,
                final int endMs,
                final int durationMs,
                final Integer groupId,
                final APICallBack<DvirListResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/maintenance/dvirs");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("end_ms", endMs);
                _queryParameters.put("duration_ms", durationMs);
                if (groupId != null) {
                    _queryParameters.put("group_id", groupId);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DvirListResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DvirListResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Gets a specific vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleIdOrExternalId    Required parameter: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
     * @return    Returns the FleetVehicleResponse response from the API call 
     */
    public FleetVehicleResponse getFleetVehicle(
                final String accessToken,
                final String vehicleIdOrExternalId
    ) throws Throwable {
        APICallBackCatcher<FleetVehicleResponse> callback = new APICallBackCatcher<FleetVehicleResponse>();
        getFleetVehicleAsync(accessToken, vehicleIdOrExternalId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets a specific vehicle.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleIdOrExternalId    Required parameter: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
     * @return    Returns the void response from the API call 
     */
    public void getFleetVehicleAsync(
                final String accessToken,
                final String vehicleIdOrExternalId,
                final APICallBack<FleetVehicleResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/{vehicle_id_or_external_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("vehicle_id_or_external_id", vehicleIdOrExternalId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            FleetVehicleResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<FleetVehicleResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupParam    Required parameter: Group ID to query.
     * @param    startingAfter    Optional parameter: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
     * @param    endingBefore    Optional parameter: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
     * @param    limit    Optional parameter: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
     * @return    Returns the ListFleetResponse response from the API call 
     */
    public ListFleetResponse createListFleet(
                final String accessToken,
                final GroupParam groupParam,
                final String startingAfter,
                final String endingBefore,
                final Long limit
    ) throws Throwable {
        APICallBackCatcher<ListFleetResponse> callback = new APICallBackCatcher<ListFleetResponse>();
        createListFleetAsync(accessToken, groupParam, startingAfter, endingBefore, limit, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupParam    Required parameter: Group ID to query.
     * @param    startingAfter    Optional parameter: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
     * @param    endingBefore    Optional parameter: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
     * @param    limit    Optional parameter: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
     * @return    Returns the void response from the API call 
     */
    public void createListFleetAsync(
                final String accessToken,
                final GroupParam groupParam,
                final String startingAfter,
                final String endingBefore,
                final Long limit,
                final APICallBack<ListFleetResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/list");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (startingAfter != null) {
                    _queryParameters.put("startingAfter", startingAfter);
                }
                if (endingBefore != null) {
                    _queryParameters.put("endingBefore", endingBefore);
                }
                if (limit != null) {
                    _queryParameters.put("limit", limit);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(groupParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListFleetResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListFleetResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get summarized daily HOS charts for a specified driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver with HOS logs.
     * @param    hosLogsParam    Required parameter: Example: 
     * @return    Returns the DriverDailyLogResponse response from the API call 
     */
    public DriverDailyLogResponse createGetFleetDriversHosDailyLogs(
                final String accessToken,
                final long driverId,
                final HosLogsParam hosLogsParam
    ) throws Throwable {
        APICallBackCatcher<DriverDailyLogResponse> callback = new APICallBackCatcher<DriverDailyLogResponse>();
        createGetFleetDriversHosDailyLogsAsync(accessToken, driverId, hosLogsParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get summarized daily HOS charts for a specified driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver with HOS logs.
     * @param    hosLogsParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetDriversHosDailyLogsAsync(
                final String accessToken,
                final long driverId,
                final HosLogsParam hosLogsParam,
                final APICallBack<DriverDailyLogResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driver_id}/hos_daily_logs");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id", driverId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(hosLogsParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DriverDailyLogResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DriverDailyLogResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a driver document for the given driver.
     * @param    createDocumentParams    Required parameter: To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver for whom the document is created.
     * @return    Returns the Document response from the API call 
     */
    public Document createDriverDocument(
                final DocumentCreate createDocumentParams,
                final String accessToken,
                final long driverId
    ) throws Throwable {
        APICallBackCatcher<Document> callback = new APICallBackCatcher<Document>();
        createDriverDocumentAsync(createDocumentParams, accessToken, driverId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a driver document for the given driver.
     * @param    createDocumentParams    Required parameter: To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver for whom the document is created.
     * @return    Returns the void response from the API call 
     */
    public void createDriverDocumentAsync(
                final DocumentCreate createDocumentParams,
                final String accessToken,
                final long driverId,
                final APICallBack<Document> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driver_id}/documents");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id", driverId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(createDocumentParams);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Document _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Document>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new dispatch route for the driver with driver_id.
     * @param    createDispatchRouteParams    Required parameter: Example: 
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver with the associated routes.
     * @return    Returns the DispatchRoute response from the API call 
     */
    public DispatchRoute createDriverDispatchRoute(
                final DispatchRouteCreate createDispatchRouteParams,
                final String accessToken,
                final long driverId
    ) throws Throwable {
        APICallBackCatcher<DispatchRoute> callback = new APICallBackCatcher<DispatchRoute>();
        createDriverDispatchRouteAsync(createDispatchRouteParams, accessToken, driverId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new dispatch route for the driver with driver_id.
     * @param    createDispatchRouteParams    Required parameter: Example: 
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver with the associated routes.
     * @return    Returns the void response from the API call 
     */
    public void createDriverDispatchRouteAsync(
                final DispatchRouteCreate createDispatchRouteParams,
                final String accessToken,
                final long driverId,
                final APICallBack<DispatchRoute> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driver_id}/dispatch/routes");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id", driverId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(createDispatchRouteParams);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DispatchRoute _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DispatchRoute>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tripsParam    Required parameter: Group ID, vehicle ID and time range to query.
     * @return    Returns the TripResponse response from the API call 
     */
    public TripResponse createGetFleetTrips(
                final String accessToken,
                final TripsParam tripsParam
    ) throws Throwable {
        APICallBackCatcher<TripResponse> callback = new APICallBackCatcher<TripResponse>();
        createGetFleetTripsAsync(accessToken, tripsParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tripsParam    Required parameter: Group ID, vehicle ID and time range to query.
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetTripsAsync(
                final String accessToken,
                final TripsParam tripsParam,
                final APICallBack<TripResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/trips");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(tripsParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TripResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TripResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * This method enables the mutation of metadata for vehicles in the Samsara Cloud.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleUpdateParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateVehicles(
                final String accessToken,
                final VehicleUpdateParam vehicleUpdateParam
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        updateVehiclesAsync(accessToken, vehicleUpdateParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * This method enables the mutation of metadata for vehicles in the Samsara Cloud.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    vehicleUpdateParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateVehiclesAsync(
                final String accessToken,
                final VehicleUpdateParam vehicleUpdateParam,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/set_data");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(vehicleUpdateParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get list of the vehicles with any engine faults or check light data.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupParam    Required parameter: Group ID to query.
     * @return    Returns the GetFleetMaintenanceListResponse response from the API call 
     */
    public GetFleetMaintenanceListResponse createGetFleetMaintenanceList(
                final String accessToken,
                final GroupParam groupParam
    ) throws Throwable {
        APICallBackCatcher<GetFleetMaintenanceListResponse> callback = new APICallBackCatcher<GetFleetMaintenanceListResponse>();
        createGetFleetMaintenanceListAsync(accessToken, groupParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get list of the vehicles with any engine faults or check light data.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupParam    Required parameter: Group ID to query.
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetMaintenanceListAsync(
                final String accessToken,
                final GroupParam groupParam,
                final APICallBack<GetFleetMaintenanceListResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/maintenance/list");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(groupParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetFleetMaintenanceListResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetFleetMaintenanceListResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all of the dispatch routes for a given driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver with the associated routes.
     * @param    endTime    Optional parameter: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
     * @param    duration    Optional parameter: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
     * @return    Returns the List<DispatchRoute> response from the API call 
     */
    public List<DispatchRoute> getDispatchRoutesByDriverId(
                final String accessToken,
                final long driverId,
                final Long endTime,
                final Long duration
    ) throws Throwable {
        APICallBackCatcher<List<DispatchRoute>> callback = new APICallBackCatcher<List<DispatchRoute>>();
        getDispatchRoutesByDriverIdAsync(accessToken, driverId, endTime, duration, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the dispatch routes for a given driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverId    Required parameter: ID of the driver with the associated routes.
     * @param    endTime    Optional parameter: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
     * @param    duration    Optional parameter: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
     * @return    Returns the void response from the API call 
     */
    public void getDispatchRoutesByDriverIdAsync(
                final String accessToken,
                final long driverId,
                final Long endTime,
                final Long duration,
                final APICallBack<List<DispatchRoute>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driver_id}/dispatch/routes");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id", driverId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (endTime != null) {
                    _queryParameters.put("end_time", endTime);
                }
                if (duration != null) {
                    _queryParameters.put("duration", duration);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<DispatchRoute> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<DispatchRoute>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new dvir, marking a vehicle or trailer safe or unsafe.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    createDvirParam    Required parameter: DVIR creation body
     * @return    Returns the DvirBase response from the API call 
     */
    public DvirBase createDvir(
                final String accessToken,
                final CreateDvirParam createDvirParam
    ) throws Throwable {
        APICallBackCatcher<DvirBase> callback = new APICallBackCatcher<DvirBase>();
        createDvirAsync(accessToken, createDvirParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new dvir, marking a vehicle or trailer safe or unsafe.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    createDvirParam    Required parameter: DVIR creation body
     * @return    Returns the void response from the API call 
     */
    public void createDvirAsync(
                final String accessToken,
                final CreateDvirParam createDvirParam,
                final APICallBack<DvirBase> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/maintenance/dvirs");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(createDvirParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DvirBase _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DvirBase>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch the safety score for the driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @param    driverId    Required parameter: ID of the driver
     * @return    Returns the DriverSafetyScoreResponse response from the API call 
     */
    public DriverSafetyScoreResponse getDriverSafetyScore(
                final String accessToken,
                final long startMs,
                final long endMs,
                final long driverId
    ) throws Throwable {
        APICallBackCatcher<DriverSafetyScoreResponse> callback = new APICallBackCatcher<DriverSafetyScoreResponse>();
        getDriverSafetyScoreAsync(accessToken, startMs, endMs, driverId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch the safety score for the driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @param    driverId    Required parameter: ID of the driver
     * @return    Returns the void response from the API call 
     */
    public void getDriverSafetyScoreAsync(
                final String accessToken,
                final long startMs,
                final long endMs,
                final long driverId,
                final APICallBack<DriverSafetyScoreResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driverId}/safety/score");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driverId", driverId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DriverSafetyScoreResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DriverSafetyScoreResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupParam    Required parameter: Group ID to query.
     * @return    Returns the GetFleetLocationsResponse response from the API call 
     */
    public GetFleetLocationsResponse createGetFleetLocations(
                final String accessToken,
                final GroupParam groupParam
    ) throws Throwable {
        APICallBackCatcher<GetFleetLocationsResponse> callback = new APICallBackCatcher<GetFleetLocationsResponse>();
        createGetFleetLocationsAsync(accessToken, groupParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupParam    Required parameter: Group ID to query.
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetLocationsAsync(
                final String accessToken,
                final GroupParam groupParam,
                final APICallBack<GetFleetLocationsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/locations");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(groupParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetFleetLocationsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetFleetLocationsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get the current HOS status for all drivers in the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    hosLogsParam    Required parameter: Example: 
     * @return    Returns the HosLogsSummaryResponse response from the API call 
     */
    public HosLogsSummaryResponse createGetFleetHosLogsSummary(
                final String accessToken,
                final HosLogsParam2 hosLogsParam
    ) throws Throwable {
        APICallBackCatcher<HosLogsSummaryResponse> callback = new APICallBackCatcher<HosLogsSummaryResponse>();
        createGetFleetHosLogsSummaryAsync(accessToken, hosLogsParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get the current HOS status for all drivers in the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    hosLogsParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetHosLogsSummaryAsync(
                final String accessToken,
                final HosLogsParam2 hosLogsParam,
                final APICallBack<HosLogsSummaryResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/hos_logs_summary");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(hosLogsParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            HosLogsSummaryResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<HosLogsSummaryResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    hosLogsParam    Required parameter: Example: 
     * @return    Returns the HosLogsResponse response from the API call 
     */
    public HosLogsResponse createGetFleetHosLogs(
                final String accessToken,
                final HosLogsParam hosLogsParam
    ) throws Throwable {
        APICallBackCatcher<HosLogsResponse> callback = new APICallBackCatcher<HosLogsResponse>();
        createGetFleetHosLogsAsync(accessToken, hosLogsParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    hosLogsParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetHosLogsAsync(
                final String accessToken,
                final HosLogsParam hosLogsParam,
                final APICallBack<HosLogsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/hos_logs");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(hosLogsParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            HosLogsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<HosLogsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    hosAuthenticationLogsParam    Required parameter: Example: 
     * @return    Returns the HosAuthenticationLogsResponse response from the API call 
     */
    public HosAuthenticationLogsResponse createGetFleetHosAuthenticationLogs(
                final String accessToken,
                final HosAuthenticationLogsParam hosAuthenticationLogsParam
    ) throws Throwable {
        APICallBackCatcher<HosAuthenticationLogsResponse> callback = new APICallBackCatcher<HosAuthenticationLogsResponse>();
        createGetFleetHosAuthenticationLogsAsync(accessToken, hosAuthenticationLogsParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    hosAuthenticationLogsParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetHosAuthenticationLogsAsync(
                final String accessToken,
                final HosAuthenticationLogsParam hosAuthenticationLogsParam,
                final APICallBack<HosAuthenticationLogsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/hos_authentication_logs");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(hosAuthenticationLogsParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            HosAuthenticationLogsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<HosAuthenticationLogsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get the distance and time each driver in an organization has driven in a given time period.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driversSummaryParam    Required parameter: Org ID and time range to query.
     * @param    snapToDayBounds    Optional parameter: Snap query result to HOS day boundaries.
     * @return    Returns the DriversSummaryResponse response from the API call 
     */
    public DriversSummaryResponse createGetFleetDriversSummary(
                final String accessToken,
                final DriversSummaryParam driversSummaryParam,
                final Boolean snapToDayBounds
    ) throws Throwable {
        APICallBackCatcher<DriversSummaryResponse> callback = new APICallBackCatcher<DriversSummaryResponse>();
        createGetFleetDriversSummaryAsync(accessToken, driversSummaryParam, snapToDayBounds, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get the distance and time each driver in an organization has driven in a given time period.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driversSummaryParam    Required parameter: Org ID and time range to query.
     * @param    snapToDayBounds    Optional parameter: Snap query result to HOS day boundaries.
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetDriversSummaryAsync(
                final String accessToken,
                final DriversSummaryParam driversSummaryParam,
                final Boolean snapToDayBounds,
                final APICallBack<DriversSummaryResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/summary");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (snapToDayBounds != null) {
                    _queryParameters.put("snap_to_day_bounds", snapToDayBounds);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(driversSummaryParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DriversSummaryResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DriversSummaryResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Time in Unix epoch milliseconds for the start of the query.
     * @param    endMs    Required parameter: Time in Unix epoch milliseconds for the end of the query.
     * @param    series    Optional parameter: Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series=engineState,auxInput2
     * @param    tagIds    Optional parameter: Comma-separated list of tag ids. Example: tagIds=1,2,3
     * @param    startingAfter    Optional parameter: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
     * @param    endingBefore    Optional parameter: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
     * @param    limit    Optional parameter: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
     * @return    Returns the GetVehicleStatsResponse response from the API call 
     */
    public GetVehicleStatsResponse getVehicleStats(
                final String accessToken,
                final int startMs,
                final int endMs,
                final SeriesEnum series,
                final String tagIds,
                final String startingAfter,
                final String endingBefore,
                final Long limit
    ) throws Throwable {
        APICallBackCatcher<GetVehicleStatsResponse> callback = new APICallBackCatcher<GetVehicleStatsResponse>();
        getVehicleStatsAsync(accessToken, startMs, endMs, series, tagIds, startingAfter, endingBefore, limit, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    startMs    Required parameter: Time in Unix epoch milliseconds for the start of the query.
     * @param    endMs    Required parameter: Time in Unix epoch milliseconds for the end of the query.
     * @param    series    Optional parameter: Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series=engineState,auxInput2
     * @param    tagIds    Optional parameter: Comma-separated list of tag ids. Example: tagIds=1,2,3
     * @param    startingAfter    Optional parameter: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
     * @param    endingBefore    Optional parameter: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
     * @param    limit    Optional parameter: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
     * @return    Returns the void response from the API call 
     */
    public void getVehicleStatsAsync(
                final String accessToken,
                final int startMs,
                final int endMs,
                final SeriesEnum series,
                final String tagIds,
                final String startingAfter,
                final String endingBefore,
                final Long limit,
                final APICallBack<GetVehicleStatsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/vehicles/stats");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                if (series != null) {
                    _queryParameters.put("series", (series != null) ? series.value() : null);
                }
                if (tagIds != null) {
                    _queryParameters.put("tagIds", tagIds);
                }
                if (startingAfter != null) {
                    _queryParameters.put("startingAfter", startingAfter);
                }
                if (endingBefore != null) {
                    _queryParameters.put("endingBefore", endingBefore);
                }
                if (limit != null) {
                    _queryParameters.put("limit", limit);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetVehicleStatsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetVehicleStatsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Reactivate the inactive driver having id.
     * @param    reactivateDriverParam    Required parameter: Driver reactivation body
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the Driver response from the API call 
     */
    public Driver updateReactivateDriverById(
                final ReactivateDriverParam reactivateDriverParam,
                final String accessToken,
                final String driverIdOrExternalId
    ) throws Throwable {
        APICallBackCatcher<Driver> callback = new APICallBackCatcher<Driver>();
        updateReactivateDriverByIdAsync(reactivateDriverParam, accessToken, driverIdOrExternalId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Reactivate the inactive driver having id.
     * @param    reactivateDriverParam    Required parameter: Driver reactivation body
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the void response from the API call 
     */
    public void updateReactivateDriverByIdAsync(
                final ReactivateDriverParam reactivateDriverParam,
                final String accessToken,
                final String driverIdOrExternalId,
                final APICallBack<Driver> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/inactive/{driver_id_or_external_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id_or_external_id", driverIdOrExternalId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(reactivateDriverParam);
                    _request = getClientInstance().putBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Driver _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Driver>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all of the documents.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    endMs    Optional parameter: Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
     * @param    durationMs    Optional parameter: Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
     * @return    Returns the List<Document> response from the API call 
     */
    public List<Document> getDriverDocumentsByOrgId(
                final String accessToken,
                final Long endMs,
                final Long durationMs
    ) throws Throwable {
        APICallBackCatcher<List<Document>> callback = new APICallBackCatcher<List<Document>>();
        getDriverDocumentsByOrgIdAsync(accessToken, endMs, durationMs, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the documents.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    endMs    Optional parameter: Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
     * @param    durationMs    Optional parameter: Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
     * @return    Returns the void response from the API call 
     */
    public void getDriverDocumentsByOrgIdAsync(
                final String accessToken,
                final Long endMs,
                final Long durationMs,
                final APICallBack<List<Document>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/documents");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (endMs != null) {
                    _queryParameters.put("endMs", endMs);
                }
                if (durationMs != null) {
                    _queryParameters.put("durationMs", durationMs);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<Document> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Document>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Deactivate a driver with the given id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the void response from the API call 
     */
    public void deleteDeactivateDriver(
                final String accessToken,
                final String driverIdOrExternalId
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deleteDeactivateDriverAsync(accessToken, driverIdOrExternalId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Deactivate a driver with the given id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the void response from the API call 
     */
    public void deleteDeactivateDriverAsync(
                final String accessToken,
                final String driverIdOrExternalId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driver_id_or_external_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id_or_external_id", driverIdOrExternalId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch the history of a dispatch route.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the route with history.
     * @param    startTime    Optional parameter: Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
     * @param    endTime    Optional parameter: Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
     * @return    Returns the DispatchRouteHistory response from the API call 
     */
    public DispatchRouteHistory getDispatchRouteHistory(
                final String accessToken,
                final long routeId,
                final Long startTime,
                final Long endTime
    ) throws Throwable {
        APICallBackCatcher<DispatchRouteHistory> callback = new APICallBackCatcher<DispatchRouteHistory>();
        getDispatchRouteHistoryAsync(accessToken, routeId, startTime, endTime, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch the history of a dispatch route.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the route with history.
     * @param    startTime    Optional parameter: Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
     * @param    endTime    Optional parameter: Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
     * @return    Returns the void response from the API call 
     */
    public void getDispatchRouteHistoryAsync(
                final String accessToken,
                final long routeId,
                final Long startTime,
                final Long endTime,
                final APICallBack<DispatchRouteHistory> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes/{route_id}/history");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("route_id", routeId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (startTime != null) {
                    _queryParameters.put("start_time", startTime);
                }
                if (endTime != null) {
                    _queryParameters.put("end_time", endTime);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DispatchRouteHistory _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DispatchRouteHistory>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update a dispatch route and its associated jobs.
     * @param    updateDispatchRouteParams    Required parameter: Example: 
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the dispatch route.
     * @return    Returns the DispatchRoute response from the API call 
     */
    public DispatchRoute updateDispatchRouteById(
                final DispatchRoute updateDispatchRouteParams,
                final String accessToken,
                final long routeId
    ) throws Throwable {
        APICallBackCatcher<DispatchRoute> callback = new APICallBackCatcher<DispatchRoute>();
        updateDispatchRouteByIdAsync(updateDispatchRouteParams, accessToken, routeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update a dispatch route and its associated jobs.
     * @param    updateDispatchRouteParams    Required parameter: Example: 
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the dispatch route.
     * @return    Returns the void response from the API call 
     */
    public void updateDispatchRouteByIdAsync(
                final DispatchRoute updateDispatchRouteParams,
                final String accessToken,
                final long routeId,
                final APICallBack<DispatchRoute> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes/{route_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("route_id", routeId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(updateDispatchRouteParams);
                    _request = getClientInstance().putBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DispatchRoute _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DispatchRoute>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @param    sequenceId    Optional parameter: Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
     * @param    include    Optional parameter: Optionally set include=route to include route object in response payload.
     * @return    Returns the AllRouteJobUpdates response from the API call 
     */
    public AllRouteJobUpdates fetchAllRouteJobUpdates(
                final String accessToken,
                final Long groupId,
                final String sequenceId,
                final String include
    ) throws Throwable {
        APICallBackCatcher<AllRouteJobUpdates> callback = new APICallBackCatcher<AllRouteJobUpdates>();
        fetchAllRouteJobUpdatesAsync(accessToken, groupId, sequenceId, include, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @param    sequenceId    Optional parameter: Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
     * @param    include    Optional parameter: Optionally set include=route to include route object in response payload.
     * @return    Returns the void response from the API call 
     */
    public void fetchAllRouteJobUpdatesAsync(
                final String accessToken,
                final Long groupId,
                final String sequenceId,
                final String include,
                final APICallBack<AllRouteJobUpdates> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes/job_updates");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (groupId != null) {
                    _queryParameters.put("group_id", groupId);
                }
                if (sequenceId != null) {
                    _queryParameters.put("sequence_id", sequenceId);
                }
                if (include != null) {
                    _queryParameters.put("include", include);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            AllRouteJobUpdates _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<AllRouteJobUpdates>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all of the dispatch routes for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @param    endTime    Optional parameter: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
     * @param    duration    Optional parameter: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
     * @return    Returns the List<DispatchRoute> response from the API call 
     */
    public List<DispatchRoute> fetchAllDispatchRoutes(
                final String accessToken,
                final Long groupId,
                final Long endTime,
                final Long duration
    ) throws Throwable {
        APICallBackCatcher<List<DispatchRoute>> callback = new APICallBackCatcher<List<DispatchRoute>>();
        fetchAllDispatchRoutesAsync(accessToken, groupId, endTime, duration, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the dispatch routes for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @param    endTime    Optional parameter: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
     * @param    duration    Optional parameter: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
     * @return    Returns the void response from the API call 
     */
    public void fetchAllDispatchRoutesAsync(
                final String accessToken,
                final Long groupId,
                final Long endTime,
                final Long duration,
                final APICallBack<List<DispatchRoute>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (groupId != null) {
                    _queryParameters.put("group_id", groupId);
                }
                if (endTime != null) {
                    _queryParameters.put("end_time", endTime);
                }
                if (duration != null) {
                    _queryParameters.put("duration", duration);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<DispatchRoute> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<DispatchRoute>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch the reefer-specific stats of an asset.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    assetId    Required parameter: ID of the asset
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @return    Returns the AssetReeferResponse response from the API call 
     */
    public AssetReeferResponse getAssetReefer(
                final String accessToken,
                final long assetId,
                final long startMs,
                final long endMs
    ) throws Throwable {
        APICallBackCatcher<AssetReeferResponse> callback = new APICallBackCatcher<AssetReeferResponse>();
        getAssetReeferAsync(accessToken, assetId, startMs, endMs, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch the reefer-specific stats of an asset.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    assetId    Required parameter: ID of the asset
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @return    Returns the void response from the API call 
     */
    public void getAssetReeferAsync(
                final String accessToken,
                final long assetId,
                final long startMs,
                final long endMs,
                final APICallBack<AssetReeferResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/assets/{asset_id}/reefer");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("asset_id", assetId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            AssetReeferResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<AssetReeferResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch the historical locations for the asset.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    assetId    Required parameter: ID of the asset
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @return    Returns the List<AssetLocationResponse> response from the API call 
     */
    public List<AssetLocationResponse> getAssetLocation(
                final String accessToken,
                final long assetId,
                final long startMs,
                final long endMs
    ) throws Throwable {
        APICallBackCatcher<List<AssetLocationResponse>> callback = new APICallBackCatcher<List<AssetLocationResponse>>();
        getAssetLocationAsync(accessToken, assetId, startMs, endMs, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch the historical locations for the asset.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    assetId    Required parameter: ID of the asset
     * @param    startMs    Required parameter: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @param    endMs    Required parameter: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @return    Returns the void response from the API call 
     */
    public void getAssetLocationAsync(
                final String accessToken,
                final long assetId,
                final long startMs,
                final long endMs,
                final APICallBack<List<AssetLocationResponse>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/assets/{asset_id}/locations");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("asset_id", assetId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("startMs", startMs);
                _queryParameters.put("endMs", endMs);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<AssetLocationResponse> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<AssetLocationResponse>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch driver by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the Driver response from the API call 
     */
    public Driver getDriverById(
                final String accessToken,
                final String driverIdOrExternalId
    ) throws Throwable {
        APICallBackCatcher<Driver> callback = new APICallBackCatcher<Driver>();
        getDriverByIdAsync(accessToken, driverIdOrExternalId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch driver by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the void response from the API call 
     */
    public void getDriverByIdAsync(
                final String accessToken,
                final String driverIdOrExternalId,
                final APICallBack<Driver> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/{driver_id_or_external_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id_or_external_id", driverIdOrExternalId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Driver _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Driver>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch deactivated driver by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the Driver response from the API call 
     */
    public Driver getDeactivatedDriverById(
                final String accessToken,
                final String driverIdOrExternalId
    ) throws Throwable {
        APICallBackCatcher<Driver> callback = new APICallBackCatcher<Driver>();
        getDeactivatedDriverByIdAsync(accessToken, driverIdOrExternalId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch deactivated driver by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    driverIdOrExternalId    Required parameter: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
     * @return    Returns the void response from the API call 
     */
    public void getDeactivatedDriverByIdAsync(
                final String accessToken,
                final String driverIdOrExternalId,
                final APICallBack<Driver> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/inactive/{driver_id_or_external_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("driver_id_or_external_id", driverIdOrExternalId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Driver _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Driver>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all deactivated drivers for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @return    Returns the List<Driver> response from the API call 
     */
    public List<Driver> getAllDeactivatedDrivers(
                final String accessToken,
                final Long groupId
    ) throws Throwable {
        APICallBackCatcher<List<Driver>> callback = new APICallBackCatcher<List<Driver>>();
        getAllDeactivatedDriversAsync(accessToken, groupId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all deactivated drivers for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @return    Returns the void response from the API call 
     */
    public void getAllDeactivatedDriversAsync(
                final String accessToken,
                final Long groupId,
                final APICallBack<List<Driver>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/inactive");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (groupId != null) {
                    _queryParameters.put("group_id", groupId);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<Driver> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Driver>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    createDriverParam    Required parameter: Driver creation body
     * @return    Returns the Driver response from the API call 
     */
    public Driver createDriver(
                final String accessToken,
                final DriverForCreate createDriverParam
    ) throws Throwable {
        APICallBackCatcher<Driver> callback = new APICallBackCatcher<Driver>();
        createDriverAsync(accessToken, createDriverParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new driver.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    createDriverParam    Required parameter: Driver creation body
     * @return    Returns the void response from the API call 
     */
    public void createDriverAsync(
                final String accessToken,
                final DriverForCreate createDriverParam,
                final APICallBack<Driver> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers/create");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(createDriverParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Driver _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Driver>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get all the drivers for the specified group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupDriversParam    Required parameter: Example: 
     * @return    Returns the DriversResponse response from the API call 
     */
    public DriversResponse createGetFleetDrivers(
                final String accessToken,
                final GroupDriversParam groupDriversParam
    ) throws Throwable {
        APICallBackCatcher<DriversResponse> callback = new APICallBackCatcher<DriversResponse>();
        createGetFleetDriversAsync(accessToken, groupDriversParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get all the drivers for the specified group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupDriversParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGetFleetDriversAsync(
                final String accessToken,
                final GroupDriversParam groupDriversParam,
                final APICallBack<DriversResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/drivers");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(groupDriversParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DriversResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DriversResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Delete a dispatch route and its associated jobs.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the dispatch route.
     * @return    Returns the void response from the API call 
     */
    public void deleteDispatchRouteById(
                final String accessToken,
                final long routeId
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deleteDispatchRouteByIdAsync(accessToken, routeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Delete a dispatch route and its associated jobs.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the dispatch route.
     * @return    Returns the void response from the API call 
     */
    public void deleteDispatchRouteByIdAsync(
                final String accessToken,
                final long routeId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes/{route_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("route_id", routeId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch a dispatch route by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the dispatch route.
     * @return    Returns the DispatchRoute response from the API call 
     */
    public DispatchRoute getDispatchRouteById(
                final String accessToken,
                final long routeId
    ) throws Throwable {
        APICallBackCatcher<DispatchRoute> callback = new APICallBackCatcher<DispatchRoute>();
        getDispatchRouteByIdAsync(accessToken, routeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch a dispatch route by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    routeId    Required parameter: ID of the dispatch route.
     * @return    Returns the void response from the API call 
     */
    public void getDispatchRouteByIdAsync(
                final String accessToken,
                final long routeId,
                final APICallBack<DispatchRoute> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes/{route_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("route_id", routeId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DispatchRoute _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DispatchRoute>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new dispatch route.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    createDispatchRouteParams    Required parameter: Example: 
     * @return    Returns the DispatchRoute response from the API call 
     */
    public DispatchRoute createDispatchRoute(
                final String accessToken,
                final DispatchRouteCreate createDispatchRouteParams
    ) throws Throwable {
        APICallBackCatcher<DispatchRoute> callback = new APICallBackCatcher<DispatchRoute>();
        createDispatchRouteAsync(accessToken, createDispatchRouteParams, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new dispatch route.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    createDispatchRouteParams    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createDispatchRouteAsync(
                final String accessToken,
                final DispatchRouteCreate createDispatchRouteParams,
                final APICallBack<DispatchRoute> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/dispatch/routes");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(createDispatchRouteParams);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DispatchRoute _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DispatchRoute>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch current locations of all assets for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the GetAllAssetCurrentLocationsResponse response from the API call 
     */
    public GetAllAssetCurrentLocationsResponse getAllAssetCurrentLocations(
                final String accessToken
    ) throws Throwable {
        APICallBackCatcher<GetAllAssetCurrentLocationsResponse> callback = new APICallBackCatcher<GetAllAssetCurrentLocationsResponse>();
        getAllAssetCurrentLocationsAsync(accessToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch current locations of all assets for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the void response from the API call 
     */
    public void getAllAssetCurrentLocationsAsync(
                final String accessToken,
                final APICallBack<GetAllAssetCurrentLocationsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/assets/locations");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetAllAssetCurrentLocationsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetAllAssetCurrentLocationsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all of the assets for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the GetAllAssetsResponse response from the API call 
     */
    public GetAllAssetsResponse getAllAssets(
                final String accessToken
    ) throws Throwable {
        APICallBackCatcher<GetAllAssetsResponse> callback = new APICallBackCatcher<GetAllAssetsResponse>();
        getAllAssetsAsync(accessToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the assets for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the void response from the API call 
     */
    public void getAllAssetsAsync(
                final String accessToken,
                final APICallBack<GetAllAssetsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/assets");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetAllAssetsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetAllAssetsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * This method adds an address book entry to the specified group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addressParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void addFleetAddress(
                final String accessToken,
                final AddressParam addressParam
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        addFleetAddressAsync(accessToken, addressParam, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * This method adds an address book entry to the specified group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addressParam    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void addFleetAddressAsync(
                final String accessToken,
                final AddressParam addressParam,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/fleet/add_address");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(addressParam);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch a contact by its id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    contactId    Required parameter: ID of the contact
     * @return    Returns the Contact response from the API call 
     */
    public Contact getOrganizationContact(
                final String accessToken,
                final long contactId
    ) throws Throwable {
        APICallBackCatcher<Contact> callback = new APICallBackCatcher<Contact>();
        getOrganizationContactAsync(accessToken, contactId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch a contact by its id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    contactId    Required parameter: ID of the contact
     * @return    Returns the void response from the API call 
     */
    public void getOrganizationContactAsync(
                final String accessToken,
                final long contactId,
                final APICallBack<Contact> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/contacts/{contact_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("contact_id", contactId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Contact _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Contact>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all contacts for the organization.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the List<Contact> response from the API call 
     */
    public List<Contact> listContacts(
                final String accessToken
    ) throws Throwable {
        APICallBackCatcher<List<Contact>> callback = new APICallBackCatcher<List<Contact>>();
        listContactsAsync(accessToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all contacts for the organization.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the void response from the API call 
     */
    public void listContactsAsync(
                final String accessToken,
                final APICallBack<List<Contact>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/contacts");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<Contact> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Contact>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Delete an address.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addressId    Required parameter: ID of the address/geofence
     * @return    Returns the void response from the API call 
     */
    public void deleteOrganizationAddress(
                final String accessToken,
                final long addressId
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deleteOrganizationAddressAsync(accessToken, addressId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Delete an address.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addressId    Required parameter: ID of the address/geofence
     * @return    Returns the void response from the API call 
     */
    public void deleteOrganizationAddressAsync(
                final String accessToken,
                final long addressId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/addresses/{addressId}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("addressId", addressId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch an address by its id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addressId    Required parameter: ID of the address/geofence
     * @return    Returns the Address response from the API call 
     */
    public Address getOrganizationAddress(
                final String accessToken,
                final long addressId
    ) throws Throwable {
        APICallBackCatcher<Address> callback = new APICallBackCatcher<Address>();
        getOrganizationAddressAsync(accessToken, addressId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch an address by its id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addressId    Required parameter: ID of the address/geofence
     * @return    Returns the void response from the API call 
     */
    public void getOrganizationAddressAsync(
                final String accessToken,
                final long addressId,
                final APICallBack<Address> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/addresses/{addressId}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("addressId", addressId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Address _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Address>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    address    Required parameter: Update parts of an address's value. If the geofence 'circle' or 'polygon' key is specified, the update will change the type of geofence accordingly.
     * @param    addressId    Required parameter: ID of the address/geofence
     * @return    Returns the void response from the API call 
     */
    public void updateOrganizationAddress(
                final String accessToken,
                final Address1 address,
                final long addressId
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        updateOrganizationAddressAsync(accessToken, address, addressId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    address    Required parameter: Update parts of an address's value. If the geofence 'circle' or 'polygon' key is specified, the update will change the type of geofence accordingly.
     * @param    addressId    Required parameter: ID of the address/geofence
     * @return    Returns the void response from the API call 
     */
    public void updateOrganizationAddressAsync(
                final String accessToken,
                final Address1 address,
                final long addressId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/addresses/{addressId}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("addressId", addressId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(address);
                    _request = getClientInstance().patchBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the List<Address> response from the API call 
     */
    public List<Address> getOrganizationAddresses(
                final String accessToken
    ) throws Throwable {
        APICallBackCatcher<List<Address>> callback = new APICallBackCatcher<List<Address>>();
        getOrganizationAddressesAsync(accessToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @return    Returns the void response from the API call 
     */
    public void getOrganizationAddressesAsync(
                final String accessToken,
                final APICallBack<List<Address>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/addresses");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<Address> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Address>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Add one or more addresses to the organization
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addresses    Required parameter: List of addresses/geofences to add. Geofences can be circular or a polygon.  For each address, only one of 'circle' or 'polygon' should be provided. If both are provided, the geofence will be saved as a polygon.
     * @return    Returns the List<Address> response from the API call 
     */
    public List<Address> addOrganizationAddresses(
                final String accessToken,
                final Addresses addresses
    ) throws Throwable {
        APICallBackCatcher<List<Address>> callback = new APICallBackCatcher<List<Address>>();
        addOrganizationAddressesAsync(accessToken, addresses, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Add one or more addresses to the organization
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    addresses    Required parameter: List of addresses/geofences to add. Geofences can be circular or a polygon.  For each address, only one of 'circle' or 'polygon' should be provided. If both are provided, the geofence will be saved as a polygon.
     * @return    Returns the void response from the API call 
     */
    public void addOrganizationAddressesAsync(
                final String accessToken,
                final Addresses addresses,
                final APICallBack<List<Address>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/addresses");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(addresses);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<Address> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Address>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}