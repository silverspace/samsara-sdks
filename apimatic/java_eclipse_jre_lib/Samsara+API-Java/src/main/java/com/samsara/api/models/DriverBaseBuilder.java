/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class DriverBaseBuilder {
    //the instance to build
    private DriverBase driverBase;

    /**
     * Default constructor to initialize the instance
     */
    public DriverBaseBuilder() {
        driverBase = new DriverBase();
    }

    /**
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     */
    public DriverBaseBuilder eldAdverseWeatherExemptionEnabled(Boolean eldAdverseWeatherExemptionEnabled) {
        driverBase.setEldAdverseWeatherExemptionEnabled(eldAdverseWeatherExemptionEnabled);
        return this;
    }

    /**
     * Flag indicating this driver may use Big Day excemptions in ELD logs.
     */
    public DriverBaseBuilder eldBigDayExemptionEnabled(Boolean eldBigDayExemptionEnabled) {
        driverBase.setEldBigDayExemptionEnabled(eldBigDayExemptionEnabled);
        return this;
    }

    /**
     * 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
     */
    public DriverBaseBuilder eldDayStartHour(Integer eldDayStartHour) {
        driverBase.setEldDayStartHour(eldDayStartHour);
        return this;
    }

    /**
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     */
    public DriverBaseBuilder eldExempt(Boolean eldExempt) {
        driverBase.setEldExempt(eldExempt);
        return this;
    }

    /**
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     */
    public DriverBaseBuilder eldExemptReason(String eldExemptReason) {
        driverBase.setEldExemptReason(eldExemptReason);
        return this;
    }

    /**
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     */
    public DriverBaseBuilder eldPcEnabled(Boolean eldPcEnabled) {
        driverBase.setEldPcEnabled(eldPcEnabled);
        return this;
    }

    /**
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     */
    public DriverBaseBuilder eldYmEnabled(Boolean eldYmEnabled) {
        driverBase.setEldYmEnabled(eldYmEnabled);
        return this;
    }

    /**
     * Dictionary of external IDs (string key-value pairs)
     */
    public DriverBaseBuilder externalIds(LinkedHashMap<String, String> externalIds) {
        driverBase.setExternalIds(externalIds);
        return this;
    }

    /**
     * ID of the group if the organization has multiple groups (uncommon).
     */
    public DriverBaseBuilder groupId(Long groupId) {
        driverBase.setGroupId(groupId);
        return this;
    }

    /**
     * Driver's state issued license number.
     */
    public DriverBaseBuilder licenseNumber(String licenseNumber) {
        driverBase.setLicenseNumber(licenseNumber);
        return this;
    }

    /**
     * Abbreviation of state that issued driver's license.
     */
    public DriverBaseBuilder licenseState(String licenseState) {
        driverBase.setLicenseState(licenseState);
        return this;
    }

    /**
     * Driver's name.
     */
    public DriverBaseBuilder name(String name) {
        driverBase.setName(name);
        return this;
    }

    /**
     * Notes about the driver.
     */
    public DriverBaseBuilder notes(String notes) {
        driverBase.setNotes(notes);
        return this;
    }

    /**
     * Driver's phone number. Please include only digits, ex. 4157771234
     */
    public DriverBaseBuilder phone(String phone) {
        driverBase.setPhone(phone);
        return this;
    }

    /**
     * Driver's login username into the driver app.
     */
    public DriverBaseBuilder username(String username) {
        driverBase.setUsername(username);
        return this;
    }

    /**
     * ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
     */
    public DriverBaseBuilder vehicleId(Long vehicleId) {
        driverBase.setVehicleId(vehicleId);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public DriverBase build() {
        return driverBase;
    }
}