/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class DispatchRouteCreateBuilder {
    //the instance to build
    private DispatchRouteCreate dispatchRouteCreate;

    /**
     * Default constructor to initialize the instance
     */
    public DispatchRouteCreateBuilder() {
        dispatchRouteCreate = new DispatchRouteCreate();
    }

    /**
     * The dispatch jobs to create for this route.
     */
    public DispatchRouteCreateBuilder dispatchJobs(List<DispatchJobCreate> dispatchJobs) {
        dispatchRouteCreate.setDispatchJobs(dispatchJobs);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     */
    public DispatchRouteCreateBuilder actualEndMs(Long actualEndMs) {
        dispatchRouteCreate.setActualEndMs(actualEndMs);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the route actually started.
     */
    public DispatchRouteCreateBuilder actualStartMs(Long actualStartMs) {
        dispatchRouteCreate.setActualStartMs(actualStartMs);
        return this;
    }

    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     */
    public DispatchRouteCreateBuilder driverId(Long driverId) {
        dispatchRouteCreate.setDriverId(driverId);
        return this;
    }

    /**
     * ID of the group if the organization has multiple groups (optional).
     */
    public DispatchRouteCreateBuilder groupId(Long groupId) {
        dispatchRouteCreate.setGroupId(groupId);
        return this;
    }

    /**
     * Descriptive name of this route.
     */
    public DispatchRouteCreateBuilder name(String name) {
        dispatchRouteCreate.setName(name);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     */
    public DispatchRouteCreateBuilder scheduledEndMs(long scheduledEndMs) {
        dispatchRouteCreate.setScheduledEndMs(scheduledEndMs);
        return this;
    }

    /**
     * The distance expected to be traveled for this route in meters.
     */
    public DispatchRouteCreateBuilder scheduledMeters(Long scheduledMeters) {
        dispatchRouteCreate.setScheduledMeters(scheduledMeters);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     */
    public DispatchRouteCreateBuilder scheduledStartMs(long scheduledStartMs) {
        dispatchRouteCreate.setScheduledStartMs(scheduledStartMs);
        return this;
    }

    /**
     * The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
     */
    public DispatchRouteCreateBuilder startLocationAddress(String startLocationAddress) {
        dispatchRouteCreate.setStartLocationAddress(startLocationAddress);
        return this;
    }

    /**
     * ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
     */
    public DispatchRouteCreateBuilder startLocationAddressId(Long startLocationAddressId) {
        dispatchRouteCreate.setStartLocationAddressId(startLocationAddressId);
        return this;
    }

    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     */
    public DispatchRouteCreateBuilder startLocationLat(Double startLocationLat) {
        dispatchRouteCreate.setStartLocationLat(startLocationLat);
        return this;
    }

    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     */
    public DispatchRouteCreateBuilder startLocationLng(Double startLocationLng) {
        dispatchRouteCreate.setStartLocationLng(startLocationLng);
        return this;
    }

    /**
     * The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
     */
    public DispatchRouteCreateBuilder startLocationName(String startLocationName) {
        dispatchRouteCreate.setStartLocationName(startLocationName);
        return this;
    }

    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
     */
    public DispatchRouteCreateBuilder trailerId(Long trailerId) {
        dispatchRouteCreate.setTrailerId(trailerId);
        return this;
    }

    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     */
    public DispatchRouteCreateBuilder vehicleId(Long vehicleId) {
        dispatchRouteCreate.setVehicleId(vehicleId);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public DispatchRouteCreate build() {
        return dispatchRouteCreate;
    }
}