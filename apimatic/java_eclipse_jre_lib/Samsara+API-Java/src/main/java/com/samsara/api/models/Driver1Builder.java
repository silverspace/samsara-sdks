/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class Driver1Builder {
    //the instance to build
    private Driver1 driver1;

    /**
     * Default constructor to initialize the instance
     */
    public Driver1Builder() {
        driver1 = new Driver1();
    }

    /**
     * The amount of remaining cycle time (in ms).
     */
    public Driver1Builder cycleRemaining(Long cycleRemaining) {
        driver1.setCycleRemaining(cycleRemaining);
        return this;
    }

    /**
     * The amount of cycle time (in ms) available tomorrow.
     */
    public Driver1Builder cycleTomorrow(Long cycleTomorrow) {
        driver1.setCycleTomorrow(cycleTomorrow);
        return this;
    }

    /**
     * ID of the driver.
     */
    public Driver1Builder driverId(Long driverId) {
        driver1.setDriverId(driverId);
        return this;
    }

    /**
     * Name of the driver.
     */
    public Driver1Builder driverName(String driverName) {
        driver1.setDriverName(driverName);
        return this;
    }

    /**
     * The amount of driving time in violation in this cycle (in ms).
     */
    public Driver1Builder drivingInViolationCycle(Long drivingInViolationCycle) {
        driver1.setDrivingInViolationCycle(drivingInViolationCycle);
        return this;
    }

    /**
     * The amount of driving time in violation today (in ms).
     */
    public Driver1Builder drivingInViolationToday(Long drivingInViolationToday) {
        driver1.setDrivingInViolationToday(drivingInViolationToday);
        return this;
    }

    /**
     * The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
     */
    public Driver1Builder dutyStatus(String dutyStatus) {
        driver1.setDutyStatus(dutyStatus);
        return this;
    }

    /**
     * The amount of remaining shift drive time (in ms).
     */
    public Driver1Builder shiftDriveRemaining(Long shiftDriveRemaining) {
        driver1.setShiftDriveRemaining(shiftDriveRemaining);
        return this;
    }

    /**
     * The amount of remaining shift time (in ms).
     */
    public Driver1Builder shiftRemaining(Long shiftRemaining) {
        driver1.setShiftRemaining(shiftRemaining);
        return this;
    }

    /**
     * The amount of time (in ms) that the driver has been in the current `dutyStatus`.
     */
    public Driver1Builder timeInCurrentStatus(Long timeInCurrentStatus) {
        driver1.setTimeInCurrentStatus(timeInCurrentStatus);
        return this;
    }

    /**
     * The amount of time (in ms) remaining until the driver cannot drive without a rest break.
     */
    public Driver1Builder timeUntilBreak(Long timeUntilBreak) {
        driver1.setTimeUntilBreak(timeUntilBreak);
        return this;
    }

    /**
     * Name of the vehicle.
     */
    public Driver1Builder vehicleName(String vehicleName) {
        driver1.setVehicleName(vehicleName);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public Driver1 build() {
        return driver1;
    }
}