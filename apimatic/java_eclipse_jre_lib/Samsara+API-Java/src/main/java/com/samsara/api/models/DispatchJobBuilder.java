/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class DispatchJobBuilder {
    //the instance to build
    private DispatchJob dispatchJob;

    /**
     * Default constructor to initialize the instance
     */
    public DispatchJobBuilder() {
        dispatchJob = new DispatchJob();
    }

    /**
     * The time at which the driver arrived at the job destination.
     */
    public DispatchJobBuilder arrivedAtMs(Long arrivedAtMs) {
        dispatchJob.setArrivedAtMs(arrivedAtMs);
        return this;
    }

    /**
     * The time at which the job was marked complete (e.g. started driving to the next destination).
     */
    public DispatchJobBuilder completedAtMs(Long completedAtMs) {
        dispatchJob.setCompletedAtMs(completedAtMs);
        return this;
    }

    /**
     * ID of the route that this job belongs to.
     */
    public DispatchJobBuilder dispatchRouteId(long dispatchRouteId) {
        dispatchJob.setDispatchRouteId(dispatchRouteId);
        return this;
    }

    /**
     * ID of the driver assigned to the dispatch job.
     */
    public DispatchJobBuilder driverId(Long driverId) {
        dispatchJob.setDriverId(driverId);
        return this;
    }

    /**
     * The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
     */
    public DispatchJobBuilder enRouteAtMs(Long enRouteAtMs) {
        dispatchJob.setEnRouteAtMs(enRouteAtMs);
        return this;
    }

    /**
     * The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.
     */
    public DispatchJobBuilder estimatedArrivalMs(Long estimatedArrivalMs) {
        dispatchJob.setEstimatedArrivalMs(estimatedArrivalMs);
        return this;
    }

    /**
     * Fleet viewer url of the dispatch job.
     */
    public DispatchJobBuilder fleetViewerUrl(String fleetViewerUrl) {
        dispatchJob.setFleetViewerUrl(fleetViewerUrl);
        return this;
    }

    public DispatchJobBuilder groupId(long groupId) {
        dispatchJob.setGroupId(groupId);
        return this;
    }

    /**
     * ID of the Samsara dispatch job.
     */
    public DispatchJobBuilder id(long id) {
        dispatchJob.setId(id);
        return this;
    }

    /**
     * The current state of the dispatch job.
     */
    public DispatchJobBuilder jobState(JobStatusEnum jobState) {
        dispatchJob.setJobState(jobState);
        return this;
    }

    /**
     * The time at which the job was marked skipped.
     */
    public DispatchJobBuilder skippedAtMs(Long skippedAtMs) {
        dispatchJob.setSkippedAtMs(skippedAtMs);
        return this;
    }

    /**
     * ID of the vehicle used for the dispatch job.
     */
    public DispatchJobBuilder vehicleId(Long vehicleId) {
        dispatchJob.setVehicleId(vehicleId);
        return this;
    }

    /**
     * The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
     */
    public DispatchJobBuilder destinationAddress(String destinationAddress) {
        dispatchJob.setDestinationAddress(destinationAddress);
        return this;
    }

    /**
     * ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
     */
    public DispatchJobBuilder destinationAddressId(Long destinationAddressId) {
        dispatchJob.setDestinationAddressId(destinationAddressId);
        return this;
    }

    /**
     * Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     */
    public DispatchJobBuilder destinationLat(Double destinationLat) {
        dispatchJob.setDestinationLat(destinationLat);
        return this;
    }

    /**
     * Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     */
    public DispatchJobBuilder destinationLng(Double destinationLng) {
        dispatchJob.setDestinationLng(destinationLng);
        return this;
    }

    /**
     * The name of the job destination. If provided, it will take precedence over the name of the address book entry.
     */
    public DispatchJobBuilder destinationName(String destinationName) {
        dispatchJob.setDestinationName(destinationName);
        return this;
    }

    /**
     * Notes regarding the details of this job.
     */
    public DispatchJobBuilder notes(String notes) {
        dispatchJob.setNotes(notes);
        return this;
    }

    /**
     * The time at which the assigned driver is scheduled to arrive at the job destination.
     */
    public DispatchJobBuilder scheduledArrivalTimeMs(long scheduledArrivalTimeMs) {
        dispatchJob.setScheduledArrivalTimeMs(scheduledArrivalTimeMs);
        return this;
    }

    /**
     * The time at which the assigned driver is scheduled to depart from the job destination.
     */
    public DispatchJobBuilder scheduledDepartureTimeMs(Long scheduledDepartureTimeMs) {
        dispatchJob.setScheduledDepartureTimeMs(scheduledDepartureTimeMs);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public DispatchJob build() {
        return dispatchJob;
    }
}