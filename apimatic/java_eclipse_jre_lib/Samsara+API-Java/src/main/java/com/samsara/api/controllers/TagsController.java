/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.samsara.api.*;
import com.samsara.api.models.*;
import com.samsara.api.exceptions.*;
import com.samsara.api.http.client.HttpClient;
import com.samsara.api.http.client.HttpContext;
import com.samsara.api.http.request.HttpRequest;
import com.samsara.api.http.response.HttpResponse;
import com.samsara.api.http.response.HttpStringResponse;
import com.samsara.api.http.client.APICallBack;
import com.samsara.api.controllers.syncwrapper.APICallBackCatcher;

public class TagsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static TagsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TagsController class 
     */
    public static TagsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new TagsController();
                }
            }
        }
        return instance;
    }

    /**
     * Permanently deletes a tag.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @return    Returns the void response from the API call 
     */
    public void deleteTagById(
                final String accessToken,
                final long tagId
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deleteTagByIdAsync(accessToken, tagId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Permanently deletes a tag.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @return    Returns the void response from the API call 
     */
    public void deleteTagByIdAsync(
                final String accessToken,
                final long tagId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/tags/{tag_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("tag_id", tagId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch a tag by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @return    Returns the Tag response from the API call 
     */
    public Tag getTagById(
                final String accessToken,
                final long tagId
    ) throws Throwable {
        APICallBackCatcher<Tag> callback = new APICallBackCatcher<Tag>();
        getTagByIdAsync(accessToken, tagId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch a tag by id.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @return    Returns the void response from the API call 
     */
    public void getTagByIdAsync(
                final String accessToken,
                final long tagId,
                final APICallBack<Tag> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/tags/{tag_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("tag_id", tagId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Tag _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Tag>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Add or delete specific members from a tag, or modify the name of a tag.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @param    tagModifyParams    Required parameter: Example: 
     * @return    Returns the Tag response from the API call 
     */
    public Tag modifyTagById(
                final String accessToken,
                final long tagId,
                final TagModify tagModifyParams
    ) throws Throwable {
        APICallBackCatcher<Tag> callback = new APICallBackCatcher<Tag>();
        modifyTagByIdAsync(accessToken, tagId, tagModifyParams, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Add or delete specific members from a tag, or modify the name of a tag.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @param    tagModifyParams    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void modifyTagByIdAsync(
                final String accessToken,
                final long tagId,
                final TagModify tagModifyParams,
                final APICallBack<Tag> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/tags/{tag_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("tag_id", tagId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(tagModifyParams);
                    _request = getClientInstance().patchBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Tag _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Tag>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new tag for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagCreateParams    Required parameter: Example: 
     * @return    Returns the Tag response from the API call 
     */
    public Tag createTag(
                final String accessToken,
                final TagCreate tagCreateParams
    ) throws Throwable {
        APICallBackCatcher<Tag> callback = new APICallBackCatcher<Tag>();
        createTagAsync(accessToken, tagCreateParams, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new tag for the group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagCreateParams    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createTagAsync(
                final String accessToken,
                final TagCreate tagCreateParams,
                final APICallBack<Tag> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/tags");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(tagCreateParams);
                    _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Tag _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Tag>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @param    updateTagParams    Required parameter: Example: 
     * @return    Returns the Tag response from the API call 
     */
    public Tag updateTagById(
                final String accessToken,
                final long tagId,
                final TagUpdate updateTagParams
    ) throws Throwable {
        APICallBackCatcher<Tag> callback = new APICallBackCatcher<Tag>();
        updateTagByIdAsync(accessToken, tagId, updateTagParams, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    tagId    Required parameter: ID of the tag.
     * @param    updateTagParams    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateTagByIdAsync(
                final String accessToken,
                final long tagId,
                final TagUpdate updateTagParams,
                final APICallBack<Tag> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/tags/{tag_id}");

                //process template parameters
                Map<String, Object> _templateParameters = new HashMap<String, Object>();
                _templateParameters.put("tag_id", tagId);
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");
                _headers.put("content-type", "application/json");


                //prepare and invoke the API call request to fetch the response
                String _bodyJson;
                HttpRequest _request;
                try {
                    _bodyJson = APIHelper.serialize(updateTagParams);
                    _request = getClientInstance().putBody(_queryUrl, _headers, _bodyJson);
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Tag _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Tag>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Fetch all of the tags for a group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @return    Returns the GetAllTagsResponse response from the API call 
     */
    public GetAllTagsResponse getAllTags(
                final String accessToken,
                final Long groupId
    ) throws Throwable {
        APICallBackCatcher<GetAllTagsResponse> callback = new APICallBackCatcher<GetAllTagsResponse>();
        getAllTagsAsync(accessToken, groupId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Fetch all of the tags for a group.
     * @param    accessToken    Required parameter: Samsara API access token.
     * @param    groupId    Optional parameter: Optional group ID if the organization has multiple groups (uncommon).
     * @return    Returns the void response from the API call 
     */
    public void getAllTagsAsync(
                final String accessToken,
                final Long groupId,
                final APICallBack<GetAllTagsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder("/tags");

                ///process query parameters
                Map<String, Object> _queryParameters = new HashMap<String, Object>();
                _queryParameters.put("access_token", accessToken);
                if (groupId != null) {
                    _queryParameters.put("group_id", groupId);
                }
                _queryParameters.put("access_token", Configuration.accessToken);
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(new StringBuilder(_baseUri).append(_queryBuilder));

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>();
                _headers.put("user-agent", BaseController.userAgent);
                _headers.put("accept", "application/json");


                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new APIException("Unexpected error.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetAllTagsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetAllTagsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}