/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class DvirBaseBuilder {
    //the instance to build
    private DvirBase dvirBase;

    /**
     * Default constructor to initialize the instance
     */
    public DvirBaseBuilder() {
        dvirBase = new DvirBase();
    }

    /**
     * The authors signature for the DVIR.
     */
    public DvirBaseBuilder authorSignature(AuthorSignature authorSignature) {
        dvirBase.setAuthorSignature(authorSignature);
        return this;
    }

    /**
     * Signifies if the defects on the vehicle corrected after the DVIR is done.
     */
    public DvirBaseBuilder defectsCorrected(Boolean defectsCorrected) {
        dvirBase.setDefectsCorrected(defectsCorrected);
        return this;
    }

    /**
     * Signifies if the defects on this vehicle can be ignored.
     */
    public DvirBaseBuilder defectsNeedNotBeCorrected(Boolean defectsNeedNotBeCorrected) {
        dvirBase.setDefectsNeedNotBeCorrected(defectsNeedNotBeCorrected);
        return this;
    }

    /**
     * The id of this DVIR record.
     */
    public DvirBaseBuilder id(Long id) {
        dvirBase.setId(id);
        return this;
    }

    /**
     * Inspection type of the DVIR.
     */
    public DvirBaseBuilder inspectionType(String inspectionType) {
        dvirBase.setInspectionType(inspectionType);
        return this;
    }

    /**
     * The mechanics notes on the DVIR.
     */
    public DvirBaseBuilder mechanicNotes(String mechanicNotes) {
        dvirBase.setMechanicNotes(mechanicNotes);
        return this;
    }

    /**
     * The mechanic's or agent's signature for the DVIR.
     */
    public DvirBaseBuilder mechanicOrAgentSignature(MechanicOrAgentSignature mechanicOrAgentSignature) {
        dvirBase.setMechanicOrAgentSignature(mechanicOrAgentSignature);
        return this;
    }

    /**
     * The next driver signature for the DVIR.
     */
    public DvirBaseBuilder nextDriverSignature(NextDriverSignature nextDriverSignature) {
        dvirBase.setNextDriverSignature(nextDriverSignature);
        return this;
    }

    /**
     * The odometer reading in miles for the vehicle when the DVIR was done.
     */
    public DvirBaseBuilder odometerMiles(Long odometerMiles) {
        dvirBase.setOdometerMiles(odometerMiles);
        return this;
    }

    /**
     * Timestamp of this DVIR in UNIX milliseconds.
     */
    public DvirBaseBuilder timeMs(Long timeMs) {
        dvirBase.setTimeMs(timeMs);
        return this;
    }

    /**
     * Defects registered for the trailer which was part of the DVIR.
     */
    public DvirBaseBuilder trailerDefects(List<TrailerDefect> trailerDefects) {
        dvirBase.setTrailerDefects(trailerDefects);
        return this;
    }

    /**
     * The id of the trailer which was part of the DVIR.
     */
    public DvirBaseBuilder trailerId(Integer trailerId) {
        dvirBase.setTrailerId(trailerId);
        return this;
    }

    /**
     * The name of the trailer which was part of the DVIR.
     */
    public DvirBaseBuilder trailerName(String trailerName) {
        dvirBase.setTrailerName(trailerName);
        return this;
    }

    /**
     * The vehicle on which DVIR was done.
     */
    public DvirBaseBuilder vehicle(Vehicle2 vehicle) {
        dvirBase.setVehicle(vehicle);
        return this;
    }

    /**
     * The condition of vechile on which DVIR was done.
     */
    public DvirBaseBuilder vehicleCondition(String vehicleCondition) {
        dvirBase.setVehicleCondition(vehicleCondition);
        return this;
    }

    /**
     * Defects registered for the vehicle which was part of the DVIR.
     */
    public DvirBaseBuilder vehicleDefects(List<VehicleDefect> vehicleDefects) {
        dvirBase.setVehicleDefects(vehicleDefects);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public DvirBase build() {
        return dvirBase;
    }
}