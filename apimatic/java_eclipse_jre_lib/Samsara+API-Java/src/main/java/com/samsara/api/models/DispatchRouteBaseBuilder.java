/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class DispatchRouteBaseBuilder {
    //the instance to build
    private DispatchRouteBase dispatchRouteBase;

    /**
     * Default constructor to initialize the instance
     */
    public DispatchRouteBaseBuilder() {
        dispatchRouteBase = new DispatchRouteBase();
    }

    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     */
    public DispatchRouteBaseBuilder actualEndMs(Long actualEndMs) {
        dispatchRouteBase.setActualEndMs(actualEndMs);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the route actually started.
     */
    public DispatchRouteBaseBuilder actualStartMs(Long actualStartMs) {
        dispatchRouteBase.setActualStartMs(actualStartMs);
        return this;
    }

    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     */
    public DispatchRouteBaseBuilder driverId(Long driverId) {
        dispatchRouteBase.setDriverId(driverId);
        return this;
    }

    /**
     * ID of the group if the organization has multiple groups (optional).
     */
    public DispatchRouteBaseBuilder groupId(Long groupId) {
        dispatchRouteBase.setGroupId(groupId);
        return this;
    }

    /**
     * Descriptive name of this route.
     */
    public DispatchRouteBaseBuilder name(String name) {
        dispatchRouteBase.setName(name);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     */
    public DispatchRouteBaseBuilder scheduledEndMs(long scheduledEndMs) {
        dispatchRouteBase.setScheduledEndMs(scheduledEndMs);
        return this;
    }

    /**
     * The distance expected to be traveled for this route in meters.
     */
    public DispatchRouteBaseBuilder scheduledMeters(Long scheduledMeters) {
        dispatchRouteBase.setScheduledMeters(scheduledMeters);
        return this;
    }

    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     */
    public DispatchRouteBaseBuilder scheduledStartMs(long scheduledStartMs) {
        dispatchRouteBase.setScheduledStartMs(scheduledStartMs);
        return this;
    }

    /**
     * The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
     */
    public DispatchRouteBaseBuilder startLocationAddress(String startLocationAddress) {
        dispatchRouteBase.setStartLocationAddress(startLocationAddress);
        return this;
    }

    /**
     * ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
     */
    public DispatchRouteBaseBuilder startLocationAddressId(Long startLocationAddressId) {
        dispatchRouteBase.setStartLocationAddressId(startLocationAddressId);
        return this;
    }

    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     */
    public DispatchRouteBaseBuilder startLocationLat(Double startLocationLat) {
        dispatchRouteBase.setStartLocationLat(startLocationLat);
        return this;
    }

    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     */
    public DispatchRouteBaseBuilder startLocationLng(Double startLocationLng) {
        dispatchRouteBase.setStartLocationLng(startLocationLng);
        return this;
    }

    /**
     * The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
     */
    public DispatchRouteBaseBuilder startLocationName(String startLocationName) {
        dispatchRouteBase.setStartLocationName(startLocationName);
        return this;
    }

    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
     */
    public DispatchRouteBaseBuilder trailerId(Long trailerId) {
        dispatchRouteBase.setTrailerId(trailerId);
        return this;
    }

    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     */
    public DispatchRouteBaseBuilder vehicleId(Long vehicleId) {
        dispatchRouteBase.setVehicleId(vehicleId);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public DispatchRouteBase build() {
        return dispatchRouteBase;
    }
}