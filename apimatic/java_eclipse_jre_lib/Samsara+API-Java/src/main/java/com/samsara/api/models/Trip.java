/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class Trip 
        implements java.io.Serializable {
    private static final long serialVersionUID = -1107175924018754696L;
    private Integer distanceMeters;
    private Integer driverId;
    private String endAddress;
    private EndCoordinates endCoordinates;
    private String endLocation;
    private Long endMs;
    private Integer endOdometer;
    private Integer fuelConsumedMl;
    private String startAddress;
    private StartCoordinates startCoordinates;
    private String startLocation;
    private Long startMs;
    private Integer startOdometer;
    private Integer tollMeters;
    /** GETTER
     * Length of the trip in meters.
     */
    @JsonGetter("distanceMeters")
    public Integer getDistanceMeters ( ) { 
        return this.distanceMeters;
    }
    
    /** SETTER
     * Length of the trip in meters.
     */
    @JsonSetter("distanceMeters")
    public void setDistanceMeters (Integer value) { 
        this.distanceMeters = value;
    }
 
    /** GETTER
     * ID of the driver.
     */
    @JsonGetter("driverId")
    public Integer getDriverId ( ) { 
        return this.driverId;
    }
    
    /** SETTER
     * ID of the driver.
     */
    @JsonSetter("driverId")
    public void setDriverId (Integer value) { 
        this.driverId = value;
    }
 
    /** GETTER
     * Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
     */
    @JsonGetter("endAddress")
    public String getEndAddress ( ) { 
        return this.endAddress;
    }
    
    /** SETTER
     * Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
     */
    @JsonSetter("endAddress")
    public void setEndAddress (String value) { 
        this.endAddress = value;
    }
 
    /** GETTER
     * End (latitude, longitude) in decimal degrees.
     */
    @JsonGetter("endCoordinates")
    public EndCoordinates getEndCoordinates ( ) { 
        return this.endCoordinates;
    }
    
    /** SETTER
     * End (latitude, longitude) in decimal degrees.
     */
    @JsonSetter("endCoordinates")
    public void setEndCoordinates (EndCoordinates value) { 
        this.endCoordinates = value;
    }
 
    /** GETTER
     * Geocoded street address of start (latitude, longitude) coordinates.
     */
    @JsonGetter("endLocation")
    public String getEndLocation ( ) { 
        return this.endLocation;
    }
    
    /** SETTER
     * Geocoded street address of start (latitude, longitude) coordinates.
     */
    @JsonSetter("endLocation")
    public void setEndLocation (String value) { 
        this.endLocation = value;
    }
 
    /** GETTER
     * End of the trip in UNIX milliseconds.
     */
    @JsonGetter("endMs")
    public Long getEndMs ( ) { 
        return this.endMs;
    }
    
    /** SETTER
     * End of the trip in UNIX milliseconds.
     */
    @JsonSetter("endMs")
    public void setEndMs (Long value) { 
        this.endMs = value;
    }
 
    /** GETTER
     * Odometer reading at the end of the trip.
     */
    @JsonGetter("endOdometer")
    public Integer getEndOdometer ( ) { 
        return this.endOdometer;
    }
    
    /** SETTER
     * Odometer reading at the end of the trip.
     */
    @JsonSetter("endOdometer")
    public void setEndOdometer (Integer value) { 
        this.endOdometer = value;
    }
 
    /** GETTER
     * Amount in milliliters of fuel consumed on this trip.
     */
    @JsonGetter("fuelConsumedMl")
    public Integer getFuelConsumedMl ( ) { 
        return this.fuelConsumedMl;
    }
    
    /** SETTER
     * Amount in milliliters of fuel consumed on this trip.
     */
    @JsonSetter("fuelConsumedMl")
    public void setFuelConsumedMl (Integer value) { 
        this.fuelConsumedMl = value;
    }
 
    /** GETTER
     * Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
     */
    @JsonGetter("startAddress")
    public String getStartAddress ( ) { 
        return this.startAddress;
    }
    
    /** SETTER
     * Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
     */
    @JsonSetter("startAddress")
    public void setStartAddress (String value) { 
        this.startAddress = value;
    }
 
    /** GETTER
     * Start (latitude, longitude) in decimal degrees.
     */
    @JsonGetter("startCoordinates")
    public StartCoordinates getStartCoordinates ( ) { 
        return this.startCoordinates;
    }
    
    /** SETTER
     * Start (latitude, longitude) in decimal degrees.
     */
    @JsonSetter("startCoordinates")
    public void setStartCoordinates (StartCoordinates value) { 
        this.startCoordinates = value;
    }
 
    /** GETTER
     * Geocoded street address of start (latitude, longitude) coordinates.
     */
    @JsonGetter("startLocation")
    public String getStartLocation ( ) { 
        return this.startLocation;
    }
    
    /** SETTER
     * Geocoded street address of start (latitude, longitude) coordinates.
     */
    @JsonSetter("startLocation")
    public void setStartLocation (String value) { 
        this.startLocation = value;
    }
 
    /** GETTER
     * Beginning of the trip in UNIX milliseconds.
     */
    @JsonGetter("startMs")
    public Long getStartMs ( ) { 
        return this.startMs;
    }
    
    /** SETTER
     * Beginning of the trip in UNIX milliseconds.
     */
    @JsonSetter("startMs")
    public void setStartMs (Long value) { 
        this.startMs = value;
    }
 
    /** GETTER
     * Odometer reading at the beginning of the trip.
     */
    @JsonGetter("startOdometer")
    public Integer getStartOdometer ( ) { 
        return this.startOdometer;
    }
    
    /** SETTER
     * Odometer reading at the beginning of the trip.
     */
    @JsonSetter("startOdometer")
    public void setStartOdometer (Integer value) { 
        this.startOdometer = value;
    }
 
    /** GETTER
     * Length in meters trip spent on toll roads.
     */
    @JsonGetter("tollMeters")
    public Integer getTollMeters ( ) { 
        return this.tollMeters;
    }
    
    /** SETTER
     * Length in meters trip spent on toll roads.
     */
    @JsonSetter("tollMeters")
    public void setTollMeters (Integer value) { 
        this.tollMeters = value;
    }
 
}
