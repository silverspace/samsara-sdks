/*
 * SamsaraAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.samsara.api.models;

import java.util.*;

public class DriverBuilder {
    //the instance to build
    private Driver driver;

    /**
     * Default constructor to initialize the instance
     */
    public DriverBuilder() {
        driver = new Driver();
    }

    /**
     * ID of the driver.
     */
    public DriverBuilder id(long id) {
        driver.setId(id);
        return this;
    }

    /**
     * True if the driver account has been deactivated.
     */
    public DriverBuilder isDeactivated(Boolean isDeactivated) {
        driver.setIsDeactivated(isDeactivated);
        return this;
    }

    public DriverBuilder tags(List<TagMetadata> tags) {
        driver.setTags(tags);
        return this;
    }

    /**
     * ID of the vehicle that this driver is currently assigned to. Omitted if there is no current vehicle assignment for this driver.
     */
    public DriverBuilder currentVehicleId(Long currentVehicleId) {
        driver.setCurrentVehicleId(currentVehicleId);
        return this;
    }

    /**
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     */
    public DriverBuilder eldAdverseWeatherExemptionEnabled(Boolean eldAdverseWeatherExemptionEnabled) {
        driver.setEldAdverseWeatherExemptionEnabled(eldAdverseWeatherExemptionEnabled);
        return this;
    }

    /**
     * Flag indicating this driver may use Big Day excemptions in ELD logs.
     */
    public DriverBuilder eldBigDayExemptionEnabled(Boolean eldBigDayExemptionEnabled) {
        driver.setEldBigDayExemptionEnabled(eldBigDayExemptionEnabled);
        return this;
    }

    /**
     * 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
     */
    public DriverBuilder eldDayStartHour(Integer eldDayStartHour) {
        driver.setEldDayStartHour(eldDayStartHour);
        return this;
    }

    /**
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     */
    public DriverBuilder eldExempt(Boolean eldExempt) {
        driver.setEldExempt(eldExempt);
        return this;
    }

    /**
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     */
    public DriverBuilder eldExemptReason(String eldExemptReason) {
        driver.setEldExemptReason(eldExemptReason);
        return this;
    }

    /**
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     */
    public DriverBuilder eldPcEnabled(Boolean eldPcEnabled) {
        driver.setEldPcEnabled(eldPcEnabled);
        return this;
    }

    /**
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     */
    public DriverBuilder eldYmEnabled(Boolean eldYmEnabled) {
        driver.setEldYmEnabled(eldYmEnabled);
        return this;
    }

    /**
     * Dictionary of external IDs (string key-value pairs)
     */
    public DriverBuilder externalIds(LinkedHashMap<String, String> externalIds) {
        driver.setExternalIds(externalIds);
        return this;
    }

    /**
     * ID of the group if the organization has multiple groups (uncommon).
     */
    public DriverBuilder groupId(Long groupId) {
        driver.setGroupId(groupId);
        return this;
    }

    /**
     * Driver's state issued license number.
     */
    public DriverBuilder licenseNumber(String licenseNumber) {
        driver.setLicenseNumber(licenseNumber);
        return this;
    }

    /**
     * Abbreviation of state that issued driver's license.
     */
    public DriverBuilder licenseState(String licenseState) {
        driver.setLicenseState(licenseState);
        return this;
    }

    /**
     * Driver's name.
     */
    public DriverBuilder name(String name) {
        driver.setName(name);
        return this;
    }

    /**
     * Notes about the driver.
     */
    public DriverBuilder notes(String notes) {
        driver.setNotes(notes);
        return this;
    }

    /**
     * Driver's phone number. Please include only digits, ex. 4157771234
     */
    public DriverBuilder phone(String phone) {
        driver.setPhone(phone);
        return this;
    }

    /**
     * Driver's login username into the driver app.
     */
    public DriverBuilder username(String username) {
        driver.setUsername(username);
        return this;
    }

    /**
     * ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
     */
    public DriverBuilder vehicleId(Long vehicleId) {
        driver.setVehicleId(vehicleId);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public Driver build() {
        return driver;
    }
}