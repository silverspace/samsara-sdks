# Samsara API
# # Introduction  Samsara provides API endpoints for interacting with Samsara Cloud, so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara Cloud API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer) accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client such as wget or curl, or HTTP libraries of most modern programming languages including python, ruby, java. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We allow you to interact securely with our API from a client-side web application (though you should never expose your secret API key). [JSON](http://www.json.org/) is returned by all API responses, including errors. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. To start developing with Samsara APIs you will need to [obtain your API keys](#section/Authentication) to authenticate your API requests.  If you have any questions you can reach out to us on [support@samsara.com](mailto:support@samsara.com)  # Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ```curl https://api.samsara.com/<version>/<endpoint> ```  All our APIs are [versioned](#section/Versioning). If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version.  # Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Provide your API token as the basic access_token value in the URL. You do not need to provide a password.  ```curl https://api.samsara.com/<version>/<endpoint>?access_token={access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  # Request Methods  Our API endpoints use [HTTP request methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) to specify the desired operation to be performed. The documentation below specified request method supported by each endpoint and the resulting action.  ## GET  GET requests are typically used for fetching data (like data for a particular driver).  ## POST  POST requests are typically used for creating or updating a record (like adding new tags to the system). With that being said, a few of our POST requests can be used for fetching data (like current location data of your fleet).  ## PUT  PUT requests are typically used for updating an existing record (like updating all devices associated with a particular tag).  ## PATCH  PATCH requests are typically used for modifying an existing record (like modifying a few devices associated with a particular tag).  ## DELETE  DELETE requests are used for deleting a record (like deleting a tag from the system).  # Response Codes  All API requests will respond with appropriate [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). Your API client should handle each response class differently.  ## 2XX  These are successful responses and indicate that the API request returned the expected response.  ## 4XX  These indicate that there was a problem with the request like a missing parameter or invalid values. Check the response for specific [error details](#section/Error-Responses). Requests that respond with a 4XX status code, should be modified before retrying.  ## 5XX  These indicate server errors when the server is unreachable or is misconfigured. In this case, you should retry the API request after some delay.  # Error Responses  In case of a 4XX status code, the body of the response will contain information to briefly explain the error reported. To help debugging the error, you can refer to the following table for understanding the error message.  | Status Code | Message | Description | |-------------|----------------|-------------------------------------------------------------------| | 401 | Invalid token | The API token is invalid and could not be authenticated. Please refer to the [authentication section](#section/Authentication). | | 404 | Page not found | The API endpoint being accessed is invalid. | | 400 | Bad request | Default response for an invalid request. Please check the request to make sure it follows the format specified in the documentation. |  # Versioning  All our APIs are versioned. Our current API version is `v1` and we are continuously working on improving it further and provide additional endpoints. If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version. Thus, you can use our current API version worry free.  # FAQs  Check out our [responses to FAQs here](https://kb.samsara.com/hc/en-us/sections/360000538054-APIs). Don’t see an answer to your question? Reach out to us on [support@samsara.com](mailto:support@samsara.com).
# OpenAPI spec version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# fleet_api

type mutation {
  # /fleet/add_address
  # This method adds an address book entry to the specified group.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject2 addressParam 
  # @return [null]
  AddFleetAddress(accessToken: String!, addressParam: InlineObject2): null

  # /addresses
  # Add one or more addresses to the organization
  # @param String! accessToken Samsara API access token.
  # @param InlineObject addresses 
  # @return [[Address]]
  AddOrganizationAddresses(accessToken: String!, addresses: InlineObject): [Address]

  # /fleet/dispatch/routes
  # Create a new dispatch route.
  # @param String! accessToken Samsara API access token.
  # @param DispatchRouteCreate createDispatchRouteParams 
  # @return [DispatchRoute]
  CreateDispatchRoute(accessToken: String!, createDispatchRouteParams: DispatchRouteCreate): DispatchRoute

  # /fleet/drivers/create
  # Create a new driver.
  # @param String! accessToken Samsara API access token.
  # @param DriverForCreate createDriverParam Driver creation body
  # @return [Driver]
  CreateDriver(accessToken: String!, createDriverParam: DriverForCreate): Driver

  # /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
  # Create a new dispatch route for the driver with driver_id.
  # @param String! accessToken Samsara API access token.
  # @param Int! driverId ID of the driver with the associated routes.
  # @param DispatchRouteCreate createDispatchRouteParams 
  # @return [DispatchRoute]
  CreateDriverDispatchRoute(accessToken: String!, driverId: Int!, createDispatchRouteParams: DispatchRouteCreate): DispatchRoute

  # /fleet/drivers/{driver_id:[0-9]+}/documents
  # Create a driver document for the given driver.
  # @param String! accessToken Samsara API access token.
  # @param Int! driverId ID of the driver for whom the document is created.
  # @param DocumentCreate createDocumentParams To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
  # @return [Document]
  CreateDriverDocument(accessToken: String!, driverId: Int!, createDocumentParams: DocumentCreate): Document

  # /fleet/maintenance/dvirs
  # Create a new dvir, marking a vehicle or trailer safe or unsafe.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject12 createDvirParam 
  # @return [DvirBase]
  CreateDvir(accessToken: String!, createDvirParam: InlineObject12): DvirBase

  # /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
  # Create a new dispatch route for the vehicle with vehicle_id.
  # @param String! accessToken Samsara API access token.
  # @param Int! vehicleId ID of the vehicle with the associated routes.
  # @param DispatchRouteCreate createDispatchRouteParams 
  # @return [DispatchRoute]
  CreateVehicleDispatchRoute(accessToken: String!, vehicleId: Int!, createDispatchRouteParams: DispatchRouteCreate): DispatchRoute

  # /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  # Deactivate a driver with the given id.
  # @param String! accessToken Samsara API access token.
  # @param String! driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  # @return [null]
  DeactivateDriver(accessToken: String!, driverIdOrExternalId: String!): null

  # /fleet/dispatch/routes/{route_id:[0-9]+}/
  # Delete a dispatch route and its associated jobs.
  # @param String! accessToken Samsara API access token.
  # @param Int! routeId ID of the dispatch route.
  # @return [null]
  DeleteDispatchRouteById(accessToken: String!, routeId: Int!): null

  # /addresses/{addressId}
  # Delete an address.
  # @param String! accessToken Samsara API access token.
  # @param Int! addressId ID of the address/geofence
  # @return [null]
  DeleteOrganizationAddress(accessToken: String!, addressId: Int!): null

  # /fleet/drivers
  # Get all the drivers for the specified group.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject3 groupDriversParam 
  # @return [DriversResponse]
  GetFleetDrivers(accessToken: String!, groupDriversParam: InlineObject3): DriversResponse

  # /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
  # Get summarized daily HOS charts for a specified driver.
  # @param String! accessToken Samsara API access token.
  # @param Int! driverId ID of the driver with HOS logs.
  # @param InlineObject6 hosLogsParam 
  # @return [DriverDailyLogResponse]
  GetFleetDriversHosDailyLogs(accessToken: String!, driverId: Int!, hosLogsParam: InlineObject6): DriverDailyLogResponse

  # /fleet/drivers/summary
  # Get the distance and time each driver in an organization has driven in a given time period.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject5 driversSummaryParam 
  # @param Boolean! snapToDayBounds Snap query result to HOS day boundaries.
  # @return [DriversSummaryResponse]
  GetFleetDriversSummary(accessToken: String!, driversSummaryParam: InlineObject5, snapToDayBounds: Boolean!): DriversSummaryResponse

  # /fleet/hos_authentication_logs
  # Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject7 hosAuthenticationLogsParam 
  # @return [HosAuthenticationLogsResponse]
  GetFleetHosAuthenticationLogs(accessToken: String!, hosAuthenticationLogsParam: InlineObject7): HosAuthenticationLogsResponse

  # /fleet/hos_logs
  # Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject8 hosLogsParam 
  # @return [HosLogsResponse]
  GetFleetHosLogs(accessToken: String!, hosLogsParam: InlineObject8): HosLogsResponse

  # /fleet/hos_logs_summary
  # Get the current HOS status for all drivers in the group.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject9 hosLogsParam 
  # @return [HosLogsSummaryResponse]
  GetFleetHosLogsSummary(accessToken: String!, hosLogsParam: InlineObject9): HosLogsSummaryResponse

  # /fleet/locations
  # Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject11 groupParam 
  # @return [InlineResponse2003]
  GetFleetLocations(accessToken: String!, groupParam: InlineObject11): InlineResponse2003

  # /fleet/maintenance/list
  # Get list of the vehicles with any engine faults or check light data.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject13 groupParam 
  # @return [InlineResponse2004]
  GetFleetMaintenanceList(accessToken: String!, groupParam: InlineObject13): InlineResponse2004

  # /fleet/trips
  # Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject15 tripsParam 
  # @return [TripResponse]
  GetFleetTrips(accessToken: String!, tripsParam: InlineObject15): TripResponse

  # /fleet/list
  # Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject10 groupParam 
  # @param String! startingAfter Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.
  # @param String! endingBefore Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.
  # @param Int! limit Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.
  # @return [InlineResponse2002]
  ListFleet(accessToken: String!, groupParam: InlineObject10, startingAfter: String!, endingBefore: String!, limit: Int!): InlineResponse2002

  # /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  # Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
  # @param String! accessToken Samsara API access token.
  # @param String! vehicleIdOrExternalId ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
  # @param InlineObject16 data 
  # @return [FleetVehicleResponse]
  PatchFleetVehicle(accessToken: String!, vehicleIdOrExternalId: String!, data: InlineObject16): FleetVehicleResponse

  # /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  # Reactivate the inactive driver having id.
  # @param String! accessToken Samsara API access token.
  # @param String! driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  # @param InlineObject4 reactivateDriverParam 
  # @return [Driver]
  ReactivateDriverById(accessToken: String!, driverIdOrExternalId: String!, reactivateDriverParam: InlineObject4): Driver

  # /fleet/dispatch/routes/{route_id:[0-9]+}/
  # Update a dispatch route and its associated jobs.
  # @param String! accessToken Samsara API access token.
  # @param Int! routeId ID of the dispatch route.
  # @param DispatchRoute updateDispatchRouteParams 
  # @return [DispatchRoute]
  UpdateDispatchRouteById(accessToken: String!, routeId: Int!, updateDispatchRouteParams: DispatchRoute): DispatchRoute

  # /addresses/{addressId}
  # Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
  # @param String! accessToken Samsara API access token.
  # @param Int! addressId ID of the address/geofence
  # @param InlineObject1 address 
  # @return [null]
  UpdateOrganizationAddress(accessToken: String!, addressId: Int!, address: InlineObject1): null

  # /fleet/set_data
  # This method enables the mutation of metadata for vehicles in the Samsara Cloud.
  # @param String! accessToken Samsara API access token.
  # @param InlineObject14 vehicleUpdateParam 
  # @return [null]
  UpdateVehicles(accessToken: String!, vehicleUpdateParam: InlineObject14): null

}

type query {
  # /fleet/dispatch/routes
  # Fetch all of the dispatch routes for the group.
  # @param String! accessToken Samsara API access token.
  # @param Int! groupId Optional group ID if the organization has multiple groups (uncommon).
  # @param Int! endTime Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
  # @param Int! duration Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  # @return [[DispatchRoute]]
  FetchAllDispatchRoutes(accessToken: String!, groupId: Int!, endTime: Int!, duration: Int!): [DispatchRoute]

  # /fleet/dispatch/routes/job_updates
  # Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
  # @param String! accessToken Samsara API access token.
  # @param Int! groupId Optional group ID if the organization has multiple groups (uncommon).
  # @param String! sequenceId Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
  # @param String! include Optionally set include&#x3D;route to include route object in response payload.
  # @return [AllRouteJobUpdates]
  FetchAllRouteJobUpdates(accessToken: String!, groupId: Int!, sequenceId: String!, include: String!): AllRouteJobUpdates

  # /fleet/assets/locations
  # Fetch current locations of all assets for the group.
  # @param String! accessToken Samsara API access token.
  # @param Int! groupId Optional group ID if the organization has multiple groups (uncommon).
  # @return [InlineResponse2001]
  GetAllAssetCurrentLocations(accessToken: String!, groupId: Int!): InlineResponse2001

  # /fleet/assets
  # Fetch all of the assets for the group.
  # @param String! accessToken Samsara API access token.
  # @param Int! groupId Optional group ID if the organization has multiple groups (uncommon).
  # @return [InlineResponse200]
  GetAllAssets(accessToken: String!, groupId: Int!): InlineResponse200

  # /fleet/drivers/inactive
  # Fetch all deactivated drivers for the group.
  # @param String! accessToken Samsara API access token.
  # @param Int! groupId Optional group ID if the organization has multiple groups (uncommon).
  # @return [[Driver]]
  GetAllDeactivatedDrivers(accessToken: String!, groupId: Int!): [Driver]

  # /fleet/assets/{assetId:[0-9]+}/locations
  # Fetch the historical locations for the asset.
  # @param String! accessToken Samsara API access token.
  # @param Int! assetId ID of the asset
  # @param Int! startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  # @param Int! endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  # @return [[TodoObjectMapping]]
  GetAssetLocation(accessToken: String!, assetId: Int!, startMs: Int!, endMs: Int!): [TodoObjectMapping]

  # /fleet/assets/{assetId:[0-9]+}/reefer
  # Fetch the reefer-specific stats of an asset.
  # @param String! accessToken Samsara API access token.
  # @param Int! assetId ID of the asset
  # @param Int! startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  # @param Int! endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  # @return [AssetReeferResponse]
  GetAssetReefer(accessToken: String!, assetId: Int!, startMs: Int!, endMs: Int!): AssetReeferResponse

  # /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  # Fetch deactivated driver by id.
  # @param String! accessToken Samsara API access token.
  # @param String! driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  # @return [Driver]
  GetDeactivatedDriverById(accessToken: String!, driverIdOrExternalId: String!): Driver

  # /fleet/dispatch/routes/{route_id:[0-9]+}
  # Fetch a dispatch route by id.
  # @param String! accessToken Samsara API access token.
  # @param Int! routeId ID of the dispatch route.
  # @return [DispatchRoute]
  GetDispatchRouteById(accessToken: String!, routeId: Int!): DispatchRoute

  # /fleet/dispatch/routes/{route_id:[0-9]+}/history
  # Fetch the history of a dispatch route.
  # @param String! accessToken Samsara API access token.
  # @param Int! routeId ID of the route with history.
  # @param Int! startTime Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
  # @param Int! endTime Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
  # @return [DispatchRouteHistory]
  GetDispatchRouteHistory(accessToken: String!, routeId: Int!, startTime: Int!, endTime: Int!): DispatchRouteHistory

  # /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
  # Fetch all of the dispatch routes for a given driver.
  # @param String! accessToken Samsara API access token.
  # @param Int! driverId ID of the driver with the associated routes.
  # @param Int! endTime Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
  # @param Int! duration Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  # @return [[DispatchRoute]]
  GetDispatchRoutesByDriverId(accessToken: String!, driverId: Int!, endTime: Int!, duration: Int!): [DispatchRoute]

  # /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
  # Fetch all of the dispatch routes for a given vehicle.
  # @param String! accessToken Samsara API access token.
  # @param Int! vehicleId ID of the vehicle with the associated routes.
  # @param Int! endTime Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
  # @param Int! duration Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  # @return [[DispatchRoute]]
  GetDispatchRoutesByVehicleId(accessToken: String!, vehicleId: Int!, endTime: Int!, duration: Int!): [DispatchRoute]

  # /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  # Fetch driver by id.
  # @param String! accessToken Samsara API access token.
  # @param String! driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  # @return [Driver]
  GetDriverById(accessToken: String!, driverIdOrExternalId: String!): Driver

  # /fleet/drivers/document_types
  # Fetch all of the document types.
  # @return [[DocumentType]]
  GetDriverDocumentTypesByOrgId(): [DocumentType]

  # /fleet/drivers/documents
  # Fetch all of the documents.
  # @param String! accessToken Samsara API access token.
  # @param Int! endMs Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
  # @param Int! durationMs Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
  # @return [[Document]]
  GetDriverDocumentsByOrgId(accessToken: String!, endMs: Int!, durationMs: Int!): [Document]

  # /fleet/drivers/{driverId:[0-9]+}/safety/score
  # Fetch the safety score for the driver.
  # @param Int! driverId ID of the driver
  # @param String! accessToken Samsara API access token.
  # @param Int! startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  # @param Int! endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  # @return [DriverSafetyScoreResponse]
  GetDriverSafetyScore(driverId: Int!, accessToken: String!, startMs: Int!, endMs: Int!): DriverSafetyScoreResponse

  # /fleet/maintenance/dvirs
  # Get DVIRs for the org within provided time constraints
  # @param String! accessToken Samsara API access token.
  # @param Int! endMs time in millis until the last dvir log.
  # @param Int! durationMs time in millis which corresponds to the duration before the end_ms.
  # @param Int! groupId Group ID to query.
  # @return [DvirListResponse]
  GetDvirs(accessToken: String!, endMs: Int!, durationMs: Int!, groupId: Int!): DvirListResponse

  # /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  # Gets a specific vehicle.
  # @param String! accessToken Samsara API access token.
  # @param String! vehicleIdOrExternalId ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
  # @return [FleetVehicleResponse]
  GetFleetVehicle(accessToken: String!, vehicleIdOrExternalId: String!): FleetVehicleResponse

  # /addresses/{addressId}
  # Fetch an address by its id.
  # @param String! accessToken Samsara API access token.
  # @param Int! addressId ID of the address/geofence
  # @return [Address]
  GetOrganizationAddress(accessToken: String!, addressId: Int!): Address

  # /addresses
  # Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
  # @param String! accessToken Samsara API access token.
  # @return [[Address]]
  GetOrganizationAddresses(accessToken: String!): [Address]

  # /contacts/{contact_id}
  # Fetch a contact by its id.
  # @param String! accessToken Samsara API access token.
  # @param Int! contactId ID of the contact
  # @return [Contact]
  GetOrganizationContact(accessToken: String!, contactId: Int!): Contact

  # /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
  # Fetch harsh event details for a vehicle.
  # @param Int! vehicleId ID of the vehicle
  # @param String! accessToken Samsara API access token.
  # @param Int! timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
  # @return [VehicleHarshEventResponse]
  GetVehicleHarshEvent(vehicleId: Int!, accessToken: String!, timestamp: Int!): VehicleHarshEventResponse

  # /fleet/vehicles/{vehicle_id:[0-9]+}/locations
  # Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
  # @param String! accessToken Samsara API access token.
  # @param Int! vehicleId ID of the vehicle with the associated routes.
  # @param Int! startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
  # @param Int! endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
  # @return [[FleetVehicleLocation]]
  GetVehicleLocations(accessToken: String!, vehicleId: Int!, startMs: Int!, endMs: Int!): [FleetVehicleLocation]

  # /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
  # Fetch the safety score for the vehicle.
  # @param Int! vehicleId ID of the vehicle
  # @param String! accessToken Samsara API access token.
  # @param Int! startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  # @param Int! endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  # @return [VehicleSafetyScoreResponse]
  GetVehicleSafetyScore(vehicleId: Int!, accessToken: String!, startMs: Int!, endMs: Int!): VehicleSafetyScoreResponse

  # /fleet/vehicles/stats
  # Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
  # @param String! accessToken Samsara API access token.
  # @param Int! startMs Time in Unix epoch milliseconds for the start of the query.
  # @param Int! endMs Time in Unix epoch milliseconds for the end of the query.
  # @param String! series Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2
  # @param String! tagIds Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3
  # @param String! startingAfter Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.
  # @param String! endingBefore Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.
  # @param Int! limit Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.
  # @return [InlineResponse2005]
  GetVehicleStats(accessToken: String!, startMs: Int!, endMs: Int!, series: String!, tagIds: String!, startingAfter: String!, endingBefore: String!, limit: Int!): InlineResponse2005

  # /fleet/vehicles/locations
  # Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
  # @param String! accessToken Samsara API access token.
  # @param Int! startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)
  # @param Int! endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
  # @return [[TodoObjectMapping]]
  GetVehiclesLocations(accessToken: String!, startMs: Int!, endMs: Int!): [TodoObjectMapping]

  # /contacts
  # Fetch all contacts for the organization.
  # @param String! accessToken Samsara API access token.
  # @return [[Contact]]
  ListContacts(accessToken: String!): [Contact]

}

