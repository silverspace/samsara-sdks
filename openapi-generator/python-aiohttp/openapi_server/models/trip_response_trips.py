# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.trip_response_end_coordinates import TripResponseEndCoordinates
from openapi_server.models.trip_response_start_coordinates import TripResponseStartCoordinates
from openapi_server import util


class TripResponseTrips(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_odometer: int=None, distance_meters: int=None, end_ms: int=None, start_ms: int=None, fuel_consumed_ml: int=None, start_address: str=None, start_coordinates: TripResponseStartCoordinates=None, end_coordinates: TripResponseEndCoordinates=None, start_odometer: int=None, driver_id: int=None, start_location: str=None, toll_meters: int=None, end_address: str=None, end_location: str=None):
        """TripResponseTrips - a model defined in OpenAPI

        :param end_odometer: The end_odometer of this TripResponseTrips.
        :param distance_meters: The distance_meters of this TripResponseTrips.
        :param end_ms: The end_ms of this TripResponseTrips.
        :param start_ms: The start_ms of this TripResponseTrips.
        :param fuel_consumed_ml: The fuel_consumed_ml of this TripResponseTrips.
        :param start_address: The start_address of this TripResponseTrips.
        :param start_coordinates: The start_coordinates of this TripResponseTrips.
        :param end_coordinates: The end_coordinates of this TripResponseTrips.
        :param start_odometer: The start_odometer of this TripResponseTrips.
        :param driver_id: The driver_id of this TripResponseTrips.
        :param start_location: The start_location of this TripResponseTrips.
        :param toll_meters: The toll_meters of this TripResponseTrips.
        :param end_address: The end_address of this TripResponseTrips.
        :param end_location: The end_location of this TripResponseTrips.
        """
        self.openapi_types = {
            'end_odometer': int,
            'distance_meters': int,
            'end_ms': int,
            'start_ms': int,
            'fuel_consumed_ml': int,
            'start_address': str,
            'start_coordinates': TripResponseStartCoordinates,
            'end_coordinates': TripResponseEndCoordinates,
            'start_odometer': int,
            'driver_id': int,
            'start_location': str,
            'toll_meters': int,
            'end_address': str,
            'end_location': str
        }

        self.attribute_map = {
            'end_odometer': 'endOdometer',
            'distance_meters': 'distanceMeters',
            'end_ms': 'endMs',
            'start_ms': 'startMs',
            'fuel_consumed_ml': 'fuelConsumedMl',
            'start_address': 'startAddress',
            'start_coordinates': 'startCoordinates',
            'end_coordinates': 'endCoordinates',
            'start_odometer': 'startOdometer',
            'driver_id': 'driverId',
            'start_location': 'startLocation',
            'toll_meters': 'tollMeters',
            'end_address': 'endAddress',
            'end_location': 'endLocation'
        }

        self._end_odometer = end_odometer
        self._distance_meters = distance_meters
        self._end_ms = end_ms
        self._start_ms = start_ms
        self._fuel_consumed_ml = fuel_consumed_ml
        self._start_address = start_address
        self._start_coordinates = start_coordinates
        self._end_coordinates = end_coordinates
        self._start_odometer = start_odometer
        self._driver_id = driver_id
        self._start_location = start_location
        self._toll_meters = toll_meters
        self._end_address = end_address
        self._end_location = end_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TripResponseTrips':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TripResponse_trips of this TripResponseTrips.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_odometer(self):
        """Gets the end_odometer of this TripResponseTrips.

        Odometer reading at the end of the trip.

        :return: The end_odometer of this TripResponseTrips.
        :rtype: int
        """
        return self._end_odometer

    @end_odometer.setter
    def end_odometer(self, end_odometer):
        """Sets the end_odometer of this TripResponseTrips.

        Odometer reading at the end of the trip.

        :param end_odometer: The end_odometer of this TripResponseTrips.
        :type end_odometer: int
        """

        self._end_odometer = end_odometer

    @property
    def distance_meters(self):
        """Gets the distance_meters of this TripResponseTrips.

        Length of the trip in meters.

        :return: The distance_meters of this TripResponseTrips.
        :rtype: int
        """
        return self._distance_meters

    @distance_meters.setter
    def distance_meters(self, distance_meters):
        """Sets the distance_meters of this TripResponseTrips.

        Length of the trip in meters.

        :param distance_meters: The distance_meters of this TripResponseTrips.
        :type distance_meters: int
        """

        self._distance_meters = distance_meters

    @property
    def end_ms(self):
        """Gets the end_ms of this TripResponseTrips.

        End of the trip in UNIX milliseconds.

        :return: The end_ms of this TripResponseTrips.
        :rtype: int
        """
        return self._end_ms

    @end_ms.setter
    def end_ms(self, end_ms):
        """Sets the end_ms of this TripResponseTrips.

        End of the trip in UNIX milliseconds.

        :param end_ms: The end_ms of this TripResponseTrips.
        :type end_ms: int
        """

        self._end_ms = end_ms

    @property
    def start_ms(self):
        """Gets the start_ms of this TripResponseTrips.

        Beginning of the trip in UNIX milliseconds.

        :return: The start_ms of this TripResponseTrips.
        :rtype: int
        """
        return self._start_ms

    @start_ms.setter
    def start_ms(self, start_ms):
        """Sets the start_ms of this TripResponseTrips.

        Beginning of the trip in UNIX milliseconds.

        :param start_ms: The start_ms of this TripResponseTrips.
        :type start_ms: int
        """

        self._start_ms = start_ms

    @property
    def fuel_consumed_ml(self):
        """Gets the fuel_consumed_ml of this TripResponseTrips.

        Amount in milliliters of fuel consumed on this trip.

        :return: The fuel_consumed_ml of this TripResponseTrips.
        :rtype: int
        """
        return self._fuel_consumed_ml

    @fuel_consumed_ml.setter
    def fuel_consumed_ml(self, fuel_consumed_ml):
        """Sets the fuel_consumed_ml of this TripResponseTrips.

        Amount in milliliters of fuel consumed on this trip.

        :param fuel_consumed_ml: The fuel_consumed_ml of this TripResponseTrips.
        :type fuel_consumed_ml: int
        """

        self._fuel_consumed_ml = fuel_consumed_ml

    @property
    def start_address(self):
        """Gets the start_address of this TripResponseTrips.

        Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.

        :return: The start_address of this TripResponseTrips.
        :rtype: str
        """
        return self._start_address

    @start_address.setter
    def start_address(self, start_address):
        """Sets the start_address of this TripResponseTrips.

        Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.

        :param start_address: The start_address of this TripResponseTrips.
        :type start_address: str
        """

        self._start_address = start_address

    @property
    def start_coordinates(self):
        """Gets the start_coordinates of this TripResponseTrips.


        :return: The start_coordinates of this TripResponseTrips.
        :rtype: TripResponseStartCoordinates
        """
        return self._start_coordinates

    @start_coordinates.setter
    def start_coordinates(self, start_coordinates):
        """Sets the start_coordinates of this TripResponseTrips.


        :param start_coordinates: The start_coordinates of this TripResponseTrips.
        :type start_coordinates: TripResponseStartCoordinates
        """

        self._start_coordinates = start_coordinates

    @property
    def end_coordinates(self):
        """Gets the end_coordinates of this TripResponseTrips.


        :return: The end_coordinates of this TripResponseTrips.
        :rtype: TripResponseEndCoordinates
        """
        return self._end_coordinates

    @end_coordinates.setter
    def end_coordinates(self, end_coordinates):
        """Sets the end_coordinates of this TripResponseTrips.


        :param end_coordinates: The end_coordinates of this TripResponseTrips.
        :type end_coordinates: TripResponseEndCoordinates
        """

        self._end_coordinates = end_coordinates

    @property
    def start_odometer(self):
        """Gets the start_odometer of this TripResponseTrips.

        Odometer reading at the beginning of the trip.

        :return: The start_odometer of this TripResponseTrips.
        :rtype: int
        """
        return self._start_odometer

    @start_odometer.setter
    def start_odometer(self, start_odometer):
        """Sets the start_odometer of this TripResponseTrips.

        Odometer reading at the beginning of the trip.

        :param start_odometer: The start_odometer of this TripResponseTrips.
        :type start_odometer: int
        """

        self._start_odometer = start_odometer

    @property
    def driver_id(self):
        """Gets the driver_id of this TripResponseTrips.

        ID of the driver.

        :return: The driver_id of this TripResponseTrips.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this TripResponseTrips.

        ID of the driver.

        :param driver_id: The driver_id of this TripResponseTrips.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def start_location(self):
        """Gets the start_location of this TripResponseTrips.

        Geocoded street address of start (latitude, longitude) coordinates.

        :return: The start_location of this TripResponseTrips.
        :rtype: str
        """
        return self._start_location

    @start_location.setter
    def start_location(self, start_location):
        """Sets the start_location of this TripResponseTrips.

        Geocoded street address of start (latitude, longitude) coordinates.

        :param start_location: The start_location of this TripResponseTrips.
        :type start_location: str
        """

        self._start_location = start_location

    @property
    def toll_meters(self):
        """Gets the toll_meters of this TripResponseTrips.

        Length in meters trip spent on toll roads.

        :return: The toll_meters of this TripResponseTrips.
        :rtype: int
        """
        return self._toll_meters

    @toll_meters.setter
    def toll_meters(self, toll_meters):
        """Sets the toll_meters of this TripResponseTrips.

        Length in meters trip spent on toll roads.

        :param toll_meters: The toll_meters of this TripResponseTrips.
        :type toll_meters: int
        """

        self._toll_meters = toll_meters

    @property
    def end_address(self):
        """Gets the end_address of this TripResponseTrips.

        Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.

        :return: The end_address of this TripResponseTrips.
        :rtype: str
        """
        return self._end_address

    @end_address.setter
    def end_address(self, end_address):
        """Sets the end_address of this TripResponseTrips.

        Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.

        :param end_address: The end_address of this TripResponseTrips.
        :type end_address: str
        """

        self._end_address = end_address

    @property
    def end_location(self):
        """Gets the end_location of this TripResponseTrips.

        Geocoded street address of start (latitude, longitude) coordinates.

        :return: The end_location of this TripResponseTrips.
        :rtype: str
        """
        return self._end_location

    @end_location.setter
    def end_location(self, end_location):
        """Sets the end_location of this TripResponseTrips.

        Geocoded street address of start (latitude, longitude) coordinates.

        :param end_location: The end_location of this TripResponseTrips.
        :type end_location: str
        """

        self._end_location = end_location
