# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CargoResponseSensors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cargo_empty: bool=None, name: str=None, id: int=None):
        """CargoResponseSensors - a model defined in OpenAPI

        :param cargo_empty: The cargo_empty of this CargoResponseSensors.
        :param name: The name of this CargoResponseSensors.
        :param id: The id of this CargoResponseSensors.
        """
        self.openapi_types = {
            'cargo_empty': bool,
            'name': str,
            'id': int
        }

        self.attribute_map = {
            'cargo_empty': 'cargoEmpty',
            'name': 'name',
            'id': 'id'
        }

        self._cargo_empty = cargo_empty
        self._name = name
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CargoResponseSensors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CargoResponse_sensors of this CargoResponseSensors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cargo_empty(self):
        """Gets the cargo_empty of this CargoResponseSensors.

        Flag indicating whether the current cargo is empty or loaded.

        :return: The cargo_empty of this CargoResponseSensors.
        :rtype: bool
        """
        return self._cargo_empty

    @cargo_empty.setter
    def cargo_empty(self, cargo_empty):
        """Sets the cargo_empty of this CargoResponseSensors.

        Flag indicating whether the current cargo is empty or loaded.

        :param cargo_empty: The cargo_empty of this CargoResponseSensors.
        :type cargo_empty: bool
        """

        self._cargo_empty = cargo_empty

    @property
    def name(self):
        """Gets the name of this CargoResponseSensors.

        Name of the sensor.

        :return: The name of this CargoResponseSensors.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CargoResponseSensors.

        Name of the sensor.

        :param name: The name of this CargoResponseSensors.
        :type name: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this CargoResponseSensors.

        ID of the sensor.

        :return: The id of this CargoResponseSensors.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CargoResponseSensors.

        ID of the sensor.

        :param id: The id of this CargoResponseSensors.
        :type id: int
        """

        self._id = id
