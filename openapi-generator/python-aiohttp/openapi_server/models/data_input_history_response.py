# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.data_input_history_response_points import DataInputHistoryResponsePoints
from openapi_server import util


class DataInputHistoryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, points: List[DataInputHistoryResponsePoints]=None):
        """DataInputHistoryResponse - a model defined in OpenAPI

        :param id: The id of this DataInputHistoryResponse.
        :param name: The name of this DataInputHistoryResponse.
        :param points: The points of this DataInputHistoryResponse.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'points': List[DataInputHistoryResponsePoints]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'points': 'points'
        }

        self._id = id
        self._name = name
        self._points = points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataInputHistoryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataInputHistoryResponse of this DataInputHistoryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DataInputHistoryResponse.

        The ID of this data input

        :return: The id of this DataInputHistoryResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataInputHistoryResponse.

        The ID of this data input

        :param id: The id of this DataInputHistoryResponse.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataInputHistoryResponse.

        Name of this data input

        :return: The name of this DataInputHistoryResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataInputHistoryResponse.

        Name of this data input

        :param name: The name of this DataInputHistoryResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def points(self):
        """Gets the points of this DataInputHistoryResponse.

        Data points from this data input

        :return: The points of this DataInputHistoryResponse.
        :rtype: List[DataInputHistoryResponsePoints]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this DataInputHistoryResponse.

        Data points from this data input

        :param points: The points of this DataInputHistoryResponse.
        :type points: List[DataInputHistoryResponsePoints]
        """

        self._points = points
