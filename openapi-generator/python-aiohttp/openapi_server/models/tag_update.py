# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.tagged_asset_base import TaggedAssetBase
from openapi_server.models.tagged_driver_base import TaggedDriverBase
from openapi_server.models.tagged_machine_base import TaggedMachineBase
from openapi_server.models.tagged_sensor_base import TaggedSensorBase
from openapi_server.models.tagged_vehicle_base import TaggedVehicleBase
from openapi_server import util


class TagUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[TaggedAssetBase]=None, drivers: List[TaggedDriverBase]=None, machines: List[TaggedMachineBase]=None, name: str=None, parent_tag_id: int=None, sensors: List[TaggedSensorBase]=None, vehicles: List[TaggedVehicleBase]=None):
        """TagUpdate - a model defined in OpenAPI

        :param assets: The assets of this TagUpdate.
        :param drivers: The drivers of this TagUpdate.
        :param machines: The machines of this TagUpdate.
        :param name: The name of this TagUpdate.
        :param parent_tag_id: The parent_tag_id of this TagUpdate.
        :param sensors: The sensors of this TagUpdate.
        :param vehicles: The vehicles of this TagUpdate.
        """
        self.openapi_types = {
            'assets': List[TaggedAssetBase],
            'drivers': List[TaggedDriverBase],
            'machines': List[TaggedMachineBase],
            'name': str,
            'parent_tag_id': int,
            'sensors': List[TaggedSensorBase],
            'vehicles': List[TaggedVehicleBase]
        }

        self.attribute_map = {
            'assets': 'assets',
            'drivers': 'drivers',
            'machines': 'machines',
            'name': 'name',
            'parent_tag_id': 'parentTagId',
            'sensors': 'sensors',
            'vehicles': 'vehicles'
        }

        self._assets = assets
        self._drivers = drivers
        self._machines = machines
        self._name = name
        self._parent_tag_id = parent_tag_id
        self._sensors = sensors
        self._vehicles = vehicles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagUpdate of this TagUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this TagUpdate.

        The assets that belong to this tag.

        :return: The assets of this TagUpdate.
        :rtype: List[TaggedAssetBase]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this TagUpdate.

        The assets that belong to this tag.

        :param assets: The assets of this TagUpdate.
        :type assets: List[TaggedAssetBase]
        """

        self._assets = assets

    @property
    def drivers(self):
        """Gets the drivers of this TagUpdate.

        The drivers that belong to this tag.

        :return: The drivers of this TagUpdate.
        :rtype: List[TaggedDriverBase]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """Sets the drivers of this TagUpdate.

        The drivers that belong to this tag.

        :param drivers: The drivers of this TagUpdate.
        :type drivers: List[TaggedDriverBase]
        """

        self._drivers = drivers

    @property
    def machines(self):
        """Gets the machines of this TagUpdate.

        The machines that belong to this tag.

        :return: The machines of this TagUpdate.
        :rtype: List[TaggedMachineBase]
        """
        return self._machines

    @machines.setter
    def machines(self, machines):
        """Sets the machines of this TagUpdate.

        The machines that belong to this tag.

        :param machines: The machines of this TagUpdate.
        :type machines: List[TaggedMachineBase]
        """

        self._machines = machines

    @property
    def name(self):
        """Gets the name of this TagUpdate.

        Updated name of this tag.

        :return: The name of this TagUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagUpdate.

        Updated name of this tag.

        :param name: The name of this TagUpdate.
        :type name: str
        """

        self._name = name

    @property
    def parent_tag_id(self):
        """Gets the parent_tag_id of this TagUpdate.

        If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.

        :return: The parent_tag_id of this TagUpdate.
        :rtype: int
        """
        return self._parent_tag_id

    @parent_tag_id.setter
    def parent_tag_id(self, parent_tag_id):
        """Sets the parent_tag_id of this TagUpdate.

        If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.

        :param parent_tag_id: The parent_tag_id of this TagUpdate.
        :type parent_tag_id: int
        """

        self._parent_tag_id = parent_tag_id

    @property
    def sensors(self):
        """Gets the sensors of this TagUpdate.

        The sensors that belong to this tag.

        :return: The sensors of this TagUpdate.
        :rtype: List[TaggedSensorBase]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this TagUpdate.

        The sensors that belong to this tag.

        :param sensors: The sensors of this TagUpdate.
        :type sensors: List[TaggedSensorBase]
        """

        self._sensors = sensors

    @property
    def vehicles(self):
        """Gets the vehicles of this TagUpdate.

        The vehicles that belong to this tag.

        :return: The vehicles of this TagUpdate.
        :rtype: List[TaggedVehicleBase]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this TagUpdate.

        The vehicles that belong to this tag.

        :param vehicles: The vehicles of this TagUpdate.
        :type vehicles: List[TaggedVehicleBase]
        """

        self._vehicles = vehicles
