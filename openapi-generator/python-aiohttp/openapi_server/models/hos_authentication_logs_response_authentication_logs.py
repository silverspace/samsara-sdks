# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class HosAuthenticationLogsResponseAuthenticationLogs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, address: str=None, city: str=None, happened_at_ms: int=None, address_name: str=None, state: str=None):
        """HosAuthenticationLogsResponseAuthenticationLogs - a model defined in OpenAPI

        :param action_type: The action_type of this HosAuthenticationLogsResponseAuthenticationLogs.
        :param address: The address of this HosAuthenticationLogsResponseAuthenticationLogs.
        :param city: The city of this HosAuthenticationLogsResponseAuthenticationLogs.
        :param happened_at_ms: The happened_at_ms of this HosAuthenticationLogsResponseAuthenticationLogs.
        :param address_name: The address_name of this HosAuthenticationLogsResponseAuthenticationLogs.
        :param state: The state of this HosAuthenticationLogsResponseAuthenticationLogs.
        """
        self.openapi_types = {
            'action_type': str,
            'address': str,
            'city': str,
            'happened_at_ms': int,
            'address_name': str,
            'state': str
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'address': 'address',
            'city': 'city',
            'happened_at_ms': 'happenedAtMs',
            'address_name': 'addressName',
            'state': 'state'
        }

        self._action_type = action_type
        self._address = address
        self._city = city
        self._happened_at_ms = happened_at_ms
        self._address_name = address_name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HosAuthenticationLogsResponseAuthenticationLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HosAuthenticationLogsResponse_authenticationLogs of this HosAuthenticationLogsResponseAuthenticationLogs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this HosAuthenticationLogsResponseAuthenticationLogs.

        The log type - one of 'signin' or 'signout'

        :return: The action_type of this HosAuthenticationLogsResponseAuthenticationLogs.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this HosAuthenticationLogsResponseAuthenticationLogs.

        The log type - one of 'signin' or 'signout'

        :param action_type: The action_type of this HosAuthenticationLogsResponseAuthenticationLogs.
        :type action_type: str
        """

        self._action_type = action_type

    @property
    def address(self):
        """Gets the address of this HosAuthenticationLogsResponseAuthenticationLogs.

        Address at which the log was recorded, if applicable.

        :return: The address of this HosAuthenticationLogsResponseAuthenticationLogs.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this HosAuthenticationLogsResponseAuthenticationLogs.

        Address at which the log was recorded, if applicable.

        :param address: The address of this HosAuthenticationLogsResponseAuthenticationLogs.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this HosAuthenticationLogsResponseAuthenticationLogs.

        City in which the log was recorded, if applicable.

        :return: The city of this HosAuthenticationLogsResponseAuthenticationLogs.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this HosAuthenticationLogsResponseAuthenticationLogs.

        City in which the log was recorded, if applicable.

        :param city: The city of this HosAuthenticationLogsResponseAuthenticationLogs.
        :type city: str
        """

        self._city = city

    @property
    def happened_at_ms(self):
        """Gets the happened_at_ms of this HosAuthenticationLogsResponseAuthenticationLogs.

        The time at which the event was recorded in UNIX milliseconds.

        :return: The happened_at_ms of this HosAuthenticationLogsResponseAuthenticationLogs.
        :rtype: int
        """
        return self._happened_at_ms

    @happened_at_ms.setter
    def happened_at_ms(self, happened_at_ms):
        """Sets the happened_at_ms of this HosAuthenticationLogsResponseAuthenticationLogs.

        The time at which the event was recorded in UNIX milliseconds.

        :param happened_at_ms: The happened_at_ms of this HosAuthenticationLogsResponseAuthenticationLogs.
        :type happened_at_ms: int
        """

        self._happened_at_ms = happened_at_ms

    @property
    def address_name(self):
        """Gets the address_name of this HosAuthenticationLogsResponseAuthenticationLogs.

        Address name from the group address book at which the log was recorded, if applicable.

        :return: The address_name of this HosAuthenticationLogsResponseAuthenticationLogs.
        :rtype: str
        """
        return self._address_name

    @address_name.setter
    def address_name(self, address_name):
        """Sets the address_name of this HosAuthenticationLogsResponseAuthenticationLogs.

        Address name from the group address book at which the log was recorded, if applicable.

        :param address_name: The address_name of this HosAuthenticationLogsResponseAuthenticationLogs.
        :type address_name: str
        """

        self._address_name = address_name

    @property
    def state(self):
        """Gets the state of this HosAuthenticationLogsResponseAuthenticationLogs.

        State in which the log was recorded, if applicable.

        :return: The state of this HosAuthenticationLogsResponseAuthenticationLogs.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HosAuthenticationLogsResponseAuthenticationLogs.

        State in which the log was recorded, if applicable.

        :param state: The state of this HosAuthenticationLogsResponseAuthenticationLogs.
        :type state: str
        """

        self._state = state
