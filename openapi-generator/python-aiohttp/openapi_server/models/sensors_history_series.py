# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SensorsHistorySeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field: str=None, widget_id: int=None):
        """SensorsHistorySeries - a model defined in OpenAPI

        :param field: The field of this SensorsHistorySeries.
        :param widget_id: The widget_id of this SensorsHistorySeries.
        """
        self.openapi_types = {
            'field': str,
            'widget_id': int
        }

        self.attribute_map = {
            'field': 'field',
            'widget_id': 'widgetId'
        }

        self._field = field
        self._widget_id = widget_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensorsHistorySeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sensors_history_series of this SensorsHistorySeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field(self):
        """Gets the field of this SensorsHistorySeries.

        Field to query.

        :return: The field of this SensorsHistorySeries.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SensorsHistorySeries.

        Field to query.

        :param field: The field of this SensorsHistorySeries.
        :type field: str
        """
        allowed_values = ["ambientTemperature", "probeTemperature", "currentLoop1Raw", "currentLoop1Mapped", "currentLoop2Raw", "currentLoop2Mapped", "pmPowerTotal", "pmPhase1Power", "pmPhase2Power", "pmPhase3Power", "pmPhase1PowerFactor", "pmPhase2PowerFactor", "pmPhase3PowerFactor"]
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def widget_id(self):
        """Gets the widget_id of this SensorsHistorySeries.

        Sensor ID to query.

        :return: The widget_id of this SensorsHistorySeries.
        :rtype: int
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id):
        """Sets the widget_id of this SensorsHistorySeries.

        Sensor ID to query.

        :param widget_id: The widget_id of this SensorsHistorySeries.
        :type widget_id: int
        """
        if widget_id is None:
            raise ValueError("Invalid value for `widget_id`, must not be `None`")

        self._widget_id = widget_id
