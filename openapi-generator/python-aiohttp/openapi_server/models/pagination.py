# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_cursor: str=None, has_next_page: bool=None, has_prev_page: bool=None, start_cursor: str=None):
        """Pagination - a model defined in OpenAPI

        :param end_cursor: The end_cursor of this Pagination.
        :param has_next_page: The has_next_page of this Pagination.
        :param has_prev_page: The has_prev_page of this Pagination.
        :param start_cursor: The start_cursor of this Pagination.
        """
        self.openapi_types = {
            'end_cursor': str,
            'has_next_page': bool,
            'has_prev_page': bool,
            'start_cursor': str
        }

        self.attribute_map = {
            'end_cursor': 'endCursor',
            'has_next_page': 'hasNextPage',
            'has_prev_page': 'hasPrevPage',
            'start_cursor': 'startCursor'
        }

        self._end_cursor = end_cursor
        self._has_next_page = has_next_page
        self._has_prev_page = has_prev_page
        self._start_cursor = start_cursor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_cursor(self):
        """Gets the end_cursor of this Pagination.

        Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'starting_after' query parameter.

        :return: The end_cursor of this Pagination.
        :rtype: str
        """
        return self._end_cursor

    @end_cursor.setter
    def end_cursor(self, end_cursor):
        """Sets the end_cursor of this Pagination.

        Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'starting_after' query parameter.

        :param end_cursor: The end_cursor of this Pagination.
        :type end_cursor: str
        """
        if end_cursor is None:
            raise ValueError("Invalid value for `end_cursor`, must not be `None`")

        self._end_cursor = end_cursor

    @property
    def has_next_page(self):
        """Gets the has_next_page of this Pagination.

        True if there are more pages of results after this response.

        :return: The has_next_page of this Pagination.
        :rtype: bool
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this Pagination.

        True if there are more pages of results after this response.

        :param has_next_page: The has_next_page of this Pagination.
        :type has_next_page: bool
        """
        if has_next_page is None:
            raise ValueError("Invalid value for `has_next_page`, must not be `None`")

        self._has_next_page = has_next_page

    @property
    def has_prev_page(self):
        """Gets the has_prev_page of this Pagination.

        True if there are more pages of results before this response.

        :return: The has_prev_page of this Pagination.
        :rtype: bool
        """
        return self._has_prev_page

    @has_prev_page.setter
    def has_prev_page(self, has_prev_page):
        """Sets the has_prev_page of this Pagination.

        True if there are more pages of results before this response.

        :param has_prev_page: The has_prev_page of this Pagination.
        :type has_prev_page: bool
        """
        if has_prev_page is None:
            raise ValueError("Invalid value for `has_prev_page`, must not be `None`")

        self._has_prev_page = has_prev_page

    @property
    def start_cursor(self):
        """Gets the start_cursor of this Pagination.

        Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request's 'ending_before' query parameter.

        :return: The start_cursor of this Pagination.
        :rtype: str
        """
        return self._start_cursor

    @start_cursor.setter
    def start_cursor(self, start_cursor):
        """Sets the start_cursor of this Pagination.

        Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request's 'ending_before' query parameter.

        :param start_cursor: The start_cursor of this Pagination.
        :type start_cursor: str
        """
        if start_cursor is None:
            raise ValueError("Invalid value for `start_cursor`, must not be `None`")

        self._start_cursor = start_cursor
