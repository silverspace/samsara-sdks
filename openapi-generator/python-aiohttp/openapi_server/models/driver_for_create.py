# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.driver_base import DriverBase
from openapi_server import util


class DriverForCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eld_adverse_weather_exemption_enabled: bool=None, eld_big_day_exemption_enabled: bool=None, eld_day_start_hour: int=None, eld_exempt: bool=None, eld_exempt_reason: str=None, eld_pc_enabled: bool=False, eld_ym_enabled: bool=False, external_ids: Dict[str, str]=None, group_id: int=None, license_number: str=None, license_state: str=None, name: str=None, notes: str=None, phone: str=None, username: str=None, vehicle_id: int=None, password: str=None, tag_ids: List[int]=None):
        """DriverForCreate - a model defined in OpenAPI

        :param eld_adverse_weather_exemption_enabled: The eld_adverse_weather_exemption_enabled of this DriverForCreate.
        :param eld_big_day_exemption_enabled: The eld_big_day_exemption_enabled of this DriverForCreate.
        :param eld_day_start_hour: The eld_day_start_hour of this DriverForCreate.
        :param eld_exempt: The eld_exempt of this DriverForCreate.
        :param eld_exempt_reason: The eld_exempt_reason of this DriverForCreate.
        :param eld_pc_enabled: The eld_pc_enabled of this DriverForCreate.
        :param eld_ym_enabled: The eld_ym_enabled of this DriverForCreate.
        :param external_ids: The external_ids of this DriverForCreate.
        :param group_id: The group_id of this DriverForCreate.
        :param license_number: The license_number of this DriverForCreate.
        :param license_state: The license_state of this DriverForCreate.
        :param name: The name of this DriverForCreate.
        :param notes: The notes of this DriverForCreate.
        :param phone: The phone of this DriverForCreate.
        :param username: The username of this DriverForCreate.
        :param vehicle_id: The vehicle_id of this DriverForCreate.
        :param password: The password of this DriverForCreate.
        :param tag_ids: The tag_ids of this DriverForCreate.
        """
        self.openapi_types = {
            'eld_adverse_weather_exemption_enabled': bool,
            'eld_big_day_exemption_enabled': bool,
            'eld_day_start_hour': int,
            'eld_exempt': bool,
            'eld_exempt_reason': str,
            'eld_pc_enabled': bool,
            'eld_ym_enabled': bool,
            'external_ids': Dict[str, str],
            'group_id': int,
            'license_number': str,
            'license_state': str,
            'name': str,
            'notes': str,
            'phone': str,
            'username': str,
            'vehicle_id': int,
            'password': str,
            'tag_ids': List[int]
        }

        self.attribute_map = {
            'eld_adverse_weather_exemption_enabled': 'eldAdverseWeatherExemptionEnabled',
            'eld_big_day_exemption_enabled': 'eldBigDayExemptionEnabled',
            'eld_day_start_hour': 'eldDayStartHour',
            'eld_exempt': 'eldExempt',
            'eld_exempt_reason': 'eldExemptReason',
            'eld_pc_enabled': 'eldPcEnabled',
            'eld_ym_enabled': 'eldYmEnabled',
            'external_ids': 'externalIds',
            'group_id': 'groupId',
            'license_number': 'licenseNumber',
            'license_state': 'licenseState',
            'name': 'name',
            'notes': 'notes',
            'phone': 'phone',
            'username': 'username',
            'vehicle_id': 'vehicleId',
            'password': 'password',
            'tag_ids': 'tagIds'
        }

        self._eld_adverse_weather_exemption_enabled = eld_adverse_weather_exemption_enabled
        self._eld_big_day_exemption_enabled = eld_big_day_exemption_enabled
        self._eld_day_start_hour = eld_day_start_hour
        self._eld_exempt = eld_exempt
        self._eld_exempt_reason = eld_exempt_reason
        self._eld_pc_enabled = eld_pc_enabled
        self._eld_ym_enabled = eld_ym_enabled
        self._external_ids = external_ids
        self._group_id = group_id
        self._license_number = license_number
        self._license_state = license_state
        self._name = name
        self._notes = notes
        self._phone = phone
        self._username = username
        self._vehicle_id = vehicle_id
        self._password = password
        self._tag_ids = tag_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriverForCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriverForCreate of this DriverForCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eld_adverse_weather_exemption_enabled(self):
        """Gets the eld_adverse_weather_exemption_enabled of this DriverForCreate.

        Flag indicating this driver may use Adverse Weather exemptions in ELD logs.

        :return: The eld_adverse_weather_exemption_enabled of this DriverForCreate.
        :rtype: bool
        """
        return self._eld_adverse_weather_exemption_enabled

    @eld_adverse_weather_exemption_enabled.setter
    def eld_adverse_weather_exemption_enabled(self, eld_adverse_weather_exemption_enabled):
        """Sets the eld_adverse_weather_exemption_enabled of this DriverForCreate.

        Flag indicating this driver may use Adverse Weather exemptions in ELD logs.

        :param eld_adverse_weather_exemption_enabled: The eld_adverse_weather_exemption_enabled of this DriverForCreate.
        :type eld_adverse_weather_exemption_enabled: bool
        """

        self._eld_adverse_weather_exemption_enabled = eld_adverse_weather_exemption_enabled

    @property
    def eld_big_day_exemption_enabled(self):
        """Gets the eld_big_day_exemption_enabled of this DriverForCreate.

        Flag indicating this driver may use Big Day excemptions in ELD logs.

        :return: The eld_big_day_exemption_enabled of this DriverForCreate.
        :rtype: bool
        """
        return self._eld_big_day_exemption_enabled

    @eld_big_day_exemption_enabled.setter
    def eld_big_day_exemption_enabled(self, eld_big_day_exemption_enabled):
        """Sets the eld_big_day_exemption_enabled of this DriverForCreate.

        Flag indicating this driver may use Big Day excemptions in ELD logs.

        :param eld_big_day_exemption_enabled: The eld_big_day_exemption_enabled of this DriverForCreate.
        :type eld_big_day_exemption_enabled: bool
        """

        self._eld_big_day_exemption_enabled = eld_big_day_exemption_enabled

    @property
    def eld_day_start_hour(self):
        """Gets the eld_day_start_hour of this DriverForCreate.

        0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.

        :return: The eld_day_start_hour of this DriverForCreate.
        :rtype: int
        """
        return self._eld_day_start_hour

    @eld_day_start_hour.setter
    def eld_day_start_hour(self, eld_day_start_hour):
        """Sets the eld_day_start_hour of this DriverForCreate.

        0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.

        :param eld_day_start_hour: The eld_day_start_hour of this DriverForCreate.
        :type eld_day_start_hour: int
        """

        self._eld_day_start_hour = eld_day_start_hour

    @property
    def eld_exempt(self):
        """Gets the eld_exempt of this DriverForCreate.

        Flag indicating this driver is exempt from the Electronic Logging Mandate.

        :return: The eld_exempt of this DriverForCreate.
        :rtype: bool
        """
        return self._eld_exempt

    @eld_exempt.setter
    def eld_exempt(self, eld_exempt):
        """Sets the eld_exempt of this DriverForCreate.

        Flag indicating this driver is exempt from the Electronic Logging Mandate.

        :param eld_exempt: The eld_exempt of this DriverForCreate.
        :type eld_exempt: bool
        """

        self._eld_exempt = eld_exempt

    @property
    def eld_exempt_reason(self):
        """Gets the eld_exempt_reason of this DriverForCreate.

        Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).

        :return: The eld_exempt_reason of this DriverForCreate.
        :rtype: str
        """
        return self._eld_exempt_reason

    @eld_exempt_reason.setter
    def eld_exempt_reason(self, eld_exempt_reason):
        """Sets the eld_exempt_reason of this DriverForCreate.

        Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).

        :param eld_exempt_reason: The eld_exempt_reason of this DriverForCreate.
        :type eld_exempt_reason: str
        """

        self._eld_exempt_reason = eld_exempt_reason

    @property
    def eld_pc_enabled(self):
        """Gets the eld_pc_enabled of this DriverForCreate.

        Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.

        :return: The eld_pc_enabled of this DriverForCreate.
        :rtype: bool
        """
        return self._eld_pc_enabled

    @eld_pc_enabled.setter
    def eld_pc_enabled(self, eld_pc_enabled):
        """Sets the eld_pc_enabled of this DriverForCreate.

        Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.

        :param eld_pc_enabled: The eld_pc_enabled of this DriverForCreate.
        :type eld_pc_enabled: bool
        """

        self._eld_pc_enabled = eld_pc_enabled

    @property
    def eld_ym_enabled(self):
        """Gets the eld_ym_enabled of this DriverForCreate.

        Flag indicating this driver may select the Yard Move duty status in ELD logs.

        :return: The eld_ym_enabled of this DriverForCreate.
        :rtype: bool
        """
        return self._eld_ym_enabled

    @eld_ym_enabled.setter
    def eld_ym_enabled(self, eld_ym_enabled):
        """Sets the eld_ym_enabled of this DriverForCreate.

        Flag indicating this driver may select the Yard Move duty status in ELD logs.

        :param eld_ym_enabled: The eld_ym_enabled of this DriverForCreate.
        :type eld_ym_enabled: bool
        """

        self._eld_ym_enabled = eld_ym_enabled

    @property
    def external_ids(self):
        """Gets the external_ids of this DriverForCreate.

        Dictionary of external IDs (string key-value pairs)

        :return: The external_ids of this DriverForCreate.
        :rtype: Dict[str, str]
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this DriverForCreate.

        Dictionary of external IDs (string key-value pairs)

        :param external_ids: The external_ids of this DriverForCreate.
        :type external_ids: Dict[str, str]
        """

        self._external_ids = external_ids

    @property
    def group_id(self):
        """Gets the group_id of this DriverForCreate.

        ID of the group if the organization has multiple groups (uncommon).

        :return: The group_id of this DriverForCreate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DriverForCreate.

        ID of the group if the organization has multiple groups (uncommon).

        :param group_id: The group_id of this DriverForCreate.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def license_number(self):
        """Gets the license_number of this DriverForCreate.

        Driver's state issued license number.

        :return: The license_number of this DriverForCreate.
        :rtype: str
        """
        return self._license_number

    @license_number.setter
    def license_number(self, license_number):
        """Sets the license_number of this DriverForCreate.

        Driver's state issued license number.

        :param license_number: The license_number of this DriverForCreate.
        :type license_number: str
        """

        self._license_number = license_number

    @property
    def license_state(self):
        """Gets the license_state of this DriverForCreate.

        Abbreviation of state that issued driver's license.

        :return: The license_state of this DriverForCreate.
        :rtype: str
        """
        return self._license_state

    @license_state.setter
    def license_state(self, license_state):
        """Sets the license_state of this DriverForCreate.

        Abbreviation of state that issued driver's license.

        :param license_state: The license_state of this DriverForCreate.
        :type license_state: str
        """

        self._license_state = license_state

    @property
    def name(self):
        """Gets the name of this DriverForCreate.

        Driver's name.

        :return: The name of this DriverForCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DriverForCreate.

        Driver's name.

        :param name: The name of this DriverForCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this DriverForCreate.

        Notes about the driver.

        :return: The notes of this DriverForCreate.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DriverForCreate.

        Notes about the driver.

        :param notes: The notes of this DriverForCreate.
        :type notes: str
        """

        self._notes = notes

    @property
    def phone(self):
        """Gets the phone of this DriverForCreate.

        Driver's phone number. Please include only digits, ex. 4157771234

        :return: The phone of this DriverForCreate.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this DriverForCreate.

        Driver's phone number. Please include only digits, ex. 4157771234

        :param phone: The phone of this DriverForCreate.
        :type phone: str
        """

        self._phone = phone

    @property
    def username(self):
        """Gets the username of this DriverForCreate.

        Driver's login username into the driver app.

        :return: The username of this DriverForCreate.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DriverForCreate.

        Driver's login username into the driver app.

        :param username: The username of this DriverForCreate.
        :type username: str
        """

        self._username = username

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this DriverForCreate.

        ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).

        :return: The vehicle_id of this DriverForCreate.
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this DriverForCreate.

        ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).

        :param vehicle_id: The vehicle_id of this DriverForCreate.
        :type vehicle_id: int
        """

        self._vehicle_id = vehicle_id

    @property
    def password(self):
        """Gets the password of this DriverForCreate.

        Driver's password for the driver app.

        :return: The password of this DriverForCreate.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DriverForCreate.

        Driver's password for the driver app.

        :param password: The password of this DriverForCreate.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def tag_ids(self):
        """Gets the tag_ids of this DriverForCreate.

        A list of tag IDs.

        :return: The tag_ids of this DriverForCreate.
        :rtype: List[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this DriverForCreate.

        A list of tag IDs.

        :param tag_ids: The tag_ids of this DriverForCreate.
        :type tag_ids: List[int]
        """

        self._tag_ids = tag_ids
