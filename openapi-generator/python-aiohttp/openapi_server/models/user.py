# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.user_base import UserBase
from openapi_server.models.user_tag_role import UserTagRole
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, email: str=None, name: str=None, organization_role_id: str=None, id: int=None, organization_role: str=None, tag_roles: List[UserTagRole]=None):
        """User - a model defined in OpenAPI

        :param auth_type: The auth_type of this User.
        :param email: The email of this User.
        :param name: The name of this User.
        :param organization_role_id: The organization_role_id of this User.
        :param id: The id of this User.
        :param organization_role: The organization_role of this User.
        :param tag_roles: The tag_roles of this User.
        """
        self.openapi_types = {
            'auth_type': str,
            'email': str,
            'name': str,
            'organization_role_id': str,
            'id': int,
            'organization_role': str,
            'tag_roles': List[UserTagRole]
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'email': 'email',
            'name': 'name',
            'organization_role_id': 'organizationRoleId',
            'id': 'id',
            'organization_role': 'organizationRole',
            'tag_roles': 'tagRoles'
        }

        self._auth_type = auth_type
        self._email = email
        self._name = name
        self._organization_role_id = organization_role_id
        self._id = id
        self._organization_role = organization_role
        self._tag_roles = tag_roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this User.

        The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.

        :return: The auth_type of this User.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this User.

        The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.

        :param auth_type: The auth_type of this User.
        :type auth_type: str
        """
        allowed_values = ["default", "saml"]
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def email(self):
        """Gets the email of this User.

        The email address of this user.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email address of this user.

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def name(self):
        """Gets the name of this User.

        The first and last name of the user.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The first and last name of the user.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def organization_role_id(self):
        """Gets the organization_role_id of this User.

        The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.

        :return: The organization_role_id of this User.
        :rtype: str
        """
        return self._organization_role_id

    @organization_role_id.setter
    def organization_role_id(self, organization_role_id):
        """Sets the organization_role_id of this User.

        The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.

        :param organization_role_id: The organization_role_id of this User.
        :type organization_role_id: str
        """

        self._organization_role_id = organization_role_id

    @property
    def id(self):
        """Gets the id of this User.

        The ID of the User record.

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The ID of the User record.

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def organization_role(self):
        """Gets the organization_role of this User.

        The name of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.

        :return: The organization_role of this User.
        :rtype: str
        """
        return self._organization_role

    @organization_role.setter
    def organization_role(self, organization_role):
        """Sets the organization_role of this User.

        The name of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.

        :param organization_role: The organization_role of this User.
        :type organization_role: str
        """

        self._organization_role = organization_role

    @property
    def tag_roles(self):
        """Gets the tag_roles of this User.

        The specific tags this user has access to. This will be blank for users that have full access to the organization.

        :return: The tag_roles of this User.
        :rtype: List[UserTagRole]
        """
        return self._tag_roles

    @tag_roles.setter
    def tag_roles(self, tag_roles):
        """Sets the tag_roles of this User.

        The specific tags this user has access to. This will be blank for users that have full access to the organization.

        :param tag_roles: The tag_roles of this User.
        :type tag_roles: List[UserTagRole]
        """

        self._tag_roles = tag_roles
