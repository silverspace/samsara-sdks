# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class HosLogsResponseLogs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loc_lng: float=None, log_start_ms: int=None, driver_id: int=None, status_type: str=None, loc_city: str=None, group_id: int=None, loc_name: str=None, loc_lat: float=None, remark: str=None, loc_state: str=None, vehicle_id: int=None, codriver_ids: List[int]=None):
        """HosLogsResponseLogs - a model defined in OpenAPI

        :param loc_lng: The loc_lng of this HosLogsResponseLogs.
        :param log_start_ms: The log_start_ms of this HosLogsResponseLogs.
        :param driver_id: The driver_id of this HosLogsResponseLogs.
        :param status_type: The status_type of this HosLogsResponseLogs.
        :param loc_city: The loc_city of this HosLogsResponseLogs.
        :param group_id: The group_id of this HosLogsResponseLogs.
        :param loc_name: The loc_name of this HosLogsResponseLogs.
        :param loc_lat: The loc_lat of this HosLogsResponseLogs.
        :param remark: The remark of this HosLogsResponseLogs.
        :param loc_state: The loc_state of this HosLogsResponseLogs.
        :param vehicle_id: The vehicle_id of this HosLogsResponseLogs.
        :param codriver_ids: The codriver_ids of this HosLogsResponseLogs.
        """
        self.openapi_types = {
            'loc_lng': float,
            'log_start_ms': int,
            'driver_id': int,
            'status_type': str,
            'loc_city': str,
            'group_id': int,
            'loc_name': str,
            'loc_lat': float,
            'remark': str,
            'loc_state': str,
            'vehicle_id': int,
            'codriver_ids': List[int]
        }

        self.attribute_map = {
            'loc_lng': 'locLng',
            'log_start_ms': 'logStartMs',
            'driver_id': 'driverId',
            'status_type': 'statusType',
            'loc_city': 'locCity',
            'group_id': 'groupId',
            'loc_name': 'locName',
            'loc_lat': 'locLat',
            'remark': 'remark',
            'loc_state': 'locState',
            'vehicle_id': 'vehicleId',
            'codriver_ids': 'codriverIds'
        }

        self._loc_lng = loc_lng
        self._log_start_ms = log_start_ms
        self._driver_id = driver_id
        self._status_type = status_type
        self._loc_city = loc_city
        self._group_id = group_id
        self._loc_name = loc_name
        self._loc_lat = loc_lat
        self._remark = remark
        self._loc_state = loc_state
        self._vehicle_id = vehicle_id
        self._codriver_ids = codriver_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HosLogsResponseLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HosLogsResponse_logs of this HosLogsResponseLogs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loc_lng(self):
        """Gets the loc_lng of this HosLogsResponseLogs.

        Longitude at which the log was recorded.

        :return: The loc_lng of this HosLogsResponseLogs.
        :rtype: float
        """
        return self._loc_lng

    @loc_lng.setter
    def loc_lng(self, loc_lng):
        """Sets the loc_lng of this HosLogsResponseLogs.

        Longitude at which the log was recorded.

        :param loc_lng: The loc_lng of this HosLogsResponseLogs.
        :type loc_lng: float
        """

        self._loc_lng = loc_lng

    @property
    def log_start_ms(self):
        """Gets the log_start_ms of this HosLogsResponseLogs.

        The time at which the log/HOS status started in UNIX milliseconds.

        :return: The log_start_ms of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._log_start_ms

    @log_start_ms.setter
    def log_start_ms(self, log_start_ms):
        """Sets the log_start_ms of this HosLogsResponseLogs.

        The time at which the log/HOS status started in UNIX milliseconds.

        :param log_start_ms: The log_start_ms of this HosLogsResponseLogs.
        :type log_start_ms: int
        """

        self._log_start_ms = log_start_ms

    @property
    def driver_id(self):
        """Gets the driver_id of this HosLogsResponseLogs.

        ID of the driver.

        :return: The driver_id of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this HosLogsResponseLogs.

        ID of the driver.

        :param driver_id: The driver_id of this HosLogsResponseLogs.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def status_type(self):
        """Gets the status_type of this HosLogsResponseLogs.

        The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.

        :return: The status_type of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._status_type

    @status_type.setter
    def status_type(self, status_type):
        """Sets the status_type of this HosLogsResponseLogs.

        The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.

        :param status_type: The status_type of this HosLogsResponseLogs.
        :type status_type: str
        """

        self._status_type = status_type

    @property
    def loc_city(self):
        """Gets the loc_city of this HosLogsResponseLogs.

        City in which the log was recorded.

        :return: The loc_city of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._loc_city

    @loc_city.setter
    def loc_city(self, loc_city):
        """Sets the loc_city of this HosLogsResponseLogs.

        City in which the log was recorded.

        :param loc_city: The loc_city of this HosLogsResponseLogs.
        :type loc_city: str
        """

        self._loc_city = loc_city

    @property
    def group_id(self):
        """Gets the group_id of this HosLogsResponseLogs.

        ID of the group.

        :return: The group_id of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this HosLogsResponseLogs.

        ID of the group.

        :param group_id: The group_id of this HosLogsResponseLogs.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def loc_name(self):
        """Gets the loc_name of this HosLogsResponseLogs.

        Name of location at which the log was recorded.

        :return: The loc_name of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this HosLogsResponseLogs.

        Name of location at which the log was recorded.

        :param loc_name: The loc_name of this HosLogsResponseLogs.
        :type loc_name: str
        """

        self._loc_name = loc_name

    @property
    def loc_lat(self):
        """Gets the loc_lat of this HosLogsResponseLogs.

        Latitude at which the log was recorded.

        :return: The loc_lat of this HosLogsResponseLogs.
        :rtype: float
        """
        return self._loc_lat

    @loc_lat.setter
    def loc_lat(self, loc_lat):
        """Sets the loc_lat of this HosLogsResponseLogs.

        Latitude at which the log was recorded.

        :param loc_lat: The loc_lat of this HosLogsResponseLogs.
        :type loc_lat: float
        """

        self._loc_lat = loc_lat

    @property
    def remark(self):
        """Gets the remark of this HosLogsResponseLogs.

        Remark associated with the log entry.

        :return: The remark of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this HosLogsResponseLogs.

        Remark associated with the log entry.

        :param remark: The remark of this HosLogsResponseLogs.
        :type remark: str
        """

        self._remark = remark

    @property
    def loc_state(self):
        """Gets the loc_state of this HosLogsResponseLogs.

        State in which the log was recorded.

        :return: The loc_state of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._loc_state

    @loc_state.setter
    def loc_state(self, loc_state):
        """Sets the loc_state of this HosLogsResponseLogs.

        State in which the log was recorded.

        :param loc_state: The loc_state of this HosLogsResponseLogs.
        :type loc_state: str
        """

        self._loc_state = loc_state

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this HosLogsResponseLogs.

        ID of the vehicle.

        :return: The vehicle_id of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this HosLogsResponseLogs.

        ID of the vehicle.

        :param vehicle_id: The vehicle_id of this HosLogsResponseLogs.
        :type vehicle_id: int
        """

        self._vehicle_id = vehicle_id

    @property
    def codriver_ids(self):
        """Gets the codriver_ids of this HosLogsResponseLogs.


        :return: The codriver_ids of this HosLogsResponseLogs.
        :rtype: List[int]
        """
        return self._codriver_ids

    @codriver_ids.setter
    def codriver_ids(self, codriver_ids):
        """Sets the codriver_ids of this HosLogsResponseLogs.


        :param codriver_ids: The codriver_ids of this HosLogsResponseLogs.
        :type codriver_ids: List[int]
        """

        self._codriver_ids = codriver_ids
