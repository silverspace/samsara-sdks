# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.asset_cable import AssetCable
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_serial_number: str=None, cable: List[AssetCable]=None, engine_hours: int=None, id: int=None, name: str=None):
        """Asset - a model defined in OpenAPI

        :param asset_serial_number: The asset_serial_number of this Asset.
        :param cable: The cable of this Asset.
        :param engine_hours: The engine_hours of this Asset.
        :param id: The id of this Asset.
        :param name: The name of this Asset.
        """
        self.openapi_types = {
            'asset_serial_number': str,
            'cable': List[AssetCable],
            'engine_hours': int,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'asset_serial_number': 'assetSerialNumber',
            'cable': 'cable',
            'engine_hours': 'engineHours',
            'id': 'id',
            'name': 'name'
        }

        self._asset_serial_number = asset_serial_number
        self._cable = cable
        self._engine_hours = engine_hours
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_serial_number(self):
        """Gets the asset_serial_number of this Asset.

        Serial number of the host asset

        :return: The asset_serial_number of this Asset.
        :rtype: str
        """
        return self._asset_serial_number

    @asset_serial_number.setter
    def asset_serial_number(self, asset_serial_number):
        """Sets the asset_serial_number of this Asset.

        Serial number of the host asset

        :param asset_serial_number: The asset_serial_number of this Asset.
        :type asset_serial_number: str
        """

        self._asset_serial_number = asset_serial_number

    @property
    def cable(self):
        """Gets the cable of this Asset.

        The cable connected to the asset

        :return: The cable of this Asset.
        :rtype: List[AssetCable]
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this Asset.

        The cable connected to the asset

        :param cable: The cable of this Asset.
        :type cable: List[AssetCable]
        """

        self._cable = cable

    @property
    def engine_hours(self):
        """Gets the engine_hours of this Asset.

        Engine hours

        :return: The engine_hours of this Asset.
        :rtype: int
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this Asset.

        Engine hours

        :param engine_hours: The engine_hours of this Asset.
        :type engine_hours: int
        """

        self._engine_hours = engine_hours

    @property
    def id(self):
        """Gets the id of this Asset.

        Asset ID

        :return: The id of this Asset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.

        Asset ID

        :param id: The id of this Asset.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Asset.

        Asset name

        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.

        Asset name

        :param name: The name of this Asset.
        :type name: str
        """

        self._name = name
