# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DispatchJobCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_address: str=None, destination_address_id: int=None, destination_lat: float=None, destination_lng: float=None, destination_name: str=None, notes: str=None, scheduled_arrival_time_ms: int=None, scheduled_departure_time_ms: int=None):
        """DispatchJobCreate - a model defined in OpenAPI

        :param destination_address: The destination_address of this DispatchJobCreate.
        :param destination_address_id: The destination_address_id of this DispatchJobCreate.
        :param destination_lat: The destination_lat of this DispatchJobCreate.
        :param destination_lng: The destination_lng of this DispatchJobCreate.
        :param destination_name: The destination_name of this DispatchJobCreate.
        :param notes: The notes of this DispatchJobCreate.
        :param scheduled_arrival_time_ms: The scheduled_arrival_time_ms of this DispatchJobCreate.
        :param scheduled_departure_time_ms: The scheduled_departure_time_ms of this DispatchJobCreate.
        """
        self.openapi_types = {
            'destination_address': str,
            'destination_address_id': int,
            'destination_lat': float,
            'destination_lng': float,
            'destination_name': str,
            'notes': str,
            'scheduled_arrival_time_ms': int,
            'scheduled_departure_time_ms': int
        }

        self.attribute_map = {
            'destination_address': 'destination_address',
            'destination_address_id': 'destination_address_id',
            'destination_lat': 'destination_lat',
            'destination_lng': 'destination_lng',
            'destination_name': 'destination_name',
            'notes': 'notes',
            'scheduled_arrival_time_ms': 'scheduled_arrival_time_ms',
            'scheduled_departure_time_ms': 'scheduled_departure_time_ms'
        }

        self._destination_address = destination_address
        self._destination_address_id = destination_address_id
        self._destination_lat = destination_lat
        self._destination_lng = destination_lng
        self._destination_name = destination_name
        self._notes = notes
        self._scheduled_arrival_time_ms = scheduled_arrival_time_ms
        self._scheduled_departure_time_ms = scheduled_departure_time_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DispatchJobCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DispatchJobCreate of this DispatchJobCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_address(self):
        """Gets the destination_address of this DispatchJobCreate.

        The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.

        :return: The destination_address of this DispatchJobCreate.
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this DispatchJobCreate.

        The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.

        :param destination_address: The destination_address of this DispatchJobCreate.
        :type destination_address: str
        """

        self._destination_address = destination_address

    @property
    def destination_address_id(self):
        """Gets the destination_address_id of this DispatchJobCreate.

        ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.

        :return: The destination_address_id of this DispatchJobCreate.
        :rtype: int
        """
        return self._destination_address_id

    @destination_address_id.setter
    def destination_address_id(self, destination_address_id):
        """Sets the destination_address_id of this DispatchJobCreate.

        ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.

        :param destination_address_id: The destination_address_id of this DispatchJobCreate.
        :type destination_address_id: int
        """

        self._destination_address_id = destination_address_id

    @property
    def destination_lat(self):
        """Gets the destination_lat of this DispatchJobCreate.

        Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.

        :return: The destination_lat of this DispatchJobCreate.
        :rtype: float
        """
        return self._destination_lat

    @destination_lat.setter
    def destination_lat(self, destination_lat):
        """Sets the destination_lat of this DispatchJobCreate.

        Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.

        :param destination_lat: The destination_lat of this DispatchJobCreate.
        :type destination_lat: float
        """

        self._destination_lat = destination_lat

    @property
    def destination_lng(self):
        """Gets the destination_lng of this DispatchJobCreate.

        Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.

        :return: The destination_lng of this DispatchJobCreate.
        :rtype: float
        """
        return self._destination_lng

    @destination_lng.setter
    def destination_lng(self, destination_lng):
        """Sets the destination_lng of this DispatchJobCreate.

        Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.

        :param destination_lng: The destination_lng of this DispatchJobCreate.
        :type destination_lng: float
        """

        self._destination_lng = destination_lng

    @property
    def destination_name(self):
        """Gets the destination_name of this DispatchJobCreate.

        The name of the job destination. If provided, it will take precedence over the name of the address book entry.

        :return: The destination_name of this DispatchJobCreate.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this DispatchJobCreate.

        The name of the job destination. If provided, it will take precedence over the name of the address book entry.

        :param destination_name: The destination_name of this DispatchJobCreate.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def notes(self):
        """Gets the notes of this DispatchJobCreate.

        Notes regarding the details of this job.

        :return: The notes of this DispatchJobCreate.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DispatchJobCreate.

        Notes regarding the details of this job.

        :param notes: The notes of this DispatchJobCreate.
        :type notes: str
        """

        self._notes = notes

    @property
    def scheduled_arrival_time_ms(self):
        """Gets the scheduled_arrival_time_ms of this DispatchJobCreate.

        The time at which the assigned driver is scheduled to arrive at the job destination.

        :return: The scheduled_arrival_time_ms of this DispatchJobCreate.
        :rtype: int
        """
        return self._scheduled_arrival_time_ms

    @scheduled_arrival_time_ms.setter
    def scheduled_arrival_time_ms(self, scheduled_arrival_time_ms):
        """Sets the scheduled_arrival_time_ms of this DispatchJobCreate.

        The time at which the assigned driver is scheduled to arrive at the job destination.

        :param scheduled_arrival_time_ms: The scheduled_arrival_time_ms of this DispatchJobCreate.
        :type scheduled_arrival_time_ms: int
        """
        if scheduled_arrival_time_ms is None:
            raise ValueError("Invalid value for `scheduled_arrival_time_ms`, must not be `None`")

        self._scheduled_arrival_time_ms = scheduled_arrival_time_ms

    @property
    def scheduled_departure_time_ms(self):
        """Gets the scheduled_departure_time_ms of this DispatchJobCreate.

        The time at which the assigned driver is scheduled to depart from the job destination.

        :return: The scheduled_departure_time_ms of this DispatchJobCreate.
        :rtype: int
        """
        return self._scheduled_departure_time_ms

    @scheduled_departure_time_ms.setter
    def scheduled_departure_time_ms(self, scheduled_departure_time_ms):
        """Sets the scheduled_departure_time_ms of this DispatchJobCreate.

        The time at which the assigned driver is scheduled to depart from the job destination.

        :param scheduled_departure_time_ms: The scheduled_departure_time_ms of this DispatchJobCreate.
        :type scheduled_departure_time_ms: int
        """

        self._scheduled_departure_time_ms = scheduled_departure_time_ms
