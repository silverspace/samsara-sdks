# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.vehicle_maintenance_j1939 import VehicleMaintenanceJ1939
from openapi_server.models.vehicle_maintenance_passenger import VehicleMaintenancePassenger
from openapi_server import util


class VehicleMaintenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, j1939: VehicleMaintenanceJ1939=None, passenger: VehicleMaintenancePassenger=None):
        """VehicleMaintenance - a model defined in OpenAPI

        :param id: The id of this VehicleMaintenance.
        :param j1939: The j1939 of this VehicleMaintenance.
        :param passenger: The passenger of this VehicleMaintenance.
        """
        self.openapi_types = {
            'id': int,
            'j1939': VehicleMaintenanceJ1939,
            'passenger': VehicleMaintenancePassenger
        }

        self.attribute_map = {
            'id': 'id',
            'j1939': 'j1939',
            'passenger': 'passenger'
        }

        self._id = id
        self._j1939 = j1939
        self._passenger = passenger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleMaintenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VehicleMaintenance of this VehicleMaintenance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VehicleMaintenance.

        ID of the vehicle.

        :return: The id of this VehicleMaintenance.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleMaintenance.

        ID of the vehicle.

        :param id: The id of this VehicleMaintenance.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def j1939(self):
        """Gets the j1939 of this VehicleMaintenance.


        :return: The j1939 of this VehicleMaintenance.
        :rtype: VehicleMaintenanceJ1939
        """
        return self._j1939

    @j1939.setter
    def j1939(self, j1939):
        """Sets the j1939 of this VehicleMaintenance.


        :param j1939: The j1939 of this VehicleMaintenance.
        :type j1939: VehicleMaintenanceJ1939
        """

        self._j1939 = j1939

    @property
    def passenger(self):
        """Gets the passenger of this VehicleMaintenance.


        :return: The passenger of this VehicleMaintenance.
        :rtype: VehicleMaintenancePassenger
        """
        return self._passenger

    @passenger.setter
    def passenger(self, passenger):
        """Sets the passenger of this VehicleMaintenance.


        :param passenger: The passenger of this VehicleMaintenance.
        :type passenger: VehicleMaintenancePassenger
        """

        self._passenger = passenger
