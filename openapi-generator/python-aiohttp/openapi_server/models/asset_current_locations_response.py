# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.asset_cable import AssetCable
from openapi_server.models.asset_current_location import AssetCurrentLocation
from openapi_server import util


class AssetCurrentLocationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cable: List[AssetCable]=None, engine_hours: int=None, id: int=None, location: List[AssetCurrentLocation]=None, name: str=None):
        """AssetCurrentLocationsResponse - a model defined in OpenAPI

        :param cable: The cable of this AssetCurrentLocationsResponse.
        :param engine_hours: The engine_hours of this AssetCurrentLocationsResponse.
        :param id: The id of this AssetCurrentLocationsResponse.
        :param location: The location of this AssetCurrentLocationsResponse.
        :param name: The name of this AssetCurrentLocationsResponse.
        """
        self.openapi_types = {
            'cable': List[AssetCable],
            'engine_hours': int,
            'id': int,
            'location': List[AssetCurrentLocation],
            'name': str
        }

        self.attribute_map = {
            'cable': 'cable',
            'engine_hours': 'engineHours',
            'id': 'id',
            'location': 'location',
            'name': 'name'
        }

        self._cable = cable
        self._engine_hours = engine_hours
        self._id = id
        self._location = location
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetCurrentLocationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetCurrentLocationsResponse of this AssetCurrentLocationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cable(self):
        """Gets the cable of this AssetCurrentLocationsResponse.

        The cable connected to the asset

        :return: The cable of this AssetCurrentLocationsResponse.
        :rtype: List[AssetCable]
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this AssetCurrentLocationsResponse.

        The cable connected to the asset

        :param cable: The cable of this AssetCurrentLocationsResponse.
        :type cable: List[AssetCable]
        """

        self._cable = cable

    @property
    def engine_hours(self):
        """Gets the engine_hours of this AssetCurrentLocationsResponse.

        Engine hours

        :return: The engine_hours of this AssetCurrentLocationsResponse.
        :rtype: int
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this AssetCurrentLocationsResponse.

        Engine hours

        :param engine_hours: The engine_hours of this AssetCurrentLocationsResponse.
        :type engine_hours: int
        """

        self._engine_hours = engine_hours

    @property
    def id(self):
        """Gets the id of this AssetCurrentLocationsResponse.

        Asset ID

        :return: The id of this AssetCurrentLocationsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetCurrentLocationsResponse.

        Asset ID

        :param id: The id of this AssetCurrentLocationsResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this AssetCurrentLocationsResponse.

        Current location of an asset

        :return: The location of this AssetCurrentLocationsResponse.
        :rtype: List[AssetCurrentLocation]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AssetCurrentLocationsResponse.

        Current location of an asset

        :param location: The location of this AssetCurrentLocationsResponse.
        :type location: List[AssetCurrentLocation]
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this AssetCurrentLocationsResponse.

        Asset name

        :return: The name of this AssetCurrentLocationsResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetCurrentLocationsResponse.

        Asset name

        :param name: The name of this AssetCurrentLocationsResponse.
        :type name: str
        """

        self._name = name
