# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineObject2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, group_id: int=None, name: str=None, radius: int=None):
        """InlineObject2 - a model defined in OpenAPI

        :param address: The address of this InlineObject2.
        :param group_id: The group_id of this InlineObject2.
        :param name: The name of this InlineObject2.
        :param radius: The radius of this InlineObject2.
        """
        self.openapi_types = {
            'address': str,
            'group_id': int,
            'name': str,
            'radius': int
        }

        self.attribute_map = {
            'address': 'address',
            'group_id': 'groupId',
            'name': 'name',
            'radius': 'radius'
        }

        self._address = address
        self._group_id = group_id
        self._name = name
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineObject2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inline_object_2 of this InlineObject2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this InlineObject2.

        The address of the entry to add, as it would be recognized if provided to maps.google.com.

        :return: The address of this InlineObject2.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineObject2.

        The address of the entry to add, as it would be recognized if provided to maps.google.com.

        :param address: The address of this InlineObject2.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def group_id(self):
        """Gets the group_id of this InlineObject2.

        Group ID to query.

        :return: The group_id of this InlineObject2.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this InlineObject2.

        Group ID to query.

        :param group_id: The group_id of this InlineObject2.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this InlineObject2.

        Name of the location to add to the address book.

        :return: The name of this InlineObject2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject2.

        Name of the location to add to the address book.

        :param name: The name of this InlineObject2.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def radius(self):
        """Gets the radius of this InlineObject2.

        Radius in meters of the address (used for matching vehicle trip stops to this location).

        :return: The radius of this InlineObject2.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this InlineObject2.

        Radius in meters of the address (used for matching vehicle trip stops to this location).

        :param radius: The radius of this InlineObject2.
        :type radius: int
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius
