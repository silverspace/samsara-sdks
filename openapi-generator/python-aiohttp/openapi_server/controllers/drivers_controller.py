from typing import List, Dict
from aiohttp import web

from openapi_server.models.driver import Driver
from openapi_server.models.driver_for_create import DriverForCreate
from openapi_server.models.inline_object4 import InlineObject4
from openapi_server import util


async def create_driver(request: web.Request, access_token, create_driver_param) -> web.Response:
    """/fleet/drivers/create

    Create a new driver.

    :param access_token: Samsara API access token.
    :type access_token: str
    :param create_driver_param: Driver creation body
    :type create_driver_param: dict | bytes

    """
    create_driver_param = DriverForCreate.from_dict(create_driver_param)
    return web.Response(status=200)


async def deactivate_driver(request: web.Request, access_token, driver_id_or_external_id) -> web.Response:
    """/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}

    Deactivate a driver with the given id.

    :param access_token: Samsara API access token.
    :type access_token: str
    :param driver_id_or_external_id: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
    :type driver_id_or_external_id: str

    """
    return web.Response(status=200)


async def get_all_deactivated_drivers(request: web.Request, access_token, group_id=None) -> web.Response:
    """/fleet/drivers/inactive

    Fetch all deactivated drivers for the group.

    :param access_token: Samsara API access token.
    :type access_token: str
    :param group_id: Optional group ID if the organization has multiple groups (uncommon).
    :type group_id: int

    """
    return web.Response(status=200)


async def get_deactivated_driver_by_id(request: web.Request, access_token, driver_id_or_external_id) -> web.Response:
    """/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}

    Fetch deactivated driver by id.

    :param access_token: Samsara API access token.
    :type access_token: str
    :param driver_id_or_external_id: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
    :type driver_id_or_external_id: str

    """
    return web.Response(status=200)


async def get_driver_by_id(request: web.Request, access_token, driver_id_or_external_id) -> web.Response:
    """/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}

    Fetch driver by id.

    :param access_token: Samsara API access token.
    :type access_token: str
    :param driver_id_or_external_id: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
    :type driver_id_or_external_id: str

    """
    return web.Response(status=200)


async def reactivate_driver_by_id(request: web.Request, access_token, driver_id_or_external_id, reactivate_driver_param) -> web.Response:
    """/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}

    Reactivate the inactive driver having id.

    :param access_token: Samsara API access token.
    :type access_token: str
    :param driver_id_or_external_id: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
    :type driver_id_or_external_id: str
    :param reactivate_driver_param: 
    :type reactivate_driver_param: dict | bytes

    """
    reactivate_driver_param = InlineObject4.from_dict(reactivate_driver_param)
    return web.Response(status=200)
