# NOTE: This file is auto generated by the openapi generator program.
# https://github.com/openapitools/openapi-generator
# Do not edit the class manually.

# assets
open_apiserver_assets_getallassetcurrentlocations:
    path:     /fleet/assets/locations
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.assets:getAllAssetCurrentLocationsAction

open_apiserver_assets_getallassets:
    path:     /fleet/assets
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.assets:getAllAssetsAction

open_apiserver_assets_getassetlocation:
    path:     /fleet/assets/{asset_id}/locations
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.assets:getAssetLocationAction
    requirements:
        assetId: '\d+'

open_apiserver_assets_getassetreefer:
    path:     /fleet/assets/{asset_id}/reefer
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.assets:getAssetReeferAction
    requirements:
        assetId: '\d+'

# drivers
open_apiserver_drivers_createdriver:
    path:     /fleet/drivers/create
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.drivers:createDriverAction

open_apiserver_drivers_deactivatedriver:
    path:     /fleet/drivers/{driver_id_or_external_id}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.drivers:deactivateDriverAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_drivers_getalldeactivateddrivers:
    path:     /fleet/drivers/inactive
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.drivers:getAllDeactivatedDriversAction

open_apiserver_drivers_getdeactivateddriverbyid:
    path:     /fleet/drivers/inactive/{driver_id_or_external_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.drivers:getDeactivatedDriverByIdAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_drivers_getdriverbyid:
    path:     /fleet/drivers/{driver_id_or_external_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.drivers:getDriverByIdAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_drivers_reactivatedriverbyid:
    path:     /fleet/drivers/inactive/{driver_id_or_external_id}
    methods:  [PUT]
    defaults:
        _controller: open_apiserver.controller.drivers:reactivateDriverByIdAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

# fleet
open_apiserver_fleet_addfleetaddress:
    path:     /fleet/add_address
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:addFleetAddressAction

open_apiserver_fleet_addorganizationaddresses:
    path:     /addresses
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:addOrganizationAddressesAction

open_apiserver_fleet_createdispatchroute:
    path:     /fleet/dispatch/routes
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:createDispatchRouteAction

open_apiserver_fleet_createdriver:
    path:     /fleet/drivers/create
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:createDriverAction

open_apiserver_fleet_createdriverdispatchroute:
    path:     /fleet/drivers/{driver_id}/dispatch/routes
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:createDriverDispatchRouteAction
    requirements:
        driverId: '\d+'

open_apiserver_fleet_createdriverdocument:
    path:     /fleet/drivers/{driver_id}/documents
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:createDriverDocumentAction
    requirements:
        driverId: '\d+'

open_apiserver_fleet_createdvir:
    path:     /fleet/maintenance/dvirs
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:createDvirAction

open_apiserver_fleet_createvehicledispatchroute:
    path:     /fleet/vehicles/{vehicle_id}/dispatch/routes
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:createVehicleDispatchRouteAction
    requirements:
        vehicleId: '\d+'

open_apiserver_fleet_deactivatedriver:
    path:     /fleet/drivers/{driver_id_or_external_id}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.fleet:deactivateDriverAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_fleet_deletedispatchroutebyid:
    path:     /fleet/dispatch/routes/{route_id}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.fleet:deleteDispatchRouteByIdAction
    requirements:
        routeId: '\d+'

open_apiserver_fleet_deleteorganizationaddress:
    path:     /addresses/{addressId}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.fleet:deleteOrganizationAddressAction
    requirements:
        addressId: '\d+'

open_apiserver_fleet_fetchalldispatchroutes:
    path:     /fleet/dispatch/routes
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:fetchAllDispatchRoutesAction

open_apiserver_fleet_fetchallroutejobupdates:
    path:     /fleet/dispatch/routes/job_updates
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:fetchAllRouteJobUpdatesAction

open_apiserver_fleet_getallassetcurrentlocations:
    path:     /fleet/assets/locations
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getAllAssetCurrentLocationsAction

open_apiserver_fleet_getallassets:
    path:     /fleet/assets
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getAllAssetsAction

open_apiserver_fleet_getalldeactivateddrivers:
    path:     /fleet/drivers/inactive
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getAllDeactivatedDriversAction

open_apiserver_fleet_getassetlocation:
    path:     /fleet/assets/{asset_id}/locations
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getAssetLocationAction
    requirements:
        assetId: '\d+'

open_apiserver_fleet_getassetreefer:
    path:     /fleet/assets/{asset_id}/reefer
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getAssetReeferAction
    requirements:
        assetId: '\d+'

open_apiserver_fleet_getdeactivateddriverbyid:
    path:     /fleet/drivers/inactive/{driver_id_or_external_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDeactivatedDriverByIdAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_fleet_getdispatchroutebyid:
    path:     /fleet/dispatch/routes/{route_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDispatchRouteByIdAction
    requirements:
        routeId: '\d+'

open_apiserver_fleet_getdispatchroutehistory:
    path:     /fleet/dispatch/routes/{route_id}/history
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDispatchRouteHistoryAction
    requirements:
        routeId: '\d+'

open_apiserver_fleet_getdispatchroutesbydriverid:
    path:     /fleet/drivers/{driver_id}/dispatch/routes
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDispatchRoutesByDriverIdAction
    requirements:
        driverId: '\d+'

open_apiserver_fleet_getdispatchroutesbyvehicleid:
    path:     /fleet/vehicles/{vehicle_id}/dispatch/routes
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDispatchRoutesByVehicleIdAction
    requirements:
        vehicleId: '\d+'

open_apiserver_fleet_getdriverbyid:
    path:     /fleet/drivers/{driver_id_or_external_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDriverByIdAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_fleet_getdriverdocumenttypesbyorgid:
    path:     /fleet/drivers/document_types
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDriverDocumentTypesByOrgIdAction

open_apiserver_fleet_getdriverdocumentsbyorgid:
    path:     /fleet/drivers/documents
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDriverDocumentsByOrgIdAction

open_apiserver_fleet_getdriversafetyscore:
    path:     /fleet/drivers/{driverId}/safety/score
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDriverSafetyScoreAction
    requirements:
        driverId: '\d+'

open_apiserver_fleet_getdvirs:
    path:     /fleet/maintenance/dvirs
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getDvirsAction

open_apiserver_fleet_getfleetdrivers:
    path:     /fleet/drivers
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetDriversAction

open_apiserver_fleet_getfleetdrivershosdailylogs:
    path:     /fleet/drivers/{driver_id}/hos_daily_logs
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetDriversHosDailyLogsAction
    requirements:
        driverId: '\d+'

open_apiserver_fleet_getfleetdriverssummary:
    path:     /fleet/drivers/summary
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetDriversSummaryAction

open_apiserver_fleet_getfleethosauthenticationlogs:
    path:     /fleet/hos_authentication_logs
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetHosAuthenticationLogsAction

open_apiserver_fleet_getfleethoslogs:
    path:     /fleet/hos_logs
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetHosLogsAction

open_apiserver_fleet_getfleethoslogssummary:
    path:     /fleet/hos_logs_summary
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetHosLogsSummaryAction

open_apiserver_fleet_getfleetlocations:
    path:     /fleet/locations
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetLocationsAction

open_apiserver_fleet_getfleetmaintenancelist:
    path:     /fleet/maintenance/list
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetMaintenanceListAction

open_apiserver_fleet_getfleettrips:
    path:     /fleet/trips
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetTripsAction

open_apiserver_fleet_getfleetvehicle:
    path:     /fleet/vehicles/{vehicle_id_or_external_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getFleetVehicleAction
    requirements:
        vehicleIdOrExternalId: '[a-z0-9]+'

open_apiserver_fleet_getorganizationaddress:
    path:     /addresses/{addressId}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getOrganizationAddressAction
    requirements:
        addressId: '\d+'

open_apiserver_fleet_getorganizationaddresses:
    path:     /addresses
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getOrganizationAddressesAction

open_apiserver_fleet_getorganizationcontact:
    path:     /contacts/{contact_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getOrganizationContactAction
    requirements:
        contactId: '\d+'

open_apiserver_fleet_getvehicleharshevent:
    path:     /fleet/vehicles/{vehicleId}/safety/harsh_event
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getVehicleHarshEventAction
    requirements:
        vehicleId: '\d+'

open_apiserver_fleet_getvehiclelocations:
    path:     /fleet/vehicles/{vehicle_id}/locations
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getVehicleLocationsAction
    requirements:
        vehicleId: '\d+'

open_apiserver_fleet_getvehiclesafetyscore:
    path:     /fleet/vehicles/{vehicleId}/safety/score
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getVehicleSafetyScoreAction
    requirements:
        vehicleId: '\d+'

open_apiserver_fleet_getvehiclestats:
    path:     /fleet/vehicles/stats
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getVehicleStatsAction

open_apiserver_fleet_getvehicleslocations:
    path:     /fleet/vehicles/locations
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:getVehiclesLocationsAction

open_apiserver_fleet_listcontacts:
    path:     /contacts
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.fleet:listContactsAction

open_apiserver_fleet_listfleet:
    path:     /fleet/list
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:listFleetAction

open_apiserver_fleet_patchfleetvehicle:
    path:     /fleet/vehicles/{vehicle_id_or_external_id}
    methods:  [PATCH]
    defaults:
        _controller: open_apiserver.controller.fleet:patchFleetVehicleAction
    requirements:
        vehicleIdOrExternalId: '[a-z0-9]+'

open_apiserver_fleet_reactivatedriverbyid:
    path:     /fleet/drivers/inactive/{driver_id_or_external_id}
    methods:  [PUT]
    defaults:
        _controller: open_apiserver.controller.fleet:reactivateDriverByIdAction
    requirements:
        driverIdOrExternalId: '[a-z0-9]+'

open_apiserver_fleet_updatedispatchroutebyid:
    path:     /fleet/dispatch/routes/{route_id}
    methods:  [PUT]
    defaults:
        _controller: open_apiserver.controller.fleet:updateDispatchRouteByIdAction
    requirements:
        routeId: '\d+'

open_apiserver_fleet_updateorganizationaddress:
    path:     /addresses/{addressId}
    methods:  [PATCH]
    defaults:
        _controller: open_apiserver.controller.fleet:updateOrganizationAddressAction
    requirements:
        addressId: '\d+'

open_apiserver_fleet_updatevehicles:
    path:     /fleet/set_data
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.fleet:updateVehiclesAction

# industrial
open_apiserver_industrial_getalldatainputs:
    path:     /industrial/data
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.industrial:getAllDataInputsAction

open_apiserver_industrial_getdatainput:
    path:     /industrial/data/{data_input_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.industrial:getDataInputAction
    requirements:
        dataInputId: '\d+'

open_apiserver_industrial_getmachines:
    path:     /machines/list
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.industrial:getMachinesAction

open_apiserver_industrial_getmachineshistory:
    path:     /machines/history
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.industrial:getMachinesHistoryAction

# routes
open_apiserver_routes_createdispatchroute:
    path:     /fleet/dispatch/routes
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.routes:createDispatchRouteAction

open_apiserver_routes_createdriverdispatchroute:
    path:     /fleet/drivers/{driver_id}/dispatch/routes
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.routes:createDriverDispatchRouteAction
    requirements:
        driverId: '\d+'

open_apiserver_routes_createvehicledispatchroute:
    path:     /fleet/vehicles/{vehicle_id}/dispatch/routes
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.routes:createVehicleDispatchRouteAction
    requirements:
        vehicleId: '\d+'

open_apiserver_routes_deletedispatchroutebyid:
    path:     /fleet/dispatch/routes/{route_id}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.routes:deleteDispatchRouteByIdAction
    requirements:
        routeId: '\d+'

open_apiserver_routes_fetchalldispatchroutes:
    path:     /fleet/dispatch/routes
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.routes:fetchAllDispatchRoutesAction

open_apiserver_routes_fetchallroutejobupdates:
    path:     /fleet/dispatch/routes/job_updates
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.routes:fetchAllRouteJobUpdatesAction

open_apiserver_routes_getdispatchroutebyid:
    path:     /fleet/dispatch/routes/{route_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.routes:getDispatchRouteByIdAction
    requirements:
        routeId: '\d+'

open_apiserver_routes_getdispatchroutehistory:
    path:     /fleet/dispatch/routes/{route_id}/history
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.routes:getDispatchRouteHistoryAction
    requirements:
        routeId: '\d+'

open_apiserver_routes_getdispatchroutesbydriverid:
    path:     /fleet/drivers/{driver_id}/dispatch/routes
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.routes:getDispatchRoutesByDriverIdAction
    requirements:
        driverId: '\d+'

open_apiserver_routes_getdispatchroutesbyvehicleid:
    path:     /fleet/vehicles/{vehicle_id}/dispatch/routes
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.routes:getDispatchRoutesByVehicleIdAction
    requirements:
        vehicleId: '\d+'

open_apiserver_routes_updatedispatchroutebyid:
    path:     /fleet/dispatch/routes/{route_id}
    methods:  [PUT]
    defaults:
        _controller: open_apiserver.controller.routes:updateDispatchRouteByIdAction
    requirements:
        routeId: '\d+'

# safety
open_apiserver_safety_getdriversafetyscore:
    path:     /fleet/drivers/{driverId}/safety/score
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.safety:getDriverSafetyScoreAction
    requirements:
        driverId: '\d+'

open_apiserver_safety_getvehicleharshevent:
    path:     /fleet/vehicles/{vehicleId}/safety/harsh_event
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.safety:getVehicleHarshEventAction
    requirements:
        vehicleId: '\d+'

open_apiserver_safety_getvehiclesafetyscore:
    path:     /fleet/vehicles/{vehicleId}/safety/score
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.safety:getVehicleSafetyScoreAction
    requirements:
        vehicleId: '\d+'

# sensors
open_apiserver_sensors_getsensors:
    path:     /sensors/list
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.sensors:getSensorsAction

open_apiserver_sensors_getsensorscargo:
    path:     /sensors/cargo
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.sensors:getSensorsCargoAction

open_apiserver_sensors_getsensorsdoor:
    path:     /sensors/door
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.sensors:getSensorsDoorAction

open_apiserver_sensors_getsensorshistory:
    path:     /sensors/history
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.sensors:getSensorsHistoryAction

open_apiserver_sensors_getsensorshumidity:
    path:     /sensors/humidity
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.sensors:getSensorsHumidityAction

open_apiserver_sensors_getsensorstemperature:
    path:     /sensors/temperature
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.sensors:getSensorsTemperatureAction

# tags
open_apiserver_tags_createtag:
    path:     /tags
    methods:  [POST]
    defaults:
        _controller: open_apiserver.controller.tags:createTagAction

open_apiserver_tags_deletetagbyid:
    path:     /tags/{tag_id}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.tags:deleteTagByIdAction
    requirements:
        tagId: '\d+'

open_apiserver_tags_getalltags:
    path:     /tags
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.tags:getAllTagsAction

open_apiserver_tags_gettagbyid:
    path:     /tags/{tag_id}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.tags:getTagByIdAction
    requirements:
        tagId: '\d+'

open_apiserver_tags_modifytagbyid:
    path:     /tags/{tag_id}
    methods:  [PATCH]
    defaults:
        _controller: open_apiserver.controller.tags:modifyTagByIdAction
    requirements:
        tagId: '\d+'

open_apiserver_tags_updatetagbyid:
    path:     /tags/{tag_id}
    methods:  [PUT]
    defaults:
        _controller: open_apiserver.controller.tags:updateTagByIdAction
    requirements:
        tagId: '\d+'

# users
open_apiserver_users_deleteuserbyid:
    path:     /users/{userId}
    methods:  [DELETE]
    defaults:
        _controller: open_apiserver.controller.users:deleteUserByIdAction
    requirements:
        userId: '\d+'

open_apiserver_users_getuserbyid:
    path:     /users/{userId}
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.users:getUserByIdAction
    requirements:
        userId: '\d+'

open_apiserver_users_listuserroles:
    path:     /user_roles
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.users:listUserRolesAction

open_apiserver_users_listusers:
    path:     /users
    methods:  [GET]
    defaults:
        _controller: open_apiserver.controller.users:listUsersAction

