//
// SensorsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SensorsAPI {
    /**
     /sensors/list
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSensors(accessToken: String, groupParam: InlineObject23, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        getSensorsWithRequestBuilder(accessToken: accessToken, groupParam: groupParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /sensors/list
     - POST /sensors/list
     - Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  
     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func getSensorsWithRequestBuilder(accessToken: String, groupParam: InlineObject23) -> RequestBuilder<InlineResponse2008> {
        let path = "/sensors/list"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /sensors/cargo
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSensorsCargo(accessToken: String, sensorParam: InlineObject19, completion: @escaping ((_ data: CargoResponse?,_ error: Error?) -> Void)) {
        getSensorsCargoWithRequestBuilder(accessToken: accessToken, sensorParam: sensorParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /sensors/cargo
     - POST /sensors/cargo
     - Get cargo monitor status (empty / full) for requested sensors.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - returns: RequestBuilder<CargoResponse> 
     */
    open class func getSensorsCargoWithRequestBuilder(accessToken: String, sensorParam: InlineObject19) -> RequestBuilder<CargoResponse> {
        let path = "/sensors/cargo"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensorParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<CargoResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /sensors/door
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSensorsDoor(accessToken: String, sensorParam: InlineObject20, completion: @escaping ((_ data: DoorResponse?,_ error: Error?) -> Void)) {
        getSensorsDoorWithRequestBuilder(accessToken: accessToken, sensorParam: sensorParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /sensors/door
     - POST /sensors/door
     - Get door monitor status (closed / open) for requested sensors.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - returns: RequestBuilder<DoorResponse> 
     */
    open class func getSensorsDoorWithRequestBuilder(accessToken: String, sensorParam: InlineObject20) -> RequestBuilder<DoorResponse> {
        let path = "/sensors/door"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensorParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<DoorResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /sensors/history
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter historyParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSensorsHistory(accessToken: String, historyParam: InlineObject21, completion: @escaping ((_ data: SensorHistoryResponse?,_ error: Error?) -> Void)) {
        getSensorsHistoryWithRequestBuilder(accessToken: accessToken, historyParam: historyParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /sensors/history
     - POST /sensors/history
     - Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter historyParam: (body)  
     - returns: RequestBuilder<SensorHistoryResponse> 
     */
    open class func getSensorsHistoryWithRequestBuilder(accessToken: String, historyParam: InlineObject21) -> RequestBuilder<SensorHistoryResponse> {
        let path = "/sensors/history"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: historyParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<SensorHistoryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /sensors/humidity
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSensorsHumidity(accessToken: String, sensorParam: InlineObject22, completion: @escaping ((_ data: HumidityResponse?,_ error: Error?) -> Void)) {
        getSensorsHumidityWithRequestBuilder(accessToken: accessToken, sensorParam: sensorParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /sensors/humidity
     - POST /sensors/humidity
     - Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - returns: RequestBuilder<HumidityResponse> 
     */
    open class func getSensorsHumidityWithRequestBuilder(accessToken: String, sensorParam: InlineObject22) -> RequestBuilder<HumidityResponse> {
        let path = "/sensors/humidity"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensorParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<HumidityResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /sensors/temperature
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSensorsTemperature(accessToken: String, sensorParam: InlineObject24, completion: @escaping ((_ data: TemperatureResponse?,_ error: Error?) -> Void)) {
        getSensorsTemperatureWithRequestBuilder(accessToken: accessToken, sensorParam: sensorParam).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /sensors/temperature
     - POST /sensors/temperature
     - Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter sensorParam: (body)  
     - returns: RequestBuilder<TemperatureResponse> 
     */
    open class func getSensorsTemperatureWithRequestBuilder(accessToken: String, sensorParam: InlineObject24) -> RequestBuilder<TemperatureResponse> {
        let path = "/sensors/temperature"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensorParam)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<TemperatureResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
