//
// TagsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TagsAPI {
    /**
     /tags
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagCreateParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTag(accessToken: String, tagCreateParams: TagCreate, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        createTagWithRequestBuilder(accessToken: accessToken, tagCreateParams: tagCreateParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /tags
     - POST /tags
     - Create a new tag for the group.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagCreateParams: (body)  
     - returns: RequestBuilder<Tag> 
     */
    open class func createTagWithRequestBuilder(accessToken: String, tagCreateParams: TagCreate) -> RequestBuilder<Tag> {
        let path = "/tags"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tagCreateParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTagById(accessToken: String, tagId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     /tags/{tag_id:[0-9]+}
     - DELETE /tags/{tag_id}
     - Permanently deletes a tag.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTagByIdWithRequestBuilder(accessToken: String, tagId: Int64) -> RequestBuilder<Void> {
        var path = "/tags/{tag_id}"
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag_id}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /tags
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllTags(accessToken: String, groupId: Int64? = nil, completion: @escaping ((_ data: InlineResponse2009?,_ error: Error?) -> Void)) {
        getAllTagsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /tags
     - GET /tags
     - Fetch all of the tags for a group.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - returns: RequestBuilder<InlineResponse2009> 
     */
    open class func getAllTagsWithRequestBuilder(accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse2009> {
        let path = "/tags"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken, 
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagById(accessToken: String, tagId: Int64, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        getTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /tags/{tag_id:[0-9]+}
     - GET /tags/{tag_id}
     - Fetch a tag by id.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - returns: RequestBuilder<Tag> 
     */
    open class func getTagByIdWithRequestBuilder(accessToken: String, tagId: Int64) -> RequestBuilder<Tag> {
        var path = "/tags/{tag_id}"
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag_id}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter tagModifyParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modifyTagById(accessToken: String, tagId: Int64, tagModifyParams: TagModify, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        modifyTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId, tagModifyParams: tagModifyParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /tags/{tag_id:[0-9]+}
     - PATCH /tags/{tag_id}
     - Add or delete specific members from a tag, or modify the name of a tag.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter tagModifyParams: (body)  
     - returns: RequestBuilder<Tag> 
     */
    open class func modifyTagByIdWithRequestBuilder(accessToken: String, tagId: Int64, tagModifyParams: TagModify) -> RequestBuilder<Tag> {
        var path = "/tags/{tag_id}"
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag_id}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tagModifyParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter updateTagParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTagById(accessToken: String, tagId: Int64, updateTagParams: TagUpdate, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        updateTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId, updateTagParams: updateTagParams).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     /tags/{tag_id:[0-9]+}
     - PUT /tags/{tag_id}
     - Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter updateTagParams: (body)  
     - returns: RequestBuilder<Tag> 
     */
    open class func updateTagByIdWithRequestBuilder(accessToken: String, tagId: Int64, updateTagParams: TagUpdate) -> RequestBuilder<Tag> {
        var path = "/tags/{tag_id}"
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag_id}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateTagParams)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
