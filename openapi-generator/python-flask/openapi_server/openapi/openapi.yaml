openapi: 3.0.1
info:
  description: |-
    # Introduction

    Samsara provides API endpoints for interacting with Samsara Cloud, so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.

    The Samsara Cloud API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer) accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client such as wget or curl, or HTTP libraries of most modern programming languages including python, ruby, java. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We allow you to interact securely with our API from a client-side web application (though you should never expose your secret API key). [JSON](http://www.json.org/) is returned by all API responses, including errors. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.

    API access to the Samsara cloud is available to all Samsara administrators. To start developing with Samsara APIs you will need to [obtain your API keys](#section/Authentication) to authenticate your API requests.

    If you have any questions you can reach out to us on [support@samsara.com](mailto:support@samsara.com)

    # Endpoints

    All our APIs can be accessed through HTTP requests to URLs like:

    ```curl
    https://api.samsara.com/<version>/<endpoint>
    ```

    All our APIs are [versioned](#section/Versioning). If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version.

    # Authentication

    To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.

    Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.

    Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Provide your API token as the basic access_token value in the URL. You do not need to provide a password.

    ```curl
    https://api.samsara.com/<version>/<endpoint>?access_token={access_token}
    ```

    All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.

    # Request Methods

    Our API endpoints use [HTTP request methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) to specify the desired operation to be performed. The documentation below specified request method supported by each endpoint and the resulting action.

    ## GET

    GET requests are typically used for fetching data (like data for a particular driver).

    ## POST

    POST requests are typically used for creating or updating a record (like adding new tags to the system). With that being said, a few of our POST requests can be used for fetching data (like current location data of your fleet).

    ## PUT

    PUT requests are typically used for updating an existing record (like updating all devices associated with a particular tag).

    ## PATCH

    PATCH requests are typically used for modifying an existing record (like modifying a few devices associated with a particular tag).

    ## DELETE

    DELETE requests are used for deleting a record (like deleting a tag from the system).

    # Response Codes

    All API requests will respond with appropriate [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). Your API client should handle each response class differently.

    ## 2XX

    These are successful responses and indicate that the API request returned the expected response.

    ## 4XX

    These indicate that there was a problem with the request like a missing parameter or invalid values. Check the response for specific [error details](#section/Error-Responses). Requests that respond with a 4XX status code, should be modified before retrying.

    ## 5XX

    These indicate server errors when the server is unreachable or is misconfigured. In this case, you should retry the API request after some delay.

    # Error Responses

    In case of a 4XX status code, the body of the response will contain information to briefly explain the error reported. To help debugging the error, you can refer to the following table for understanding the error message.

    | Status Code | Message | Description |
    |-------------|----------------|-------------------------------------------------------------------|
    | 401 | Invalid token | The API token is invalid and could not be authenticated. Please refer to the [authentication section](#section/Authentication). |
    | 404 | Page not found | The API endpoint being accessed is invalid. |
    | 400 | Bad request | Default response for an invalid request. Please check the request to make sure it follows the format specified in the documentation. |

    # Versioning

    All our APIs are versioned. Our current API version is `v1` and we are continuously working on improving it further and provide additional endpoints. If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version. Thus, you can use our current API version worry free.

    # FAQs

    Check out our [responses to FAQs here](https://kb.samsara.com/hc/en-us/sections/360000538054-APIs). Don’t see an answer to your question? Reach out to us on [support@samsara.com](mailto:support@samsara.com).
  title: Samsara API
  version: 1.0.0
servers:
- url: https://api.samsara.com/v1
tags:
- description: Access to fleet data
  name: Fleet
- description: Access to industrial data
  name: Industrial
- description: Access to sensor data
  name: Sensors
- description: Access to asset specific data
  name: Assets
- description: Access to safety specific data
  name: Safety
- description: Access to user data
  name: Users
paths:
  /addresses:
    get:
      description: Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
      operationId: get_organization_addresses
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Address'
                type: array
          description: List of addresses/geofences. For each address entry, the geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /addresses
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    post:
      description: Add one or more addresses to the organization
      operationId: add_organization_addresses
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                addresses:
                  items:
                    $ref: '#/components/schemas/_addresses_addresses'
                  type: array
              required:
              - addresses
              type: object
        description: "List of addresses/geofences to add. Geofences can be circular\
          \ or a polygon. \nFor each address, only one of 'circle' or 'polygon' should\
          \ be provided. If both are provided, the geofence will be saved as a polygon."
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Address'
                type: array
          description: List of added addresses/geofences. For each address entry, the geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type. Circle geofences added without a specific lat/lng are geocoded asynchronously, and will be 0,0 in the immediate response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /addresses
      tags:
      - Fleet
      x-codegen-request-body-name: addresses
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /addresses/{address_id}:
    delete:
      description: Delete an address.
      operationId: delete_organization_address
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the address/geofence
        in: path
        name: address_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content: {}
          description: Address was successfully deleted. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /addresses/{addressId}
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    get:
      description: Fetch an address by its id.
      operationId: get_organization_address
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the address/geofence
        in: path
        name: address_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: The address/geofence. The geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /addresses/{addressId}
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    patch:
      description: Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
      operationId: update_organization_address
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the address/geofence
        in: path
        name: address_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                contactIds:
                  description: A list of IDs for contact book entries.
                  items:
                    example: 123
                    format: int64
                    type: integer
                  type: array
                formattedAddress:
                  description: The full address associated with this address/geofence, as it might be recognized by maps.google.com
                  example: 350 Rhode Island St, San Francisco, CA
                  type: string
                geofence:
                  $ref: '#/components/schemas/AddressGeofence'
                name:
                  description: The name of this address/geofence
                  example: Samsara HQ
                  type: string
                notes:
                  description: Notes associated with an address.
                  example: Delivery site 1
                  type: string
                tagIds:
                  description: A list of tag IDs.
                  items:
                    example: 123
                    format: int64
                    type: integer
                  type: array
              type: object
        description: Update parts of an address's value. If the geofence 'circle' or 'polygon' key is specified, the update will change the type of geofence accordingly.
        required: true
      responses:
        200:
          content: {}
          description: Address was successfully updated. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /addresses/{addressId}
      tags:
      - Fleet
      x-codegen-request-body-name: address
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /contacts:
    get:
      description: Fetch all contacts for the organization.
      operationId: list_contacts
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Contact'
                type: array
          description: List of contacts.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /contacts
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /contacts/{contact_id}:
    get:
      description: Fetch a contact by its id.
      operationId: get_organization_contact
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the contact
        in: path
        name: contact_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: The contact.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /contacts/{contact_id}
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/add_address:
    post:
      description: This method adds an address book entry to the specified group.
      operationId: add_fleet_address
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                address:
                  description: The address of the entry to add, as it would be recognized if provided to maps.google.com.
                  example: 501 York St
                  type: string
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                name:
                  description: Name of the location to add to the address book.
                  example: HQ
                  type: string
                radius:
                  description: Radius in meters of the address (used for matching vehicle trip stops to this location).
                  example: 10
                  type: integer
              required:
              - address
              - groupId
              - name
              - radius
              type: object
        required: true
      responses:
        200:
          content: {}
          description: Address was successfully added. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/add_address
      tags:
      - Fleet
      x-codegen-request-body-name: addressParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/assets:
    get:
      description: Fetch all of the assets for the group.
      operationId: get_all_assets
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: List of assets.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/assets
      tags:
      - Fleet
      - Assets
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/assets/locations:
    get:
      description: Fetch current locations of all assets for the group.
      operationId: get_all_asset_current_locations
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: List of assets and their current locations.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/assets/locations
      tags:
      - Fleet
      - Assets
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/assets/{asset_id}/locations:
    get:
      description: Fetch the historical locations for the asset.
      operationId: get_asset_location
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the asset
        in: path
        name: asset_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
        in: query
        name: start_ms
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
        in: query
        name: end_ms
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetLocationResponse'
          description: Asset location details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/assets/{assetId:[0-9]+}/locations
      tags:
      - Fleet
      - Assets
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/assets/{asset_id}/reefer:
    get:
      description: Fetch the reefer-specific stats of an asset.
      operationId: get_asset_reefer
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the asset
        in: path
        name: asset_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
        in: query
        name: start_ms
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
        in: query
        name: end_ms
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetReeferResponse'
          description: Reefer-specific asset details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/assets/{assetId:[0-9]+}/reefer
      tags:
      - Fleet
      - Assets
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/dispatch/routes:
    get:
      description: Fetch all of the dispatch routes for the group.
      operationId: fetch_all_dispatch_routes
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      - description: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
        in: query
        name: end_time
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
        in: query
        name: duration
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoutes'
          description: All dispatch route objects for the group.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    post:
      description: Create a new dispatch route.
      operationId: create_dispatch_route
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRouteCreate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoute'
          description: Created route object including the new route ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes
      tags:
      - Fleet
      - Routes
      x-codegen-request-body-name: createDispatchRouteParams
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/dispatch/routes/job_updates:
    get:
      description: Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
      operationId: fetch_all_route_job_updates
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      - description: Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
        in: query
        name: sequence_id
        schema:
          type: string
      - description: Optionally set include=route to include route object in response payload.
        in: query
        name: include
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allRouteJobUpdates'
          description: All job updates on routes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes/job_updates
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/dispatch/routes/{route_id}:
    delete:
      description: Delete a dispatch route and its associated jobs.
      operationId: delete_dispatch_route_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the dispatch route.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content: {}
          description: Successfully deleted the dispatch route. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes/{route_id:[0-9]+}/
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    get:
      description: Fetch a dispatch route by id.
      operationId: get_dispatch_route_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the dispatch route.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoute'
          description: The dispatch route corresponding to route_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes/{route_id:[0-9]+}
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    put:
      description: Update a dispatch route and its associated jobs.
      operationId: update_dispatch_route_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the dispatch route.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRoute'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoute'
          description: Update the dispatch route. Allowable updates include setting job state, adding or removing jobs, and changing job locations and times.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes/{route_id:[0-9]+}/
      tags:
      - Fleet
      - Routes
      x-codegen-request-body-name: updateDispatchRouteParams
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/dispatch/routes/{route_id}/history:
    get:
      description: Fetch the history of a dispatch route.
      operationId: get_dispatch_route_history
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
        in: query
        name: start_time
        schema:
          format: int64
          type: integer
      - description: Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
        in: query
        name: end_time
        schema:
          format: int64
          type: integer
      - description: ID of the route with history.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRouteHistory'
          description: The historical route state changes between start_time and end_time.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/dispatch/routes/{route_id:[0-9]+}/history
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers:
    post:
      description: Get all the drivers for the specified group.
      operationId: get_fleet_drivers
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriversResponse'
          description: All drivers in the group.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers
      tags:
      - Fleet
      x-codegen-request-body-name: groupDriversParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/create:
    post:
      description: Create a new driver.
      operationId: create_driver
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverForCreate'
        description: Driver creation body
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
          description: Returns the successfully created the driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/create
      tags:
      - Fleet
      - Drivers
      x-codegen-request-body-name: createDriverParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/document_types:
    get:
      description: Fetch all of the document types.
      operationId: get_driver_document_types_by_org_id
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypes'
          description: Returns all of the document types.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/document_types
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/documents:
    get:
      description: Fetch all of the documents.
      operationId: get_driver_documents_by_org_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
        in: query
        name: end_ms
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
        in: query
        name: duration_ms
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Documents'
          description: Returns all of the documents.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/documents
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/inactive:
    get:
      description: Fetch all deactivated drivers for the group.
      operationId: get_all_deactivated_drivers
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Driver'
                type: array
          description: Returns an array of all deactivated drivers for the group. Deactivated drivers are referenced at /fleet/drivers/inactive/{driver_id}
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/inactive
      tags:
      - Fleet
      - Drivers
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/inactive/{driver_id_or_external_id}:
    get:
      description: Fetch deactivated driver by id.
      operationId: get_deactivated_driver_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
        in: path
        name: driver_id_or_external_id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
          description: Returns the deactivated driver with the given driver_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
      tags:
      - Fleet
      - Drivers
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    put:
      description: Reactivate the inactive driver having id.
      operationId: reactivate_driver_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
        in: path
        name: driver_id_or_external_id
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                reactivate:
                  description: True indicates that this driver should be reactivated.
                  type: boolean
              required:
              - reactivate
              type: object
        description: Driver reactivation body
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentDriver'
          description: Returns the reactivated driver, which is now available at /fleet/drivers/{driver_id}.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
      tags:
      - Fleet
      - Drivers
      x-codegen-request-body-name: reactivateDriverParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/summary:
    post:
      description: Get the distance and time each driver in an organization has driven in a given time period.
      operationId: get_fleet_drivers_summary
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Snap query result to HOS day boundaries.
        in: query
        name: snap_to_day_bounds
        schema:
          type: boolean
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End time (ms) of queried time period.
                  example: 1481076244389
                  format: int64
                  type: integer
                orgId:
                  description: Org ID to query.
                  example: 101
                  format: int64
                  type: integer
                startMs:
                  description: Start time (ms) of queried time period.
                  example: 1481076243389
                  format: int64
                  type: integer
              required:
              - endMs
              - orgId
              - startMs
              type: object
        description: Org ID and time range to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriversSummaryResponse'
          description: Distance traveled and time active for each driver in the organization over the specified time period.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/summary
      tags:
      - Fleet
      x-codegen-request-body-name: driversSummaryParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/{driver_id_or_external_id}:
    delete:
      description: Deactivate a driver with the given id.
      operationId: deactivate_driver
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
        in: path
        name: driver_id_or_external_id
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Successfully deactivated the driver, which is now referenced by /fleet/drivers/inactive/{driver_id}.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
      tags:
      - Fleet
      - Drivers
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    get:
      description: Fetch driver by id.
      operationId: get_driver_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
        in: path
        name: driver_id_or_external_id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentDriver'
          description: Returns the driver for the given driver_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
      tags:
      - Fleet
      - Drivers
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/{driver_id}/dispatch/routes:
    get:
      description: Fetch all of the dispatch routes for a given driver.
      operationId: get_dispatch_routes_by_driver_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver with the associated routes.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
        in: query
        name: end_time
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
        in: query
        name: duration
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoutes'
          description: Returns the dispatch routes for the given driver_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    post:
      description: Create a new dispatch route for the driver with driver_id.
      operationId: create_driver_dispatch_route
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver with the associated routes.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRouteCreate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoute'
          description: Created route object including the new route ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
      tags:
      - Fleet
      - Routes
      x-codegen-request-body-name: createDispatchRouteParams
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/{driver_id}/documents:
    post:
      description: Create a driver document for the given driver.
      operationId: create_driver_document
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver for whom the document is created.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'
        description: 'To create a document for a given document type, the document
          type''s uuid needs to be passed in to documentTypeUuid. The list of fields
          passed in should match the document type’s list of field types in the correct
          order. In other words, a field''s valueType and value (i.e. only one of:
          stringValue, numberValue, or photoValue) at index _i_ should match with
          the document field type’s valueType at index _i_.'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: Returns the created document.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driver_id:[0-9]+}/documents
      tags:
      - Fleet
      x-codegen-request-body-name: createDocumentParams
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/{driver_id}/hos_daily_logs:
    post:
      description: Get summarized daily HOS charts for a specified driver.
      operationId: get_fleet_drivers_hos_daily_logs
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the driver with HOS logs.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                driverId:
                  description: Driver ID to query.
                  example: 444
                  format: int64
                  type: integer
                endMs:
                  description: End of the time range, specified in milliseconds UNIX time.
                  example: 1462881998034
                  type: integer
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds UNIX time.
                  example: 1462878398034
                  type: integer
              required:
              - driverId
              - endMs
              - groupId
              - startMs
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverDailyLogResponse'
          description: Distance traveled and time active for each driver in the organization over the specified time period.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
      tags:
      - Fleet
      x-codegen-request-body-name: hosLogsParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/drivers/{driver_id}/safety/score:
    get:
      description: Fetch the safety score for the driver.
      operationId: get_driver_safety_score
      parameters:
      - description: ID of the driver
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
        in: query
        name: start_ms
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
        in: query
        name: end_ms
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverSafetyScoreResponse'
          description: Safety score details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/drivers/{driverId:[0-9]+}/safety/score
      tags:
      - Fleet
      - Safety
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/hos_authentication_logs:
    post:
      description: Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
      operationId: get_fleet_hos_authentication_logs
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                driverId:
                  description: Driver ID to query.
                  example: 444
                  format: int64
                  type: integer
                endMs:
                  description: End of the time range, specified in milliseconds UNIX time.
                  example: 1462881998034
                  type: integer
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds UNIX time.
                  example: 1462878398034
                  type: integer
              required:
              - driverId
              - endMs
              - groupId
              - startMs
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HosAuthenticationLogsResponse'
          description: HOS authentication logs for the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/hos_authentication_logs
      tags:
      - Fleet
      x-codegen-request-body-name: hosAuthenticationLogsParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/hos_logs:
    post:
      description: Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
      operationId: get_fleet_hos_logs
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          application/json:
            schema:
              properties:
                driverId:
                  description: Driver ID to query.
                  example: 444
                  format: int64
                  type: integer
                endMs:
                  description: End of the time range, specified in milliseconds UNIX time.
                  example: 1462881998034
                  type: integer
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds UNIX time.
                  example: 1462878398034
                  type: integer
              required:
              - driverId
              - endMs
              - groupId
              - startMs
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HosLogsResponse'
          description: HOS logs for the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/hos_logs
      tags:
      - Fleet
      x-codegen-request-body-name: hosLogsParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/hos_logs_summary:
    post:
      description: Get the current HOS status for all drivers in the group.
      operationId: get_fleet_hos_logs_summary
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_9'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HosLogsSummaryResponse'
          description: HOS logs for the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/hos_logs_summary
      tags:
      - Fleet
      x-codegen-request-body-name: hosLogsParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/list:
    post:
      description: Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
      operationId: list_fleet
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
        in: query
        name: starting_after
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
        in: query
        name: ending_before
        schema:
          type: string
      - description: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
        in: query
        name: limit
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/inline_object_10'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        description: Group ID to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: List of vehicles and information about each.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/list
      tags:
      - Fleet
      x-codegen-request-body-name: groupParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/locations:
    post:
      description: Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
      operationId: get_fleet_locations
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_11'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        description: Group ID to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: List of vehicle objects containing their location and the time at which that location was logged.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/locations
      tags:
      - Fleet
      x-codegen-request-body-name: groupParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/maintenance/dvirs:
    get:
      description: Get DVIRs for the org within provided time constraints
      operationId: get_dvirs
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: time in millis until the last dvir log.
        in: query
        name: end_ms
        required: true
        schema:
          type: integer
      - description: time in millis which corresponds to the duration before the end_ms.
        in: query
        name: duration_ms
        required: true
        schema:
          type: integer
      - description: Group ID to query.
        in: query
        name: group_id
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvirListResponse'
          description: DVIRs for the specified duration.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/maintenance/dvirs
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    post:
      description: Create a new dvir, marking a vehicle or trailer safe or unsafe.
      operationId: create_dvir
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_12'
        content:
          application/json:
            schema:
              properties:
                inspectionType:
                  description: Only type 'mechanic' is currently accepted.
                  enum:
                  - mechanic
                  example: mechanic
                  type: string
                mechanicNotes:
                  description: Any notes from the mechanic.
                  example: Replaced headlight on passenger side.
                  type: string
                odometerMiles:
                  description: The current odometer of the vehicle.
                  example: 38426
                  type: integer
                previousDefectsCorrected:
                  description: Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
                  example: true
                  type: boolean
                previousDefectsIgnored:
                  description: Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
                  example: false
                  type: boolean
                safe:
                  description: Whether or not this vehicle or trailer is safe to drive.
                  enum:
                  - safe
                  - unsafe
                  example: safe
                  type: string
                trailerId:
                  description: Id of trailer being inspected. Either vehicleId or trailerId must be provided.
                  example: 11
                  type: integer
                userEmail:
                  description: The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
                  example: j.smith@yahoo.com
                  type: string
                vehicleId:
                  description: Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
                  example: 10
                  type: integer
              required:
              - inspectionType
              - safe
              - userEmail
              type: object
        description: DVIR creation body
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvirBase'
          description: Newly created DVIR.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/maintenance/dvirs
      tags:
      - Fleet
      x-codegen-request-body-name: createDvirParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/maintenance/list:
    post:
      description: Get list of the vehicles with any engine faults or check light data.
      operationId: get_fleet_maintenance_list
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_13'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        description: Group ID to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: List of vehicles and maintenance information about each.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/maintenance/list
      tags:
      - Fleet
      x-codegen-request-body-name: groupParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/set_data:
    post:
      description: This method enables the mutation of metadata for vehicles in the Samsara Cloud.
      operationId: update_vehicles
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_14'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                vehicles:
                  items:
                    $ref: '#/components/schemas/Vehicle'
                  type: array
              required:
              - groupId
              - vehicles
              type: object
        required: true
      responses:
        200:
          content: {}
          description: Vehicles were successfully updated. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/set_data
      tags:
      - Fleet
      x-codegen-request-body-name: vehicleUpdateParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/trips:
    post:
      description: Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
      operationId: get_fleet_trips
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_15'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End of the time range, specified in milliseconds UNIX time.
                  example: 1462881998034
                  type: integer
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
                  example: 1462878398034
                  type: integer
                vehicleId:
                  description: Vehicle ID to query.
                  example: 112
                  format: int64
                  type: integer
              required:
              - endMs
              - groupId
              - startMs
              - vehicleId
              type: object
        description: Group ID, vehicle ID and time range to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponse'
          description: List of trips taken by the requested vehicle within the specified timeframe.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/trips
      tags:
      - Fleet
      x-codegen-request-body-name: tripsParam
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/locations:
    get:
      description: Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
      operationId: get_vehicles_locations
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)
        in: query
        name: start_ms
        required: true
        schema:
          type: integer
      - description: Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
        in: query
        name: end_ms
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetVehiclesLocations'
          description: Returns locations for a given vehicle between a start/end time, with a maximum query duration of 30 minutes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/locations
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/stats:
    get:
      description: Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
      operationId: get_vehicle_stats
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Time in Unix epoch milliseconds for the start of the query.
        in: query
        name: start_ms
        required: true
        schema:
          type: integer
      - description: Time in Unix epoch milliseconds for the end of the query.
        in: query
        name: end_ms
        required: true
        schema:
          type: integer
      - description: 'Comma-separated list of stat types. Options are engineState,
          auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types
          will be returned. Example: series=engineState,auxInput2'
        in: query
        name: series
        schema:
          enum:
          - engineState
          - auxInput1
          - auxInput2
          type: string
      - description: 'Comma-separated list of tag ids. Example: tagIds=1,2,3'
        in: query
        name: tag_ids
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
        in: query
        name: starting_after
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
        in: query
        name: ending_before
        schema:
          type: string
      - description: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
        in: query
        name: limit
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Returns engine state and/or aux input data for all vehicles in the group between a start/end time.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/stats
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/{vehicle_id_or_external_id}:
    get:
      description: Gets a specific vehicle.
      operationId: get_fleet_vehicle
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
        in: path
        name: vehicle_id_or_external_id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetVehicleResponse'
          description: The specified vehicle.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    patch:
      description: 'Updates the specified vehicle using JSON merge patch format. See
        IETF RFC 7396: https://tools.ietf.org/html/rfc7396.'
      operationId: patch_fleet_vehicle
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
        in: path
        name: vehicle_id_or_external_id
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_16'
        content:
          application/json:
            schema:
              properties:
                externalIds:
                  additionalProperties:
                    type: string
                  example:
                    maintenanceId: ABFS18600
                  type: object
                harsh_accel_setting:
                  description: |-
                    Harsh Event Detection Setting
                    * 0: Passenger
                    * 1: Light Truck
                    * 2: Heavy
                    * 3: Off
                    * 4: Automatic
                  format: string
                  type: integer
                name:
                  description: Name
                  type: string
              type: object
          application/merge-patch+json:
            schema:
              properties:
                externalIds:
                  additionalProperties:
                    type: string
                  example:
                    maintenanceId: ABFS18600
                  type: object
                harsh_accel_setting:
                  description: |-
                    Harsh Event Detection Setting
                    * 0: Passenger
                    * 1: Light Truck
                    * 2: Heavy
                    * 3: Off
                    * 4: Automatic
                  format: string
                  type: integer
                name:
                  description: Name
                  type: string
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetVehicleResponse'
          description: The updated vehicle.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
      tags:
      - Fleet
      x-codegen-request-body-name: data
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/{vehicle_id}/dispatch/routes:
    get:
      description: Fetch all of the dispatch routes for a given vehicle.
      operationId: get_dispatch_routes_by_vehicle_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the vehicle with the associated routes.
        in: path
        name: vehicle_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
        in: query
        name: end_time
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
        in: query
        name: duration
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoutes'
          description: Returns all of the dispatch routes for the given vehicle_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
      tags:
      - Fleet
      - Routes
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
    post:
      description: Create a new dispatch route for the vehicle with vehicle_id.
      operationId: create_vehicle_dispatch_route
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the vehicle with the associated routes.
        in: path
        name: vehicle_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRouteCreate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRoute'
          description: Created route object including the new route ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
      tags:
      - Fleet
      - Routes
      x-codegen-request-body-name: createDispatchRouteParams
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/{vehicle_id}/locations:
    get:
      description: Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
      operationId: get_vehicle_locations
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the vehicle with the associated routes.
        in: path
        name: vehicle_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
        in: query
        name: start_ms
        required: true
        schema:
          format: int64
          type: integer
      - description: Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
        in: query
        name: end_ms
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetVehicleLocations'
          description: Returns locations for a given vehicle between a start/end time, with a maximum query duration of one hour.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicle_id:[0-9]+}/locations
      tags:
      - Fleet
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/{vehicle_id}/safety/harsh_event:
    get:
      description: Fetch harsh event details for a vehicle.
      operationId: get_vehicle_harsh_event
      parameters:
      - description: ID of the vehicle
        in: path
        name: vehicle_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Timestamp in milliseconds representing the timestamp of a harsh event.
        in: query
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleHarshEventResponse'
          description: Harsh event details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
      tags:
      - Fleet
      - Safety
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /fleet/vehicles/{vehicle_id}/safety/score:
    get:
      description: Fetch the safety score for the vehicle.
      operationId: get_vehicle_safety_score
      parameters:
      - description: ID of the vehicle
        in: path
        name: vehicle_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
        in: query
        name: start_ms
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
        in: query
        name: end_ms
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleSafetyScoreResponse'
          description: Safety score details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
      tags:
      - Fleet
      - Safety
      x-openapi-router-controller: openapi_server.controllers.fleet_controller
  /industrial/data:
    get:
      description: Fetch all of the data inputs for a group.
      operationId: get_all_data_inputs
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.
        in: query
        name: start_ms
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
        in: query
        name: end_ms
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: List of data inputs.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /industrial/data
      tags:
      - Industrial
      x-openapi-router-controller: openapi_server.controllers.industrial_controller
  /industrial/data/{data_input_id}:
    get:
      description: Fetch datapoints from a given data input.
      operationId: get_data_input
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the data input
        in: path
        name: data_input_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.
        in: query
        name: start_ms
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
        in: query
        name: end_ms
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataInputHistoryResponse'
          description: Returns datapoints for the given data input
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /industrial/data/{data_input_id:[0-9]+}
      tags:
      - Industrial
      x-openapi-router-controller: openapi_server.controllers.industrial_controller
  /machines/history:
    post:
      description: Get historical data for machine objects. This method returns a set of historical data for all machines in a group
      operationId: get_machines_history
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_17'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End of the time range, specified in milliseconds UNIX time.
                  example: 1462881998034
                  type: integer
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds UNIX time.
                  example: 1462878398034
                  type: integer
              required:
              - endMs
              - groupId
              - startMs
              type: object
        description: Group ID and time range to query for events
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineHistoryResponse'
          description: List of machine results objects, each containing a time and a datapoint.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /machines/history
      tags:
      - Industrial
      x-codegen-request-body-name: historyParam
      x-openapi-router-controller: openapi_server.controllers.industrial_controller
  /machines/list:
    post:
      description: Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
      operationId: get_machines
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_18'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        description: Group ID to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
          description: List of machine objects.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /machines/list
      tags:
      - Industrial
      x-codegen-request-body-name: groupParam
      x-openapi-router-controller: openapi_server.controllers.industrial_controller
  /sensors/cargo:
    post:
      description: Get cargo monitor status (empty / full) for requested sensors.
      operationId: get_sensors_cargo
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_19'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - groupId
              - sensors
              type: object
        description: Group ID and list of sensor IDs to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoResponse'
          description: List of sensor objects containing the current cargo status reported by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /sensors/cargo
      tags:
      - Sensors
      x-codegen-request-body-name: sensorParam
      x-openapi-router-controller: openapi_server.controllers.sensors_controller
  /sensors/door:
    post:
      description: Get door monitor status (closed / open) for requested sensors.
      operationId: get_sensors_door
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_20'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - groupId
              - sensors
              type: object
        description: Group ID and list of sensor IDs to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorResponse'
          description: List of sensor objects containing the current door status reported by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /sensors/door
      tags:
      - Sensors
      x-codegen-request-body-name: sensorParam
      x-openapi-router-controller: openapi_server.controllers.sensors_controller
  /sensors/history:
    post:
      description: Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
      operationId: get_sensors_history
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_21'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End of the time range, specified in milliseconds UNIX time.
                  example: 1462881998034
                  type: integer
                fillMissing:
                  default: withNull
                  enum:
                  - withNull
                  - withPrevious
                  type: string
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                series:
                  items:
                    $ref: '#/components/schemas/_sensors_history_series'
                  type: array
                startMs:
                  description: Beginning of the time range, specified in milliseconds UNIX time.
                  example: 1462878398034
                  type: integer
                stepMs:
                  description: Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.
                  example: 3600000
                  type: integer
              required:
              - endMs
              - groupId
              - series
              - startMs
              - stepMs
              type: object
        description: Group ID, time range and resolution, and list of sensor ID, field pairs to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorHistoryResponse'
          description: List of results objects, each containing a time and a datapoint for each requested sensor/field pair.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /sensors/history
      tags:
      - Sensors
      x-codegen-request-body-name: historyParam
      x-openapi-router-controller: openapi_server.controllers.sensors_controller
  /sensors/humidity:
    post:
      description: Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
      operationId: get_sensors_humidity
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_22'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - groupId
              - sensors
              type: object
        description: Group ID and list of sensor IDs to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HumidityResponse'
          description: List of sensor objects containing the current humidity reported by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /sensors/humidity
      tags:
      - Sensors
      x-codegen-request-body-name: sensorParam
      x-openapi-router-controller: openapi_server.controllers.sensors_controller
  /sensors/list:
    post:
      description: Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
      operationId: get_sensors
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_23'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
              required:
              - groupId
              type: object
        description: Group ID to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
          description: List of sensor objects.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /sensors/list
      tags:
      - Sensors
      x-codegen-request-body-name: groupParam
      x-openapi-router-controller: openapi_server.controllers.sensors_controller
  /sensors/temperature:
    post:
      description: Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
      operationId: get_sensors_temperature
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_24'
        content:
          application/json:
            schema:
              properties:
                groupId:
                  description: Group ID to query.
                  example: 101
                  format: int64
                  type: integer
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - groupId
              - sensors
              type: object
        description: Group ID and list of sensor IDs to query.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureResponse'
          description: List of sensor objects containing the current temperature reported by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /sensors/temperature
      tags:
      - Sensors
      x-codegen-request-body-name: sensorParam
      x-openapi-router-controller: openapi_server.controllers.sensors_controller
  /tags:
    get:
      description: Fetch all of the tags for a group.
      operationId: get_all_tags
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: Optional group ID if the organization has multiple groups (uncommon).
        in: query
        name: group_id
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
          description: List of tags.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /tags
      tags:
      - Tags
      x-openapi-router-controller: openapi_server.controllers.tags_controller
    post:
      description: Create a new tag for the group.
      operationId: create_tag
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Newly created tag object, including the new tag ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /tags
      tags:
      - Tags
      x-codegen-request-body-name: tagCreateParams
      x-openapi-router-controller: openapi_server.controllers.tags_controller
  /tags/{tag_id}:
    delete:
      description: Permanently deletes a tag.
      operationId: delete_tag_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the tag.
        in: path
        name: tag_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content: {}
          description: Successfully deleted the tag. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /tags/{tag_id:[0-9]+}
      tags:
      - Tags
      x-openapi-router-controller: openapi_server.controllers.tags_controller
    get:
      description: Fetch a tag by id.
      operationId: get_tag_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the tag.
        in: path
        name: tag_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: The tag corresponding to tag_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /tags/{tag_id:[0-9]+}
      tags:
      - Tags
      x-openapi-router-controller: openapi_server.controllers.tags_controller
    patch:
      description: Add or delete specific members from a tag, or modify the name of a tag.
      operationId: modify_tag_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the tag.
        in: path
        name: tag_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModify'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: The updated tag data.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /tags/{tag_id:[0-9]+}
      tags:
      - Tags
      x-codegen-request-body-name: tagModifyParams
      x-openapi-router-controller: openapi_server.controllers.tags_controller
    put:
      description: Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.
      operationId: update_tag_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the tag.
        in: path
        name: tag_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: The updated tag data.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /tags/{tag_id:[0-9]+}
      tags:
      - Tags
      x-codegen-request-body-name: updateTagParams
      x-openapi-router-controller: openapi_server.controllers.tags_controller
  /user_roles:
    get:
      description: Get all roles in the organization.
      operationId: list_user_roles
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRole'
                type: array
          description: List of user roles.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /user_roles
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users:
    get:
      description: List all users in the organization.
      operationId: list_users
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: List of users.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /users
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{user_id}:
    delete:
      description: Remove a user from the organization.
      operationId: delete_user_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content: {}
          description: The user was successfully removed.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /users/{userId:[0-9]+}
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    get:
      description: Get a user.
      operationId: get_user_by_id
      parameters:
      - description: Samsara API access token.
        in: query
        name: access_token
        required: true
        schema:
          type: string
      - description: ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User record.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected error.
      summary: /users/{userId:[0-9]+}
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
components:
  parameters:
    accessTokenParam:
      description: Samsara API access token.
      in: query
      name: access_token
      required: true
      schema:
        type: string
    assetHistoryEndTimeParam:
      description: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
      in: query
      name: endMs
      required: true
      schema:
        format: int64
        type: integer
    assetHistoryStartTimeParam:
      description: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
      in: query
      name: startMs
      required: true
      schema:
        format: int64
        type: integer
    assetIdParam:
      description: ID of the asset
      in: path
      name: asset_id
      required: true
      schema:
        format: int64
        type: integer
    dataInputEndTimeParam:
      description: Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
      in: query
      name: endMs
      schema:
        format: int64
        type: integer
    dataInputIdParam:
      description: ID of the data input
      in: path
      name: data_input_id
      required: true
      schema:
        format: int64
        type: integer
    dataInputStartTimeParam:
      description: Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.
      in: query
      name: startMs
      schema:
        format: int64
        type: integer
    documentsDurationMsParam:
      description: Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
      in: query
      name: durationMs
      schema:
        format: int64
        type: integer
    documentsEndMsParam:
      description: Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
      in: query
      name: endMs
      schema:
        format: int64
        type: integer
    driverIdOrExternalIdParam:
      description: ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
      in: path
      name: driver_id_or_external_id
      required: true
      schema:
        type: string
    groupIdParam:
      description: Optional group ID if the organization has multiple groups (uncommon).
      in: query
      name: group_id
      schema:
        format: int64
        type: integer
    harshEventMsParam:
      description: Timestamp in milliseconds representing the timestamp of a harsh event.
      in: query
      name: timestamp
      required: true
      schema:
        format: int64
        type: integer
    jobUpdatesIncludeParam:
      description: Optionally set include=route to include route object in response payload.
      in: query
      name: include
      schema:
        type: string
    lastReceivedSequenceIDParam:
      description: Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
      in: query
      name: sequence_id
      schema:
        type: string
    paginationEndingBeforeParam:
      description: Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
      in: query
      name: endingBefore
      schema:
        type: string
    paginationLimitParam:
      description: Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
      in: query
      name: limit
      schema:
        format: int64
        type: integer
    paginationStartingAfterParam:
      description: Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
      in: query
      name: startingAfter
      schema:
        type: string
    routeDurationParam:
      description: Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
      in: query
      name: duration
      schema:
        format: int64
        type: integer
    routeEndTimeParam:
      description: Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
      in: query
      name: end_time
      schema:
        format: int64
        type: integer
    routeHistoryEndTimeParam:
      description: Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
      in: query
      name: end_time
      schema:
        format: int64
        type: integer
    routeHistoryStartTimeParam:
      description: Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
      in: query
      name: start_time
      schema:
        format: int64
        type: integer
    safetyScoreEndMsParam:
      description: Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
      in: query
      name: endMs
      required: true
      schema:
        format: int64
        type: integer
    safetyScoreStartMsParam:
      description: Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
      in: query
      name: startMs
      required: true
      schema:
        format: int64
        type: integer
    tagPathParam:
      description: ID of the tag.
      in: path
      name: tag_id
      required: true
      schema:
        format: int64
        type: integer
    vehicleIdOrExternalIdParam:
      description: ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
      in: path
      name: vehicle_id_or_external_id
      required: true
      schema:
        type: string
  requestBodies:
    addressAddParam:
      content:
        application/json:
          schema:
            properties:
              addresses:
                items:
                  properties:
                    notes:
                      $ref: '#/components/schemas/AddressNotes'
                    formattedAddress:
                      description: The full address associated with this address/geofence, as it might be recognized by maps.google.com
                      example: 350 Rhode Island St, San Francisco, CA
                      type: string
                    geofence:
                      $ref: '#/components/schemas/AddressGeofence'
                    tagIds:
                      $ref: '#/components/schemas/TagIds'
                    name:
                      description: The name of this address/geofence
                      example: Samsara HQ
                      type: string
                    contactIds:
                      $ref: '#/components/schemas/ContactIds'
                  required:
                  - formattedAddress
                  - geofence
                  - name
                  type: object
                type: array
            required:
            - addresses
            type: object
      description: "List of addresses/geofences to add. Geofences can be circular\
        \ or a polygon. \nFor each address, only one of 'circle' or 'polygon' should\
        \ be provided. If both are provided, the geofence will be saved as a polygon."
      required: true
    addressUpdateParam:
      content:
        application/json:
          schema:
            properties:
              contactIds:
                $ref: '#/components/schemas/ContactIds'
              formattedAddress:
                description: The full address associated with this address/geofence, as it might be recognized by maps.google.com
                example: 350 Rhode Island St, San Francisco, CA
                type: string
              geofence:
                $ref: '#/components/schemas/AddressGeofence'
              name:
                description: The name of this address/geofence
                example: Samsara HQ
                type: string
              notes:
                $ref: '#/components/schemas/AddressNotes'
              tagIds:
                $ref: '#/components/schemas/TagIds'
            type: object
      description: Update parts of an address's value. If the geofence 'circle' or 'polygon' key is specified, the update will change the type of geofence accordingly.
      required: true
    createDriverParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverForCreate'
      description: Driver creation body
      required: true
    createDvirParam:
      content:
        application/json:
          schema:
            properties:
              inspectionType:
                description: Only type 'mechanic' is currently accepted.
                enum:
                - mechanic
                example: mechanic
                type: string
              mechanicNotes:
                description: Any notes from the mechanic.
                example: Replaced headlight on passenger side.
                type: string
              odometerMiles:
                description: The current odometer of the vehicle.
                example: 38426
                type: integer
              previousDefectsCorrected:
                description: Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
                example: true
                type: boolean
              previousDefectsIgnored:
                description: Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
                example: false
                type: boolean
              safe:
                description: Whether or not this vehicle or trailer is safe to drive.
                enum:
                - safe
                - unsafe
                example: safe
                type: string
              trailerId:
                description: Id of trailer being inspected. Either vehicleId or trailerId must be provided.
                example: 11
                type: integer
              userEmail:
                description: The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
                example: j.smith@yahoo.com
                type: string
              vehicleId:
                description: Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
                example: 10
                type: integer
            required:
            - inspectionType
            - safe
            - userEmail
            type: object
      description: DVIR creation body
      required: true
    documentCreateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentCreate'
      description: 'To create a document for a given document type, the document type''s
        uuid needs to be passed in to documentTypeUuid. The list of fields passed
        in should match the document type’s list of field types in the correct order.
        In other words, a field''s valueType and value (i.e. only one of: stringValue,
        numberValue, or photoValue) at index _i_ should match with the document field
        type’s valueType at index _i_.'
      required: true
    groupParam:
      content:
        application/json:
          schema:
            properties:
              groupId:
                description: Group ID to query.
                example: 101
                format: int64
                type: integer
            required:
            - groupId
            type: object
      description: Group ID to query.
      required: true
    reactivateDriverParam:
      content:
        application/json:
          schema:
            properties:
              reactivate:
                description: True indicates that this driver should be reactivated.
                type: boolean
            required:
            - reactivate
            type: object
      description: Driver reactivation body
      required: true
    routeCreateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DispatchRouteCreate'
      required: true
    routeUpdateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DispatchRoute'
      required: true
    sensorParam:
      content:
        application/json:
          schema:
            properties:
              groupId:
                description: Group ID to query.
                example: 101
                format: int64
                type: integer
              sensors:
                description: List of sensor IDs to query.
                example:
                - 122
                items:
                  format: int64
                  type: integer
                type: array
            required:
            - groupId
            - sensors
            type: object
      description: Group ID and list of sensor IDs to query.
      required: true
    tagCreateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagCreate'
      required: true
    tagModifyParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagModify'
      required: true
    tagUpdateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagUpdate'
      required: true
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      required: true
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: true
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      required: true
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
      required: true
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
      required: true
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
      required: true
    inline_object_8:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
      required: true
    inline_object_9:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
      required: true
    inline_object_10:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_10'
      required: true
    inline_object_11:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_11'
      required: true
    inline_object_12:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_12'
      required: true
    inline_object_13:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_13'
      required: true
    inline_object_14:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_14'
      required: true
    inline_object_15:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_15'
      required: true
    inline_object_16:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_16'
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/inline_object_16'
      required: true
    inline_object_17:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_17'
      required: true
    inline_object_18:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_18'
      required: true
    inline_object_19:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_19'
      required: true
    inline_object_20:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_20'
      required: true
    inline_object_21:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_21'
      required: true
    inline_object_22:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_22'
      required: true
    inline_object_23:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_23'
      required: true
    inline_object_24:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_24'
      required: true
  schemas:
    Address:
      description: Information about an address/geofence. Geofences are either a circle or a polygon.
      example:
        notes: Delivery site 1
        formattedAddress: 350 Rhode Island St, San Francisco, CA
        geofence:
          polygon:
            vertices:
            - latitude: 37.765363
              longitude: -122.403098
            - latitude: 37.765363
              longitude: -122.403098
          circle:
            latitude: 37.765363
            radiusMeters: 250
            longitude: -122.403098
        name: Samsara HQ
        id: 123
        contacts:
        - firstName: Jane
          lastName: Jones
          phone: 111-222-3344
          id: 123
          email: jane.jones@yahoo.com
        - firstName: Jane
          lastName: Jones
          phone: 111-222-3344
          id: 123
          email: jane.jones@yahoo.com
        tags:
        - name: Broken Vehicles
          id: 12345
        - name: Broken Vehicles
          id: 12345
      properties:
        contacts:
          items:
            $ref: '#/components/schemas/Contact'
          type: array
        formattedAddress:
          description: The full address associated with this address/geofence, as it might be recognized by maps.google.com
          example: 350 Rhode Island St, San Francisco, CA
          type: string
        geofence:
          $ref: '#/components/schemas/AddressGeofence'
        id:
          description: ID of the address
          example: 123
          format: int64
          type: integer
        name:
          description: Name of the address or geofence
          example: Samsara HQ
          type: string
        notes:
          description: Notes associated with an address.
          example: Delivery site 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/TagMetadata'
          type: array
      type: object
    AddressGeofence:
      description: The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.
      example:
        polygon:
          vertices:
          - latitude: 37.765363
            longitude: -122.403098
          - latitude: 37.765363
            longitude: -122.403098
        circle:
          latitude: 37.765363
          radiusMeters: 250
          longitude: -122.403098
      properties:
        circle:
          $ref: '#/components/schemas/AddressGeofence_circle'
        polygon:
          $ref: '#/components/schemas/AddressGeofence_polygon'
      type: object
    AddressNotes:
      description: Notes associated with an address.
      example: Delivery site 1
      type: string
    Asset:
      description: Basic information of an asset
      example:
        assetSerialNumber: SNTEST123
        engineHours: 104
        name: Trailer 123
        id: 1
        cable:
        - assetType: Reefer (Thermo King)
        - assetType: Reefer (Thermo King)
      properties:
        assetSerialNumber:
          description: Serial number of the host asset
          example: SNTEST123
          type: string
        cable:
          description: The cable connected to the asset
          items:
            $ref: '#/components/schemas/Asset_cable'
          type: array
        engineHours:
          description: Engine hours
          example: 104
          type: integer
        id:
          description: Asset ID
          example: 1
          format: int64
          type: integer
        name:
          description: Asset name
          example: Trailer 123
          type: string
      required:
      - id
      type: object
    AssetCurrentLocation:
      description: Current location of an asset
      example:
        latitude: 37.0
        speedMilesPerHour: 35.0
        location: 525 York, San Francisco, CA
        longitude: -122.7
        timeMs: 12314151
      properties:
        latitude:
          description: The latitude of the location in degrees.
          example: 37.0
          format: double
          type: number
        location:
          description: The best effort (street,city,state) for the latitude and longitude.
          example: 525 York, San Francisco, CA
          type: string
        longitude:
          description: The longitude of the location in degrees.
          example: -122.7
          format: double
          type: number
        speedMilesPerHour:
          description: The speed calculated from GPS that the asset was traveling at in miles per hour.
          example: 35.0
          format: double
          type: number
        timeMs:
          description: Time in Unix milliseconds since epoch when the asset was at the location.
          example: 12314151
          format: int64
          type: integer
      type: object
    AssetCurrentLocationsResponse:
      description: Basic information of an asset
      example:
        engineHours: 104
        name: Trailer 123
        location:
        - latitude: 37.0
          speedMilesPerHour: 35.0
          location: 525 York, San Francisco, CA
          longitude: -122.7
          timeMs: 12314151
        - latitude: 37.0
          speedMilesPerHour: 35.0
          location: 525 York, San Francisco, CA
          longitude: -122.7
          timeMs: 12314151
        id: 1
        cable:
        - assetType: Reefer (Thermo King)
        - assetType: Reefer (Thermo King)
      properties:
        cable:
          description: The cable connected to the asset
          items:
            $ref: '#/components/schemas/Asset_cable'
          type: array
        engineHours:
          description: Engine hours
          example: 104
          type: integer
        id:
          description: Asset ID
          example: 1
          format: int64
          type: integer
        location:
          description: Current location of an asset
          items:
            $ref: '#/components/schemas/AssetCurrentLocation'
          type: array
        name:
          description: Asset name
          example: Trailer 123
          type: string
      required:
      - id
      type: object
    AssetLocationResponse:
      description: A list of historical asset locations.
      items:
        description: Asset location details.
        properties:
          latitude:
            description: The latitude of the location in degrees.
            example: 37.0
            format: double
            type: number
          speedMilesPerHour:
            description: The speed calculated from GPS that the asset was traveling at in miles per hour.
            example: 35.0
            format: double
            type: number
          location:
            description: The best effort (street,city,state) for the latitude and longitude.
            example: 525 York, San Francisco, CA
            type: string
          time:
            description: Time in Unix milliseconds since epoch when the asset was at the location.
            example: 12314151
            format: int64
            type: number
          longitude:
            description: The longitude of the location in degrees.
            example: -122.7
            format: double
            type: number
        type: object
      type: array
    AssetReeferResponse:
      description: Reefer-specific asset details
      example:
        reeferStats:
          fuelPercentage:
          - fuelPercentage: 99
            changedAtMs: 1453449599999
          - fuelPercentage: 99
            changedAtMs: 1453449599999
          powerStatus:
          - changedAtMs: 1453449599999
            status: Active (Continuous)
          - changedAtMs: 1453449599999
            status: Active (Continuous)
          engineHours:
          - engineHours: 1200
            changedAtMs: 1453449599999
          - engineHours: 1200
            changedAtMs: 1453449599999
          setPoint:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          returnAirTemp:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          alarms:
          - alarms:
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            changedAtMs: 1453449599999
          - alarms:
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            changedAtMs: 1453449599999
        name: Reefer 123
        id: 1
        assetType: Reefer (Thermo King)
      properties:
        assetType:
          description: Asset type
          example: Reefer (Thermo King)
          type: string
        id:
          description: Asset ID
          example: 1
          type: integer
        name:
          description: Asset name
          example: Reefer 123
          type: string
        reeferStats:
          $ref: '#/components/schemas/AssetReeferResponse_reeferStats'
      type: object
    AuxInput:
      description: Digital value of an aux input.
      example:
        value: true
        timeMs: 1546542978484
      properties:
        timeMs:
          description: Timestamp in Unix epoch milliseconds.
          example: 1546542978484
          format: int64
          type: number
        value:
          description: Boolean representing the digital value of the aux input.
          example: true
          type: boolean
      required:
      - timeMs
      - value
      type: object
    AuxInputSeries:
      description: A list of aux input values over a timerange.
      example:
        values:
        - value: true
          timeMs: 1546542978484
        - value: true
          timeMs: 1546542978484
        name: Boom
      properties:
        name:
          description: The name of the aux input.
          enum:
          - Emergency Lights
          - Emergency Alarm
          - Stop Paddle
          - Power Take-Off
          - Plow
          - Sweeper
          - Salter
          - Boom
          example: Boom
          type: string
        values:
          items:
            $ref: '#/components/schemas/AuxInput'
          type: array
      required:
      - name
      - values
      type: object
    CargoResponse:
      description: Contains the current cargo status of a sensor.
      example:
        sensors:
        - cargoEmpty: true
          name: Trailer Cargo Sensor
          id: 122
        - cargoEmpty: true
          name: Trailer Cargo Sensor
          id: 122
        groupId: 101
      properties:
        groupId:
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/CargoResponse_sensors'
          type: array
      type: object
    Contact:
      description: Information about a notification contact for alerts.
      example:
        firstName: Jane
        lastName: Jones
        phone: 111-222-3344
        id: 123
        email: jane.jones@yahoo.com
      properties:
        email:
          description: Email address of the contact
          example: jane.jones@yahoo.com
          type: string
        firstName:
          description: First name of the contact
          example: Jane
          type: string
        id:
          description: ID of the contact
          example: 123
          format: int64
          type: integer
        lastName:
          description: Last name of the contact
          example: Jones
          type: string
        phone:
          description: Phone number of the contact
          example: 111-222-3344
          type: string
      type: object
    ContactIds:
      description: A list of IDs for contact book entries.
      items:
        example: 123
        format: int64
        type: integer
      type: array
    CurrentDriver:
      $ref: '#/components/schemas/Driver'
    DataInputHistoryResponse:
      example:
        name: Pump Flow
        id: 12345
        points:
        - value: 12.332
          timeMs: 1453449599999
        - value: 12.332
          timeMs: 1453449599999
      properties:
        id:
          description: The ID of this data input
          example: 12345
          format: int64
          type: integer
        name:
          description: Name of this data input
          example: Pump Flow
          type: string
        points:
          description: Data points from this data input
          items:
            $ref: '#/components/schemas/DataInputHistoryResponse_points'
          type: array
      required:
      - name
      type: object
    DispatchJob:
      allOf:
      - properties:
          arrived_at_ms:
            description: The time at which the driver arrived at the job destination.
            example: 1462881998034
            format: int64
            type: integer
          completed_at_ms:
            description: The time at which the job was marked complete (e.g. started driving to the next destination).
            example: 1462881998034
            format: int64
            type: integer
          dispatch_route_id:
            description: ID of the route that this job belongs to.
            example: 55
            format: int64
            type: integer
          driver_id:
            description: ID of the driver assigned to the dispatch job.
            example: 444
            format: int64
            type: integer
          en_route_at_ms:
            description: The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
            example: 1462881998034
            format: int64
            type: integer
          estimated_arrival_ms:
            description: The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.
            example: 1462881998034
            format: int64
            type: integer
          fleet_viewer_url:
            description: Fleet viewer url of the dispatch job.
            example: https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token
            type: string
          group_id:
            example: 101
            format: int64
            type: integer
          id:
            description: ID of the Samsara dispatch job.
            example: 773
            format: int64
            type: integer
          job_state:
            $ref: '#/components/schemas/jobStatus'
          skipped_at_ms:
            description: The time at which the job was marked skipped.
            example: 1462881998034
            format: int64
            type: integer
          vehicle_id:
            description: ID of the vehicle used for the dispatch job.
            example: 112
            format: int64
            type: integer
        required:
        - dispatch_route_id
        - group_id
        - id
        - job_state
        type: object
      - $ref: '#/components/schemas/DispatchJobCreate'
    DispatchJobCreate:
      properties:
        destination_address:
          description: The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
          example: 123 Main St, Philadelphia, PA 19106
          type: string
        destination_address_id:
          description: ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
          example: 67890
          format: int64
          type: integer
        destination_lat:
          description: Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
          example: 123.456
          format: double
          type: number
        destination_lng:
          description: Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
          example: 37.459
          format: double
          type: number
        destination_name:
          description: The name of the job destination. If provided, it will take precedence over the name of the address book entry.
          example: ACME Inc. Philadelphia HQ
          type: string
        notes:
          description: Notes regarding the details of this job.
          example: Ensure crates are stacked no more than 3 high.
          type: string
        scheduled_arrival_time_ms:
          description: The time at which the assigned driver is scheduled to arrive at the job destination.
          example: 1462881998034
          format: int64
          type: integer
        scheduled_departure_time_ms:
          description: The time at which the assigned driver is scheduled to depart from the job destination.
          example: 1462881998034
          format: int64
          type: integer
      required:
      - scheduled_arrival_time_ms
      type: object
    DispatchRoute:
      allOf:
      - properties:
          dispatch_jobs:
            description: The dispatch jobs associated with this route.
            items:
              $ref: '#/components/schemas/DispatchJob'
            type: array
          id:
            description: ID of the Samsara dispatch route.
            example: 556
            format: int64
            type: integer
        required:
        - dispatch_jobs
        - id
        type: object
      - $ref: '#/components/schemas/DispatchRouteBase'
    DispatchRouteBase:
      properties:
        actual_end_ms:
          description: The time in Unix epoch milliseconds that the route actually ended.
          example: 1462882101000
          format: int64
          type: integer
        actual_start_ms:
          description: The time in Unix epoch milliseconds that the route actually started.
          example: 1462882098000
          format: int64
          type: integer
        driver_id:
          description: ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
          example: 555
          format: int64
          type: integer
        group_id:
          description: ID of the group if the organization has multiple groups (optional).
          example: 101
          format: int64
          type: integer
        name:
          description: Descriptive name of this route.
          example: 'Bid #123'
          type: string
        scheduled_end_ms:
          description: The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
          example: 1462881998034
          format: int64
          type: integer
        scheduled_meters:
          description: The distance expected to be traveled for this route in meters.
          example: 10000
          format: int64
          type: integer
        scheduled_start_ms:
          description: The time in Unix epoch milliseconds that the route is scheduled to start.
          example: 1462881998034
          format: int64
          type: integer
        start_location_address:
          description: The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
          example: 123 Main St, Philadelphia, PA 19106
          type: string
        start_location_address_id:
          description: ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
          example: 67890
          format: int64
          type: integer
        start_location_lat:
          description: Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
          example: 123.456
          format: double
          type: number
        start_location_lng:
          description: Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
          example: 37.459
          format: double
          type: number
        start_location_name:
          description: The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
          example: ACME Inc. Philadelphia HQ
          type: string
        trailer_id:
          description: ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
          example: 666
          format: int64
          type: integer
        vehicle_id:
          description: ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
          example: 444
          format: int64
          type: integer
      required:
      - name
      - scheduled_end_ms
      - scheduled_start_ms
      type: object
    DispatchRouteCreate:
      allOf:
      - properties:
          dispatch_jobs:
            description: The dispatch jobs to create for this route.
            items:
              $ref: '#/components/schemas/DispatchJobCreate'
            type: array
        required:
        - dispatch_jobs
        type: object
      - $ref: '#/components/schemas/DispatchRouteBase'
    DispatchRouteHistoricalEntry:
      example:
        changed_at_ms: 1499411220000
      properties:
        changed_at_ms:
          description: Timestamp that the route was updated, represented as Unix milliseconds since epoch.
          example: 1499411220000
          format: int64
          type: integer
        route:
          $ref: '#/components/schemas/DispatchRoute'
      type: object
    DispatchRouteHistory:
      example:
        history:
        - changed_at_ms: 1499411220000
        - changed_at_ms: 1499411220000
      properties:
        history:
          description: History of the route's state changes.
          items:
            $ref: '#/components/schemas/DispatchRouteHistoricalEntry'
          type: array
      type: object
    DispatchRoutes:
      items:
        $ref: '#/components/schemas/DispatchRoute'
      type: array
    Document:
      allOf:
      - properties:
          documentType:
            description: Descriptive name of this type of document.
            example: Fuel Receipt
            type: string
          driverCreatedAtMs:
            description: The time in Unix epoch milliseconds that the document is created.
            example: 1462881998034
            format: int64
            type: integer
          driverId:
            description: ID of the driver for whom the document is submitted
            example: 555
            format: int64
            type: integer
          fields:
            description: The fields associated with this document.
            example:
            - label: Photos
              photoValue: []
              valueType: ValueType_Photo
            - label: Gallons
              numberValue: 12.34
              valueType: ValueType_Number
            - label: City
              stringValue: San Francisco, CA
              valueType: ValueType_String
            items:
              $ref: '#/components/schemas/DocumentField'
            type: array
          vehicleId:
            description: VehicleID of the driver at document creation.
            example: 222
            format: int64
            type: integer
        required:
        - documentType
        - driverCreatedAtMs
        - driverId
        - fields
        type: object
      - $ref: '#/components/schemas/DocumentBase'
    DocumentBase:
      properties:
        dispatchJobId:
          description: ID of the Samsara dispatch job for which the document is submitted
          example: 773
          format: int64
          type: integer
        notes:
          description: Notes submitted with this document.
          example: Fueled up before delivery.
          type: string
      type: object
    DocumentCreate:
      allOf:
      - description: Arguments to create a document.
        properties:
          documentTypeUuid:
            description: Universally unique identifier for the document type this document is being created for.
            example: 4aff772c-a7bb-45e6-8e41-6a53e34feb83
            type: string
          fields:
            description: 'List of fields should match the document type’s list of
              field types in the correct order. In other words, a field''s valueType
              and value (i.e. only one of: stringValue, numberValue, or photoValue)
              at index _i_ should match with the document field type’s valueType at
              index _i_.'
            example:
            - label: Driver Photo
              photoValue: []
              valueType: ValueType_Photo
            - label: Gallons
              numberValue: 12.34
              valueType: ValueType_Number
            - label: City
              stringValue: San Francisco, CA
              valueType: ValueType_String
            items:
              $ref: '#/components/schemas/DocumentField'
            type: array
        required:
        - documentTypeUuid
        - fields
        type: object
      - $ref: '#/components/schemas/DocumentBase'
    DocumentField:
      allOf:
      - description: A field of a document. A field can be a string type, number type, or photo type, which can be identified from its valueType. Between stringValue, numberValue, and photoValue, only one can exist for a single document field depending on the valueType.
        properties:
          label:
            description: Descriptive name of this field.
            example: Fuel Cost ($)
            type: string
          value:
            description: 'DEPRECATED: Please use stringValue, numberValue, or photoValue
              instead. Value of this field. Depending on what kind of field it is,
              this may be one of the following: an array of image urls, a float, an
              integer, or a string.'
            example: "23.45"
            type: object
        required:
        - label
        type: object
      - $ref: '#/components/schemas/DocumentFieldCreate'
    DocumentFieldCreate:
      properties:
        numberValue:
          description: 'Value of this field if this document field has valueType:
            ValueType_Number.'
          example: 12.34
          format: double
          type: number
        photoValue:
          description: 'Value of this field if this document field has valueType:
            ValueType_Photo. Array of photo objects where each object contains a URL
            for a photo.'
          example:
          - url: https://www.samsara.com/photo1
          - url: https://www.samsara.com/photo2
          items:
            $ref: '#/components/schemas/DocumentFieldCreate_photoValue'
          type: array
        stringValue:
          description: 'Value of this field if this document field has valueType:
            ValueType_String.'
          example: This is a string.
          type: string
        valueType:
          description: Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
          example: ValueType_Number
          type: string
      required:
      - valueType
      type: object
    DocumentFieldType:
      properties:
        label:
          description: Descriptive name of this field type.
          example: Fuel Cost ($)
          type: string
        numberValueTypeMetadata:
          $ref: '#/components/schemas/DocumentFieldType_numberValueTypeMetadata'
        valueType:
          description: The kind of value that can be submitted for this fieldType. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
          example: ValueType_Number
          type: string
      required:
      - label
      - valueType
      type: object
    DocumentFieldTypes:
      items:
        $ref: '#/components/schemas/DocumentFieldType'
      type: array
    DocumentType:
      example:
        fieldTypes:
        - null
        - null
        name: Fuel Receipt
        uuid: 4aff772c-a7bb-45e6-8e41-6a53e34feb83
        orgId: 773
      properties:
        fieldTypes:
          description: The field types determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.
          items:
            $ref: '#/components/schemas/DocumentFieldTypes'
          type: array
        name:
          description: Name of the document type.
          example: Fuel Receipt
          type: string
        orgId:
          description: ID for the organization this document belongs to.
          example: 773
          format: int64
          type: integer
        uuid:
          description: Universally unique identifier for the document type. Can be passed in as a documentTypeUuid when creating a document for this document type.
          example: 4aff772c-a7bb-45e6-8e41-6a53e34feb83
          type: string
      required:
      - name
      - orgId
      - uuid
      type: object
    DocumentTypes:
      items:
        $ref: '#/components/schemas/DocumentType'
      type: array
    Documents:
      items:
        $ref: '#/components/schemas/Document'
      type: array
    DoorResponse:
      description: Contains the current door status of a sensor.
      example:
        sensors:
        - doorClosed: true
          name: Trailer Door Sensor
          id: 122
        - doorClosed: true
          name: Trailer Door Sensor
          id: 122
        groupId: 101
      properties:
        groupId:
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/DoorResponse_sensors'
          type: array
      type: object
    Driver:
      allOf:
      - properties:
          id:
            description: ID of the driver.
            example: 556
            format: int64
            type: integer
          isDeactivated:
            description: True if the driver account has been deactivated.
            type: boolean
          tags:
            items:
              $ref: '#/components/schemas/TagMetadata'
            type: array
        required:
        - id
        type: object
      - properties:
          currentVehicleId:
            description: ID of the vehicle that this driver is currently assigned to. Omitted if there is no current vehicle assignment for this driver.
            example: 879
            format: int64
            type: integer
        type: object
      - $ref: '#/components/schemas/DriverBase'
    DriverBase:
      properties:
        eldAdverseWeatherExemptionEnabled:
          description: Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
          type: boolean
        eldBigDayExemptionEnabled:
          description: Flag indicating this driver may use Big Day excemptions in ELD logs.
          type: boolean
        eldDayStartHour:
          description: 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
          type: integer
        eldExempt:
          description: Flag indicating this driver is exempt from the Electronic Logging Mandate.
          type: boolean
        eldExemptReason:
          description: Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
          type: string
        eldPcEnabled:
          default: false
          description: Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
          type: boolean
        eldYmEnabled:
          default: false
          description: Flag indicating this driver may select the Yard Move duty status in ELD logs.
          type: boolean
        externalIds:
          additionalProperties:
            type: string
          description: Dictionary of external IDs (string key-value pairs)
          example:
            maintenanceId: "250020"
            payrollId: "123"
          type: object
        groupId:
          description: ID of the group if the organization has multiple groups (uncommon).
          example: 101
          format: int64
          type: integer
        licenseNumber:
          description: Driver's state issued license number.
          example: E1234567
          type: string
        licenseState:
          description: Abbreviation of state that issued driver's license.
          example: CA
          type: string
        name:
          description: Driver's name.
          example: Susan Jones
          type: string
        notes:
          description: Notes about the driver.
          example: Also goes by the nickname 'Furious Fred'.
          type: string
        phone:
          description: Driver's phone number. Please include only digits, ex. 4157771234
          example: "5558234327"
          type: string
        username:
          description: Driver's login username into the driver app.
          example: Susan Jones
          type: string
        vehicleId:
          description: ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
          example: 444
          format: int64
          type: integer
      required:
      - name
      type: object
    DriverDailyLogResponse:
      example:
        days:
        - certifiedAtMs: 0
          endMs: 1473836400000
          startMs: 1473750000000
          trailerIds:
          - 10293
          - 192933
          activeHours: 5.4
          distanceMiles: 123.24
          activeMs: 691200
          certified: true
          vehicleIds:
          - 192319
          - 12958
        - certifiedAtMs: 0
          endMs: 1473836400000
          startMs: 1473750000000
          trailerIds:
          - 10293
          - 192933
          activeHours: 5.4
          distanceMiles: 123.24
          activeMs: 691200
          certified: true
          vehicleIds:
          - 192319
          - 12958
      properties:
        days:
          items:
            $ref: '#/components/schemas/DriverDailyLogResponse_days'
          type: array
      type: object
    DriverForCreate:
      allOf:
      - properties:
          password:
            description: Driver's password for the driver app.
            example: mypassword
            type: string
          tagIds:
            $ref: '#/components/schemas/TagIds'
        required:
        - password
        type: object
      - $ref: '#/components/schemas/DriverBase'
    DriverSafetyScoreResponse:
      description: Safety score details for a driver
      example:
        crashCount: 0
        driverId: 1234
        harshAccelCount: 1
        harshEvents:
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        totalDistanceDrivenMeters: 291836
        safetyScore: 97
        totalHarshEventCount: 3
        totalTimeDrivenMs: 19708293
        harshTurningCount: 0
        timeOverSpeedLimitMs: 3769
        harshBrakingCount: 2
        safetyScoreRank: "26"
      properties:
        crashCount:
          description: Crash event count
          example: 0
          type: integer
        driverId:
          description: Driver ID
          example: 1234
          type: integer
        harshAccelCount:
          description: Harsh acceleration event count
          example: 1
          type: integer
        harshBrakingCount:
          description: Harsh braking event count
          example: 2
          type: integer
        harshEvents:
          items:
            $ref: '#/components/schemas/SafetyReportHarshEvent'
          type: array
        harshTurningCount:
          description: Harsh turning event count
          example: 0
          type: integer
        safetyScore:
          description: Safety Score
          example: 97
          type: integer
        safetyScoreRank:
          description: Safety Score Rank
          example: "26"
          type: string
        timeOverSpeedLimitMs:
          description: Amount of time driven over the speed limit in milliseconds
          example: 3769
          type: integer
        totalDistanceDrivenMeters:
          description: Total distance driven in meters
          example: 291836
          type: integer
        totalHarshEventCount:
          description: Total harsh event count
          example: 3
          type: integer
        totalTimeDrivenMs:
          description: Amount of time driven in milliseconds
          example: 19708293
          type: integer
      type: object
    DriversResponse:
      example:
        drivers:
        - null
        - null
      properties:
        drivers:
          items:
            $ref: '#/components/schemas/Driver'
          type: array
      type: object
    DriversSummaryResponse:
      example:
        Summaries:
        - driverId: 444
          distanceMiles: 123.24
          driveMs: 21600000
          activeMs: 43200000
          driverUsername: fjacobs
          groupId: 111
          driverName: Fred Jacobs
          onDutyMs: 21600000
        - driverId: 444
          distanceMiles: 123.24
          driveMs: 21600000
          activeMs: 43200000
          driverUsername: fjacobs
          groupId: 111
          driverName: Fred Jacobs
          onDutyMs: 21600000
      properties:
        Summaries:
          items:
            $ref: '#/components/schemas/DriversSummaryResponse_Summaries'
          type: array
      type: object
    DvirBase:
      example:
        defectsNeedNotBeCorrected: false
        defectsCorrected: true
        vehicleCondition: SATISFACTORY
        inspectionType: pre trip
        trailerDefects:
        - comment: Air Compressor not working
          defectType: Air Compressor
        - comment: Air Compressor not working
          defectType: Air Compressor
        mechanicOrAgentSignature:
          mechanicUserId: 14849
          driverId: 2581
          name: John Smith
          signedAt: 12535500000
          type: driver
          email: j.smith@yahoo.com
          username: jsmith
        mechanicNotes: The vehicle is now safe.
        vehicle:
          name: Storer's vehicle 19
          id: 19
        authorSignature:
          mechanicUserId: 14849
          driverId: 2581
          name: John Smith
          signedAt: 12535500000
          type: driver
          email: j.smith@yahoo.com
          username: jsmith
        odometerMiles: 49912
        vehicleDefects:
        - comment: Air Compressor not working
          defectType: Air Compressor
        - comment: Air Compressor not working
          defectType: Air Compressor
        nextDriverSignature:
          driverId: 2581
          name: John Smith
          signedAt: 12535500000
          type: driver
          email: j.smith@yahoo.com
          username: jsmith
        trailerName: Storer's Trailer 19
        id: 19
        trailerId: 19
        timeMs: 1453449599999
      properties:
        authorSignature:
          $ref: '#/components/schemas/DvirBase_authorSignature'
        defectsCorrected:
          description: Signifies if the defects on the vehicle corrected after the DVIR is done.
          example: true
          type: boolean
        defectsNeedNotBeCorrected:
          description: Signifies if the defects on this vehicle can be ignored.
          example: false
          type: boolean
        id:
          description: The id of this DVIR record.
          example: 19
          format: int64
          type: integer
        inspectionType:
          description: Inspection type of the DVIR.
          example: pre trip
          type: string
        mechanicNotes:
          description: The mechanics notes on the DVIR.
          example: The vehicle is now safe.
          type: string
        mechanicOrAgentSignature:
          $ref: '#/components/schemas/DvirBase_mechanicOrAgentSignature'
        nextDriverSignature:
          $ref: '#/components/schemas/DvirBase_nextDriverSignature'
        odometerMiles:
          description: The odometer reading in miles for the vehicle when the DVIR was done.
          example: 49912
          format: int64
          type: integer
        timeMs:
          description: Timestamp of this DVIR in UNIX milliseconds.
          example: 1453449599999
          format: int64
          type: integer
        trailerDefects:
          description: Defects registered for the trailer which was part of the DVIR.
          items:
            $ref: '#/components/schemas/DvirBase_trailerDefects'
          type: array
        trailerId:
          description: The id of the trailer which was part of the DVIR.
          example: 19
          type: integer
        trailerName:
          description: The name of the trailer which was part of the DVIR.
          example: Storer's Trailer 19
          type: string
        vehicle:
          $ref: '#/components/schemas/DvirBase_vehicle'
        vehicleCondition:
          description: The condition of vechile on which DVIR was done.
          example: SATISFACTORY
          type: string
        vehicleDefects:
          description: Defects registered for the vehicle which was part of the DVIR.
          items:
            $ref: '#/components/schemas/DvirBase_trailerDefects'
          type: array
      type: object
    DvirListResponse:
      example:
        dvirs:
        - defectsNeedNotBeCorrected: false
          defectsCorrected: true
          vehicleCondition: SATISFACTORY
          inspectionType: pre trip
          trailerDefects:
          - comment: Air Compressor not working
            defectType: Air Compressor
          - comment: Air Compressor not working
            defectType: Air Compressor
          mechanicOrAgentSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          mechanicNotes: The vehicle is now safe.
          vehicle:
            name: Storer's vehicle 19
            id: 19
          authorSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          odometerMiles: 49912
          vehicleDefects:
          - comment: Air Compressor not working
            defectType: Air Compressor
          - comment: Air Compressor not working
            defectType: Air Compressor
          nextDriverSignature:
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          trailerName: Storer's Trailer 19
          id: 19
          trailerId: 19
          timeMs: 1453449599999
        - defectsNeedNotBeCorrected: false
          defectsCorrected: true
          vehicleCondition: SATISFACTORY
          inspectionType: pre trip
          trailerDefects:
          - comment: Air Compressor not working
            defectType: Air Compressor
          - comment: Air Compressor not working
            defectType: Air Compressor
          mechanicOrAgentSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          mechanicNotes: The vehicle is now safe.
          vehicle:
            name: Storer's vehicle 19
            id: 19
          authorSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          odometerMiles: 49912
          vehicleDefects:
          - comment: Air Compressor not working
            defectType: Air Compressor
          - comment: Air Compressor not working
            defectType: Air Compressor
          nextDriverSignature:
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          trailerName: Storer's Trailer 19
          id: 19
          trailerId: 19
          timeMs: 1453449599999
      properties:
        dvirs:
          items:
            $ref: '#/components/schemas/DvirBase'
          type: array
      type: object
    EngineState:
      description: The state of the vehicle over time. State can be Running, Off, or Idle.
      example:
        value: Running
        timeMs: 1546542978484
      properties:
        timeMs:
          description: Timestamp in Unix epoch milliseconds.
          example: 1546542978484
          format: int64
          type: number
        value:
          enum:
          - Running
          - Off
          - Idle
          type: string
      required:
      - timeMs
      - value
      type: object
    ErrorResponse:
      description: Error message describing why the request failed.
      type: string
    FleetVehicleLocation:
      description: Contains the location and speed of a vehicle at a particular time
      example:
        latitude: 37.2
        speedMilesPerHour: 35.2
        location: 525 York, San Francisco, CA
        longitude: -122.5
        timeMs: 1535586471332
      properties:
        latitude:
          description: The latitude of the location in degrees.
          example: 37.2
          format: double
          type: number
        location:
          description: The best effort (street,city,state) for the latitude and longitude.
          example: 525 York, San Francisco, CA
          type: string
        longitude:
          description: The longitude of the location in degrees.
          example: -122.5
          format: double
          type: number
        speedMilesPerHour:
          description: The speed calculated from GPS that the asset was traveling at in miles per hour.
          example: 35.2
          format: double
          type: number
        timeMs:
          description: Time in Unix milliseconds since epoch when the asset was at the location.
          example: 1535586471332
          format: int64
          type: integer
      type: object
    FleetVehicleLocations:
      items:
        $ref: '#/components/schemas/FleetVehicleLocation'
      type: array
    FleetVehicleResponse:
      description: A vehicle object as returned for fleet/vehicle
      example:
        harshAccelSetting: Heavy
        externalIds:
          maintenanceId: ABFS18600
        name: Truck A7
        vehicleInfo:
          year: 1997
          model: Odyssey
          vin: 1FUJA6BD31LJ09646
          make: Honda
        id: 112
      properties:
        externalIds:
          additionalProperties:
            type: string
          example:
            maintenanceId: ABFS18600
          type: object
        harshAccelSetting:
          description: Harsh event detection setting.
          example: Heavy
          type: string
        id:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        name:
          description: Name of the vehicle.
          example: Truck A7
          type: string
        vehicleInfo:
          $ref: '#/components/schemas/FleetVehicleResponse_vehicleInfo'
      required:
      - id
      - name
      type: object
    FleetVehiclesLocations:
      items:
        properties:
          name:
            description: Name of the vehicle.
            example: Truck A7
            type: string
          locations:
            $ref: '#/components/schemas/FleetVehicleLocations'
          id:
            description: ID of the vehicle.
            example: 112
            format: int64
            type: integer
        type: object
      type: array
    HosAuthenticationLogsResponse:
      example:
        authenticationLogs:
        - actionType: signin
          address: 123 Main St., Ahwatukee, Arizona 85044
          city: Ahwatukee
          happenedAtMs: 1462881998034
          addressName: Garage Number 3
          state: Arizona
        - actionType: signin
          address: 123 Main St., Ahwatukee, Arizona 85044
          city: Ahwatukee
          happenedAtMs: 1462881998034
          addressName: Garage Number 3
          state: Arizona
      properties:
        authenticationLogs:
          items:
            $ref: '#/components/schemas/HosAuthenticationLogsResponse_authenticationLogs'
          type: array
      type: object
    HosLogsResponse:
      example:
        logs:
        - locLng: -98.502888123
          logStartMs: 1462881998034
          driverId: 444
          statusType: OFF_DUTY
          locCity: Ahwatukee
          groupId: 101
          locName: McLean Site A
          locLat: 23.413702345
          remark: Lunch Break
          locState: Arizona
          vehicleId: 112
          codriverIds:
          - 445
          - 445
        - locLng: -98.502888123
          logStartMs: 1462881998034
          driverId: 444
          statusType: OFF_DUTY
          locCity: Ahwatukee
          groupId: 101
          locName: McLean Site A
          locLat: 23.413702345
          remark: Lunch Break
          locState: Arizona
          vehicleId: 112
          codriverIds:
          - 445
          - 445
      properties:
        logs:
          items:
            $ref: '#/components/schemas/HosLogsResponse_logs'
          type: array
      type: object
    HosLogsSummaryResponse:
      example:
        drivers:
        - timeUntilBreak: 28800000
          vehicleName: Vehicle 1
          drivingInViolationToday: 39600000
          driverId: 444
          cycleRemaining: 252000000
          driverName: Fred Jacobs
          dutyStatus: OFF_DUTY
          cycleTomorrow: 252000000
          shiftDriveRemaining: 39600000
          timeInCurrentStatus: 5000
          drivingInViolationCycle: 50400000
          shiftRemaining: 50400000
        - timeUntilBreak: 28800000
          vehicleName: Vehicle 1
          drivingInViolationToday: 39600000
          driverId: 444
          cycleRemaining: 252000000
          driverName: Fred Jacobs
          dutyStatus: OFF_DUTY
          cycleTomorrow: 252000000
          shiftDriveRemaining: 39600000
          timeInCurrentStatus: 5000
          drivingInViolationCycle: 50400000
          shiftRemaining: 50400000
      properties:
        drivers:
          items:
            $ref: '#/components/schemas/HosLogsSummaryResponse_drivers'
          type: array
      type: object
    HumidityResponse:
      description: Contains the current humidity of a sensor.
      example:
        sensors:
        - name: Freezer Humidity Sensor
          humidity: 53
          id: 122
        - name: Freezer Humidity Sensor
          humidity: 53
          id: 122
        groupId: 101
      properties:
        groupId:
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/HumidityResponse_sensors'
          type: array
      type: object
    Machine:
      description: Contains information about a machine.
      example:
        notes: This is in the left hallway behind the conveyor belt
        name: Freezer ABC
        id: 123
      properties:
        id:
          description: ID of the machine.
          example: 123
          format: int64
          type: integer
        name:
          description: Name of the machine.
          example: Freezer ABC
          type: string
        notes:
          description: Notes about the machine
          example: This is in the left hallway behind the conveyor belt
          type: string
      required:
      - id
      type: object
    MachineHistoryResponse:
      description: Contains the results for a machine history request
      example:
        machines:
        - name: 1/3 HP Motor
          id: 1
          vibrations:
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
        - name: 1/3 HP Motor
          id: 1
          vibrations:
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
      properties:
        machines:
          items:
            $ref: '#/components/schemas/MachineHistoryResponse_machines'
          type: array
      type: object
    Pagination:
      example:
        hasPrevPage: true
        hasNextPage: true
        endCursor: MTU5MTEzNjA2OTU0MzQ3
        startCursor: MTU5MTEzNjA2OTU0MzQ3
      properties:
        endCursor:
          description: Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'starting_after' query parameter.
          example: MTU5MTEzNjA2OTU0MzQ3
          type: string
        hasNextPage:
          description: True if there are more pages of results after this response.
          type: boolean
        hasPrevPage:
          description: True if there are more pages of results before this response.
          type: boolean
        startCursor:
          description: Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request's 'ending_before' query parameter.
          example: MTU5MTEzNjA2OTU0MzQ3
          type: string
      required:
      - endCursor
      - hasNextPage
      - hasPrevPage
      - startCursor
      type: object
    SafetyReportHarshEvent:
      description: List of harsh events
      example:
        harshEventType: Harsh Braking
        vehicleId: 212014918086169
        timestampMs: 1535590776000
      properties:
        harshEventType:
          description: Type of the harsh event
          example: Harsh Braking
          type: string
        timestampMs:
          description: Timestamp that the harsh event occurred in Unix milliseconds since epoch
          example: 1535590776000
          type: integer
        vehicleId:
          description: Vehicle associated with the harsh event
          example: 212014918086169
          type: integer
      type: object
    Sensor:
      description: Contains information about a sensor.
      example:
        macAddress: 11:11:11:11:11:11
        name: Freezer ABC
        id: 123
      properties:
        id:
          description: ID of the sensor.
          example: 123
          format: int64
          type: integer
        macAddress:
          description: MAC address of the sensor.
          example: 11:11:11:11:11:11
          type: string
        name:
          description: Name of the sensor.
          example: Freezer ABC
          type: string
      required:
      - id
      type: object
    SensorHistoryResponse:
      description: Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.
      example:
        results:
        - series:
          - 1
          - 1
          timeMs: 1453449599999
        - series:
          - 1
          - 1
          timeMs: 1453449599999
      properties:
        results:
          items:
            $ref: '#/components/schemas/SensorHistoryResponse_results'
          type: array
      type: object
    Tag:
      example:
        addresses:
        - null
        - null
        assets:
        - null
        - null
        sensors:
        - null
        - null
        parentTagId: 8389
        groupId: 2348
        name: Broken Vehicles
        vehicles:
        - null
        - null
        id: 12345
        machines:
        - null
        - null
        drivers:
        - null
        - null
      properties:
        addresses:
          description: The addresses that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedAddress'
          type: array
        assets:
          description: The assets that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedAsset'
          type: array
        drivers:
          description: The drivers that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedDriver'
          type: array
        groupId:
          description: The GroupID that this tag belongs to.
          example: 2348
          format: int64
          type: integer
        id:
          description: The ID of this tag.
          example: 12345
          format: int64
          type: integer
        machines:
          description: The machines that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedMachine'
          type: array
        name:
          description: Name of this tag.
          example: Broken Vehicles
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
          example: 8389
          format: int64
          type: integer
        sensors:
          description: The sensors that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedSensor'
          type: array
        vehicles:
          description: The vehicles that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedVehicle'
          type: array
      required:
      - id
      - name
      type: object
    TagCreate:
      example:
        assets:
        - id: 789
        - id: 789
        sensors:
        - id: 345
        - id: 345
        parentTagId: 8389
        name: Broken Vehicles
        vehicles:
        - id: 123
        - id: 123
        machines:
        - id: 567
        - id: 567
        drivers:
        - id: 456
        - id: 456
      properties:
        assets:
          description: The assets that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedAssetBase'
          type: array
        drivers:
          description: The drivers that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedDriverBase'
          type: array
        machines:
          description: The machines that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedMachineBase'
          type: array
        name:
          description: Name of this tag.
          example: Broken Vehicles
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
          example: 8389
          format: int64
          type: integer
        sensors:
          description: The sensors that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedSensorBase'
          type: array
        vehicles:
          description: The vehicles that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedVehicleBase'
          type: array
      required:
      - name
      type: object
    TagIds:
      description: A list of tag IDs.
      items:
        example: 123
        format: int64
        type: integer
      type: array
    TagMetadata:
      example:
        name: Broken Vehicles
        id: 12345
      properties:
        id:
          description: The ID of this tag.
          example: 12345
          format: int64
          type: integer
        name:
          description: Name of this tag.
          example: Broken Vehicles
          type: string
      required:
      - id
      - name
      type: object
    TagModify:
      example:
        add:
          assets:
          - id: 789
          - id: 789
          sensors:
          - id: 345
          - id: 345
          vehicles:
          - id: 123
          - id: 123
          machines:
          - id: 567
          - id: 567
          drivers:
          - id: 456
          - id: 456
        parentTagId: 8389
        name: Broken Vehicles
        delete:
          assets:
          - id: 789
          - id: 789
          sensors:
          - id: 345
          - id: 345
          vehicles:
          - id: 123
          - id: 123
          machines:
          - id: 567
          - id: 567
          drivers:
          - id: 456
          - id: 456
      properties:
        add:
          $ref: '#/components/schemas/TagModify_add'
        delete:
          $ref: '#/components/schemas/TagModify_delete'
        name:
          description: Updated name of this tag.
          example: Broken Vehicles
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
          example: 8389
          format: int64
          type: integer
      type: object
    TagUpdate:
      example:
        assets:
        - id: 789
        - id: 789
        sensors:
        - id: 345
        - id: 345
        parentTagId: 8389
        name: Broken Vehicles
        vehicles:
        - id: 123
        - id: 123
        machines:
        - id: 567
        - id: 567
        drivers:
        - id: 456
        - id: 456
      properties:
        assets:
          description: The assets that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedAssetBase'
          type: array
        drivers:
          description: The drivers that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedDriverBase'
          type: array
        machines:
          description: The machines that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedMachineBase'
          type: array
        name:
          description: Updated name of this tag.
          example: Broken Vehicles
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
          example: 8389
          format: int64
          type: integer
        sensors:
          description: The sensors that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedSensorBase'
          type: array
        vehicles:
          description: The vehicles that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedVehicleBase'
          type: array
      type: object
    TaggedAddress:
      allOf:
      - $ref: '#/components/schemas/TaggedAddressBase'
      - properties:
          name:
            description: Name of the address being tagged.
            example: Truck Lot 345
            type: string
        type: object
    TaggedAddressBase:
      properties:
        id:
          description: The ID of the address being tagged.
          example: 345
          format: int64
          type: integer
      required:
      - id
      type: object
    TaggedAsset:
      allOf:
      - $ref: '#/components/schemas/TaggedAssetBase'
      - properties:
          name:
            description: Name of the Asset being tagged.
            example: Trailer 789
            type: string
        type: object
    TaggedAssetBase:
      example:
        id: 789
      properties:
        id:
          description: The ID of the Asset being tagged.
          example: 789
          format: int64
          type: integer
      required:
      - id
      type: object
    TaggedDriver:
      allOf:
      - $ref: '#/components/schemas/TaggedDriverBase'
      - properties:
          name:
            description: Name of the Driver being tagged.
            example: John Smith
            type: string
        type: object
    TaggedDriverBase:
      example:
        id: 456
      properties:
        id:
          description: The ID of the Driver being tagged.
          example: 456
          format: int64
          type: integer
      required:
      - id
      type: object
    TaggedMachine:
      allOf:
      - $ref: '#/components/schemas/TaggedMachineBase'
      - properties:
          name:
            description: Name of the Machine being tagged.
            example: Vibration Monitor 567
            type: string
        type: object
    TaggedMachineBase:
      example:
        id: 567
      properties:
        id:
          description: The ID of the Machine being tagged.
          example: 567
          format: int64
          type: integer
      required:
      - id
      type: object
    TaggedSensor:
      allOf:
      - $ref: '#/components/schemas/TaggedSensorBase'
      - properties:
          name:
            description: Name of the Sensor being tagged.
            example: Temperature Sensor 345
            type: string
        type: object
    TaggedSensorBase:
      example:
        id: 345
      properties:
        id:
          description: The ID of the Sensor being tagged.
          example: 345
          format: int64
          type: integer
      required:
      - id
      type: object
    TaggedVehicle:
      allOf:
      - $ref: '#/components/schemas/TaggedVehicleBase'
      - properties:
          name:
            description: Name of the Vehicle being tagged.
            example: Heavy Duty 123
            type: string
        type: object
    TaggedVehicleBase:
      example:
        id: 123
      properties:
        id:
          description: The ID of the Vehicle being tagged.
          example: 123
          format: int64
          type: integer
      required:
      - id
      type: object
    TemperatureResponse:
      description: Contains the current temperatures of a sensor.
      example:
        sensors:
        - probeTemperature: -20145
          name: Freezer Temp Sensor
          id: 122
          ambientTemperature: 11057
        - probeTemperature: -20145
          name: Freezer Temp Sensor
          id: 122
          ambientTemperature: 11057
        groupId: 101
      properties:
        groupId:
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/TemperatureResponse_sensors'
          type: array
      type: object
    TripResponse:
      description: Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation, endAddress and endCoordinates.
      example:
        trips:
        - endOdometer: 210430500
          distanceMeters: 2500
          endMs: 1462881998034
          startMs: 1462878398034
          fuelConsumedMl: 75700
          startAddress: Ramen Tatsunoya
          startCoordinates:
            latitude: 29.443702345
            longitude: -98.502888123
          endCoordinates:
            latitude: 23.413702345
            longitude: -91.502888123
          startOdometer: 210430450
          driverId: 719
          startLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          tollMeters: 32000
          endAddress: Winchell's Donuts House
          endLocation: 571 S Lake Ave, Pasadena, CA 91101
        - endOdometer: 210430500
          distanceMeters: 2500
          endMs: 1462881998034
          startMs: 1462878398034
          fuelConsumedMl: 75700
          startAddress: Ramen Tatsunoya
          startCoordinates:
            latitude: 29.443702345
            longitude: -98.502888123
          endCoordinates:
            latitude: 23.413702345
            longitude: -91.502888123
          startOdometer: 210430450
          driverId: 719
          startLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          tollMeters: 32000
          endAddress: Winchell's Donuts House
          endLocation: 571 S Lake Ave, Pasadena, CA 91101
      properties:
        trips:
          items:
            $ref: '#/components/schemas/TripResponse_trips'
          type: array
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/UserBase'
      - properties:
          id:
            description: The ID of the User record.
            example: 123
            format: int64
            type: integer
          organizationRole:
            description: The name of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
            example: Full Admin
            type: string
          tagRoles:
            description: The specific tags this user has access to. This will be blank for users that have full access to the organization.
            items:
              $ref: '#/components/schemas/UserTagRole'
            type: array
        type: object
    UserBase:
      properties:
        authType:
          description: The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.
          enum:
          - default
          - saml
          type: string
        email:
          description: The email address of this user.
          example: user@company.com
          type: string
        name:
          description: The first and last name of the user.
          example: Jane Doe
          type: string
        organizationRoleId:
          description: The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
          example: 23d4d8d3-dc10-4e7a-a183-69968751f23e
          type: string
      required:
      - authType
      - email
      type: object
    UserRole:
      example:
        name: Full Admin
        id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
      properties:
        id:
          example: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
          type: string
        name:
          example: Full Admin
          type: string
      type: object
    UserTagRole:
      properties:
        role:
          description: The name of the role the user has been granted on this tag.
          example: Full Admin
          type: string
        roleId:
          description: The id of the role the user has been granted on this tag.
          example: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
          type: string
        tag:
          $ref: '#/components/schemas/UserTagRole_tag'
      required:
      - roleId
      - tag
      type: object
    Vehicle:
      description: A vehicle object.
      example:
        note: Red truck 2015 M16
        engineHours: 1500
        name: Truck A7
        fuelLevelPercent: 0.3
        odometerMeters: 60130000
        vin: 1FUJA6BD31LJ09646
        id: 112
      properties:
        engineHours:
          description: Total engine hours for the vehicle.
          example: 1500
          format: int64
          type: integer
        fuelLevelPercent:
          description: The fuel level of the vehicle as a percentage. (0.0 to 1.0)
          example: 0.3
          format: double
          type: number
        id:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        name:
          description: Name of the vehicle.
          example: Truck A7
          type: string
        note:
          example: Red truck 2015 M16
          type: string
        odometerMeters:
          description: The number of meters reported by the odometer.
          example: 60130000
          format: int64
          type: integer
        vin:
          description: Vehicle Identification Number.
          example: 1FUJA6BD31LJ09646
          type: string
      required:
      - id
      type: object
    VehicleHarshEventResponse:
      description: Harsh event details for a vehicle
      example:
        downloadForwardVideoUrl: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?...
        downloadInwardVideoUrl: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...
        incidentReportUrl: https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984
        harshEventType: Harsh Braking
        location:
          address: 350 Rhode Island St, San Francisco, CA
          latitude: "33.07614328"
          longitude: -96.14907287
        downloadTrackedInwardVideoUrl: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...
        isDistracted: true
      properties:
        downloadForwardVideoUrl:
          description: URL for downloading the forward facing video
          example: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?...
          type: string
        downloadInwardVideoUrl:
          description: URL for downloading the inward facing video
          example: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...
          type: string
        downloadTrackedInwardVideoUrl:
          description: URL for downloading the tracked inward facing video
          example: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...
          type: string
        harshEventType:
          description: 'Type of the harsh event. One of: [Crash, Harsh Acceleration,
            Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake,
            Harsh Event]'
          example: Harsh Braking
          type: string
        incidentReportUrl:
          description: URL of the associated incident report page
          example: https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984
          type: string
        isDistracted:
          description: Whether the driver was deemed distracted during this harsh event
          example: true
          type: boolean
        location:
          $ref: '#/components/schemas/VehicleHarshEventResponse_location'
      required:
      - harshEventType
      - incidentReportUrl
      type: object
    VehicleLocation:
      description: Contains the location, in latitude and longitude, of a vehicle.
      example:
        heading: 246.42
        latitude: 123.456
        name: Truck A7
        location: 1 Main St, Dallas, TX
        odometerMeters: 71774705
        vin: JTNBB46KX73011966
        id: 112
        onTrip: true
        time: 1462881998034
        speed: 64.37
        longitude: 32.897
      properties:
        heading:
          description: Heading in degrees.
          example: 246.42
          format: double
          type: number
        id:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        latitude:
          description: Latitude in decimal degrees.
          example: 123.456
          format: double
          type: number
        location:
          description: Text representation of nearest identifiable location to (latitude, longitude) coordinates.
          example: 1 Main St, Dallas, TX
          type: string
        longitude:
          description: Longitude in decimal degrees.
          example: 32.897
          format: double
          type: number
        name:
          description: Name of the vehicle.
          example: Truck A7
          type: string
        odometerMeters:
          description: The number of meters reported by the odometer.
          example: 71774705
          format: int64
          type: integer
        onTrip:
          description: Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
          example: true
          type: boolean
        speed:
          description: Speed in miles per hour.
          example: 64.37
          format: double
          type: number
        time:
          description: The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
          example: 1462881998034
          type: integer
        vin:
          description: Vehicle Identification Number (VIN) of the vehicle.
          example: JTNBB46KX73011966
          type: string
      required:
      - id
      type: object
    VehicleMaintenance:
      description: Contains any J1939/Passenger engine light warnings and engine faults.
      example:
        j1939:
          checkEngineLight:
            protectIsOn: true
            stopIsOn: true
            warningIsOn: true
            emissionsIsOn: true
          diagnosticTroubleCodes:
          - spnDescription: spnDescription
            fmiText: fmiText
            spnId: 0
            occurrenceCount: 6
            txId: 1
            fmiId: 5
          - spnDescription: spnDescription
            fmiText: fmiText
            spnId: 0
            occurrenceCount: 6
            txId: 1
            fmiId: 5
        passenger:
          checkEngineLight:
            isOn: true
          diagnosticTroubleCodes:
          - dtcShortCode: dtcShortCode
            dtcId: 5
            dtcDescription: dtcDescription
          - dtcShortCode: dtcShortCode
            dtcId: 5
            dtcDescription: dtcDescription
        id: 112
      properties:
        id:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        j1939:
          $ref: '#/components/schemas/VehicleMaintenance_j1939'
        passenger:
          $ref: '#/components/schemas/VehicleMaintenance_passenger'
      required:
      - id
      type: object
    VehicleSafetyScoreResponse:
      description: Safety score details for a vehicle
      example:
        crashCount: 0
        harshAccelCount: 1
        harshEvents:
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        totalDistanceDrivenMeters: 291836
        safetyScore: 97
        totalHarshEventCount: 3
        totalTimeDrivenMs: 19708293
        vehicleId: 4321
        harshTurningCount: 0
        timeOverSpeedLimitMs: 3769
        harshBrakingCount: 2
        safetyScoreRank: "26"
      properties:
        crashCount:
          description: Crash event count
          example: 0
          type: integer
        harshAccelCount:
          description: Harsh acceleration event count
          example: 1
          type: integer
        harshBrakingCount:
          description: Harsh braking event count
          example: 2
          type: integer
        harshEvents:
          items:
            $ref: '#/components/schemas/SafetyReportHarshEvent'
          type: array
        harshTurningCount:
          description: Harsh turning event count
          example: 0
          type: integer
        safetyScore:
          description: Safety Score
          example: 97
          type: integer
        safetyScoreRank:
          description: Safety Score Rank
          example: "26"
          type: string
        timeOverSpeedLimitMs:
          description: Amount of time driven over the speed limit in milliseconds
          example: 3769
          type: integer
        totalDistanceDrivenMeters:
          description: Total distance driven in meters
          example: 291836
          type: integer
        totalHarshEventCount:
          description: Total harsh event count
          example: 3
          type: integer
        totalTimeDrivenMs:
          description: Amount of time driven in milliseconds
          example: 19708293
          type: integer
        vehicleId:
          description: Vehicle ID
          example: 4321
          type: integer
      type: object
    allRouteJobUpdates:
      example:
        sequence_id: eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0=
        job_updates:
        - changed_at_ms: 1462881998034
          route_id: 556
          job_id: 773
          prev_job_state: JobState_EnRoute
          job_state: JobState_Arrived
        - changed_at_ms: 1462881998034
          route_id: 556
          job_id: 773
          prev_job_state: JobState_EnRoute
          job_state: JobState_Arrived
      properties:
        job_updates:
          items:
            $ref: '#/components/schemas/jobUpdateObject'
          type: array
        sequence_id:
          description: Sequence ID of the last update returned in the response
          example: eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0=
          type: string
      type: object
    jobStatus:
      description: The current state of the dispatch job.
      enum:
      - JobState_Unassigned
      - JobState_Scheduled
      - JobState_EnRoute
      - JobState_Arrived
      - JobState_Completed
      - JobState_Skipped
      example: JobState_Arrived
      type: string
    jobUpdateObject:
      example:
        changed_at_ms: 1462881998034
        route_id: 556
        job_id: 773
        prev_job_state: JobState_EnRoute
        job_state: JobState_Arrived
      properties:
        changed_at_ms:
          description: Timestamp that this event was updated, represented as Unix milliseconds since epoch.
          example: 1462881998034
          format: int64
          type: integer
        job_id:
          description: ID of the Samsara job.
          example: 773
          format: int64
          type: integer
        job_state:
          $ref: '#/components/schemas/jobStatus'
        prev_job_state:
          $ref: '#/components/schemas/prevJobStatus'
        route:
          $ref: '#/components/schemas/DispatchRoute'
        route_id:
          description: ID of the Samsara dispatch route.
          example: 556
          format: int64
          type: integer
      type: object
    prevJobStatus:
      description: The previous state of the dispatch job.
      enum:
      - JobState_Unassigned
      - JobState_Scheduled
      - JobState_EnRoute
      - JobState_Arrived
      - JobState_Completed
      - JobState_Skipped
      example: JobState_EnRoute
      type: string
    _addresses_addresses:
      properties:
        notes:
          description: Notes associated with an address.
          example: Delivery site 1
          type: string
        formattedAddress:
          description: The full address associated with this address/geofence, as it might be recognized by maps.google.com
          example: 350 Rhode Island St, San Francisco, CA
          type: string
        geofence:
          $ref: '#/components/schemas/AddressGeofence'
        tagIds:
          description: A list of tag IDs.
          items:
            example: 123
            format: int64
            type: integer
          type: array
        name:
          description: The name of this address/geofence
          example: Samsara HQ
          type: string
        contactIds:
          description: A list of IDs for contact book entries.
          items:
            example: 123
            format: int64
            type: integer
          type: array
      required:
      - formattedAddress
      - geofence
      - name
    inline_object:
      properties:
        addresses:
          items:
            $ref: '#/components/schemas/_addresses_addresses'
          type: array
      required:
      - addresses
      type: object
    inline_object_1:
      properties:
        contactIds:
          description: A list of IDs for contact book entries.
          items:
            example: 123
            format: int64
            type: integer
          type: array
        formattedAddress:
          description: The full address associated with this address/geofence, as it might be recognized by maps.google.com
          example: 350 Rhode Island St, San Francisco, CA
          type: string
        geofence:
          $ref: '#/components/schemas/AddressGeofence'
        name:
          description: The name of this address/geofence
          example: Samsara HQ
          type: string
        notes:
          description: Notes associated with an address.
          example: Delivery site 1
          type: string
        tagIds:
          description: A list of tag IDs.
          items:
            example: 123
            format: int64
            type: integer
          type: array
      type: object
    inline_object_2:
      properties:
        address:
          description: The address of the entry to add, as it would be recognized if provided to maps.google.com.
          example: 501 York St
          type: string
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        name:
          description: Name of the location to add to the address book.
          example: HQ
          type: string
        radius:
          description: Radius in meters of the address (used for matching vehicle trip stops to this location).
          example: 10
          type: integer
      required:
      - address
      - groupId
      - name
      - radius
      type: object
    inline_response_200:
      example:
        assets:
        - assetSerialNumber: SNTEST123
          engineHours: 104
          name: Trailer 123
          id: 1
          cable:
          - assetType: Reefer (Thermo King)
          - assetType: Reefer (Thermo King)
        - assetSerialNumber: SNTEST123
          engineHours: 104
          name: Trailer 123
          id: 1
          cable:
          - assetType: Reefer (Thermo King)
          - assetType: Reefer (Thermo King)
      properties:
        assets:
          items:
            $ref: '#/components/schemas/Asset'
          type: array
    inline_response_200_1:
      example:
        assets:
        - engineHours: 104
          name: Trailer 123
          location:
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          id: 1
          cable:
          - assetType: Reefer (Thermo King)
          - assetType: Reefer (Thermo King)
        - engineHours: 104
          name: Trailer 123
          location:
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          id: 1
          cable:
          - assetType: Reefer (Thermo King)
          - assetType: Reefer (Thermo King)
      properties:
        assets:
          items:
            $ref: '#/components/schemas/AssetCurrentLocationsResponse'
          type: array
    inline_object_3:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_object_4:
      properties:
        reactivate:
          description: True indicates that this driver should be reactivated.
          type: boolean
      required:
      - reactivate
      type: object
    inline_object_5:
      properties:
        endMs:
          description: End time (ms) of queried time period.
          example: 1481076244389
          format: int64
          type: integer
        orgId:
          description: Org ID to query.
          example: 101
          format: int64
          type: integer
        startMs:
          description: Start time (ms) of queried time period.
          example: 1481076243389
          format: int64
          type: integer
      required:
      - endMs
      - orgId
      - startMs
      type: object
    inline_object_6:
      properties:
        driverId:
          description: Driver ID to query.
          example: 444
          format: int64
          type: integer
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX time.
          example: 1462878398034
          type: integer
      required:
      - driverId
      - endMs
      - groupId
      - startMs
      type: object
    inline_object_7:
      properties:
        driverId:
          description: Driver ID to query.
          example: 444
          format: int64
          type: integer
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX time.
          example: 1462878398034
          type: integer
      required:
      - driverId
      - endMs
      - groupId
      - startMs
      type: object
    inline_object_8:
      properties:
        driverId:
          description: Driver ID to query.
          example: 444
          format: int64
          type: integer
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX time.
          example: 1462878398034
          type: integer
      required:
      - driverId
      - endMs
      - groupId
      - startMs
      type: object
    inline_object_9:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_object_10:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_response_200_2:
      example:
        pagination:
          hasPrevPage: true
          hasNextPage: true
          endCursor: MTU5MTEzNjA2OTU0MzQ3
          startCursor: MTU5MTEzNjA2OTU0MzQ3
        groupId: 101
        vehicles:
        - note: Red truck 2015 M16
          engineHours: 1500
          name: Truck A7
          fuelLevelPercent: 0.3
          odometerMeters: 60130000
          vin: 1FUJA6BD31LJ09646
          id: 112
        - note: Red truck 2015 M16
          engineHours: 1500
          name: Truck A7
          fuelLevelPercent: 0.3
          odometerMeters: 60130000
          vin: 1FUJA6BD31LJ09646
          id: 112
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        vehicles:
          items:
            $ref: '#/components/schemas/Vehicle'
          type: array
    inline_object_11:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_response_200_3:
      example:
        groupId: 101
        vehicles:
        - heading: 246.42
          latitude: 123.456
          name: Truck A7
          location: 1 Main St, Dallas, TX
          odometerMeters: 71774705
          vin: JTNBB46KX73011966
          id: 112
          onTrip: true
          time: 1462881998034
          speed: 64.37
          longitude: 32.897
        - heading: 246.42
          latitude: 123.456
          name: Truck A7
          location: 1 Main St, Dallas, TX
          odometerMeters: 71774705
          vin: JTNBB46KX73011966
          id: 112
          onTrip: true
          time: 1462881998034
          speed: 64.37
          longitude: 32.897
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        vehicles:
          items:
            $ref: '#/components/schemas/VehicleLocation'
          type: array
    inline_object_12:
      properties:
        inspectionType:
          description: Only type 'mechanic' is currently accepted.
          enum:
          - mechanic
          example: mechanic
          type: string
        mechanicNotes:
          description: Any notes from the mechanic.
          example: Replaced headlight on passenger side.
          type: string
        odometerMiles:
          description: The current odometer of the vehicle.
          example: 38426
          type: integer
        previousDefectsCorrected:
          description: Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
          example: true
          type: boolean
        previousDefectsIgnored:
          description: Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
          example: false
          type: boolean
        safe:
          description: Whether or not this vehicle or trailer is safe to drive.
          enum:
          - safe
          - unsafe
          example: safe
          type: string
        trailerId:
          description: Id of trailer being inspected. Either vehicleId or trailerId must be provided.
          example: 11
          type: integer
        userEmail:
          description: The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
          example: j.smith@yahoo.com
          type: string
        vehicleId:
          description: Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
          example: 10
          type: integer
      required:
      - inspectionType
      - safe
      - userEmail
      type: object
    inline_object_13:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_response_200_4:
      example:
        vehicles:
        - j1939:
            checkEngineLight:
              protectIsOn: true
              stopIsOn: true
              warningIsOn: true
              emissionsIsOn: true
            diagnosticTroubleCodes:
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 0
              occurrenceCount: 6
              txId: 1
              fmiId: 5
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 0
              occurrenceCount: 6
              txId: 1
              fmiId: 5
          passenger:
            checkEngineLight:
              isOn: true
            diagnosticTroubleCodes:
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
          id: 112
        - j1939:
            checkEngineLight:
              protectIsOn: true
              stopIsOn: true
              warningIsOn: true
              emissionsIsOn: true
            diagnosticTroubleCodes:
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 0
              occurrenceCount: 6
              txId: 1
              fmiId: 5
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 0
              occurrenceCount: 6
              txId: 1
              fmiId: 5
          passenger:
            checkEngineLight:
              isOn: true
            diagnosticTroubleCodes:
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
          id: 112
      properties:
        vehicles:
          items:
            $ref: '#/components/schemas/VehicleMaintenance'
          type: array
    inline_object_14:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        vehicles:
          items:
            $ref: '#/components/schemas/Vehicle'
          type: array
      required:
      - groupId
      - vehicles
      type: object
    inline_object_15:
      properties:
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
          example: 1462878398034
          type: integer
        vehicleId:
          description: Vehicle ID to query.
          example: 112
          format: int64
          type: integer
      required:
      - endMs
      - groupId
      - startMs
      - vehicleId
      type: object
    inline_response_200_5_vehicleStats:
      example:
        engineState:
        - value: Running
          timeMs: 1546542978484
        - value: Running
          timeMs: 1546542978484
        auxInput2:
          values:
          - value: true
            timeMs: 1546542978484
          - value: true
            timeMs: 1546542978484
          name: Boom
        vehicleId: 112
        auxInput1:
          values:
          - value: true
            timeMs: 1546542978484
          - value: true
            timeMs: 1546542978484
          name: Boom
      properties:
        engineState:
          items:
            $ref: '#/components/schemas/EngineState'
          type: array
        auxInput2:
          $ref: '#/components/schemas/AuxInputSeries'
        vehicleId:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        auxInput1:
          $ref: '#/components/schemas/AuxInputSeries'
      required:
      - vehicleId
    inline_response_200_5:
      example:
        pagination:
          hasPrevPage: true
          hasNextPage: true
          endCursor: MTU5MTEzNjA2OTU0MzQ3
          startCursor: MTU5MTEzNjA2OTU0MzQ3
        vehicleStats:
        - engineState:
          - value: Running
            timeMs: 1546542978484
          - value: Running
            timeMs: 1546542978484
          auxInput2:
            values:
            - value: true
              timeMs: 1546542978484
            - value: true
              timeMs: 1546542978484
            name: Boom
          vehicleId: 112
          auxInput1:
            values:
            - value: true
              timeMs: 1546542978484
            - value: true
              timeMs: 1546542978484
            name: Boom
        - engineState:
          - value: Running
            timeMs: 1546542978484
          - value: Running
            timeMs: 1546542978484
          auxInput2:
            values:
            - value: true
              timeMs: 1546542978484
            - value: true
              timeMs: 1546542978484
            name: Boom
          vehicleId: 112
          auxInput1:
            values:
            - value: true
              timeMs: 1546542978484
            - value: true
              timeMs: 1546542978484
            name: Boom
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        vehicleStats:
          items:
            $ref: '#/components/schemas/inline_response_200_5_vehicleStats'
          type: array
      required:
      - vehicleStats
    inline_object_16:
      properties:
        externalIds:
          additionalProperties:
            type: string
          example:
            maintenanceId: ABFS18600
          type: object
        harsh_accel_setting:
          description: |-
            Harsh Event Detection Setting
            * 0: Passenger
            * 1: Light Truck
            * 2: Heavy
            * 3: Off
            * 4: Automatic
          format: string
          type: integer
        name:
          description: Name
          type: string
      type: object
    inline_response_200_6:
      example:
        dataInputs:
        - name: Pump Flow
          id: 12345
          points:
          - value: 12.332
            timeMs: 1453449599999
          - value: 12.332
            timeMs: 1453449599999
        - name: Pump Flow
          id: 12345
          points:
          - value: 12.332
            timeMs: 1453449599999
          - value: 12.332
            timeMs: 1453449599999
      properties:
        dataInputs:
          items:
            $ref: '#/components/schemas/DataInputHistoryResponse'
          type: array
    inline_object_17:
      properties:
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX time.
          example: 1462878398034
          type: integer
      required:
      - endMs
      - groupId
      - startMs
      type: object
    inline_object_18:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_response_200_7:
      example:
        machines:
        - notes: This is in the left hallway behind the conveyor belt
          name: Freezer ABC
          id: 123
        - notes: This is in the left hallway behind the conveyor belt
          name: Freezer ABC
          id: 123
      properties:
        machines:
          items:
            $ref: '#/components/schemas/Machine'
          type: array
    inline_object_19:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - groupId
      - sensors
      type: object
    inline_object_20:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - groupId
      - sensors
      type: object
    _sensors_history_series:
      description: Sensor ID and field to query.
      properties:
        field:
          description: Field to query.
          enum:
          - ambientTemperature
          - probeTemperature
          - currentLoop1Raw
          - currentLoop1Mapped
          - currentLoop2Raw
          - currentLoop2Mapped
          - pmPowerTotal
          - pmPhase1Power
          - pmPhase2Power
          - pmPhase3Power
          - pmPhase1PowerFactor
          - pmPhase2PowerFactor
          - pmPhase3PowerFactor
          example: ambientTemperature
          type: string
        widgetId:
          description: Sensor ID to query.
          example: 1
          format: int64
          type: integer
      required:
      - field
      - widgetId
    inline_object_21:
      properties:
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        fillMissing:
          default: withNull
          enum:
          - withNull
          - withPrevious
          type: string
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        series:
          items:
            $ref: '#/components/schemas/_sensors_history_series'
          type: array
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX time.
          example: 1462878398034
          type: integer
        stepMs:
          description: Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.
          example: 3600000
          type: integer
      required:
      - endMs
      - groupId
      - series
      - startMs
      - stepMs
      type: object
    inline_object_22:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - groupId
      - sensors
      type: object
    inline_object_23:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
      required:
      - groupId
      type: object
    inline_response_200_8:
      example:
        sensors:
        - macAddress: 11:11:11:11:11:11
          name: Freezer ABC
          id: 123
        - macAddress: 11:11:11:11:11:11
          name: Freezer ABC
          id: 123
      properties:
        sensors:
          items:
            $ref: '#/components/schemas/Sensor'
          type: array
    inline_object_24:
      properties:
        groupId:
          description: Group ID to query.
          example: 101
          format: int64
          type: integer
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - groupId
      - sensors
      type: object
    inline_response_200_9:
      example:
        tags:
        - addresses:
          - null
          - null
          assets:
          - null
          - null
          sensors:
          - null
          - null
          parentTagId: 8389
          groupId: 2348
          name: Broken Vehicles
          vehicles:
          - null
          - null
          id: 12345
          machines:
          - null
          - null
          drivers:
          - null
          - null
        - addresses:
          - null
          - null
          assets:
          - null
          - null
          sensors:
          - null
          - null
          parentTagId: 8389
          groupId: 2348
          name: Broken Vehicles
          vehicles:
          - null
          - null
          id: 12345
          machines:
          - null
          - null
          drivers:
          - null
          - null
      properties:
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
    AddressGeofence_circle:
      description: Information about a circular geofence. This field is only populated if the geofence is a circle.
      example:
        latitude: 37.765363
        radiusMeters: 250
        longitude: -122.403098
      properties:
        latitude:
          description: The latitude of the center of the circular geofence
          example: 37.765363
          format: double
          type: number
        radiusMeters:
          description: The radius of the circular geofence
          example: 250
          format: int64
          type: integer
        longitude:
          description: The longitude of the center of the circular geofence
          example: -122.403098
          format: double
          type: number
    AddressGeofence_polygon_vertices:
      example:
        latitude: 37.765363
        longitude: -122.403098
      properties:
        latitude:
          description: The longitude of a geofence vertex
          example: 37.765363
          format: double
          type: number
        longitude:
          description: The longitude of a geofence vertex
          example: -122.403098
          format: double
          type: number
    AddressGeofence_polygon:
      description: Information about a polygon geofence. This field is only populated if the geofence is a polygon.
      example:
        vertices:
        - latitude: 37.765363
          longitude: -122.403098
        - latitude: 37.765363
          longitude: -122.403098
      properties:
        vertices:
          description: The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.
          items:
            $ref: '#/components/schemas/AddressGeofence_polygon_vertices'
          type: array
    Asset_cable:
      example:
        assetType: Reefer (Thermo King)
      properties:
        assetType:
          description: Asset type
          example: Reefer (Thermo King)
          type: string
    AssetReeferResponse_reeferStats_fuelPercentage:
      example:
        fuelPercentage: 99
        changedAtMs: 1453449599999
      properties:
        fuelPercentage:
          description: Fuel percentage of the reefer.
          example: 99
          format: int64
          type: integer
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
    AssetReeferResponse_reeferStats_powerStatus:
      example:
        changedAtMs: 1453449599999
        status: Active (Continuous)
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        status:
          description: Power status of the reefer.
          example: Active (Continuous)
          type: string
    AssetReeferResponse_reeferStats_engineHours:
      example:
        engineHours: 1200
        changedAtMs: 1453449599999
      properties:
        engineHours:
          description: Engine hours of the reefer.
          example: 1200
          format: int64
          type: integer
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
    AssetReeferResponse_reeferStats_setPoint:
      example:
        tempInMilliC: 31110
        changedAtMs: 1453449599999
      properties:
        tempInMilliC:
          description: Set point temperature in millidegree Celsius.
          example: 31110
          format: int64
          type: integer
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
    AssetReeferResponse_reeferStats_returnAirTemp:
      example:
        tempInMilliC: 31110
        changedAtMs: 1453449599999
      properties:
        tempInMilliC:
          description: Return air temperature in millidegree Celsius.
          example: 31110
          format: int64
          type: integer
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
    AssetReeferResponse_reeferStats_alarms:
      example:
        severity: 1
        operatorAction: Check and repair at end of trip
        description: Check Return Air Sensor
        alarmCode: 102
      properties:
        severity:
          description: 'Severity of the alarm: 1: OK to run, 2: Check as specified,
            3: Take immediate action'
          example: 1
          format: int64
          type: integer
        operatorAction:
          description: Recommended operator action
          example: Check and repair at end of trip
          type: string
        description:
          description: Description of the alarm
          example: Check Return Air Sensor
          type: string
        alarmCode:
          description: ID of the alarm
          example: 102
          format: int64
          type: integer
    AssetReeferResponse_reeferStats_alarms_1:
      example:
        alarms:
        - severity: 1
          operatorAction: Check and repair at end of trip
          description: Check Return Air Sensor
          alarmCode: 102
        - severity: 1
          operatorAction: Check and repair at end of trip
          description: Check Return Air Sensor
          alarmCode: 102
        changedAtMs: 1453449599999
      properties:
        alarms:
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_alarms'
          type: array
        changedAtMs:
          description: Timestamp when the alarms were reported, in Unix milliseconds since epoch
          example: 1453449599999
          format: int64
          type: integer
    AssetReeferResponse_reeferStats:
      example:
        fuelPercentage:
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        powerStatus:
        - changedAtMs: 1453449599999
          status: Active (Continuous)
        - changedAtMs: 1453449599999
          status: Active (Continuous)
        engineHours:
        - engineHours: 1200
          changedAtMs: 1453449599999
        - engineHours: 1200
          changedAtMs: 1453449599999
        setPoint:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        returnAirTemp:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        alarms:
        - alarms:
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          changedAtMs: 1453449599999
        - alarms:
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          changedAtMs: 1453449599999
      properties:
        fuelPercentage:
          description: Fuel percentage of the reefer
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_fuelPercentage'
          type: array
        powerStatus:
          description: Power status of the reefer
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_powerStatus'
          type: array
        engineHours:
          description: Engine hours of the reefer
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_engineHours'
          type: array
        setPoint:
          description: Set point temperature of the reefer
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_setPoint'
          type: array
        returnAirTemp:
          description: Return air temperature of the reefer
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_returnAirTemp'
          type: array
        alarms:
          description: Reefer alarms
          items:
            $ref: '#/components/schemas/AssetReeferResponse_reeferStats_alarms_1'
          type: array
    CargoResponse_sensors:
      example:
        cargoEmpty: true
        name: Trailer Cargo Sensor
        id: 122
      properties:
        cargoEmpty:
          description: Flag indicating whether the current cargo is empty or loaded.
          example: true
          type: boolean
        name:
          description: Name of the sensor.
          example: Trailer Cargo Sensor
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
    DataInputHistoryResponse_points:
      example:
        value: 12.332
        timeMs: 1453449599999
      properties:
        value:
          example: 12.332
          format: double
          type: number
        timeMs:
          example: 1453449599999
          format: int64
          type: integer
    DocumentFieldCreate_photoValue:
      properties:
        url:
          description: Photo URL for a JPG image
          type: string
    DocumentFieldType_numberValueTypeMetadata:
      description: 'Additional metadata information for a number field type. Only
        defined when a field type has valueType: ValueType_Number.'
      properties:
        numDecimalPlaces:
          description: Number of decimal places that values for this field type can have.
          example: 2
          format: int64
          type: integer
    DoorResponse_sensors:
      example:
        doorClosed: true
        name: Trailer Door Sensor
        id: 122
      properties:
        doorClosed:
          description: Flag indicating whether the current door is closed or open.
          example: true
          type: boolean
        name:
          description: Name of the sensor.
          example: Trailer Door Sensor
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
    DriverDailyLogResponse_days:
      example:
        certifiedAtMs: 0
        endMs: 1473836400000
        startMs: 1473750000000
        trailerIds:
        - 10293
        - 192933
        activeHours: 5.4
        distanceMiles: 123.24
        activeMs: 691200
        certified: true
        vehicleIds:
        - 192319
        - 12958
      properties:
        certifiedAtMs:
          description: Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.
          format: int64
          type: integer
        endMs:
          description: End of the HOS day, specified in milliseconds UNIX time.
          example: 1473836400000
          type: integer
        startMs:
          description: End of the HOS day, specified in milliseconds UNIX time.
          example: 1473750000000
          type: integer
        trailerIds:
          description: List of trailer ID's associated with the driver for the day.
          example:
          - 10293
          - 192933
          properties: {}
          type: object
        activeHours:
          description: Hours spent on duty or driving, rounded to two decimal places.
          example: 5.4
          format: double
          type: number
        distanceMiles:
          description: Distance driven in miles, rounded to two decimal places.
          example: 123.24
          format: double
          type: number
        activeMs:
          description: Milliseconds spent on duty or driving.
          example: 691200
          format: int64
          type: integer
        certified:
          description: Whether this HOS day chart was certified by the driver.
          type: boolean
        vehicleIds:
          description: List of vehicle ID's associated with the driver for the day.
          example:
          - 192319
          - 12958
          properties: {}
          type: object
    DriversSummaryResponse_Summaries:
      example:
        driverId: 444
        distanceMiles: 123.24
        driveMs: 21600000
        activeMs: 43200000
        driverUsername: fjacobs
        groupId: 111
        driverName: Fred Jacobs
        onDutyMs: 21600000
      properties:
        driverId:
          description: ID of the driver.
          example: 444
          format: int64
          type: integer
        distanceMiles:
          description: Distance driven in miles, rounded to two decimal places.
          example: 123.24
          format: double
          type: number
        driveMs:
          description: Duration in milliseconds that driver was driving during the requested time range
          example: 21600000
          format: int64
          type: integer
        activeMs:
          description: Duration in milliseconds that driver was on duty or driving during the requested time range
          example: 43200000
          format: int64
          type: integer
        driverUsername:
          description: Username of the driver.
          example: fjacobs
          type: string
        groupId:
          description: Group of the driver.
          example: 111
          format: int64
          type: integer
        driverName:
          description: Name of the driver.
          example: Fred Jacobs
          type: string
        onDutyMs:
          description: Duration in milliseconds that driver was on duty during the requested time range
          example: 21600000
          format: int64
          type: integer
    DvirBase_authorSignature:
      description: The authors signature for the DVIR.
      example:
        mechanicUserId: 14849
        driverId: 2581
        name: John Smith
        signedAt: 12535500000
        type: driver
        email: j.smith@yahoo.com
        username: jsmith
      properties:
        mechanicUserId:
          description: ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
          example: 14849
          format: int64
          type: integer
        driverId:
          description: ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
          example: 2581
          format: int64
          type: integer
        name:
          description: The name of the driver or mechanic who signed the DVIR.
          example: John Smith
          type: string
        signedAt:
          description: The time in millis when the DVIR was signed
          example: 12535500000
          format: int64
          type: integer
        type:
          description: Type corresponds to whether the signature corresponds to driver|mechanic.
          example: driver
          type: string
        email:
          description: Email of the  driver|mechanic who signed the DVIR.
          example: j.smith@yahoo.com
          type: string
        username:
          description: Username of the  driver|mechanic who signed the DVIR.
          example: jsmith
          type: string
    DvirBase_mechanicOrAgentSignature:
      description: The mechanic's or agent's signature for the DVIR.
      example:
        mechanicUserId: 14849
        driverId: 2581
        name: John Smith
        signedAt: 12535500000
        type: driver
        email: j.smith@yahoo.com
        username: jsmith
      properties:
        mechanicUserId:
          description: ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
          example: 14849
          format: int64
          type: integer
        driverId:
          description: ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
          example: 2581
          format: int64
          type: integer
        name:
          description: The name of the agent or mechanic who signed the DVIR.
          example: John Smith
          type: string
        signedAt:
          description: The time in millis when the DVIR was signed
          example: 12535500000
          format: int64
          type: integer
        type:
          description: Type corresponds to whether the signature corresponds to driver|mechanic.
          example: driver
          type: string
        email:
          description: Email of the  agent|mechanic who signed the DVIR.
          example: j.smith@yahoo.com
          type: string
        username:
          description: Username of the  agent|mechanic who signed the DVIR.
          example: jsmith
          type: string
    DvirBase_nextDriverSignature:
      description: The next driver signature for the DVIR.
      example:
        driverId: 2581
        name: John Smith
        signedAt: 12535500000
        type: driver
        email: j.smith@yahoo.com
        username: jsmith
      properties:
        driverId:
          description: ID of the driver who signed the DVIR
          example: 2581
          format: int64
          type: integer
        name:
          description: The name of the driver who signed the next DVIR on this vehicle.
          example: John Smith
          type: string
        signedAt:
          description: The time in millis when the next driver signed the DVIR on this vehicle.
          example: 12535500000
          format: int64
          type: integer
        type:
          description: Type corresponds to driver.
          example: driver
          type: string
        email:
          description: Email of the  driver who signed the next DVIR on this vehicle.
          example: j.smith@yahoo.com
          type: string
        username:
          description: Username of the  driver who signed the next DVIR on this vehicle.
          example: jsmith
          type: string
    DvirBase_trailerDefects:
      example:
        comment: Air Compressor not working
        defectType: Air Compressor
      properties:
        comment:
          description: The comment describing the type of DVIR defect
          example: Air Compressor not working
          type: string
        defectType:
          description: The type of DVIR defect
          example: Air Compressor
          type: string
    DvirBase_vehicle:
      description: The vehicle on which DVIR was done.
      example:
        name: Storer's vehicle 19
        id: 19
      properties:
        name:
          description: The vehicle on which DVIR was done.
          example: Storer's vehicle 19
          type: string
        id:
          description: The vehicle id on which DVIR was done.
          example: 19
          format: int64
          type: integer
    FleetVehicleResponse_vehicleInfo:
      example:
        year: 1997
        model: Odyssey
        vin: 1FUJA6BD31LJ09646
        make: Honda
      properties:
        year:
          description: Year of the vehicle.
          example: 1997
          format: int64
          type: integer
        model:
          description: Model of the Vehicle.
          example: Odyssey
          type: string
        vin:
          description: Vehicle Identification Number.
          example: 1FUJA6BD31LJ09646
          type: string
        make:
          description: Make of the vehicle.
          example: Honda
          type: string
    HosAuthenticationLogsResponse_authenticationLogs:
      example:
        actionType: signin
        address: 123 Main St., Ahwatukee, Arizona 85044
        city: Ahwatukee
        happenedAtMs: 1462881998034
        addressName: Garage Number 3
        state: Arizona
      properties:
        actionType:
          description: The log type - one of 'signin' or 'signout'
          example: signin
          type: string
        address:
          description: Address at which the log was recorded, if applicable.
          example: 123 Main St., Ahwatukee, Arizona 85044
          type: string
        city:
          description: City in which the log was recorded, if applicable.
          example: Ahwatukee
          type: string
        happenedAtMs:
          description: The time at which the event was recorded in UNIX milliseconds.
          example: 1462881998034
          format: int64
          type: integer
        addressName:
          description: Address name from the group address book at which the log was recorded, if applicable.
          example: Garage Number 3
          type: string
        state:
          description: State in which the log was recorded, if applicable.
          example: Arizona
          type: string
    HosLogsResponse_logs:
      example:
        locLng: -98.502888123
        logStartMs: 1462881998034
        driverId: 444
        statusType: OFF_DUTY
        locCity: Ahwatukee
        groupId: 101
        locName: McLean Site A
        locLat: 23.413702345
        remark: Lunch Break
        locState: Arizona
        vehicleId: 112
        codriverIds:
        - 445
        - 445
      properties:
        locLng:
          description: Longitude at which the log was recorded.
          example: -98.502888123
          format: double
          type: number
        logStartMs:
          description: The time at which the log/HOS status started in UNIX milliseconds.
          example: 1462881998034
          format: int64
          type: integer
        driverId:
          description: ID of the driver.
          example: 444
          format: int64
          type: integer
        statusType:
          description: The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
          example: OFF_DUTY
          type: string
        locCity:
          description: City in which the log was recorded.
          example: Ahwatukee
          type: string
        groupId:
          description: ID of the group.
          example: 101
          format: int64
          type: integer
        locName:
          description: Name of location at which the log was recorded.
          example: McLean Site A
          type: string
        locLat:
          description: Latitude at which the log was recorded.
          example: 23.413702345
          format: double
          type: number
        remark:
          description: Remark associated with the log entry.
          example: Lunch Break
          type: string
        locState:
          description: State in which the log was recorded.
          example: Arizona
          type: string
        vehicleId:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        codriverIds:
          items:
            description: Ids of codrivers during any of the logged trips
            example: 445
            format: int64
            type: integer
          type: array
    HosLogsSummaryResponse_drivers:
      example:
        timeUntilBreak: 28800000
        vehicleName: Vehicle 1
        drivingInViolationToday: 39600000
        driverId: 444
        cycleRemaining: 252000000
        driverName: Fred Jacobs
        dutyStatus: OFF_DUTY
        cycleTomorrow: 252000000
        shiftDriveRemaining: 39600000
        timeInCurrentStatus: 5000
        drivingInViolationCycle: 50400000
        shiftRemaining: 50400000
      properties:
        timeUntilBreak:
          description: The amount of time (in ms) remaining until the driver cannot drive without a rest break.
          example: 28800000
          format: int64
          type: integer
        vehicleName:
          description: Name of the vehicle.
          example: Vehicle 1
          type: string
        drivingInViolationToday:
          description: The amount of driving time in violation today (in ms).
          example: 39600000
          format: int64
          type: integer
        driverId:
          description: ID of the driver.
          example: 444
          format: int64
          type: integer
        cycleRemaining:
          description: The amount of remaining cycle time (in ms).
          example: 252000000
          format: int64
          type: integer
        driverName:
          description: Name of the driver.
          example: Fred Jacobs
          type: string
        dutyStatus:
          description: The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
          example: OFF_DUTY
          type: string
        cycleTomorrow:
          description: The amount of cycle time (in ms) available tomorrow.
          example: 252000000
          format: int64
          type: integer
        shiftDriveRemaining:
          description: The amount of remaining shift drive time (in ms).
          example: 39600000
          format: int64
          type: integer
        timeInCurrentStatus:
          description: The amount of time (in ms) that the driver has been in the current `dutyStatus`.
          example: 5000
          format: int64
          type: integer
        drivingInViolationCycle:
          description: The amount of driving time in violation in this cycle (in ms).
          example: 50400000
          format: int64
          type: integer
        shiftRemaining:
          description: The amount of remaining shift time (in ms).
          example: 50400000
          format: int64
          type: integer
    HumidityResponse_sensors:
      example:
        name: Freezer Humidity Sensor
        humidity: 53
        id: 122
      properties:
        name:
          description: Name of the sensor.
          example: Freezer Humidity Sensor
          type: string
        humidity:
          description: Currently reported relative humidity in percent, from 0-100.
          example: 53
          type: integer
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
    MachineHistoryResponse_vibrations:
      example:
        X: 0.01
        Y: 1.23
        Z: 2.55
        time: 1453449599999
      properties:
        X:
          example: 0.01
          format: double
          type: number
        Y:
          example: 1.23
          format: double
          type: number
        Z:
          example: 2.55
          format: double
          type: number
        time:
          example: 1453449599999
          format: int64
          type: integer
    MachineHistoryResponse_machines:
      example:
        name: 1/3 HP Motor
        id: 1
        vibrations:
        - X: 0.01
          Y: 1.23
          Z: 2.55
          time: 1453449599999
        - X: 0.01
          Y: 1.23
          Z: 2.55
          time: 1453449599999
      properties:
        name:
          description: Machine name
          example: 1/3 HP Motor
          type: string
        id:
          description: Machine ID
          example: 1
          type: integer
        vibrations:
          description: List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s
          items:
            $ref: '#/components/schemas/MachineHistoryResponse_vibrations'
          type: array
    SensorHistoryResponse_results:
      example:
        series:
        - 1
        - 1
        timeMs: 1453449599999
      properties:
        series:
          description: List of datapoints, one for each requested (sensor, field) pair.
          items:
            example: 1
            format: int64
            type: integer
          type: array
        timeMs:
          description: Timestamp in UNIX milliseconds.
          example: 1453449599999
          type: integer
    TagModify_add:
      description: Specify devices, etc. that should be added to the tag.
      example:
        assets:
        - id: 789
        - id: 789
        sensors:
        - id: 345
        - id: 345
        vehicles:
        - id: 123
        - id: 123
        machines:
        - id: 567
        - id: 567
        drivers:
        - id: 456
        - id: 456
      properties:
        assets:
          description: The assets to be added to this tag.
          items:
            $ref: '#/components/schemas/TaggedAssetBase'
          type: array
        sensors:
          description: The sensors to be added to this tag.
          items:
            $ref: '#/components/schemas/TaggedSensorBase'
          type: array
        vehicles:
          description: The vehicles to be added to this tag.
          items:
            $ref: '#/components/schemas/TaggedVehicleBase'
          type: array
        machines:
          description: The machines to be added to this tag.
          items:
            $ref: '#/components/schemas/TaggedMachineBase'
          type: array
        drivers:
          description: The drivers to be added to this tag.
          items:
            $ref: '#/components/schemas/TaggedDriverBase'
          type: array
    TagModify_delete:
      description: Specify devices, etc. that should be removed from the tag.
      example:
        assets:
        - id: 789
        - id: 789
        sensors:
        - id: 345
        - id: 345
        vehicles:
        - id: 123
        - id: 123
        machines:
        - id: 567
        - id: 567
        drivers:
        - id: 456
        - id: 456
      properties:
        assets:
          description: The assets to be removed from this tag.
          items:
            $ref: '#/components/schemas/TaggedAssetBase'
          type: array
        sensors:
          description: The sensors to be removed from this tag.
          items:
            $ref: '#/components/schemas/TaggedSensorBase'
          type: array
        vehicles:
          description: The vehicles to be removed from this tag.
          items:
            $ref: '#/components/schemas/TaggedVehicleBase'
          type: array
        machines:
          description: The machines to be removed from this tag.
          items:
            $ref: '#/components/schemas/TaggedMachineBase'
          type: array
        drivers:
          description: The drivers to be removed from this tag.
          items:
            $ref: '#/components/schemas/TaggedDriverBase'
          type: array
    TemperatureResponse_sensors:
      example:
        probeTemperature: -20145
        name: Freezer Temp Sensor
        id: 122
        ambientTemperature: 11057
      properties:
        probeTemperature:
          description: Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.
          example: -20145
          type: integer
        name:
          description: Name of the sensor.
          example: Freezer Temp Sensor
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
        ambientTemperature:
          description: Currently reported ambient temperature in millidegrees celsius.
          example: 11057
          type: integer
    TripResponse_startCoordinates:
      description: Start (latitude, longitude) in decimal degrees.
      example:
        latitude: 29.443702345
        longitude: -98.502888123
      properties:
        latitude:
          example: 29.443702345
          format: double
          type: number
        longitude:
          example: -98.502888123
          format: double
          type: number
    TripResponse_endCoordinates:
      description: End (latitude, longitude) in decimal degrees.
      example:
        latitude: 23.413702345
        longitude: -91.502888123
      properties:
        latitude:
          example: 23.413702345
          format: double
          type: number
        longitude:
          example: -91.502888123
          format: double
          type: number
    TripResponse_trips:
      example:
        endOdometer: 210430500
        distanceMeters: 2500
        endMs: 1462881998034
        startMs: 1462878398034
        fuelConsumedMl: 75700
        startAddress: Ramen Tatsunoya
        startCoordinates:
          latitude: 29.443702345
          longitude: -98.502888123
        endCoordinates:
          latitude: 23.413702345
          longitude: -91.502888123
        startOdometer: 210430450
        driverId: 719
        startLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
        tollMeters: 32000
        endAddress: Winchell's Donuts House
        endLocation: 571 S Lake Ave, Pasadena, CA 91101
      properties:
        endOdometer:
          description: Odometer reading at the end of the trip.
          example: 210430500
          type: integer
        distanceMeters:
          description: Length of the trip in meters.
          example: 2500
          type: integer
        endMs:
          description: End of the trip in UNIX milliseconds.
          example: 1462881998034
          type: integer
        startMs:
          description: Beginning of the trip in UNIX milliseconds.
          example: 1462878398034
          type: integer
        fuelConsumedMl:
          description: Amount in milliliters of fuel consumed on this trip.
          example: 75700
          type: integer
        startAddress:
          description: Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
          example: Ramen Tatsunoya
          type: string
        startCoordinates:
          $ref: '#/components/schemas/TripResponse_startCoordinates'
        endCoordinates:
          $ref: '#/components/schemas/TripResponse_endCoordinates'
        startOdometer:
          description: Odometer reading at the beginning of the trip.
          example: 210430450
          type: integer
        driverId:
          description: ID of the driver.
          example: 719
          type: integer
        startLocation:
          description: Geocoded street address of start (latitude, longitude) coordinates.
          example: 16 N Fair Oaks Ave, Pasadena, CA 91103
          type: string
        tollMeters:
          description: Length in meters trip spent on toll roads.
          example: 32000
          type: integer
        endAddress:
          description: Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
          example: Winchell's Donuts House
          type: string
        endLocation:
          description: Geocoded street address of start (latitude, longitude) coordinates.
          example: 571 S Lake Ave, Pasadena, CA 91101
          type: string
    UserTagRole_tag:
      properties:
        parentTagId:
          description: The ID of this tag.
          example: 12345
          format: int64
          type: integer
        name:
          description: Name of this tag.
          example: North Carolina Distribution
          type: string
        id:
          description: The ID of this tag.
          example: 12345
          format: int64
          type: integer
      required:
      - id
      - name
    VehicleHarshEventResponse_location:
      example:
        address: 350 Rhode Island St, San Francisco, CA
        latitude: "33.07614328"
        longitude: -96.14907287
      properties:
        address:
          description: Address of location where the harsh event occurred
          example: 350 Rhode Island St, San Francisco, CA
          type: string
        latitude:
          description: Latitude of location where the harsh event occurred
          example: "33.07614328"
          type: string
        longitude:
          description: Longitude of location where the harsh event occurred
          example: -96.14907287
          type: string
    VehicleMaintenance_j1939_checkEngineLight:
      description: J1939 check engine lights.
      example:
        protectIsOn: true
        stopIsOn: true
        warningIsOn: true
        emissionsIsOn: true
      properties:
        protectIsOn:
          type: boolean
        stopIsOn:
          type: boolean
        warningIsOn:
          type: boolean
        emissionsIsOn:
          type: boolean
    VehicleMaintenance_j1939_diagnosticTroubleCodes:
      example:
        spnDescription: spnDescription
        fmiText: fmiText
        spnId: 0
        occurrenceCount: 6
        txId: 1
        fmiId: 5
      properties:
        spnDescription:
          type: string
        fmiText:
          type: string
        spnId:
          type: integer
        occurrenceCount:
          type: integer
        txId:
          type: integer
        fmiId:
          type: integer
    VehicleMaintenance_j1939:
      description: J1939 based data. Null if no data is available.
      example:
        checkEngineLight:
          protectIsOn: true
          stopIsOn: true
          warningIsOn: true
          emissionsIsOn: true
        diagnosticTroubleCodes:
        - spnDescription: spnDescription
          fmiText: fmiText
          spnId: 0
          occurrenceCount: 6
          txId: 1
          fmiId: 5
        - spnDescription: spnDescription
          fmiText: fmiText
          spnId: 0
          occurrenceCount: 6
          txId: 1
          fmiId: 5
      properties:
        checkEngineLight:
          $ref: '#/components/schemas/VehicleMaintenance_j1939_checkEngineLight'
        diagnosticTroubleCodes:
          description: J1939 DTCs.
          items:
            $ref: '#/components/schemas/VehicleMaintenance_j1939_diagnosticTroubleCodes'
          type: array
    VehicleMaintenance_passenger_checkEngineLight:
      description: Passenger vehicle check engine light.
      example:
        isOn: true
      properties:
        isOn:
          type: boolean
    VehicleMaintenance_passenger_diagnosticTroubleCodes:
      example:
        dtcShortCode: dtcShortCode
        dtcId: 5
        dtcDescription: dtcDescription
      properties:
        dtcShortCode:
          type: string
        dtcId:
          type: integer
        dtcDescription:
          type: string
    VehicleMaintenance_passenger:
      description: Passenger vehicle data. Null if no data is available.
      example:
        checkEngineLight:
          isOn: true
        diagnosticTroubleCodes:
        - dtcShortCode: dtcShortCode
          dtcId: 5
          dtcDescription: dtcDescription
        - dtcShortCode: dtcShortCode
          dtcId: 5
          dtcDescription: dtcDescription
      properties:
        checkEngineLight:
          $ref: '#/components/schemas/VehicleMaintenance_passenger_checkEngineLight'
        diagnosticTroubleCodes:
          description: Passenger vehicle DTCs.
          items:
            $ref: '#/components/schemas/VehicleMaintenance_passenger_diagnosticTroubleCodes'
          type: array
