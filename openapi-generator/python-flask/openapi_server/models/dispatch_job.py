# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dispatch_job_create import DispatchJobCreate
from openapi_server.models.job_status import JobStatus
from openapi_server import util

from openapi_server.models.dispatch_job_create import DispatchJobCreate  # noqa: E501
from openapi_server.models.job_status import JobStatus  # noqa: E501

class DispatchJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_address=None, destination_address_id=None, destination_lat=None, destination_lng=None, destination_name=None, notes=None, scheduled_arrival_time_ms=None, scheduled_departure_time_ms=None, arrived_at_ms=None, completed_at_ms=None, dispatch_route_id=None, driver_id=None, en_route_at_ms=None, estimated_arrival_ms=None, fleet_viewer_url=None, group_id=None, id=None, job_state=None, skipped_at_ms=None, vehicle_id=None):  # noqa: E501
        """DispatchJob - a model defined in OpenAPI

        :param destination_address: The destination_address of this DispatchJob.  # noqa: E501
        :type destination_address: str
        :param destination_address_id: The destination_address_id of this DispatchJob.  # noqa: E501
        :type destination_address_id: int
        :param destination_lat: The destination_lat of this DispatchJob.  # noqa: E501
        :type destination_lat: float
        :param destination_lng: The destination_lng of this DispatchJob.  # noqa: E501
        :type destination_lng: float
        :param destination_name: The destination_name of this DispatchJob.  # noqa: E501
        :type destination_name: str
        :param notes: The notes of this DispatchJob.  # noqa: E501
        :type notes: str
        :param scheduled_arrival_time_ms: The scheduled_arrival_time_ms of this DispatchJob.  # noqa: E501
        :type scheduled_arrival_time_ms: int
        :param scheduled_departure_time_ms: The scheduled_departure_time_ms of this DispatchJob.  # noqa: E501
        :type scheduled_departure_time_ms: int
        :param arrived_at_ms: The arrived_at_ms of this DispatchJob.  # noqa: E501
        :type arrived_at_ms: int
        :param completed_at_ms: The completed_at_ms of this DispatchJob.  # noqa: E501
        :type completed_at_ms: int
        :param dispatch_route_id: The dispatch_route_id of this DispatchJob.  # noqa: E501
        :type dispatch_route_id: int
        :param driver_id: The driver_id of this DispatchJob.  # noqa: E501
        :type driver_id: int
        :param en_route_at_ms: The en_route_at_ms of this DispatchJob.  # noqa: E501
        :type en_route_at_ms: int
        :param estimated_arrival_ms: The estimated_arrival_ms of this DispatchJob.  # noqa: E501
        :type estimated_arrival_ms: int
        :param fleet_viewer_url: The fleet_viewer_url of this DispatchJob.  # noqa: E501
        :type fleet_viewer_url: str
        :param group_id: The group_id of this DispatchJob.  # noqa: E501
        :type group_id: int
        :param id: The id of this DispatchJob.  # noqa: E501
        :type id: int
        :param job_state: The job_state of this DispatchJob.  # noqa: E501
        :type job_state: JobStatus
        :param skipped_at_ms: The skipped_at_ms of this DispatchJob.  # noqa: E501
        :type skipped_at_ms: int
        :param vehicle_id: The vehicle_id of this DispatchJob.  # noqa: E501
        :type vehicle_id: int
        """
        self.openapi_types = {
            'destination_address': str,
            'destination_address_id': int,
            'destination_lat': float,
            'destination_lng': float,
            'destination_name': str,
            'notes': str,
            'scheduled_arrival_time_ms': int,
            'scheduled_departure_time_ms': int,
            'arrived_at_ms': int,
            'completed_at_ms': int,
            'dispatch_route_id': int,
            'driver_id': int,
            'en_route_at_ms': int,
            'estimated_arrival_ms': int,
            'fleet_viewer_url': str,
            'group_id': int,
            'id': int,
            'job_state': JobStatus,
            'skipped_at_ms': int,
            'vehicle_id': int
        }

        self.attribute_map = {
            'destination_address': 'destination_address',
            'destination_address_id': 'destination_address_id',
            'destination_lat': 'destination_lat',
            'destination_lng': 'destination_lng',
            'destination_name': 'destination_name',
            'notes': 'notes',
            'scheduled_arrival_time_ms': 'scheduled_arrival_time_ms',
            'scheduled_departure_time_ms': 'scheduled_departure_time_ms',
            'arrived_at_ms': 'arrived_at_ms',
            'completed_at_ms': 'completed_at_ms',
            'dispatch_route_id': 'dispatch_route_id',
            'driver_id': 'driver_id',
            'en_route_at_ms': 'en_route_at_ms',
            'estimated_arrival_ms': 'estimated_arrival_ms',
            'fleet_viewer_url': 'fleet_viewer_url',
            'group_id': 'group_id',
            'id': 'id',
            'job_state': 'job_state',
            'skipped_at_ms': 'skipped_at_ms',
            'vehicle_id': 'vehicle_id'
        }

        self._destination_address = destination_address
        self._destination_address_id = destination_address_id
        self._destination_lat = destination_lat
        self._destination_lng = destination_lng
        self._destination_name = destination_name
        self._notes = notes
        self._scheduled_arrival_time_ms = scheduled_arrival_time_ms
        self._scheduled_departure_time_ms = scheduled_departure_time_ms
        self._arrived_at_ms = arrived_at_ms
        self._completed_at_ms = completed_at_ms
        self._dispatch_route_id = dispatch_route_id
        self._driver_id = driver_id
        self._en_route_at_ms = en_route_at_ms
        self._estimated_arrival_ms = estimated_arrival_ms
        self._fleet_viewer_url = fleet_viewer_url
        self._group_id = group_id
        self._id = id
        self._job_state = job_state
        self._skipped_at_ms = skipped_at_ms
        self._vehicle_id = vehicle_id

    @classmethod
    def from_dict(cls, dikt) -> 'DispatchJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DispatchJob of this DispatchJob.  # noqa: E501
        :rtype: DispatchJob
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_address(self):
        """Gets the destination_address of this DispatchJob.

        The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.  # noqa: E501

        :return: The destination_address of this DispatchJob.
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this DispatchJob.

        The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.  # noqa: E501

        :param destination_address: The destination_address of this DispatchJob.
        :type destination_address: str
        """

        self._destination_address = destination_address

    @property
    def destination_address_id(self):
        """Gets the destination_address_id of this DispatchJob.

        ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.  # noqa: E501

        :return: The destination_address_id of this DispatchJob.
        :rtype: int
        """
        return self._destination_address_id

    @destination_address_id.setter
    def destination_address_id(self, destination_address_id):
        """Sets the destination_address_id of this DispatchJob.

        ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.  # noqa: E501

        :param destination_address_id: The destination_address_id of this DispatchJob.
        :type destination_address_id: int
        """

        self._destination_address_id = destination_address_id

    @property
    def destination_lat(self):
        """Gets the destination_lat of this DispatchJob.

        Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :return: The destination_lat of this DispatchJob.
        :rtype: float
        """
        return self._destination_lat

    @destination_lat.setter
    def destination_lat(self, destination_lat):
        """Sets the destination_lat of this DispatchJob.

        Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :param destination_lat: The destination_lat of this DispatchJob.
        :type destination_lat: float
        """

        self._destination_lat = destination_lat

    @property
    def destination_lng(self):
        """Gets the destination_lng of this DispatchJob.

        Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :return: The destination_lng of this DispatchJob.
        :rtype: float
        """
        return self._destination_lng

    @destination_lng.setter
    def destination_lng(self, destination_lng):
        """Sets the destination_lng of this DispatchJob.

        Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :param destination_lng: The destination_lng of this DispatchJob.
        :type destination_lng: float
        """

        self._destination_lng = destination_lng

    @property
    def destination_name(self):
        """Gets the destination_name of this DispatchJob.

        The name of the job destination. If provided, it will take precedence over the name of the address book entry.  # noqa: E501

        :return: The destination_name of this DispatchJob.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this DispatchJob.

        The name of the job destination. If provided, it will take precedence over the name of the address book entry.  # noqa: E501

        :param destination_name: The destination_name of this DispatchJob.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def notes(self):
        """Gets the notes of this DispatchJob.

        Notes regarding the details of this job.  # noqa: E501

        :return: The notes of this DispatchJob.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DispatchJob.

        Notes regarding the details of this job.  # noqa: E501

        :param notes: The notes of this DispatchJob.
        :type notes: str
        """

        self._notes = notes

    @property
    def scheduled_arrival_time_ms(self):
        """Gets the scheduled_arrival_time_ms of this DispatchJob.

        The time at which the assigned driver is scheduled to arrive at the job destination.  # noqa: E501

        :return: The scheduled_arrival_time_ms of this DispatchJob.
        :rtype: int
        """
        return self._scheduled_arrival_time_ms

    @scheduled_arrival_time_ms.setter
    def scheduled_arrival_time_ms(self, scheduled_arrival_time_ms):
        """Sets the scheduled_arrival_time_ms of this DispatchJob.

        The time at which the assigned driver is scheduled to arrive at the job destination.  # noqa: E501

        :param scheduled_arrival_time_ms: The scheduled_arrival_time_ms of this DispatchJob.
        :type scheduled_arrival_time_ms: int
        """
        if scheduled_arrival_time_ms is None:
            raise ValueError("Invalid value for `scheduled_arrival_time_ms`, must not be `None`")  # noqa: E501

        self._scheduled_arrival_time_ms = scheduled_arrival_time_ms

    @property
    def scheduled_departure_time_ms(self):
        """Gets the scheduled_departure_time_ms of this DispatchJob.

        The time at which the assigned driver is scheduled to depart from the job destination.  # noqa: E501

        :return: The scheduled_departure_time_ms of this DispatchJob.
        :rtype: int
        """
        return self._scheduled_departure_time_ms

    @scheduled_departure_time_ms.setter
    def scheduled_departure_time_ms(self, scheduled_departure_time_ms):
        """Sets the scheduled_departure_time_ms of this DispatchJob.

        The time at which the assigned driver is scheduled to depart from the job destination.  # noqa: E501

        :param scheduled_departure_time_ms: The scheduled_departure_time_ms of this DispatchJob.
        :type scheduled_departure_time_ms: int
        """

        self._scheduled_departure_time_ms = scheduled_departure_time_ms

    @property
    def arrived_at_ms(self):
        """Gets the arrived_at_ms of this DispatchJob.

        The time at which the driver arrived at the job destination.  # noqa: E501

        :return: The arrived_at_ms of this DispatchJob.
        :rtype: int
        """
        return self._arrived_at_ms

    @arrived_at_ms.setter
    def arrived_at_ms(self, arrived_at_ms):
        """Sets the arrived_at_ms of this DispatchJob.

        The time at which the driver arrived at the job destination.  # noqa: E501

        :param arrived_at_ms: The arrived_at_ms of this DispatchJob.
        :type arrived_at_ms: int
        """

        self._arrived_at_ms = arrived_at_ms

    @property
    def completed_at_ms(self):
        """Gets the completed_at_ms of this DispatchJob.

        The time at which the job was marked complete (e.g. started driving to the next destination).  # noqa: E501

        :return: The completed_at_ms of this DispatchJob.
        :rtype: int
        """
        return self._completed_at_ms

    @completed_at_ms.setter
    def completed_at_ms(self, completed_at_ms):
        """Sets the completed_at_ms of this DispatchJob.

        The time at which the job was marked complete (e.g. started driving to the next destination).  # noqa: E501

        :param completed_at_ms: The completed_at_ms of this DispatchJob.
        :type completed_at_ms: int
        """

        self._completed_at_ms = completed_at_ms

    @property
    def dispatch_route_id(self):
        """Gets the dispatch_route_id of this DispatchJob.

        ID of the route that this job belongs to.  # noqa: E501

        :return: The dispatch_route_id of this DispatchJob.
        :rtype: int
        """
        return self._dispatch_route_id

    @dispatch_route_id.setter
    def dispatch_route_id(self, dispatch_route_id):
        """Sets the dispatch_route_id of this DispatchJob.

        ID of the route that this job belongs to.  # noqa: E501

        :param dispatch_route_id: The dispatch_route_id of this DispatchJob.
        :type dispatch_route_id: int
        """
        if dispatch_route_id is None:
            raise ValueError("Invalid value for `dispatch_route_id`, must not be `None`")  # noqa: E501

        self._dispatch_route_id = dispatch_route_id

    @property
    def driver_id(self):
        """Gets the driver_id of this DispatchJob.

        ID of the driver assigned to the dispatch job.  # noqa: E501

        :return: The driver_id of this DispatchJob.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this DispatchJob.

        ID of the driver assigned to the dispatch job.  # noqa: E501

        :param driver_id: The driver_id of this DispatchJob.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def en_route_at_ms(self):
        """Gets the en_route_at_ms of this DispatchJob.

        The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).  # noqa: E501

        :return: The en_route_at_ms of this DispatchJob.
        :rtype: int
        """
        return self._en_route_at_ms

    @en_route_at_ms.setter
    def en_route_at_ms(self, en_route_at_ms):
        """Sets the en_route_at_ms of this DispatchJob.

        The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).  # noqa: E501

        :param en_route_at_ms: The en_route_at_ms of this DispatchJob.
        :type en_route_at_ms: int
        """

        self._en_route_at_ms = en_route_at_ms

    @property
    def estimated_arrival_ms(self):
        """Gets the estimated_arrival_ms of this DispatchJob.

        The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.  # noqa: E501

        :return: The estimated_arrival_ms of this DispatchJob.
        :rtype: int
        """
        return self._estimated_arrival_ms

    @estimated_arrival_ms.setter
    def estimated_arrival_ms(self, estimated_arrival_ms):
        """Sets the estimated_arrival_ms of this DispatchJob.

        The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.  # noqa: E501

        :param estimated_arrival_ms: The estimated_arrival_ms of this DispatchJob.
        :type estimated_arrival_ms: int
        """

        self._estimated_arrival_ms = estimated_arrival_ms

    @property
    def fleet_viewer_url(self):
        """Gets the fleet_viewer_url of this DispatchJob.

        Fleet viewer url of the dispatch job.  # noqa: E501

        :return: The fleet_viewer_url of this DispatchJob.
        :rtype: str
        """
        return self._fleet_viewer_url

    @fleet_viewer_url.setter
    def fleet_viewer_url(self, fleet_viewer_url):
        """Sets the fleet_viewer_url of this DispatchJob.

        Fleet viewer url of the dispatch job.  # noqa: E501

        :param fleet_viewer_url: The fleet_viewer_url of this DispatchJob.
        :type fleet_viewer_url: str
        """

        self._fleet_viewer_url = fleet_viewer_url

    @property
    def group_id(self):
        """Gets the group_id of this DispatchJob.


        :return: The group_id of this DispatchJob.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DispatchJob.


        :param group_id: The group_id of this DispatchJob.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this DispatchJob.

        ID of the Samsara dispatch job.  # noqa: E501

        :return: The id of this DispatchJob.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DispatchJob.

        ID of the Samsara dispatch job.  # noqa: E501

        :param id: The id of this DispatchJob.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def job_state(self):
        """Gets the job_state of this DispatchJob.


        :return: The job_state of this DispatchJob.
        :rtype: JobStatus
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this DispatchJob.


        :param job_state: The job_state of this DispatchJob.
        :type job_state: JobStatus
        """
        if job_state is None:
            raise ValueError("Invalid value for `job_state`, must not be `None`")  # noqa: E501

        self._job_state = job_state

    @property
    def skipped_at_ms(self):
        """Gets the skipped_at_ms of this DispatchJob.

        The time at which the job was marked skipped.  # noqa: E501

        :return: The skipped_at_ms of this DispatchJob.
        :rtype: int
        """
        return self._skipped_at_ms

    @skipped_at_ms.setter
    def skipped_at_ms(self, skipped_at_ms):
        """Sets the skipped_at_ms of this DispatchJob.

        The time at which the job was marked skipped.  # noqa: E501

        :param skipped_at_ms: The skipped_at_ms of this DispatchJob.
        :type skipped_at_ms: int
        """

        self._skipped_at_ms = skipped_at_ms

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this DispatchJob.

        ID of the vehicle used for the dispatch job.  # noqa: E501

        :return: The vehicle_id of this DispatchJob.
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this DispatchJob.

        ID of the vehicle used for the dispatch job.  # noqa: E501

        :param vehicle_id: The vehicle_id of this DispatchJob.
        :type vehicle_id: int
        """

        self._vehicle_id = vehicle_id
