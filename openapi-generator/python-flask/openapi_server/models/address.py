# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.address_geofence import AddressGeofence
from openapi_server.models.contact import Contact
from openapi_server.models.tag_metadata import TagMetadata
from openapi_server import util

from openapi_server.models.address_geofence import AddressGeofence  # noqa: E501
from openapi_server.models.contact import Contact  # noqa: E501
from openapi_server.models.tag_metadata import TagMetadata  # noqa: E501

class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts=None, formatted_address=None, geofence=None, id=None, name=None, notes=None, tags=None):  # noqa: E501
        """Address - a model defined in OpenAPI

        :param contacts: The contacts of this Address.  # noqa: E501
        :type contacts: List[Contact]
        :param formatted_address: The formatted_address of this Address.  # noqa: E501
        :type formatted_address: str
        :param geofence: The geofence of this Address.  # noqa: E501
        :type geofence: AddressGeofence
        :param id: The id of this Address.  # noqa: E501
        :type id: int
        :param name: The name of this Address.  # noqa: E501
        :type name: str
        :param notes: The notes of this Address.  # noqa: E501
        :type notes: str
        :param tags: The tags of this Address.  # noqa: E501
        :type tags: List[TagMetadata]
        """
        self.openapi_types = {
            'contacts': List[Contact],
            'formatted_address': str,
            'geofence': AddressGeofence,
            'id': int,
            'name': str,
            'notes': str,
            'tags': List[TagMetadata]
        }

        self.attribute_map = {
            'contacts': 'contacts',
            'formatted_address': 'formattedAddress',
            'geofence': 'geofence',
            'id': 'id',
            'name': 'name',
            'notes': 'notes',
            'tags': 'tags'
        }

        self._contacts = contacts
        self._formatted_address = formatted_address
        self._geofence = geofence
        self._id = id
        self._name = name
        self._notes = notes
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this Address.


        :return: The contacts of this Address.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Address.


        :param contacts: The contacts of this Address.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def formatted_address(self):
        """Gets the formatted_address of this Address.

        The full address associated with this address/geofence, as it might be recognized by maps.google.com  # noqa: E501

        :return: The formatted_address of this Address.
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this Address.

        The full address associated with this address/geofence, as it might be recognized by maps.google.com  # noqa: E501

        :param formatted_address: The formatted_address of this Address.
        :type formatted_address: str
        """

        self._formatted_address = formatted_address

    @property
    def geofence(self):
        """Gets the geofence of this Address.


        :return: The geofence of this Address.
        :rtype: AddressGeofence
        """
        return self._geofence

    @geofence.setter
    def geofence(self, geofence):
        """Sets the geofence of this Address.


        :param geofence: The geofence of this Address.
        :type geofence: AddressGeofence
        """

        self._geofence = geofence

    @property
    def id(self):
        """Gets the id of this Address.

        ID of the address  # noqa: E501

        :return: The id of this Address.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.

        ID of the address  # noqa: E501

        :param id: The id of this Address.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Address.

        Name of the address or geofence  # noqa: E501

        :return: The name of this Address.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        Name of the address or geofence  # noqa: E501

        :param name: The name of this Address.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Address.

        Notes associated with an address.  # noqa: E501

        :return: The notes of this Address.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Address.

        Notes associated with an address.  # noqa: E501

        :param notes: The notes of this Address.
        :type notes: str
        """

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this Address.


        :return: The tags of this Address.
        :rtype: List[TagMetadata]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Address.


        :param tags: The tags of this Address.
        :type tags: List[TagMetadata]
        """

        self._tags = tags
