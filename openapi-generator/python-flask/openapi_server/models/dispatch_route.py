# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dispatch_job import DispatchJob
from openapi_server.models.dispatch_route_base import DispatchRouteBase
from openapi_server import util

from openapi_server.models.dispatch_job import DispatchJob  # noqa: E501
from openapi_server.models.dispatch_route_base import DispatchRouteBase  # noqa: E501

class DispatchRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_end_ms=None, actual_start_ms=None, driver_id=None, group_id=None, name=None, scheduled_end_ms=None, scheduled_meters=None, scheduled_start_ms=None, start_location_address=None, start_location_address_id=None, start_location_lat=None, start_location_lng=None, start_location_name=None, trailer_id=None, vehicle_id=None, dispatch_jobs=None, id=None):  # noqa: E501
        """DispatchRoute - a model defined in OpenAPI

        :param actual_end_ms: The actual_end_ms of this DispatchRoute.  # noqa: E501
        :type actual_end_ms: int
        :param actual_start_ms: The actual_start_ms of this DispatchRoute.  # noqa: E501
        :type actual_start_ms: int
        :param driver_id: The driver_id of this DispatchRoute.  # noqa: E501
        :type driver_id: int
        :param group_id: The group_id of this DispatchRoute.  # noqa: E501
        :type group_id: int
        :param name: The name of this DispatchRoute.  # noqa: E501
        :type name: str
        :param scheduled_end_ms: The scheduled_end_ms of this DispatchRoute.  # noqa: E501
        :type scheduled_end_ms: int
        :param scheduled_meters: The scheduled_meters of this DispatchRoute.  # noqa: E501
        :type scheduled_meters: int
        :param scheduled_start_ms: The scheduled_start_ms of this DispatchRoute.  # noqa: E501
        :type scheduled_start_ms: int
        :param start_location_address: The start_location_address of this DispatchRoute.  # noqa: E501
        :type start_location_address: str
        :param start_location_address_id: The start_location_address_id of this DispatchRoute.  # noqa: E501
        :type start_location_address_id: int
        :param start_location_lat: The start_location_lat of this DispatchRoute.  # noqa: E501
        :type start_location_lat: float
        :param start_location_lng: The start_location_lng of this DispatchRoute.  # noqa: E501
        :type start_location_lng: float
        :param start_location_name: The start_location_name of this DispatchRoute.  # noqa: E501
        :type start_location_name: str
        :param trailer_id: The trailer_id of this DispatchRoute.  # noqa: E501
        :type trailer_id: int
        :param vehicle_id: The vehicle_id of this DispatchRoute.  # noqa: E501
        :type vehicle_id: int
        :param dispatch_jobs: The dispatch_jobs of this DispatchRoute.  # noqa: E501
        :type dispatch_jobs: List[DispatchJob]
        :param id: The id of this DispatchRoute.  # noqa: E501
        :type id: int
        """
        self.openapi_types = {
            'actual_end_ms': int,
            'actual_start_ms': int,
            'driver_id': int,
            'group_id': int,
            'name': str,
            'scheduled_end_ms': int,
            'scheduled_meters': int,
            'scheduled_start_ms': int,
            'start_location_address': str,
            'start_location_address_id': int,
            'start_location_lat': float,
            'start_location_lng': float,
            'start_location_name': str,
            'trailer_id': int,
            'vehicle_id': int,
            'dispatch_jobs': List[DispatchJob],
            'id': int
        }

        self.attribute_map = {
            'actual_end_ms': 'actual_end_ms',
            'actual_start_ms': 'actual_start_ms',
            'driver_id': 'driver_id',
            'group_id': 'group_id',
            'name': 'name',
            'scheduled_end_ms': 'scheduled_end_ms',
            'scheduled_meters': 'scheduled_meters',
            'scheduled_start_ms': 'scheduled_start_ms',
            'start_location_address': 'start_location_address',
            'start_location_address_id': 'start_location_address_id',
            'start_location_lat': 'start_location_lat',
            'start_location_lng': 'start_location_lng',
            'start_location_name': 'start_location_name',
            'trailer_id': 'trailer_id',
            'vehicle_id': 'vehicle_id',
            'dispatch_jobs': 'dispatch_jobs',
            'id': 'id'
        }

        self._actual_end_ms = actual_end_ms
        self._actual_start_ms = actual_start_ms
        self._driver_id = driver_id
        self._group_id = group_id
        self._name = name
        self._scheduled_end_ms = scheduled_end_ms
        self._scheduled_meters = scheduled_meters
        self._scheduled_start_ms = scheduled_start_ms
        self._start_location_address = start_location_address
        self._start_location_address_id = start_location_address_id
        self._start_location_lat = start_location_lat
        self._start_location_lng = start_location_lng
        self._start_location_name = start_location_name
        self._trailer_id = trailer_id
        self._vehicle_id = vehicle_id
        self._dispatch_jobs = dispatch_jobs
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'DispatchRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DispatchRoute of this DispatchRoute.  # noqa: E501
        :rtype: DispatchRoute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_end_ms(self):
        """Gets the actual_end_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the route actually ended.  # noqa: E501

        :return: The actual_end_ms of this DispatchRoute.
        :rtype: int
        """
        return self._actual_end_ms

    @actual_end_ms.setter
    def actual_end_ms(self, actual_end_ms):
        """Sets the actual_end_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the route actually ended.  # noqa: E501

        :param actual_end_ms: The actual_end_ms of this DispatchRoute.
        :type actual_end_ms: int
        """

        self._actual_end_ms = actual_end_ms

    @property
    def actual_start_ms(self):
        """Gets the actual_start_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the route actually started.  # noqa: E501

        :return: The actual_start_ms of this DispatchRoute.
        :rtype: int
        """
        return self._actual_start_ms

    @actual_start_ms.setter
    def actual_start_ms(self, actual_start_ms):
        """Sets the actual_start_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the route actually started.  # noqa: E501

        :param actual_start_ms: The actual_start_ms of this DispatchRoute.
        :type actual_start_ms: int
        """

        self._actual_start_ms = actual_start_ms

    @property
    def driver_id(self):
        """Gets the driver_id of this DispatchRoute.

        ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.  # noqa: E501

        :return: The driver_id of this DispatchRoute.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this DispatchRoute.

        ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.  # noqa: E501

        :param driver_id: The driver_id of this DispatchRoute.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def group_id(self):
        """Gets the group_id of this DispatchRoute.

        ID of the group if the organization has multiple groups (optional).  # noqa: E501

        :return: The group_id of this DispatchRoute.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DispatchRoute.

        ID of the group if the organization has multiple groups (optional).  # noqa: E501

        :param group_id: The group_id of this DispatchRoute.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this DispatchRoute.

        Descriptive name of this route.  # noqa: E501

        :return: The name of this DispatchRoute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DispatchRoute.

        Descriptive name of this route.  # noqa: E501

        :param name: The name of this DispatchRoute.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def scheduled_end_ms(self):
        """Gets the scheduled_end_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the last job in the route is scheduled to end.  # noqa: E501

        :return: The scheduled_end_ms of this DispatchRoute.
        :rtype: int
        """
        return self._scheduled_end_ms

    @scheduled_end_ms.setter
    def scheduled_end_ms(self, scheduled_end_ms):
        """Sets the scheduled_end_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the last job in the route is scheduled to end.  # noqa: E501

        :param scheduled_end_ms: The scheduled_end_ms of this DispatchRoute.
        :type scheduled_end_ms: int
        """
        if scheduled_end_ms is None:
            raise ValueError("Invalid value for `scheduled_end_ms`, must not be `None`")  # noqa: E501

        self._scheduled_end_ms = scheduled_end_ms

    @property
    def scheduled_meters(self):
        """Gets the scheduled_meters of this DispatchRoute.

        The distance expected to be traveled for this route in meters.  # noqa: E501

        :return: The scheduled_meters of this DispatchRoute.
        :rtype: int
        """
        return self._scheduled_meters

    @scheduled_meters.setter
    def scheduled_meters(self, scheduled_meters):
        """Sets the scheduled_meters of this DispatchRoute.

        The distance expected to be traveled for this route in meters.  # noqa: E501

        :param scheduled_meters: The scheduled_meters of this DispatchRoute.
        :type scheduled_meters: int
        """

        self._scheduled_meters = scheduled_meters

    @property
    def scheduled_start_ms(self):
        """Gets the scheduled_start_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the route is scheduled to start.  # noqa: E501

        :return: The scheduled_start_ms of this DispatchRoute.
        :rtype: int
        """
        return self._scheduled_start_ms

    @scheduled_start_ms.setter
    def scheduled_start_ms(self, scheduled_start_ms):
        """Sets the scheduled_start_ms of this DispatchRoute.

        The time in Unix epoch milliseconds that the route is scheduled to start.  # noqa: E501

        :param scheduled_start_ms: The scheduled_start_ms of this DispatchRoute.
        :type scheduled_start_ms: int
        """
        if scheduled_start_ms is None:
            raise ValueError("Invalid value for `scheduled_start_ms`, must not be `None`")  # noqa: E501

        self._scheduled_start_ms = scheduled_start_ms

    @property
    def start_location_address(self):
        """Gets the start_location_address of this DispatchRoute.

        The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.  # noqa: E501

        :return: The start_location_address of this DispatchRoute.
        :rtype: str
        """
        return self._start_location_address

    @start_location_address.setter
    def start_location_address(self, start_location_address):
        """Sets the start_location_address of this DispatchRoute.

        The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.  # noqa: E501

        :param start_location_address: The start_location_address of this DispatchRoute.
        :type start_location_address: str
        """

        self._start_location_address = start_location_address

    @property
    def start_location_address_id(self):
        """Gets the start_location_address_id of this DispatchRoute.

        ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.  # noqa: E501

        :return: The start_location_address_id of this DispatchRoute.
        :rtype: int
        """
        return self._start_location_address_id

    @start_location_address_id.setter
    def start_location_address_id(self, start_location_address_id):
        """Sets the start_location_address_id of this DispatchRoute.

        ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.  # noqa: E501

        :param start_location_address_id: The start_location_address_id of this DispatchRoute.
        :type start_location_address_id: int
        """

        self._start_location_address_id = start_location_address_id

    @property
    def start_location_lat(self):
        """Gets the start_location_lat of this DispatchRoute.

        Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.  # noqa: E501

        :return: The start_location_lat of this DispatchRoute.
        :rtype: float
        """
        return self._start_location_lat

    @start_location_lat.setter
    def start_location_lat(self, start_location_lat):
        """Sets the start_location_lat of this DispatchRoute.

        Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.  # noqa: E501

        :param start_location_lat: The start_location_lat of this DispatchRoute.
        :type start_location_lat: float
        """

        self._start_location_lat = start_location_lat

    @property
    def start_location_lng(self):
        """Gets the start_location_lng of this DispatchRoute.

        Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.  # noqa: E501

        :return: The start_location_lng of this DispatchRoute.
        :rtype: float
        """
        return self._start_location_lng

    @start_location_lng.setter
    def start_location_lng(self, start_location_lng):
        """Sets the start_location_lng of this DispatchRoute.

        Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.  # noqa: E501

        :param start_location_lng: The start_location_lng of this DispatchRoute.
        :type start_location_lng: float
        """

        self._start_location_lng = start_location_lng

    @property
    def start_location_name(self):
        """Gets the start_location_name of this DispatchRoute.

        The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.  # noqa: E501

        :return: The start_location_name of this DispatchRoute.
        :rtype: str
        """
        return self._start_location_name

    @start_location_name.setter
    def start_location_name(self, start_location_name):
        """Sets the start_location_name of this DispatchRoute.

        The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.  # noqa: E501

        :param start_location_name: The start_location_name of this DispatchRoute.
        :type start_location_name: str
        """

        self._start_location_name = start_location_name

    @property
    def trailer_id(self):
        """Gets the trailer_id of this DispatchRoute.

        ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.  # noqa: E501

        :return: The trailer_id of this DispatchRoute.
        :rtype: int
        """
        return self._trailer_id

    @trailer_id.setter
    def trailer_id(self, trailer_id):
        """Sets the trailer_id of this DispatchRoute.

        ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.  # noqa: E501

        :param trailer_id: The trailer_id of this DispatchRoute.
        :type trailer_id: int
        """

        self._trailer_id = trailer_id

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this DispatchRoute.

        ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.  # noqa: E501

        :return: The vehicle_id of this DispatchRoute.
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this DispatchRoute.

        ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.  # noqa: E501

        :param vehicle_id: The vehicle_id of this DispatchRoute.
        :type vehicle_id: int
        """

        self._vehicle_id = vehicle_id

    @property
    def dispatch_jobs(self):
        """Gets the dispatch_jobs of this DispatchRoute.

        The dispatch jobs associated with this route.  # noqa: E501

        :return: The dispatch_jobs of this DispatchRoute.
        :rtype: List[DispatchJob]
        """
        return self._dispatch_jobs

    @dispatch_jobs.setter
    def dispatch_jobs(self, dispatch_jobs):
        """Sets the dispatch_jobs of this DispatchRoute.

        The dispatch jobs associated with this route.  # noqa: E501

        :param dispatch_jobs: The dispatch_jobs of this DispatchRoute.
        :type dispatch_jobs: List[DispatchJob]
        """
        if dispatch_jobs is None:
            raise ValueError("Invalid value for `dispatch_jobs`, must not be `None`")  # noqa: E501

        self._dispatch_jobs = dispatch_jobs

    @property
    def id(self):
        """Gets the id of this DispatchRoute.

        ID of the Samsara dispatch route.  # noqa: E501

        :return: The id of this DispatchRoute.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DispatchRoute.

        ID of the Samsara dispatch route.  # noqa: E501

        :param id: The id of this DispatchRoute.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
