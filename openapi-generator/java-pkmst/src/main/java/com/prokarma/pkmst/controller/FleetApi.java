/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.Address;
import com.prokarma.pkmst.model.AllRouteJobUpdates;
import com.prokarma.pkmst.model.AssetReeferResponse;
import com.prokarma.pkmst.model.Contact;
import com.prokarma.pkmst.model.DispatchRoute;
import com.prokarma.pkmst.model.DispatchRouteCreate;
import com.prokarma.pkmst.model.DispatchRouteHistory;
import com.prokarma.pkmst.model.Document;
import com.prokarma.pkmst.model.DocumentCreate;
import com.prokarma.pkmst.model.DocumentType;
import com.prokarma.pkmst.model.Driver;
import com.prokarma.pkmst.model.DriverDailyLogResponse;
import com.prokarma.pkmst.model.DriverForCreate;
import com.prokarma.pkmst.model.DriverSafetyScoreResponse;
import com.prokarma.pkmst.model.DriversResponse;
import com.prokarma.pkmst.model.DriversSummaryResponse;
import com.prokarma.pkmst.model.DvirBase;
import com.prokarma.pkmst.model.DvirListResponse;
import com.prokarma.pkmst.model.FleetVehicleLocation;
import com.prokarma.pkmst.model.FleetVehicleResponse;
import com.prokarma.pkmst.model.HosAuthenticationLogsResponse;
import com.prokarma.pkmst.model.HosLogsResponse;
import com.prokarma.pkmst.model.HosLogsSummaryResponse;
import com.prokarma.pkmst.model.InlineObject;
import com.prokarma.pkmst.model.InlineObject1;
import com.prokarma.pkmst.model.InlineObject10;
import com.prokarma.pkmst.model.InlineObject11;
import com.prokarma.pkmst.model.InlineObject12;
import com.prokarma.pkmst.model.InlineObject13;
import com.prokarma.pkmst.model.InlineObject14;
import com.prokarma.pkmst.model.InlineObject15;
import com.prokarma.pkmst.model.InlineObject16;
import com.prokarma.pkmst.model.InlineObject2;
import com.prokarma.pkmst.model.InlineObject3;
import com.prokarma.pkmst.model.InlineObject4;
import com.prokarma.pkmst.model.InlineObject5;
import com.prokarma.pkmst.model.InlineObject6;
import com.prokarma.pkmst.model.InlineObject7;
import com.prokarma.pkmst.model.InlineObject8;
import com.prokarma.pkmst.model.InlineObject9;
import com.prokarma.pkmst.model.InlineResponse200;
import com.prokarma.pkmst.model.InlineResponse2001;
import com.prokarma.pkmst.model.InlineResponse2002;
import com.prokarma.pkmst.model.InlineResponse2003;
import com.prokarma.pkmst.model.InlineResponse2004;
import com.prokarma.pkmst.model.InlineResponse2005;
import com.prokarma.pkmst.model.TripResponse;
import com.prokarma.pkmst.model.VehicleHarshEventResponse;
import com.prokarma.pkmst.model.VehicleSafetyScoreResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2019-03-01T05:34:34.656Z[GMT]")

@Api(value = "Fleet", description = "the Fleet API")
public interface FleetApi {

    @ApiOperation(value = "/fleet/add_address", notes = "This method adds an address book entry to the specified group.", response = Void.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address was successfully added. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/add_address",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addFleetAddress(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject2 addressParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/addresses", notes = "Add one or more addresses to the organization", response = Address.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of added addresses/geofences. For each address entry, the geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type. Circle geofences added without a specific lat/lng are geocoded asynchronously, and will be 0,0 in the immediate response.", response = Address.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Address>> addOrganizationAddresses(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject addresses, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes", notes = "Create a new dispatch route.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created route object including the new route ID.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DispatchRoute> createDispatchRoute(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody DispatchRouteCreate createDispatchRouteParams, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/create", notes = "Create a new driver.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the successfully created the driver.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Driver> createDriver(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Driver creation body" ,required=true )   @RequestBody DriverForCreate createDriverParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/dispatch/routes", notes = "Create a new dispatch route for the driver with driver_id.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created route object including the new route ID.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/dispatch/routes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DispatchRoute> createDriverDispatchRoute(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver with the associated routes.",required=true ) @PathVariable("driver_id") Long driverId,@ApiParam(value = "" ,required=true )   @RequestBody DispatchRouteCreate createDispatchRouteParams, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/documents", notes = "Create a driver document for the given driver.", response = Document.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the created document.", response = Document.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/documents",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Document> createDriverDocument(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver for whom the document is created.",required=true ) @PathVariable("driver_id") Long driverId,@ApiParam(value = "To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document typeâ€™s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field typeâ€™s valueType at index _i_." ,required=true )   @RequestBody DocumentCreate createDocumentParams, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/maintenance/dvirs", notes = "Create a new dvir, marking a vehicle or trailer safe or unsafe.", response = DvirBase.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Newly created DVIR.", response = DvirBase.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/maintenance/dvirs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DvirBase> createDvir(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject12 createDvirParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes", notes = "Create a new dispatch route for the vehicle with vehicle_id.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created route object including the new route ID.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id}/dispatch/routes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DispatchRoute> createVehicleDispatchRoute(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle with the associated routes.",required=true ) @PathVariable("vehicle_id") Long vehicleId,@ApiParam(value = "" ,required=true )   @RequestBody DispatchRouteCreate createDispatchRouteParams, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", notes = "Deactivate a driver with the given id.", response = Void.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deactivated the driver, which is now referenced by /fleet/drivers/inactive/{driver_id}."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deactivateDriver(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true ) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}/", notes = "Delete a dispatch route and its associated jobs.", response = Void.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deleted the dispatch route. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDispatchRouteById(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the dispatch route.",required=true ) @PathVariable("route_id") Long routeId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/addresses/{addressId}", notes = "Delete an address.", response = Void.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address was successfully deleted. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrganizationAddress(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the address/geofence",required=true ) @PathVariable("addressId") Long addressId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes", notes = "Fetch all of the dispatch routes for the group.", response = DispatchRoute.class, responseContainer = "List", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All dispatch route objects for the group.", response = DispatchRoute.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DispatchRoute>> fetchAllDispatchRoutes(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).")  @RequestParam(value = "group_id", required = false) Long groupId,@ApiParam(value = "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.")  @RequestParam(value = "end_time", required = false) Long endTime,@ApiParam(value = "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.")  @RequestParam(value = "duration", required = false) Long duration, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes/job_updates", notes = "Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID", response = AllRouteJobUpdates.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All job updates on routes.", response = AllRouteJobUpdates.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/job_updates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AllRouteJobUpdates> fetchAllRouteJobUpdates(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).")  @RequestParam(value = "group_id", required = false) Long groupId,@ApiParam(value = "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.")  @RequestParam(value = "sequence_id", required = false) String sequenceId,@ApiParam(value = "Optionally set include=route to include route object in response payload.")  @RequestParam(value = "include", required = false) String include, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/assets/locations", notes = "Fetch current locations of all assets for the group.", response = InlineResponse2001.class, tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of assets and their current locations.", response = InlineResponse2001.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> getAllAssetCurrentLocations(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).")  @RequestParam(value = "group_id", required = false) Long groupId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/assets", notes = "Fetch all of the assets for the group.", response = InlineResponse200.class, tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of assets.", response = InlineResponse200.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getAllAssets(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).")  @RequestParam(value = "group_id", required = false) Long groupId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/inactive", notes = "Fetch all deactivated drivers for the group.", response = Driver.class, responseContainer = "List", tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns an array of all deactivated drivers for the group. Deactivated drivers are referenced at /fleet/drivers/inactive/{driver_id}", response = Driver.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/inactive",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Driver>> getAllDeactivatedDrivers(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).")  @RequestParam(value = "group_id", required = false) Long groupId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/assets/{assetId:[0-9]+}/locations", notes = "Fetch the historical locations for the asset.", response = Object.class, responseContainer = "List", tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Asset location details.", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets/{asset_id}/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> getAssetLocation(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the asset",required=true ) @PathVariable("asset_id") Long assetId,@ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true)  @RequestParam(value = "startMs", required = true) Long startMs,@ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true)  @RequestParam(value = "endMs", required = true) Long endMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/assets/{assetId:[0-9]+}/reefer", notes = "Fetch the reefer-specific stats of an asset.", response = AssetReeferResponse.class, tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reefer-specific asset details.", response = AssetReeferResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets/{asset_id}/reefer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AssetReeferResponse> getAssetReefer(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the asset",required=true ) @PathVariable("asset_id") Long assetId,@ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true)  @RequestParam(value = "startMs", required = true) Long startMs,@ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true)  @RequestParam(value = "endMs", required = true) Long endMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", notes = "Fetch deactivated driver by id.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the deactivated driver with the given driver_id.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/inactive/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Driver> getDeactivatedDriverById(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true ) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}", notes = "Fetch a dispatch route by id.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The dispatch route corresponding to route_id.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DispatchRoute> getDispatchRouteById(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the dispatch route.",required=true ) @PathVariable("route_id") Long routeId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}/history", notes = "Fetch the history of a dispatch route.", response = DispatchRouteHistory.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The historical route state changes between start_time and end_time.", response = DispatchRouteHistory.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}/history",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DispatchRouteHistory> getDispatchRouteHistory(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the route with history.",required=true ) @PathVariable("route_id") Long routeId,@ApiParam(value = "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.")  @RequestParam(value = "start_time", required = false) Long startTime,@ApiParam(value = "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.")  @RequestParam(value = "end_time", required = false) Long endTime, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/dispatch/routes", notes = "Fetch all of the dispatch routes for a given driver.", response = DispatchRoute.class, responseContainer = "List", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the dispatch routes for the given driver_id.", response = DispatchRoute.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/dispatch/routes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DispatchRoute>> getDispatchRoutesByDriverId(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver with the associated routes.",required=true ) @PathVariable("driver_id") Long driverId,@ApiParam(value = "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.")  @RequestParam(value = "end_time", required = false) Long endTime,@ApiParam(value = "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.")  @RequestParam(value = "duration", required = false) Long duration, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes", notes = "Fetch all of the dispatch routes for a given vehicle.", response = DispatchRoute.class, responseContainer = "List", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns all of the dispatch routes for the given vehicle_id.", response = DispatchRoute.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id}/dispatch/routes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DispatchRoute>> getDispatchRoutesByVehicleId(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle with the associated routes.",required=true ) @PathVariable("vehicle_id") Long vehicleId,@ApiParam(value = "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.")  @RequestParam(value = "end_time", required = false) Long endTime,@ApiParam(value = "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.")  @RequestParam(value = "duration", required = false) Long duration, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", notes = "Fetch driver by id.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the driver for the given driver_id.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Driver> getDriverById(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true ) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/document_types", notes = "Fetch all of the document types.", response = DocumentType.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns all of the document types.", response = DocumentType.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/document_types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DocumentType>> getDriverDocumentTypesByOrgId( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/documents", notes = "Fetch all of the documents.", response = Document.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns all of the documents.", response = Document.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/documents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Document>> getDriverDocumentsByOrgId(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.")  @RequestParam(value = "endMs", required = false) Long endMs,@ApiParam(value = "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.")  @RequestParam(value = "durationMs", required = false) Long durationMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driverId:[0-9]+}/safety/score", notes = "Fetch the safety score for the driver.", response = DriverSafetyScoreResponse.class, tags={ "Fleet","Safety", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Safety score details.", response = DriverSafetyScoreResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driverId}/safety/score",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DriverSafetyScoreResponse> getDriverSafetyScore(@ApiParam(value = "ID of the driver",required=true ) @PathVariable("driverId") Long driverId,@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true)  @RequestParam(value = "startMs", required = true) Long startMs,@ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true)  @RequestParam(value = "endMs", required = true) Long endMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/maintenance/dvirs", notes = "Get DVIRs for the org within provided time constraints", response = DvirListResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DVIRs for the specified duration.", response = DvirListResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/maintenance/dvirs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DvirListResponse> getDvirs(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "time in millis until the last dvir log.", required = true)  @RequestParam(value = "end_ms", required = true) Integer endMs,@ApiParam(value = "time in millis which corresponds to the duration before the end_ms.", required = true)  @RequestParam(value = "duration_ms", required = true) Integer durationMs,@ApiParam(value = "Group ID to query.")  @RequestParam(value = "group_id", required = false) Integer groupId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers", notes = "Get all the drivers for the specified group.", response = DriversResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All drivers in the group.", response = DriversResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DriversResponse> getFleetDrivers(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject3 groupDriversParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs", notes = "Get summarized daily HOS charts for a specified driver.", response = DriverDailyLogResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Distance traveled and time active for each driver in the organization over the specified time period.", response = DriverDailyLogResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/hos_daily_logs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DriverDailyLogResponse> getFleetDriversHosDailyLogs(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver with HOS logs.",required=true ) @PathVariable("driver_id") Long driverId,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject6 hosLogsParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/summary", notes = "Get the distance and time each driver in an organization has driven in a given time period.", response = DriversSummaryResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Distance traveled and time active for each driver in the organization over the specified time period.", response = DriversSummaryResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/summary",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DriversSummaryResponse> getFleetDriversSummary(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject5 driversSummaryParam,@ApiParam(value = "Snap query result to HOS day boundaries.")  @RequestParam(value = "snap_to_day_bounds", required = false) Boolean snapToDayBounds, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/hos_authentication_logs", notes = "Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.", response = HosAuthenticationLogsResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HOS authentication logs for the specified driver.", response = HosAuthenticationLogsResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/hos_authentication_logs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HosAuthenticationLogsResponse> getFleetHosAuthenticationLogs(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject7 hosAuthenticationLogsParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/hos_logs", notes = "Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.", response = HosLogsResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HOS logs for the specified driver.", response = HosLogsResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/hos_logs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HosLogsResponse> getFleetHosLogs(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject8 hosLogsParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/hos_logs_summary", notes = "Get the current HOS status for all drivers in the group.", response = HosLogsSummaryResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HOS logs for the specified driver.", response = HosLogsSummaryResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/hos_logs_summary",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HosLogsSummaryResponse> getFleetHosLogsSummary(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject9 hosLogsParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/locations", notes = "Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.", response = InlineResponse2003.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of vehicle objects containing their location and the time at which that location was logged.", response = InlineResponse2003.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/locations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2003> getFleetLocations(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject11 groupParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/maintenance/list", notes = "Get list of the vehicles with any engine faults or check light data.", response = InlineResponse2004.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of vehicles and maintenance information about each.", response = InlineResponse2004.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/maintenance/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2004> getFleetMaintenanceList(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject13 groupParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/trips", notes = "Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.", response = TripResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of trips taken by the requested vehicle within the specified timeframe.", response = TripResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/trips",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TripResponse> getFleetTrips(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject15 tripsParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", notes = "Gets a specific vehicle.", response = FleetVehicleResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The specified vehicle.", response = FleetVehicleResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FleetVehicleResponse> getFleetVehicle(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.",required=true ) @PathVariable("vehicle_id_or_external_id") String vehicleIdOrExternalId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/addresses/{addressId}", notes = "Fetch an address by its id.", response = Address.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The address/geofence. The geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type.", response = Address.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Address> getOrganizationAddress(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the address/geofence",required=true ) @PathVariable("addressId") Long addressId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/addresses", notes = "Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.", response = Address.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of addresses/geofences. For each address entry, the geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type.", response = Address.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Address>> getOrganizationAddresses(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/contacts/{contact_id}", notes = "Fetch a contact by its id.", response = Contact.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The contact.", response = Contact.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/contacts/{contact_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Contact> getOrganizationContact(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the contact",required=true ) @PathVariable("contact_id") Long contactId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event", notes = "Fetch harsh event details for a vehicle.", response = VehicleHarshEventResponse.class, tags={ "Fleet","Safety", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Harsh event details.", response = VehicleHarshEventResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicleId}/safety/harsh_event",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VehicleHarshEventResponse> getVehicleHarshEvent(@ApiParam(value = "ID of the vehicle",required=true ) @PathVariable("vehicleId") Long vehicleId,@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Timestamp in milliseconds representing the timestamp of a harsh event.", required = true)  @RequestParam(value = "timestamp", required = true) Long timestamp, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+}/locations", notes = "Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.", response = FleetVehicleLocation.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns locations for a given vehicle between a start/end time, with a maximum query duration of one hour.", response = FleetVehicleLocation.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id}/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FleetVehicleLocation>> getVehicleLocations(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle with the associated routes.",required=true ) @PathVariable("vehicle_id") Long vehicleId,@ApiParam(value = "Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)", required = true)  @RequestParam(value = "startMs", required = true) Long startMs,@ApiParam(value = "Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)", required = true)  @RequestParam(value = "endMs", required = true) Long endMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicleId:[0-9]+}/safety/score", notes = "Fetch the safety score for the vehicle.", response = VehicleSafetyScoreResponse.class, tags={ "Fleet","Safety", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Safety score details.", response = VehicleSafetyScoreResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicleId}/safety/score",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VehicleSafetyScoreResponse> getVehicleSafetyScore(@ApiParam(value = "ID of the vehicle",required=true ) @PathVariable("vehicleId") Long vehicleId,@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true)  @RequestParam(value = "startMs", required = true) Long startMs,@ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true)  @RequestParam(value = "endMs", required = true) Long endMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/stats", notes = "Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.", response = InlineResponse2005.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns engine state and/or aux input data for all vehicles in the group between a start/end time.", response = InlineResponse2005.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/stats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2005> getVehicleStats(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Time in Unix epoch milliseconds for the start of the query.", required = true)  @RequestParam(value = "startMs", required = true) Integer startMs,@ApiParam(value = "Time in Unix epoch milliseconds for the end of the query.", required = true)  @RequestParam(value = "endMs", required = true) Integer endMs,@ApiParam(value = "Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series=engineState,auxInput2", allowableValues = "engineState, auxInput1, auxInput2")  @RequestParam(value = "series", required = false) String series,@ApiParam(value = "Comma-separated list of tag ids. Example: tagIds=1,2,3")  @RequestParam(value = "tagIds", required = false) String tagIds,@ApiParam(value = "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.")  @RequestParam(value = "startingAfter", required = false) String startingAfter,@ApiParam(value = "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.")  @RequestParam(value = "endingBefore", required = false) String endingBefore,@ApiParam(value = "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.")  @RequestParam(value = "limit", required = false) Long limit, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/locations", notes = "Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.", response = Object.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns locations for a given vehicle between a start/end time, with a maximum query duration of 30 minutes.", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> getVehiclesLocations(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)", required = true)  @RequestParam(value = "startMs", required = true) Integer startMs,@ApiParam(value = "Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)", required = true)  @RequestParam(value = "endMs", required = true) Integer endMs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/contacts", notes = "Fetch all contacts for the organization.", response = Contact.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of contacts.", response = Contact.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Contact>> listContacts(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/list", notes = "Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.", response = InlineResponse2002.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of vehicles and information about each.", response = InlineResponse2002.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2002> listFleet(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject10 groupParam,@ApiParam(value = "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.")  @RequestParam(value = "startingAfter", required = false) String startingAfter,@ApiParam(value = "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.")  @RequestParam(value = "endingBefore", required = false) String endingBefore,@ApiParam(value = "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.")  @RequestParam(value = "limit", required = false) Long limit, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", notes = "Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.", response = FleetVehicleResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated vehicle.", response = FleetVehicleResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id_or_external_id}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<FleetVehicleResponse> patchFleetVehicle(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.",required=true ) @PathVariable("vehicle_id_or_external_id") String vehicleIdOrExternalId,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject16 data, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", notes = "Reactivate the inactive driver having id.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the reactivated driver, which is now available at /fleet/drivers/{driver_id}.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/inactive/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Driver> reactivateDriverById(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true ) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject4 reactivateDriverParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}/", notes = "Update a dispatch route and its associated jobs.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update the dispatch route. Allowable updates include setting job state, adding or removing jobs, and changing job locations and times.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<DispatchRoute> updateDispatchRouteById(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the dispatch route.",required=true ) @PathVariable("route_id") Long routeId,@ApiParam(value = "" ,required=true )   @RequestBody DispatchRoute updateDispatchRouteParams, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/addresses/{addressId}", notes = "Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.", response = Void.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address was successfully updated. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateOrganizationAddress(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the address/geofence",required=true ) @PathVariable("addressId") Long addressId,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject1 address, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "/fleet/set_data", notes = "This method enables the mutation of metadata for vehicles in the Samsara Cloud.", response = Void.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Vehicles were successfully updated. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/set_data",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateVehicles(@ApiParam(value = "Samsara API access token.", required = true)  @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )   @RequestBody InlineObject14 vehicleUpdateParam, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
