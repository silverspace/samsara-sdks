# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Drivers do
  @moduledoc """
  API calls for all endpoints tagged `Drivers`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /fleet/drivers/create
  Create a new driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - create_driver_param (DriverForCreate): Driver creation body
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec create_driver(Tesla.Env.client, String.t, SamsaraAPI.Model.DriverForCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def create_driver(connection, access_token, create_driver_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers/create")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_driver_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Deactivate a driver with the given id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deactivate_driver(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deactivate_driver(connection, access_token, driver_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/fleet/drivers/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /fleet/drivers/inactive
  Fetch all deactivated drivers for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, [%Driver{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_all_deactivated_drivers(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.Driver.t)} | {:error, Tesla.Env.t}
  def get_all_deactivated_drivers(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/drivers/inactive")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.Driver{}])
  end

  @doc """
  /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Fetch deactivated driver by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec get_deactivated_driver_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def get_deactivated_driver_by_id(connection, access_token, driver_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/inactive/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Fetch driver by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec get_driver_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def get_driver_by_id(connection, access_token, driver_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Reactivate the inactive driver having id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - reactivate_driver_param (InlineObject4): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec reactivate_driver_by_id(Tesla.Env.client, String.t, String.t, SamsaraAPI.Model.InlineObject4.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def reactivate_driver_by_id(connection, access_token, driver_id_or_external_id, reactivate_driver_param, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/fleet/drivers/inactive/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, reactivate_driver_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end
end
