# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Tags do
  @moduledoc """
  API calls for all endpoints tagged `Tags`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /tags
  Create a new tag for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - tag_create_params (TagCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Tag{}} on success
  {:error, info} on failure
  """
  @spec create_tag(Tesla.Env.client, String.t, SamsaraAPI.Model.TagCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.Tag.t} | {:error, Tesla.Env.t}
  def create_tag(connection, access_token, tag_create_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/tags")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, tag_create_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Tag{})
  end

  @doc """
  /tags/{tag_id:[0-9]+}
  Permanently deletes a tag.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - tag_id (integer()): ID of the tag.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_tag_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_tag_by_id(connection, access_token, tag_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/tags/#{tag_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /tags
  Fetch all of the tags for a group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2009{}} on success
  {:error, info} on failure
  """
  @spec get_all_tags(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2009.t} | {:error, Tesla.Env.t}
  def get_all_tags(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/tags")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2009{})
  end

  @doc """
  /tags/{tag_id:[0-9]+}
  Fetch a tag by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - tag_id (integer()): ID of the tag.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Tag{}} on success
  {:error, info} on failure
  """
  @spec get_tag_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.Tag.t} | {:error, Tesla.Env.t}
  def get_tag_by_id(connection, access_token, tag_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/tags/#{tag_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Tag{})
  end

  @doc """
  /tags/{tag_id:[0-9]+}
  Add or delete specific members from a tag, or modify the name of a tag.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - tag_id (integer()): ID of the tag.
  - tag_modify_params (TagModify): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Tag{}} on success
  {:error, info} on failure
  """
  @spec modify_tag_by_id(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.TagModify.t, keyword()) :: {:ok, SamsaraAPI.Model.Tag.t} | {:error, Tesla.Env.t}
  def modify_tag_by_id(connection, access_token, tag_id, tag_modify_params, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/tags/#{tag_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, tag_modify_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Tag{})
  end

  @doc """
  /tags/{tag_id:[0-9]+}
  Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - tag_id (integer()): ID of the tag.
  - update_tag_params (TagUpdate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Tag{}} on success
  {:error, info} on failure
  """
  @spec update_tag_by_id(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.TagUpdate.t, keyword()) :: {:ok, SamsaraAPI.Model.Tag.t} | {:error, Tesla.Env.t}
  def update_tag_by_id(connection, access_token, tag_id, update_tag_params, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/tags/#{tag_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, update_tag_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Tag{})
  end
end
