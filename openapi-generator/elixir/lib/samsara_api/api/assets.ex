# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Assets do
  @moduledoc """
  API calls for all endpoints tagged `Assets`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /fleet/assets/locations
  Fetch current locations of all assets for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2001{}} on success
  {:error, info} on failure
  """
  @spec get_all_asset_current_locations(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def get_all_asset_current_locations(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/assets/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2001{})
  end

  @doc """
  /fleet/assets
  Fetch all of the assets for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse200{}} on success
  {:error, info} on failure
  """
  @spec get_all_assets(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse200.t} | {:error, Tesla.Env.t}
  def get_all_assets(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/assets")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse200{})
  end

  @doc """
  /fleet/assets/{assetId:[0-9]+}/locations
  Fetch the historical locations for the asset.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - asset_id (integer()): ID of the asset
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_asset_location(Tesla.Env.client, String.t, integer(), integer(), integer(), keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def get_asset_location(connection, access_token, asset_id, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/assets/#{asset_id}/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  /fleet/assets/{assetId:[0-9]+}/reefer
  Fetch the reefer-specific stats of an asset.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - asset_id (integer()): ID of the asset
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.AssetReeferResponse{}} on success
  {:error, info} on failure
  """
  @spec get_asset_reefer(Tesla.Env.client, String.t, integer(), integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.AssetReeferResponse.t} | {:error, Tesla.Env.t}
  def get_asset_reefer(connection, access_token, asset_id, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/assets/#{asset_id}/reefer")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.AssetReeferResponse{})
  end
end
