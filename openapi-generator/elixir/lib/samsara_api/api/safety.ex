# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Safety do
  @moduledoc """
  API calls for all endpoints tagged `Safety`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /fleet/drivers/{driverId:[0-9]+}/safety/score
  Fetch the safety score for the driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - driver_id (integer()): ID of the driver
  - access_token (String.t): Samsara API access token.
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DriverSafetyScoreResponse{}} on success
  {:error, info} on failure
  """
  @spec get_driver_safety_score(Tesla.Env.client, integer(), String.t, integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.DriverSafetyScoreResponse.t} | {:error, Tesla.Env.t}
  def get_driver_safety_score(connection, driver_id, access_token, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/#{driver_id}/safety/score")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DriverSafetyScoreResponse{})
  end

  @doc """
  /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
  Fetch harsh event details for a vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - vehicle_id (integer()): ID of the vehicle
  - access_token (String.t): Samsara API access token.
  - timestamp (integer()): Timestamp in milliseconds representing the timestamp of a harsh event.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.VehicleHarshEventResponse{}} on success
  {:error, info} on failure
  """
  @spec get_vehicle_harsh_event(Tesla.Env.client, integer(), String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.VehicleHarshEventResponse.t} | {:error, Tesla.Env.t}
  def get_vehicle_harsh_event(connection, vehicle_id, access_token, timestamp, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/safety/harsh_event")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"timestamp", timestamp)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.VehicleHarshEventResponse{})
  end

  @doc """
  /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
  Fetch the safety score for the vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - vehicle_id (integer()): ID of the vehicle
  - access_token (String.t): Samsara API access token.
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.VehicleSafetyScoreResponse{}} on success
  {:error, info} on failure
  """
  @spec get_vehicle_safety_score(Tesla.Env.client, integer(), String.t, integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.VehicleSafetyScoreResponse.t} | {:error, Tesla.Env.t}
  def get_vehicle_safety_score(connection, vehicle_id, access_token, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/safety/score")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.VehicleSafetyScoreResponse{})
  end
end
