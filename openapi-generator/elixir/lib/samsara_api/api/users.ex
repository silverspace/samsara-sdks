# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /users/{userId:[0-9]+}
  Remove a user from the organization.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - user_id (integer()): ID of the user.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_user_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_user_by_id(connection, access_token, user_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/users/#{user_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /users/{userId:[0-9]+}
  Get a user.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - user_id (integer()): ID of the user.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.User{}} on success
  {:error, info} on failure
  """
  @spec get_user_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.User.t} | {:error, Tesla.Env.t}
  def get_user_by_id(connection, access_token, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{user_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.User{})
  end

  @doc """
  /user_roles
  Get all roles in the organization.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%UserRole{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_user_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.UserRole.t)} | {:error, Tesla.Env.t}
  def list_user_roles(connection, access_token, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/user_roles")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.UserRole{}])
  end

  @doc """
  /users
  List all users in the organization.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%User{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_users(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.User.t)} | {:error, Tesla.Env.t}
  def list_users(connection, access_token, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.User{}])
  end
end
