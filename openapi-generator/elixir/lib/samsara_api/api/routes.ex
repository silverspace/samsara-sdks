# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Routes do
  @moduledoc """
  API calls for all endpoints tagged `Routes`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /fleet/dispatch/routes
  Create a new dispatch route.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - create_dispatch_route_params (DispatchRouteCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec create_dispatch_route(Tesla.Env.client, String.t, SamsaraAPI.Model.DispatchRouteCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def create_dispatch_route(connection, access_token, create_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
  Create a new dispatch route for the driver with driver_id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id (integer()): ID of the driver with the associated routes.
  - create_dispatch_route_params (DispatchRouteCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec create_driver_dispatch_route(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DispatchRouteCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def create_driver_dispatch_route(connection, access_token, driver_id, create_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers/#{driver_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
  Create a new dispatch route for the vehicle with vehicle_id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id (integer()): ID of the vehicle with the associated routes.
  - create_dispatch_route_params (DispatchRouteCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec create_vehicle_dispatch_route(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DispatchRouteCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def create_vehicle_dispatch_route(connection, access_token, vehicle_id, create_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/vehicles/#{vehicle_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}/
  Delete a dispatch route and its associated jobs.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the dispatch route.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_dispatch_route_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_dispatch_route_by_id(connection, access_token, route_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/fleet/dispatch/routes/#{route_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /fleet/dispatch/routes
  Fetch all of the dispatch routes for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
    - :end_time (integer()): Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
    - :duration (integer()): Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%DispatchRoute{}, ...]} on success
  {:error, info} on failure
  """
  @spec fetch_all_dispatch_routes(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.DispatchRoute.t)} | {:error, Tesla.Env.t}
  def fetch_all_dispatch_routes(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query,
      :"end_time" => :query,
      :"duration" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DispatchRoute{}])
  end

  @doc """
  /fleet/dispatch/routes/job_updates
  Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
    - :sequence_id (String.t): Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
    - :include (String.t): Optionally set include&#x3D;route to include route object in response payload.
  ## Returns

  {:ok, %SamsaraAPI.Model.AllRouteJobUpdates{}} on success
  {:error, info} on failure
  """
  @spec fetch_all_route_job_updates(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.AllRouteJobUpdates.t} | {:error, Tesla.Env.t}
  def fetch_all_route_job_updates(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query,
      :"sequence_id" => :query,
      :"include" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes/job_updates")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.AllRouteJobUpdates{})
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}
  Fetch a dispatch route by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the dispatch route.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec get_dispatch_route_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def get_dispatch_route_by_id(connection, access_token, route_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes/#{route_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}/history
  Fetch the history of a dispatch route.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the route with history.
  - opts (KeywordList): [optional] Optional parameters
    - :start_time (integer()): Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
    - :end_time (integer()): Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRouteHistory{}} on success
  {:error, info} on failure
  """
  @spec get_dispatch_route_history(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.DispatchRouteHistory.t} | {:error, Tesla.Env.t}
  def get_dispatch_route_history(connection, access_token, route_id, opts \\ []) do
    optional_params = %{
      :"start_time" => :query,
      :"end_time" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes/#{route_id}/history")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRouteHistory{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
  Fetch all of the dispatch routes for a given driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id (integer()): ID of the driver with the associated routes.
  - opts (KeywordList): [optional] Optional parameters
    - :end_time (integer()): Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
    - :duration (integer()): Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%DispatchRoute{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_dispatch_routes_by_driver_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, list(SamsaraAPI.Model.DispatchRoute.t)} | {:error, Tesla.Env.t}
  def get_dispatch_routes_by_driver_id(connection, access_token, driver_id, opts \\ []) do
    optional_params = %{
      :"end_time" => :query,
      :"duration" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/drivers/#{driver_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DispatchRoute{}])
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
  Fetch all of the dispatch routes for a given vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id (integer()): ID of the vehicle with the associated routes.
  - opts (KeywordList): [optional] Optional parameters
    - :end_time (integer()): Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
    - :duration (integer()): Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%DispatchRoute{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_dispatch_routes_by_vehicle_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, list(SamsaraAPI.Model.DispatchRoute.t)} | {:error, Tesla.Env.t}
  def get_dispatch_routes_by_vehicle_id(connection, access_token, vehicle_id, opts \\ []) do
    optional_params = %{
      :"end_time" => :query,
      :"duration" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DispatchRoute{}])
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}/
  Update a dispatch route and its associated jobs.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the dispatch route.
  - update_dispatch_route_params (DispatchRoute): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec update_dispatch_route_by_id(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DispatchRoute.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def update_dispatch_route_by_id(connection, access_token, route_id, update_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/fleet/dispatch/routes/#{route_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, update_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end
end
