# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Fleet do
  @moduledoc """
  API calls for all endpoints tagged `Fleet`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /fleet/add_address
  This method adds an address book entry to the specified group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - address_param (InlineObject2): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec add_fleet_address(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject2.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def add_fleet_address(connection, access_token, address_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/add_address")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, address_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /addresses
  Add one or more addresses to the organization

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - addresses (InlineObject): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Address{}, ...]} on success
  {:error, info} on failure
  """
  @spec add_organization_addresses(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject.t, keyword()) :: {:ok, list(SamsaraAPI.Model.Address.t)} | {:error, Tesla.Env.t}
  def add_organization_addresses(connection, access_token, addresses, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/addresses")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, addresses)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.Address{}])
  end

  @doc """
  /fleet/dispatch/routes
  Create a new dispatch route.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - create_dispatch_route_params (DispatchRouteCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec create_dispatch_route(Tesla.Env.client, String.t, SamsaraAPI.Model.DispatchRouteCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def create_dispatch_route(connection, access_token, create_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/drivers/create
  Create a new driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - create_driver_param (DriverForCreate): Driver creation body
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec create_driver(Tesla.Env.client, String.t, SamsaraAPI.Model.DriverForCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def create_driver(connection, access_token, create_driver_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers/create")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_driver_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
  Create a new dispatch route for the driver with driver_id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id (integer()): ID of the driver with the associated routes.
  - create_dispatch_route_params (DispatchRouteCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec create_driver_dispatch_route(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DispatchRouteCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def create_driver_dispatch_route(connection, access_token, driver_id, create_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers/#{driver_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+}/documents
  Create a driver document for the given driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id (integer()): ID of the driver for whom the document is created.
  - create_document_params (DocumentCreate): To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Document{}} on success
  {:error, info} on failure
  """
  @spec create_driver_document(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DocumentCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.Document.t} | {:error, Tesla.Env.t}
  def create_driver_document(connection, access_token, driver_id, create_document_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers/#{driver_id}/documents")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_document_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Document{})
  end

  @doc """
  /fleet/maintenance/dvirs
  Create a new dvir, marking a vehicle or trailer safe or unsafe.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - create_dvir_param (InlineObject12): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DvirBase{}} on success
  {:error, info} on failure
  """
  @spec create_dvir(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject12.t, keyword()) :: {:ok, SamsaraAPI.Model.DvirBase.t} | {:error, Tesla.Env.t}
  def create_dvir(connection, access_token, create_dvir_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/maintenance/dvirs")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dvir_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DvirBase{})
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
  Create a new dispatch route for the vehicle with vehicle_id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id (integer()): ID of the vehicle with the associated routes.
  - create_dispatch_route_params (DispatchRouteCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec create_vehicle_dispatch_route(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DispatchRouteCreate.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def create_vehicle_dispatch_route(connection, access_token, vehicle_id, create_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/vehicles/#{vehicle_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, create_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Deactivate a driver with the given id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deactivate_driver(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deactivate_driver(connection, access_token, driver_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/fleet/drivers/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}/
  Delete a dispatch route and its associated jobs.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the dispatch route.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_dispatch_route_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_dispatch_route_by_id(connection, access_token, route_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/fleet/dispatch/routes/#{route_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /addresses/{addressId}
  Delete an address.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - address_id (integer()): ID of the address/geofence
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_organization_address(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_organization_address(connection, access_token, address_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/addresses/#{address_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /fleet/dispatch/routes
  Fetch all of the dispatch routes for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
    - :end_time (integer()): Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
    - :duration (integer()): Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%DispatchRoute{}, ...]} on success
  {:error, info} on failure
  """
  @spec fetch_all_dispatch_routes(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.DispatchRoute.t)} | {:error, Tesla.Env.t}
  def fetch_all_dispatch_routes(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query,
      :"end_time" => :query,
      :"duration" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DispatchRoute{}])
  end

  @doc """
  /fleet/dispatch/routes/job_updates
  Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
    - :sequence_id (String.t): Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
    - :include (String.t): Optionally set include&#x3D;route to include route object in response payload.
  ## Returns

  {:ok, %SamsaraAPI.Model.AllRouteJobUpdates{}} on success
  {:error, info} on failure
  """
  @spec fetch_all_route_job_updates(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.AllRouteJobUpdates.t} | {:error, Tesla.Env.t}
  def fetch_all_route_job_updates(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query,
      :"sequence_id" => :query,
      :"include" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes/job_updates")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.AllRouteJobUpdates{})
  end

  @doc """
  /fleet/assets/locations
  Fetch current locations of all assets for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2001{}} on success
  {:error, info} on failure
  """
  @spec get_all_asset_current_locations(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def get_all_asset_current_locations(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/assets/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2001{})
  end

  @doc """
  /fleet/assets
  Fetch all of the assets for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse200{}} on success
  {:error, info} on failure
  """
  @spec get_all_assets(Tesla.Env.client, String.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse200.t} | {:error, Tesla.Env.t}
  def get_all_assets(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/assets")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse200{})
  end

  @doc """
  /fleet/drivers/inactive
  Fetch all deactivated drivers for the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Optional group ID if the organization has multiple groups (uncommon).
  ## Returns

  {:ok, [%Driver{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_all_deactivated_drivers(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.Driver.t)} | {:error, Tesla.Env.t}
  def get_all_deactivated_drivers(connection, access_token, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/drivers/inactive")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.Driver{}])
  end

  @doc """
  /fleet/assets/{assetId:[0-9]+}/locations
  Fetch the historical locations for the asset.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - asset_id (integer()): ID of the asset
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_asset_location(Tesla.Env.client, String.t, integer(), integer(), integer(), keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def get_asset_location(connection, access_token, asset_id, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/assets/#{asset_id}/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  /fleet/assets/{assetId:[0-9]+}/reefer
  Fetch the reefer-specific stats of an asset.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - asset_id (integer()): ID of the asset
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.AssetReeferResponse{}} on success
  {:error, info} on failure
  """
  @spec get_asset_reefer(Tesla.Env.client, String.t, integer(), integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.AssetReeferResponse.t} | {:error, Tesla.Env.t}
  def get_asset_reefer(connection, access_token, asset_id, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/assets/#{asset_id}/reefer")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.AssetReeferResponse{})
  end

  @doc """
  /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Fetch deactivated driver by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec get_deactivated_driver_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def get_deactivated_driver_by_id(connection, access_token, driver_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/inactive/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}
  Fetch a dispatch route by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the dispatch route.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec get_dispatch_route_by_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def get_dispatch_route_by_id(connection, access_token, route_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes/#{route_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}/history
  Fetch the history of a dispatch route.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the route with history.
  - opts (KeywordList): [optional] Optional parameters
    - :start_time (integer()): Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
    - :end_time (integer()): Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRouteHistory{}} on success
  {:error, info} on failure
  """
  @spec get_dispatch_route_history(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.DispatchRouteHistory.t} | {:error, Tesla.Env.t}
  def get_dispatch_route_history(connection, access_token, route_id, opts \\ []) do
    optional_params = %{
      :"start_time" => :query,
      :"end_time" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/dispatch/routes/#{route_id}/history")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRouteHistory{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
  Fetch all of the dispatch routes for a given driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id (integer()): ID of the driver with the associated routes.
  - opts (KeywordList): [optional] Optional parameters
    - :end_time (integer()): Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
    - :duration (integer()): Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%DispatchRoute{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_dispatch_routes_by_driver_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, list(SamsaraAPI.Model.DispatchRoute.t)} | {:error, Tesla.Env.t}
  def get_dispatch_routes_by_driver_id(connection, access_token, driver_id, opts \\ []) do
    optional_params = %{
      :"end_time" => :query,
      :"duration" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/drivers/#{driver_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DispatchRoute{}])
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
  Fetch all of the dispatch routes for a given vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id (integer()): ID of the vehicle with the associated routes.
  - opts (KeywordList): [optional] Optional parameters
    - :end_time (integer()): Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
    - :duration (integer()): Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%DispatchRoute{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_dispatch_routes_by_vehicle_id(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, list(SamsaraAPI.Model.DispatchRoute.t)} | {:error, Tesla.Env.t}
  def get_dispatch_routes_by_vehicle_id(connection, access_token, vehicle_id, opts \\ []) do
    optional_params = %{
      :"end_time" => :query,
      :"duration" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/dispatch/routes")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DispatchRoute{}])
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Fetch driver by id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec get_driver_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def get_driver_by_id(connection, access_token, driver_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/drivers/document_types
  Fetch all of the document types.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%DocumentType{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_driver_document_types_by_org_id(Tesla.Env.client, keyword()) :: {:ok, list(SamsaraAPI.Model.DocumentType.t)} | {:error, Tesla.Env.t}
  def get_driver_document_types_by_org_id(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/document_types")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.DocumentType{}])
  end

  @doc """
  /fleet/drivers/documents
  Fetch all of the documents.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
    - :end_ms (integer()): Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
    - :duration_ms (integer()): Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
  ## Returns

  {:ok, [%Document{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_driver_documents_by_org_id(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.Document.t)} | {:error, Tesla.Env.t}
  def get_driver_documents_by_org_id(connection, access_token, opts \\ []) do
    optional_params = %{
      :"endMs" => :query,
      :"durationMs" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/drivers/documents")
    |> add_param(:query, :"access_token", access_token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.Document{}])
  end

  @doc """
  /fleet/drivers/{driverId:[0-9]+}/safety/score
  Fetch the safety score for the driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - driver_id (integer()): ID of the driver
  - access_token (String.t): Samsara API access token.
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DriverSafetyScoreResponse{}} on success
  {:error, info} on failure
  """
  @spec get_driver_safety_score(Tesla.Env.client, integer(), String.t, integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.DriverSafetyScoreResponse.t} | {:error, Tesla.Env.t}
  def get_driver_safety_score(connection, driver_id, access_token, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/drivers/#{driver_id}/safety/score")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DriverSafetyScoreResponse{})
  end

  @doc """
  /fleet/maintenance/dvirs
  Get DVIRs for the org within provided time constraints

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - end_ms (integer()): time in millis until the last dvir log.
  - duration_ms (integer()): time in millis which corresponds to the duration before the end_ms.
  - opts (KeywordList): [optional] Optional parameters
    - :group_id (integer()): Group ID to query.
  ## Returns

  {:ok, %SamsaraAPI.Model.DvirListResponse{}} on success
  {:error, info} on failure
  """
  @spec get_dvirs(Tesla.Env.client, String.t, integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.DvirListResponse.t} | {:error, Tesla.Env.t}
  def get_dvirs(connection, access_token, end_ms, duration_ms, opts \\ []) do
    optional_params = %{
      :"group_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/maintenance/dvirs")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"end_ms", end_ms)
    |> add_param(:query, :"duration_ms", duration_ms)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DvirListResponse{})
  end

  @doc """
  /fleet/drivers
  Get all the drivers for the specified group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - group_drivers_param (InlineObject3): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DriversResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_drivers(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject3.t, keyword()) :: {:ok, SamsaraAPI.Model.DriversResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_drivers(connection, access_token, group_drivers_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, group_drivers_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DriversResponse{})
  end

  @doc """
  /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
  Get summarized daily HOS charts for a specified driver.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id (integer()): ID of the driver with HOS logs.
  - hos_logs_param (InlineObject6): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DriverDailyLogResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_drivers_hos_daily_logs(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.InlineObject6.t, keyword()) :: {:ok, SamsaraAPI.Model.DriverDailyLogResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_drivers_hos_daily_logs(connection, access_token, driver_id, hos_logs_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/drivers/#{driver_id}/hos_daily_logs")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, hos_logs_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DriverDailyLogResponse{})
  end

  @doc """
  /fleet/drivers/summary
  Get the distance and time each driver in an organization has driven in a given time period.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - drivers_summary_param (InlineObject5): 
  - opts (KeywordList): [optional] Optional parameters
    - :snap_to_day_bounds (boolean()): Snap query result to HOS day boundaries.
  ## Returns

  {:ok, %SamsaraAPI.Model.DriversSummaryResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_drivers_summary(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject5.t, keyword()) :: {:ok, SamsaraAPI.Model.DriversSummaryResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_drivers_summary(connection, access_token, drivers_summary_param, opts \\ []) do
    optional_params = %{
      :"snap_to_day_bounds" => :query
    }
    %{}
    |> method(:post)
    |> url("/fleet/drivers/summary")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, drivers_summary_param)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DriversSummaryResponse{})
  end

  @doc """
  /fleet/hos_authentication_logs
  Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - hos_authentication_logs_param (InlineObject7): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.HosAuthenticationLogsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_hos_authentication_logs(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject7.t, keyword()) :: {:ok, SamsaraAPI.Model.HosAuthenticationLogsResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_hos_authentication_logs(connection, access_token, hos_authentication_logs_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/hos_authentication_logs")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, hos_authentication_logs_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.HosAuthenticationLogsResponse{})
  end

  @doc """
  /fleet/hos_logs
  Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - hos_logs_param (InlineObject8): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.HosLogsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_hos_logs(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject8.t, keyword()) :: {:ok, SamsaraAPI.Model.HosLogsResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_hos_logs(connection, access_token, hos_logs_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/hos_logs")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, hos_logs_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.HosLogsResponse{})
  end

  @doc """
  /fleet/hos_logs_summary
  Get the current HOS status for all drivers in the group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - hos_logs_param (InlineObject9): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.HosLogsSummaryResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_hos_logs_summary(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject9.t, keyword()) :: {:ok, SamsaraAPI.Model.HosLogsSummaryResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_hos_logs_summary(connection, access_token, hos_logs_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/hos_logs_summary")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, hos_logs_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.HosLogsSummaryResponse{})
  end

  @doc """
  /fleet/locations
  Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - group_param (InlineObject11): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2003{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_locations(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject11.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2003.t} | {:error, Tesla.Env.t}
  def get_fleet_locations(connection, access_token, group_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, group_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2003{})
  end

  @doc """
  /fleet/maintenance/list
  Get list of the vehicles with any engine faults or check light data.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - group_param (InlineObject13): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2004{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_maintenance_list(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject13.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2004.t} | {:error, Tesla.Env.t}
  def get_fleet_maintenance_list(connection, access_token, group_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/maintenance/list")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, group_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2004{})
  end

  @doc """
  /fleet/trips
  Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - trips_param (InlineObject15): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.TripResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_trips(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject15.t, keyword()) :: {:ok, SamsaraAPI.Model.TripResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_trips(connection, access_token, trips_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/trips")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, trips_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.TripResponse{})
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Gets a specific vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id_or_external_id (String.t): ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.FleetVehicleResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fleet_vehicle(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SamsaraAPI.Model.FleetVehicleResponse.t} | {:error, Tesla.Env.t}
  def get_fleet_vehicle(connection, access_token, vehicle_id_or_external_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.FleetVehicleResponse{})
  end

  @doc """
  /addresses/{addressId}
  Fetch an address by its id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - address_id (integer()): ID of the address/geofence
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Address{}} on success
  {:error, info} on failure
  """
  @spec get_organization_address(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.Address.t} | {:error, Tesla.Env.t}
  def get_organization_address(connection, access_token, address_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/addresses/#{address_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Address{})
  end

  @doc """
  /addresses
  Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Address{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_organization_addresses(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.Address.t)} | {:error, Tesla.Env.t}
  def get_organization_addresses(connection, access_token, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/addresses")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.Address{}])
  end

  @doc """
  /contacts/{contact_id}
  Fetch a contact by its id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - contact_id (integer()): ID of the contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Contact{}} on success
  {:error, info} on failure
  """
  @spec get_organization_contact(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.Contact.t} | {:error, Tesla.Env.t}
  def get_organization_contact(connection, access_token, contact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contacts/#{contact_id}")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Contact{})
  end

  @doc """
  /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
  Fetch harsh event details for a vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - vehicle_id (integer()): ID of the vehicle
  - access_token (String.t): Samsara API access token.
  - timestamp (integer()): Timestamp in milliseconds representing the timestamp of a harsh event.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.VehicleHarshEventResponse{}} on success
  {:error, info} on failure
  """
  @spec get_vehicle_harsh_event(Tesla.Env.client, integer(), String.t, integer(), keyword()) :: {:ok, SamsaraAPI.Model.VehicleHarshEventResponse.t} | {:error, Tesla.Env.t}
  def get_vehicle_harsh_event(connection, vehicle_id, access_token, timestamp, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/safety/harsh_event")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"timestamp", timestamp)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.VehicleHarshEventResponse{})
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+}/locations
  Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id (integer()): ID of the vehicle with the associated routes.
  - start_ms (integer()): Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
  - end_ms (integer()): Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%FleetVehicleLocation{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_vehicle_locations(Tesla.Env.client, String.t, integer(), integer(), integer(), keyword()) :: {:ok, list(SamsaraAPI.Model.FleetVehicleLocation.t)} | {:error, Tesla.Env.t}
  def get_vehicle_locations(connection, access_token, vehicle_id, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.FleetVehicleLocation{}])
  end

  @doc """
  /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
  Fetch the safety score for the vehicle.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - vehicle_id (integer()): ID of the vehicle
  - access_token (String.t): Samsara API access token.
  - start_ms (integer()): Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
  - end_ms (integer()): Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.VehicleSafetyScoreResponse{}} on success
  {:error, info} on failure
  """
  @spec get_vehicle_safety_score(Tesla.Env.client, integer(), String.t, integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.VehicleSafetyScoreResponse.t} | {:error, Tesla.Env.t}
  def get_vehicle_safety_score(connection, vehicle_id, access_token, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/#{vehicle_id}/safety/score")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.VehicleSafetyScoreResponse{})
  end

  @doc """
  /fleet/vehicles/stats
  Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - start_ms (integer()): Time in Unix epoch milliseconds for the start of the query.
  - end_ms (integer()): Time in Unix epoch milliseconds for the end of the query.
  - opts (KeywordList): [optional] Optional parameters
    - :series (String.t): Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2
    - :tag_ids (String.t): Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3
    - :starting_after (String.t): Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.
    - :ending_before (String.t): Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.
    - :limit (integer()): Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2005{}} on success
  {:error, info} on failure
  """
  @spec get_vehicle_stats(Tesla.Env.client, String.t, integer(), integer(), keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2005.t} | {:error, Tesla.Env.t}
  def get_vehicle_stats(connection, access_token, start_ms, end_ms, opts \\ []) do
    optional_params = %{
      :"series" => :query,
      :"tagIds" => :query,
      :"startingAfter" => :query,
      :"endingBefore" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/stats")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2005{})
  end

  @doc """
  /fleet/vehicles/locations
  Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - start_ms (integer()): Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)
  - end_ms (integer()): Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_vehicles_locations(Tesla.Env.client, String.t, integer(), integer(), keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def get_vehicles_locations(connection, access_token, start_ms, end_ms, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/fleet/vehicles/locations")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:query, :"startMs", start_ms)
    |> add_param(:query, :"endMs", end_ms)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  /contacts
  Fetch all contacts for the organization.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Contact{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_contacts(Tesla.Env.client, String.t, keyword()) :: {:ok, list(SamsaraAPI.Model.Contact.t)} | {:error, Tesla.Env.t}
  def list_contacts(connection, access_token, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contacts")
    |> add_param(:query, :"access_token", access_token)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%SamsaraAPI.Model.Contact{}])
  end

  @doc """
  /fleet/list
  Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - group_param (InlineObject10): 
  - opts (KeywordList): [optional] Optional parameters
    - :starting_after (String.t): Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.
    - :ending_before (String.t): Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.
    - :limit (integer()): Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2002{}} on success
  {:error, info} on failure
  """
  @spec list_fleet(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject10.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def list_fleet(connection, access_token, group_param, opts \\ []) do
    optional_params = %{
      :"startingAfter" => :query,
      :"endingBefore" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:post)
    |> url("/fleet/list")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, group_param)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2002{})
  end

  @doc """
  /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_id_or_external_id (String.t): ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
  - data (InlineObject16): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.FleetVehicleResponse{}} on success
  {:error, info} on failure
  """
  @spec patch_fleet_vehicle(Tesla.Env.client, String.t, String.t, SamsaraAPI.Model.InlineObject16.t, keyword()) :: {:ok, SamsaraAPI.Model.FleetVehicleResponse.t} | {:error, Tesla.Env.t}
  def patch_fleet_vehicle(connection, access_token, vehicle_id_or_external_id, data, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/fleet/vehicles/#{vehicle_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, data)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.FleetVehicleResponse{})
  end

  @doc """
  /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
  Reactivate the inactive driver having id.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - driver_id_or_external_id (String.t): ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
  - reactivate_driver_param (InlineObject4): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.Driver{}} on success
  {:error, info} on failure
  """
  @spec reactivate_driver_by_id(Tesla.Env.client, String.t, String.t, SamsaraAPI.Model.InlineObject4.t, keyword()) :: {:ok, SamsaraAPI.Model.Driver.t} | {:error, Tesla.Env.t}
  def reactivate_driver_by_id(connection, access_token, driver_id_or_external_id, reactivate_driver_param, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/fleet/drivers/inactive/#{driver_id_or_external_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, reactivate_driver_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.Driver{})
  end

  @doc """
  /fleet/dispatch/routes/{route_id:[0-9]+}/
  Update a dispatch route and its associated jobs.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - route_id (integer()): ID of the dispatch route.
  - update_dispatch_route_params (DispatchRoute): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DispatchRoute{}} on success
  {:error, info} on failure
  """
  @spec update_dispatch_route_by_id(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.DispatchRoute.t, keyword()) :: {:ok, SamsaraAPI.Model.DispatchRoute.t} | {:error, Tesla.Env.t}
  def update_dispatch_route_by_id(connection, access_token, route_id, update_dispatch_route_params, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/fleet/dispatch/routes/#{route_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, update_dispatch_route_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DispatchRoute{})
  end

  @doc """
  /addresses/{addressId}
  Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - address_id (integer()): ID of the address/geofence
  - address (InlineObject1): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update_organization_address(Tesla.Env.client, String.t, integer(), SamsaraAPI.Model.InlineObject1.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_organization_address(connection, access_token, address_id, address, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/addresses/#{address_id}")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, address)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  /fleet/set_data
  This method enables the mutation of metadata for vehicles in the Samsara Cloud.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - vehicle_update_param (InlineObject14): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update_vehicles(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject14.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_vehicles(connection, access_token, vehicle_update_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fleet/set_data")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, vehicle_update_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
