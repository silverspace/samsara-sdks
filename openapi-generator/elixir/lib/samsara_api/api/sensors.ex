# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SamsaraAPI.Api.Sensors do
  @moduledoc """
  API calls for all endpoints tagged `Sensors`.
  """

  alias SamsaraAPI.Connection
  import SamsaraAPI.RequestBuilder


  @doc """
  /sensors/list
  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - group_param (InlineObject23): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.InlineResponse2008{}} on success
  {:error, info} on failure
  """
  @spec get_sensors(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject23.t, keyword()) :: {:ok, SamsaraAPI.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def get_sensors(connection, access_token, group_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/sensors/list")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, group_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.InlineResponse2008{})
  end

  @doc """
  /sensors/cargo
  Get cargo monitor status (empty / full) for requested sensors.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - sensor_param (InlineObject19): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.CargoResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sensors_cargo(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject19.t, keyword()) :: {:ok, SamsaraAPI.Model.CargoResponse.t} | {:error, Tesla.Env.t}
  def get_sensors_cargo(connection, access_token, sensor_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/sensors/cargo")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, sensor_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.CargoResponse{})
  end

  @doc """
  /sensors/door
  Get door monitor status (closed / open) for requested sensors.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - sensor_param (InlineObject20): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.DoorResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sensors_door(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject20.t, keyword()) :: {:ok, SamsaraAPI.Model.DoorResponse.t} | {:error, Tesla.Env.t}
  def get_sensors_door(connection, access_token, sensor_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/sensors/door")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, sensor_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.DoorResponse{})
  end

  @doc """
  /sensors/history
  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - history_param (InlineObject21): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.SensorHistoryResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sensors_history(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject21.t, keyword()) :: {:ok, SamsaraAPI.Model.SensorHistoryResponse.t} | {:error, Tesla.Env.t}
  def get_sensors_history(connection, access_token, history_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/sensors/history")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, history_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.SensorHistoryResponse{})
  end

  @doc """
  /sensors/humidity
  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - sensor_param (InlineObject22): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.HumidityResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sensors_humidity(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject22.t, keyword()) :: {:ok, SamsaraAPI.Model.HumidityResponse.t} | {:error, Tesla.Env.t}
  def get_sensors_humidity(connection, access_token, sensor_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/sensors/humidity")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, sensor_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.HumidityResponse{})
  end

  @doc """
  /sensors/temperature
  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.

  ## Parameters

  - connection (SamsaraAPI.Connection): Connection to server
  - access_token (String.t): Samsara API access token.
  - sensor_param (InlineObject24): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SamsaraAPI.Model.TemperatureResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sensors_temperature(Tesla.Env.client, String.t, SamsaraAPI.Model.InlineObject24.t, keyword()) :: {:ok, SamsaraAPI.Model.TemperatureResponse.t} | {:error, Tesla.Env.t}
  def get_sensors_temperature(connection, access_token, sensor_param, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/sensors/temperature")
    |> add_param(:query, :"access_token", access_token)
    |> add_param(:body, :body, sensor_param)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SamsaraAPI.Model.TemperatureResponse{})
  end
end
