//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class UsersAPI: APIBase {
    /**
     /users/{userId:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter userId: (path) ID of the user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUserById(accessToken accessToken: String, userId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteUserByIdWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /users/{userId:[0-9]+}
     - DELETE /users/{userId}
     - Remove a user from the organization.     - parameter accessToken: (query) Samsara API access token. 
     - parameter userId: (path) ID of the user. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUserByIdWithRequestBuilder(accessToken accessToken: String, userId: Int64) -> RequestBuilder<Void> {
        var path = "/users/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /users/{userId:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter userId: (path) ID of the user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserById(accessToken accessToken: String, userId: Int64, completion: ((data: User?, error: ErrorType?) -> Void)) {
        getUserByIdWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /users/{userId:[0-9]+}
     - GET /users/{userId}
     - Get a user.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter userId: (path) ID of the user. 

     - returns: RequestBuilder<User> 
     */
    public class func getUserByIdWithRequestBuilder(accessToken accessToken: String, userId: Int64) -> RequestBuilder<User> {
        var path = "/users/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<User>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /user_roles
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listUserRoles(accessToken accessToken: String, completion: ((data: [UserRole]?, error: ErrorType?) -> Void)) {
        listUserRolesWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /user_roles
     - GET /user_roles
     - Get all roles in the organization.     - examples: [{contentType=application/json, example={
  "name" : "Full Admin",
  "id" : "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 

     - returns: RequestBuilder<[UserRole]> 
     */
    public class func listUserRolesWithRequestBuilder(accessToken accessToken: String) -> RequestBuilder<[UserRole]> {
        let path = "/user_roles"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[UserRole]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /users
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listUsers(accessToken accessToken: String, completion: ((data: [User]?, error: ErrorType?) -> Void)) {
        listUsersWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /users
     - GET /users
     - List all users in the organization.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 

     - returns: RequestBuilder<[User]> 
     */
    public class func listUsersWithRequestBuilder(accessToken accessToken: String) -> RequestBuilder<[User]> {
        let path = "/users"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[User]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
