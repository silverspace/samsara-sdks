//
// FleetAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class FleetAPI: APIBase {
    /**
     /fleet/add_address
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFleetAddress(accessToken accessToken: String, addressParam: InlineObject2, completion: ((error: ErrorType?) -> Void)) {
        addFleetAddressWithRequestBuilder(accessToken: accessToken, addressParam: addressParam).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /fleet/add_address
     - POST /fleet/add_address
     - This method adds an address book entry to the specified group.     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressParam: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func addFleetAddressWithRequestBuilder(accessToken accessToken: String, addressParam: InlineObject2) -> RequestBuilder<Void> {
        let path = "/fleet/add_address"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = addressParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /addresses
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addresses: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrganizationAddresses(accessToken accessToken: String, addresses: InlineObject, completion: ((data: [Address]?, error: ErrorType?) -> Void)) {
        addOrganizationAddressesWithRequestBuilder(accessToken: accessToken, addresses: addresses).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /addresses
     - POST /addresses
     - Add one or more addresses to the organization     - examples: [{contentType=application/json, example={
  "notes" : "Delivery site 1",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "latitude" : 37.765363,
        "longitude" : -122.403098
      }, {
        "latitude" : 37.765363,
        "longitude" : -122.403098
      } ]
    },
    "circle" : {
      "latitude" : 37.765363,
      "radiusMeters" : 250,
      "longitude" : -122.403098
    }
  },
  "name" : "Samsara HQ",
  "id" : 123,
  "contacts" : [ {
    "firstName" : "Jane",
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "id" : 123,
    "email" : "jane.jones@yahoo.com"
  }, {
    "firstName" : "Jane",
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "id" : 123,
    "email" : "jane.jones@yahoo.com"
  } ],
  "tags" : [ {
    "name" : "Broken Vehicles",
    "id" : 12345
  }, {
    "name" : "Broken Vehicles",
    "id" : 12345
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addresses: (body)  

     - returns: RequestBuilder<[Address]> 
     */
    public class func addOrganizationAddressesWithRequestBuilder(accessToken accessToken: String, addresses: InlineObject) -> RequestBuilder<[Address]> {
        let path = "/addresses"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = addresses.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Address]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDispatchRoute(accessToken accessToken: String, createDispatchRouteParams: DispatchRouteCreate, completion: ((data: DispatchRoute?, error: ErrorType?) -> Void)) {
        createDispatchRouteWithRequestBuilder(accessToken: accessToken, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/dispatch/routes
     - POST /fleet/dispatch/routes
     - Create a new dispatch route.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    public class func createDispatchRouteWithRequestBuilder(accessToken accessToken: String, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        let path = "/fleet/dispatch/routes"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDispatchRouteParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispatchRoute>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/create
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDriverParam: (body) Driver creation body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDriver(accessToken accessToken: String, createDriverParam: DriverForCreate, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        createDriverWithRequestBuilder(accessToken: accessToken, createDriverParam: createDriverParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/create
     - POST /fleet/drivers/create
     - Create a new driver.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDriverParam: (body) Driver creation body 

     - returns: RequestBuilder<Driver> 
     */
    public class func createDriverWithRequestBuilder(accessToken accessToken: String, createDriverParam: DriverForCreate) -> RequestBuilder<Driver> {
        let path = "/fleet/drivers/create"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDriverParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDriverDispatchRoute(accessToken accessToken: String, driverId: Int64, createDispatchRouteParams: DispatchRouteCreate, completion: ((data: DispatchRoute?, error: ErrorType?) -> Void)) {
        createDriverDispatchRouteWithRequestBuilder(accessToken: accessToken, driverId: driverId, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     - POST /fleet/drivers/{driverId}/dispatch/routes
     - Create a new dispatch route for the driver with driver_id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    public class func createDriverDispatchRouteWithRequestBuilder(accessToken accessToken: String, driverId: Int64, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/drivers/{driverId}/dispatch/routes"
        path = path.stringByReplacingOccurrencesOfString("{driver_id}", withString: "\(driverId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDispatchRouteParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispatchRoute>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/documents
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver for whom the document is created. 
     - parameter createDocumentParams: (body) To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDriverDocument(accessToken accessToken: String, driverId: Int64, createDocumentParams: DocumentCreate, completion: ((data: Document?, error: ErrorType?) -> Void)) {
        createDriverDocumentWithRequestBuilder(accessToken: accessToken, driverId: driverId, createDocumentParams: createDocumentParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/documents
     - POST /fleet/drivers/{driverId}/documents
     - Create a driver document for the given driver.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver for whom the document is created. 
     - parameter createDocumentParams: (body) To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_. 

     - returns: RequestBuilder<Document> 
     */
    public class func createDriverDocumentWithRequestBuilder(accessToken accessToken: String, driverId: Int64, createDocumentParams: DocumentCreate) -> RequestBuilder<Document> {
        var path = "/fleet/drivers/{driverId}/documents"
        path = path.stringByReplacingOccurrencesOfString("{driver_id}", withString: "\(driverId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDocumentParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Document>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/maintenance/dvirs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDvirParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDvir(accessToken accessToken: String, createDvirParam: InlineObject12, completion: ((data: DvirBase?, error: ErrorType?) -> Void)) {
        createDvirWithRequestBuilder(accessToken: accessToken, createDvirParam: createDvirParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/maintenance/dvirs
     - POST /fleet/maintenance/dvirs
     - Create a new dvir, marking a vehicle or trailer safe or unsafe.     - examples: [{contentType=application/json, example={
  "defectsNeedNotBeCorrected" : false,
  "defectsCorrected" : true,
  "vehicleCondition" : "SATISFACTORY",
  "inspectionType" : "pre trip",
  "trailerDefects" : [ {
    "comment" : "Air Compressor not working",
    "defectType" : "Air Compressor"
  }, {
    "comment" : "Air Compressor not working",
    "defectType" : "Air Compressor"
  } ],
  "mechanicOrAgentSignature" : {
    "mechanicUserId" : 14849,
    "driverId" : 2581,
    "name" : "John Smith",
    "signedAt" : 12535500000,
    "type" : "driver",
    "email" : "j.smith@yahoo.com",
    "username" : "jsmith"
  },
  "mechanicNotes" : "The vehicle is now safe.",
  "vehicle" : {
    "name" : "Storer's vehicle 19",
    "id" : 19
  },
  "authorSignature" : {
    "mechanicUserId" : 14849,
    "driverId" : 2581,
    "name" : "John Smith",
    "signedAt" : 12535500000,
    "type" : "driver",
    "email" : "j.smith@yahoo.com",
    "username" : "jsmith"
  },
  "odometerMiles" : 49912,
  "vehicleDefects" : [ {
    "comment" : "Air Compressor not working",
    "defectType" : "Air Compressor"
  }, {
    "comment" : "Air Compressor not working",
    "defectType" : "Air Compressor"
  } ],
  "nextDriverSignature" : {
    "driverId" : 2581,
    "name" : "John Smith",
    "signedAt" : 12535500000,
    "type" : "driver",
    "email" : "j.smith@yahoo.com",
    "username" : "jsmith"
  },
  "trailerName" : "Storer's Trailer 19",
  "id" : 19,
  "trailerId" : 19,
  "timeMs" : 1453449599999
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDvirParam: (body)  

     - returns: RequestBuilder<DvirBase> 
     */
    public class func createDvirWithRequestBuilder(accessToken accessToken: String, createDvirParam: InlineObject12) -> RequestBuilder<DvirBase> {
        let path = "/fleet/maintenance/dvirs"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDvirParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DvirBase>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter createDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createVehicleDispatchRoute(accessToken accessToken: String, vehicleId: Int64, createDispatchRouteParams: DispatchRouteCreate, completion: ((data: DispatchRoute?, error: ErrorType?) -> Void)) {
        createVehicleDispatchRouteWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, createDispatchRouteParams: createDispatchRouteParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     - POST /fleet/vehicles/{vehicleId}/dispatch/routes
     - Create a new dispatch route for the vehicle with vehicle_id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter createDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    public class func createVehicleDispatchRouteWithRequestBuilder(accessToken accessToken: String, vehicleId: Int64, createDispatchRouteParams: DispatchRouteCreate) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/vehicles/{vehicleId}/dispatch/routes"
        path = path.stringByReplacingOccurrencesOfString("{vehicle_id}", withString: "\(vehicleId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDispatchRouteParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispatchRoute>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deactivateDriver(accessToken accessToken: String, driverIdOrExternalId: String, completion: ((error: ErrorType?) -> Void)) {
        deactivateDriverWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - DELETE /fleet/drivers/{driverIdOrExternalId}
     - Deactivate a driver with the given id.     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Void> 
     */
    public class func deactivateDriverWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Void> {
        var path = "/fleet/drivers/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteDispatchRouteById(accessToken accessToken: String, routeId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     - DELETE /fleet/dispatch/routes/{routeId}
     - Delete a dispatch route and its associated jobs.     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteDispatchRouteByIdWithRequestBuilder(accessToken accessToken: String, routeId: Int64) -> RequestBuilder<Void> {
        var path = "/fleet/dispatch/routes/{routeId}"
        path = path.stringByReplacingOccurrencesOfString("{route_id}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /addresses/{addressId}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrganizationAddress(accessToken accessToken: String, addressId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteOrganizationAddressWithRequestBuilder(accessToken: accessToken, addressId: addressId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /addresses/{addressId}
     - DELETE /addresses/{addressId}
     - Delete an address.     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrganizationAddressWithRequestBuilder(accessToken accessToken: String, addressId: Int64) -> RequestBuilder<Void> {
        var path = "/addresses/{addressId}"
        path = path.stringByReplacingOccurrencesOfString("{addressId}", withString: "\(addressId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func fetchAllDispatchRoutes(accessToken accessToken: String, groupId: Int64? = nil, endTime: Int64? = nil, duration: Int64? = nil, completion: ((data: [DispatchRoute]?, error: ErrorType?) -> Void)) {
        fetchAllDispatchRoutesWithRequestBuilder(accessToken: accessToken, groupId: groupId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/dispatch/routes
     - GET /fleet/dispatch/routes
     - Fetch all of the dispatch routes for the group.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<[DispatchRoute]> 
     */
    public class func fetchAllDispatchRoutesWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<[DispatchRoute]> {
        let path = "/fleet/dispatch/routes"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "duration": duration?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DispatchRoute]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/job_updates
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter sequenceId: (query) Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours. (optional)
     - parameter include: (query) Optionally set include&#x3D;route to include route object in response payload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func fetchAllRouteJobUpdates(accessToken accessToken: String, groupId: Int64? = nil, sequenceId: String? = nil, include: String? = nil, completion: ((data: AllRouteJobUpdates?, error: ErrorType?) -> Void)) {
        fetchAllRouteJobUpdatesWithRequestBuilder(accessToken: accessToken, groupId: groupId, sequenceId: sequenceId, include: include).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/dispatch/routes/job_updates
     - GET /fleet/dispatch/routes/job_updates
     - Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID     - examples: [{contentType=application/json, example={
  "sequence_id" : "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0=",
  "job_updates" : [ {
    "changed_at_ms" : 1462881998034,
    "route_id" : 556,
    "job_id" : 773,
    "prev_job_state" : "JobState_EnRoute",
    "job_state" : "JobState_Arrived"
  }, {
    "changed_at_ms" : 1462881998034,
    "route_id" : 556,
    "job_id" : 773,
    "prev_job_state" : "JobState_EnRoute",
    "job_state" : "JobState_Arrived"
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter sequenceId: (query) Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours. (optional)
     - parameter include: (query) Optionally set include&#x3D;route to include route object in response payload. (optional)

     - returns: RequestBuilder<AllRouteJobUpdates> 
     */
    public class func fetchAllRouteJobUpdatesWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil, sequenceId: String? = nil, include: String? = nil) -> RequestBuilder<AllRouteJobUpdates> {
        let path = "/fleet/dispatch/routes/job_updates"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON(),
            "sequence_id": sequenceId,
            "include": include
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AllRouteJobUpdates>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/assets/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllAssetCurrentLocations(accessToken accessToken: String, groupId: Int64? = nil, completion: ((data: InlineResponse2001?, error: ErrorType?) -> Void)) {
        getAllAssetCurrentLocationsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/assets/locations
     - GET /fleet/assets/locations
     - Fetch current locations of all assets for the group.     - examples: [{contentType=application/json, example={
  "assets" : [ {
    "engineHours" : 104,
    "name" : "Trailer 123",
    "location" : [ {
      "latitude" : 37.0,
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "timeMs" : 12314151
    }, {
      "latitude" : 37.0,
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "timeMs" : 12314151
    } ],
    "id" : 1,
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  }, {
    "engineHours" : 104,
    "name" : "Trailer 123",
    "location" : [ {
      "latitude" : 37.0,
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "timeMs" : 12314151
    }, {
      "latitude" : 37.0,
      "speedMilesPerHour" : 35.0,
      "location" : "525 York, San Francisco, CA",
      "longitude" : -122.7,
      "timeMs" : 12314151
    } ],
    "id" : 1,
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    public class func getAllAssetCurrentLocationsWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/fleet/assets/locations"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/assets
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllAssets(accessToken accessToken: String, groupId: Int64? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        getAllAssetsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/assets
     - GET /fleet/assets
     - Fetch all of the assets for the group.     - examples: [{contentType=application/json, example={
  "assets" : [ {
    "assetSerialNumber" : "SNTEST123",
    "engineHours" : 104,
    "name" : "Trailer 123",
    "id" : 1,
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  }, {
    "assetSerialNumber" : "SNTEST123",
    "engineHours" : 104,
    "name" : "Trailer 123",
    "id" : 1,
    "cable" : [ {
      "assetType" : "Reefer (Thermo King)"
    }, {
      "assetType" : "Reefer (Thermo King)"
    } ]
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func getAllAssetsWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/fleet/assets"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllDeactivatedDrivers(accessToken accessToken: String, groupId: Int64? = nil, completion: ((data: [Driver]?, error: ErrorType?) -> Void)) {
        getAllDeactivatedDriversWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/inactive
     - GET /fleet/drivers/inactive
     - Fetch all deactivated drivers for the group.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<[Driver]> 
     */
    public class func getAllDeactivatedDriversWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil) -> RequestBuilder<[Driver]> {
        let path = "/fleet/drivers/inactive"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Driver]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/assets/{assetId:[0-9]+}/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAssetLocation(accessToken accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64, completion: ((data: [AnyObject]?, error: ErrorType?) -> Void)) {
        getAssetLocationWithRequestBuilder(accessToken: accessToken, assetId: assetId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/assets/{assetId:[0-9]+}/locations
     - GET /fleet/assets/{assetId}/locations
     - Fetch the historical locations for the asset.     - examples: [{contentType=application/json, example="{}", statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<[AnyObject]> 
     */
    public class func getAssetLocationWithRequestBuilder(accessToken accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<[AnyObject]> {
        var path = "/fleet/assets/{assetId}/locations"
        path = path.stringByReplacingOccurrencesOfString("{asset_id}", withString: "\(assetId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[AnyObject]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/assets/{assetId:[0-9]+}/reefer
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAssetReefer(accessToken accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64, completion: ((data: AssetReeferResponse?, error: ErrorType?) -> Void)) {
        getAssetReeferWithRequestBuilder(accessToken: accessToken, assetId: assetId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/assets/{assetId:[0-9]+}/reefer
     - GET /fleet/assets/{assetId}/reefer
     - Fetch the reefer-specific stats of an asset.     - examples: [{contentType=application/json, example={
  "reeferStats" : {
    "fuelPercentage" : [ {
      "fuelPercentage" : 99,
      "changedAtMs" : 1453449599999
    }, {
      "fuelPercentage" : 99,
      "changedAtMs" : 1453449599999
    } ],
    "powerStatus" : [ {
      "changedAtMs" : 1453449599999,
      "status" : "Active (Continuous)"
    }, {
      "changedAtMs" : 1453449599999,
      "status" : "Active (Continuous)"
    } ],
    "engineHours" : [ {
      "engineHours" : 1200,
      "changedAtMs" : 1453449599999
    }, {
      "engineHours" : 1200,
      "changedAtMs" : 1453449599999
    } ],
    "setPoint" : [ {
      "tempInMilliC" : 31110,
      "changedAtMs" : 1453449599999
    }, {
      "tempInMilliC" : 31110,
      "changedAtMs" : 1453449599999
    } ],
    "returnAirTemp" : [ {
      "tempInMilliC" : 31110,
      "changedAtMs" : 1453449599999
    }, {
      "tempInMilliC" : 31110,
      "changedAtMs" : 1453449599999
    } ],
    "alarms" : [ {
      "alarms" : [ {
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "description" : "Check Return Air Sensor",
        "alarmCode" : 102
      }, {
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "description" : "Check Return Air Sensor",
        "alarmCode" : 102
      } ],
      "changedAtMs" : 1453449599999
    }, {
      "alarms" : [ {
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "description" : "Check Return Air Sensor",
        "alarmCode" : 102
      }, {
        "severity" : 1,
        "operatorAction" : "Check and repair at end of trip",
        "description" : "Check Return Air Sensor",
        "alarmCode" : 102
      } ],
      "changedAtMs" : 1453449599999
    } ]
  },
  "name" : "Reefer 123",
  "id" : 1,
  "assetType" : "Reefer (Thermo King)"
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<AssetReeferResponse> 
     */
    public class func getAssetReeferWithRequestBuilder(accessToken accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<AssetReeferResponse> {
        var path = "/fleet/assets/{assetId}/reefer"
        path = path.stringByReplacingOccurrencesOfString("{asset_id}", withString: "\(assetId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AssetReeferResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDeactivatedDriverById(accessToken accessToken: String, driverIdOrExternalId: String, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        getDeactivatedDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/drivers/inactive/{driverIdOrExternalId}
     - Fetch deactivated driver by id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Driver> 
     */
    public class func getDeactivatedDriverByIdWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/inactive/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispatchRouteById(accessToken accessToken: String, routeId: Int64, completion: ((data: DispatchRoute?, error: ErrorType?) -> Void)) {
        getDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}
     - GET /fleet/dispatch/routes/{routeId}
     - Fetch a dispatch route by id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 

     - returns: RequestBuilder<DispatchRoute> 
     */
    public class func getDispatchRouteByIdWithRequestBuilder(accessToken accessToken: String, routeId: Int64) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/dispatch/routes/{routeId}"
        path = path.stringByReplacingOccurrencesOfString("{route_id}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispatchRoute>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/history
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the route with history. 
     - parameter startTime: (query) Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0. (optional)
     - parameter endTime: (query) Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispatchRouteHistory(accessToken accessToken: String, routeId: Int64, startTime: Int64? = nil, endTime: Int64? = nil, completion: ((data: DispatchRouteHistory?, error: ErrorType?) -> Void)) {
        getDispatchRouteHistoryWithRequestBuilder(accessToken: accessToken, routeId: routeId, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/history
     - GET /fleet/dispatch/routes/{routeId}/history
     - Fetch the history of a dispatch route.     - examples: [{contentType=application/json, example={
  "history" : [ {
    "changed_at_ms" : 1499411220000
  }, {
    "changed_at_ms" : 1499411220000
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the route with history. 
     - parameter startTime: (query) Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0. (optional)
     - parameter endTime: (query) Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs. (optional)

     - returns: RequestBuilder<DispatchRouteHistory> 
     */
    public class func getDispatchRouteHistoryWithRequestBuilder(accessToken accessToken: String, routeId: Int64, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<DispatchRouteHistory> {
        var path = "/fleet/dispatch/routes/{routeId}/history"
        path = path.stringByReplacingOccurrencesOfString("{route_id}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispatchRouteHistory>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispatchRoutesByDriverId(accessToken accessToken: String, driverId: Int64, endTime: Int64? = nil, duration: Int64? = nil, completion: ((data: [DispatchRoute]?, error: ErrorType?) -> Void)) {
        getDispatchRoutesByDriverIdWithRequestBuilder(accessToken: accessToken, driverId: driverId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
     - GET /fleet/drivers/{driverId}/dispatch/routes
     - Fetch all of the dispatch routes for a given driver.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<[DispatchRoute]> 
     */
    public class func getDispatchRoutesByDriverIdWithRequestBuilder(accessToken accessToken: String, driverId: Int64, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<[DispatchRoute]> {
        var path = "/fleet/drivers/{driverId}/dispatch/routes"
        path = path.stringByReplacingOccurrencesOfString("{driver_id}", withString: "\(driverId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "end_time": endTime?.encodeToJSON(),
            "duration": duration?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DispatchRoute]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispatchRoutesByVehicleId(accessToken accessToken: String, vehicleId: Int64, endTime: Int64? = nil, duration: Int64? = nil, completion: ((data: [DispatchRoute]?, error: ErrorType?) -> Void)) {
        getDispatchRoutesByVehicleIdWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, endTime: endTime, duration: duration).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
     - GET /fleet/vehicles/{vehicleId}/dispatch/routes
     - Fetch all of the dispatch routes for a given vehicle.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter endTime: (query) Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now. (optional)
     - parameter duration: (query) Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<[DispatchRoute]> 
     */
    public class func getDispatchRoutesByVehicleIdWithRequestBuilder(accessToken accessToken: String, vehicleId: Int64, endTime: Int64? = nil, duration: Int64? = nil) -> RequestBuilder<[DispatchRoute]> {
        var path = "/fleet/vehicles/{vehicleId}/dispatch/routes"
        path = path.stringByReplacingOccurrencesOfString("{vehicle_id}", withString: "\(vehicleId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "end_time": endTime?.encodeToJSON(),
            "duration": duration?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DispatchRoute]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDriverById(accessToken accessToken: String, driverIdOrExternalId: String, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        getDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/drivers/{driverIdOrExternalId}
     - Fetch driver by id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Driver> 
     */
    public class func getDriverByIdWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/document_types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDriverDocumentTypesByOrgId(completion: ((data: [DocumentType]?, error: ErrorType?) -> Void)) {
        getDriverDocumentTypesByOrgIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/document_types
     - GET /fleet/drivers/document_types
     - Fetch all of the document types.     - examples: [{contentType=application/json, example={
  "fieldTypes" : [ null, null ],
  "name" : "Fuel Receipt",
  "uuid" : "4aff772c-a7bb-45e6-8e41-6a53e34feb83",
  "orgId" : 773
}, statusCode=200}]

     - returns: RequestBuilder<[DocumentType]> 
     */
    public class func getDriverDocumentTypesByOrgIdWithRequestBuilder() -> RequestBuilder<[DocumentType]> {
        let path = "/fleet/drivers/document_types"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DocumentType]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     /fleet/drivers/documents
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now. (optional)
     - parameter durationMs: (query) Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDriverDocumentsByOrgId(accessToken accessToken: String, endMs: Int64? = nil, durationMs: Int64? = nil, completion: ((data: [Document]?, error: ErrorType?) -> Void)) {
        getDriverDocumentsByOrgIdWithRequestBuilder(accessToken: accessToken, endMs: endMs, durationMs: durationMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/documents
     - GET /fleet/drivers/documents
     - Fetch all of the documents.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now. (optional)
     - parameter durationMs: (query) Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours. (optional)

     - returns: RequestBuilder<[Document]> 
     */
    public class func getDriverDocumentsByOrgIdWithRequestBuilder(accessToken accessToken: String, endMs: Int64? = nil, durationMs: Int64? = nil) -> RequestBuilder<[Document]> {
        let path = "/fleet/drivers/documents"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "endMs": endMs?.encodeToJSON(),
            "durationMs": durationMs?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Document]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driverId:[0-9]+}/safety/score
     
     - parameter driverId: (path) ID of the driver 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDriverSafetyScore(driverId driverId: Int64, accessToken: String, startMs: Int64, endMs: Int64, completion: ((data: DriverSafetyScoreResponse?, error: ErrorType?) -> Void)) {
        getDriverSafetyScoreWithRequestBuilder(driverId: driverId, accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driverId:[0-9]+}/safety/score
     - GET /fleet/drivers/{driverId}/safety/score
     - Fetch the safety score for the driver.     - examples: [{contentType=application/json, example={
  "crashCount" : 0,
  "driverId" : 1234,
  "harshAccelCount" : 1,
  "harshEvents" : [ {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  }, {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  } ],
  "totalDistanceDrivenMeters" : 291836,
  "safetyScore" : 97,
  "totalHarshEventCount" : 3,
  "totalTimeDrivenMs" : 19708293,
  "harshTurningCount" : 0,
  "timeOverSpeedLimitMs" : 3769,
  "harshBrakingCount" : 2,
  "safetyScoreRank" : "26"
}, statusCode=200}]
     - parameter driverId: (path) ID of the driver 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<DriverSafetyScoreResponse> 
     */
    public class func getDriverSafetyScoreWithRequestBuilder(driverId driverId: Int64, accessToken: String, startMs: Int64, endMs: Int64) -> RequestBuilder<DriverSafetyScoreResponse> {
        var path = "/fleet/drivers/{driverId}/safety/score"
        path = path.stringByReplacingOccurrencesOfString("{driverId}", withString: "\(driverId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DriverSafetyScoreResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/maintenance/dvirs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) time in millis until the last dvir log. 
     - parameter durationMs: (query) time in millis which corresponds to the duration before the end_ms. 
     - parameter groupId: (query) Group ID to query. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDvirs(accessToken accessToken: String, endMs: Int32, durationMs: Int32, groupId: Int32? = nil, completion: ((data: DvirListResponse?, error: ErrorType?) -> Void)) {
        getDvirsWithRequestBuilder(accessToken: accessToken, endMs: endMs, durationMs: durationMs, groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/maintenance/dvirs
     - GET /fleet/maintenance/dvirs
     - Get DVIRs for the org within provided time constraints     - examples: [{contentType=application/json, example={
  "dvirs" : [ {
    "defectsNeedNotBeCorrected" : false,
    "defectsCorrected" : true,
    "vehicleCondition" : "SATISFACTORY",
    "inspectionType" : "pre trip",
    "trailerDefects" : [ {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    }, {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    } ],
    "mechanicOrAgentSignature" : {
      "mechanicUserId" : 14849,
      "driverId" : 2581,
      "name" : "John Smith",
      "signedAt" : 12535500000,
      "type" : "driver",
      "email" : "j.smith@yahoo.com",
      "username" : "jsmith"
    },
    "mechanicNotes" : "The vehicle is now safe.",
    "vehicle" : {
      "name" : "Storer's vehicle 19",
      "id" : 19
    },
    "authorSignature" : {
      "mechanicUserId" : 14849,
      "driverId" : 2581,
      "name" : "John Smith",
      "signedAt" : 12535500000,
      "type" : "driver",
      "email" : "j.smith@yahoo.com",
      "username" : "jsmith"
    },
    "odometerMiles" : 49912,
    "vehicleDefects" : [ {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    }, {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    } ],
    "nextDriverSignature" : {
      "driverId" : 2581,
      "name" : "John Smith",
      "signedAt" : 12535500000,
      "type" : "driver",
      "email" : "j.smith@yahoo.com",
      "username" : "jsmith"
    },
    "trailerName" : "Storer's Trailer 19",
    "id" : 19,
    "trailerId" : 19,
    "timeMs" : 1453449599999
  }, {
    "defectsNeedNotBeCorrected" : false,
    "defectsCorrected" : true,
    "vehicleCondition" : "SATISFACTORY",
    "inspectionType" : "pre trip",
    "trailerDefects" : [ {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    }, {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    } ],
    "mechanicOrAgentSignature" : {
      "mechanicUserId" : 14849,
      "driverId" : 2581,
      "name" : "John Smith",
      "signedAt" : 12535500000,
      "type" : "driver",
      "email" : "j.smith@yahoo.com",
      "username" : "jsmith"
    },
    "mechanicNotes" : "The vehicle is now safe.",
    "vehicle" : {
      "name" : "Storer's vehicle 19",
      "id" : 19
    },
    "authorSignature" : {
      "mechanicUserId" : 14849,
      "driverId" : 2581,
      "name" : "John Smith",
      "signedAt" : 12535500000,
      "type" : "driver",
      "email" : "j.smith@yahoo.com",
      "username" : "jsmith"
    },
    "odometerMiles" : 49912,
    "vehicleDefects" : [ {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    }, {
      "comment" : "Air Compressor not working",
      "defectType" : "Air Compressor"
    } ],
    "nextDriverSignature" : {
      "driverId" : 2581,
      "name" : "John Smith",
      "signedAt" : 12535500000,
      "type" : "driver",
      "email" : "j.smith@yahoo.com",
      "username" : "jsmith"
    },
    "trailerName" : "Storer's Trailer 19",
    "id" : 19,
    "trailerId" : 19,
    "timeMs" : 1453449599999
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter endMs: (query) time in millis until the last dvir log. 
     - parameter durationMs: (query) time in millis which corresponds to the duration before the end_ms. 
     - parameter groupId: (query) Group ID to query. (optional)

     - returns: RequestBuilder<DvirListResponse> 
     */
    public class func getDvirsWithRequestBuilder(accessToken accessToken: String, endMs: Int32, durationMs: Int32, groupId: Int32? = nil) -> RequestBuilder<DvirListResponse> {
        let path = "/fleet/maintenance/dvirs"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "end_ms": endMs.encodeToJSON(),
            "duration_ms": durationMs.encodeToJSON(),
            "group_id": groupId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DvirListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupDriversParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetDrivers(accessToken accessToken: String, groupDriversParam: InlineObject3, completion: ((data: DriversResponse?, error: ErrorType?) -> Void)) {
        getFleetDriversWithRequestBuilder(accessToken: accessToken, groupDriversParam: groupDriversParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers
     - POST /fleet/drivers
     - Get all the drivers for the specified group.     - examples: [{contentType=application/json, example={
  "drivers" : [ null, null ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupDriversParam: (body)  

     - returns: RequestBuilder<DriversResponse> 
     */
    public class func getFleetDriversWithRequestBuilder(accessToken accessToken: String, groupDriversParam: InlineObject3) -> RequestBuilder<DriversResponse> {
        let path = "/fleet/drivers"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = groupDriversParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DriversResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with HOS logs. 
     - parameter hosLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetDriversHosDailyLogs(accessToken accessToken: String, driverId: Int64, hosLogsParam: InlineObject6, completion: ((data: DriverDailyLogResponse?, error: ErrorType?) -> Void)) {
        getFleetDriversHosDailyLogsWithRequestBuilder(accessToken: accessToken, driverId: driverId, hosLogsParam: hosLogsParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
     - POST /fleet/drivers/{driverId}/hos_daily_logs
     - Get summarized daily HOS charts for a specified driver.     - examples: [{contentType=application/json, example={
  "days" : [ {
    "certifiedAtMs" : 0,
    "endMs" : 1473836400000,
    "startMs" : 1473750000000,
    "trailerIds" : [ 10293, 192933 ],
    "activeHours" : 5.4,
    "distanceMiles" : 123.24,
    "activeMs" : 691200,
    "certified" : true,
    "vehicleIds" : [ 192319, 12958 ]
  }, {
    "certifiedAtMs" : 0,
    "endMs" : 1473836400000,
    "startMs" : 1473750000000,
    "trailerIds" : [ 10293, 192933 ],
    "activeHours" : 5.4,
    "distanceMiles" : 123.24,
    "activeMs" : 691200,
    "certified" : true,
    "vehicleIds" : [ 192319, 12958 ]
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverId: (path) ID of the driver with HOS logs. 
     - parameter hosLogsParam: (body)  

     - returns: RequestBuilder<DriverDailyLogResponse> 
     */
    public class func getFleetDriversHosDailyLogsWithRequestBuilder(accessToken accessToken: String, driverId: Int64, hosLogsParam: InlineObject6) -> RequestBuilder<DriverDailyLogResponse> {
        var path = "/fleet/drivers/{driverId}/hos_daily_logs"
        path = path.stringByReplacingOccurrencesOfString("{driver_id}", withString: "\(driverId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = hosLogsParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DriverDailyLogResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/summary
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driversSummaryParam: (body)  
     - parameter snapToDayBounds: (query) Snap query result to HOS day boundaries. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetDriversSummary(accessToken accessToken: String, driversSummaryParam: InlineObject5, snapToDayBounds: Bool? = nil, completion: ((data: DriversSummaryResponse?, error: ErrorType?) -> Void)) {
        getFleetDriversSummaryWithRequestBuilder(accessToken: accessToken, driversSummaryParam: driversSummaryParam, snapToDayBounds: snapToDayBounds).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/summary
     - POST /fleet/drivers/summary
     - Get the distance and time each driver in an organization has driven in a given time period.     - examples: [{contentType=application/json, example={
  "Summaries" : [ {
    "driverId" : 444,
    "distanceMiles" : 123.24,
    "driveMs" : 21600000,
    "activeMs" : 43200000,
    "driverUsername" : "fjacobs",
    "groupId" : 111,
    "driverName" : "Fred Jacobs",
    "onDutyMs" : 21600000
  }, {
    "driverId" : 444,
    "distanceMiles" : 123.24,
    "driveMs" : 21600000,
    "activeMs" : 43200000,
    "driverUsername" : "fjacobs",
    "groupId" : 111,
    "driverName" : "Fred Jacobs",
    "onDutyMs" : 21600000
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driversSummaryParam: (body)  
     - parameter snapToDayBounds: (query) Snap query result to HOS day boundaries. (optional)

     - returns: RequestBuilder<DriversSummaryResponse> 
     */
    public class func getFleetDriversSummaryWithRequestBuilder(accessToken accessToken: String, driversSummaryParam: InlineObject5, snapToDayBounds: Bool? = nil) -> RequestBuilder<DriversSummaryResponse> {
        let path = "/fleet/drivers/summary"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = driversSummaryParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DriversSummaryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/hos_authentication_logs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosAuthenticationLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetHosAuthenticationLogs(accessToken accessToken: String, hosAuthenticationLogsParam: InlineObject7, completion: ((data: HosAuthenticationLogsResponse?, error: ErrorType?) -> Void)) {
        getFleetHosAuthenticationLogsWithRequestBuilder(accessToken: accessToken, hosAuthenticationLogsParam: hosAuthenticationLogsParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/hos_authentication_logs
     - POST /fleet/hos_authentication_logs
     - Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.     - examples: [{contentType=application/json, example={
  "authenticationLogs" : [ {
    "actionType" : "signin",
    "address" : "123 Main St., Ahwatukee, Arizona 85044",
    "city" : "Ahwatukee",
    "happenedAtMs" : 1462881998034,
    "addressName" : "Garage Number 3",
    "state" : "Arizona"
  }, {
    "actionType" : "signin",
    "address" : "123 Main St., Ahwatukee, Arizona 85044",
    "city" : "Ahwatukee",
    "happenedAtMs" : 1462881998034,
    "addressName" : "Garage Number 3",
    "state" : "Arizona"
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosAuthenticationLogsParam: (body)  

     - returns: RequestBuilder<HosAuthenticationLogsResponse> 
     */
    public class func getFleetHosAuthenticationLogsWithRequestBuilder(accessToken accessToken: String, hosAuthenticationLogsParam: InlineObject7) -> RequestBuilder<HosAuthenticationLogsResponse> {
        let path = "/fleet/hos_authentication_logs"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = hosAuthenticationLogsParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<HosAuthenticationLogsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/hos_logs
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetHosLogs(accessToken accessToken: String, hosLogsParam: InlineObject8, completion: ((data: HosLogsResponse?, error: ErrorType?) -> Void)) {
        getFleetHosLogsWithRequestBuilder(accessToken: accessToken, hosLogsParam: hosLogsParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/hos_logs
     - POST /fleet/hos_logs
     - Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.     - examples: [{contentType=application/json, example={
  "logs" : [ {
    "locLng" : -98.502888123,
    "logStartMs" : 1462881998034,
    "driverId" : 444,
    "statusType" : "OFF_DUTY",
    "locCity" : "Ahwatukee",
    "groupId" : 101,
    "locName" : "McLean Site A",
    "locLat" : 23.413702345,
    "remark" : "Lunch Break",
    "locState" : "Arizona",
    "vehicleId" : 112,
    "codriverIds" : [ 445, 445 ]
  }, {
    "locLng" : -98.502888123,
    "logStartMs" : 1462881998034,
    "driverId" : 444,
    "statusType" : "OFF_DUTY",
    "locCity" : "Ahwatukee",
    "groupId" : 101,
    "locName" : "McLean Site A",
    "locLat" : 23.413702345,
    "remark" : "Lunch Break",
    "locState" : "Arizona",
    "vehicleId" : 112,
    "codriverIds" : [ 445, 445 ]
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  

     - returns: RequestBuilder<HosLogsResponse> 
     */
    public class func getFleetHosLogsWithRequestBuilder(accessToken accessToken: String, hosLogsParam: InlineObject8) -> RequestBuilder<HosLogsResponse> {
        let path = "/fleet/hos_logs"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = hosLogsParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<HosLogsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/hos_logs_summary
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetHosLogsSummary(accessToken accessToken: String, hosLogsParam: InlineObject9, completion: ((data: HosLogsSummaryResponse?, error: ErrorType?) -> Void)) {
        getFleetHosLogsSummaryWithRequestBuilder(accessToken: accessToken, hosLogsParam: hosLogsParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/hos_logs_summary
     - POST /fleet/hos_logs_summary
     - Get the current HOS status for all drivers in the group.     - examples: [{contentType=application/json, example={
  "drivers" : [ {
    "timeUntilBreak" : 28800000,
    "vehicleName" : "Vehicle 1",
    "drivingInViolationToday" : 39600000,
    "driverId" : 444,
    "cycleRemaining" : 252000000,
    "driverName" : "Fred Jacobs",
    "dutyStatus" : "OFF_DUTY",
    "cycleTomorrow" : 252000000,
    "shiftDriveRemaining" : 39600000,
    "timeInCurrentStatus" : 5000,
    "drivingInViolationCycle" : 50400000,
    "shiftRemaining" : 50400000
  }, {
    "timeUntilBreak" : 28800000,
    "vehicleName" : "Vehicle 1",
    "drivingInViolationToday" : 39600000,
    "driverId" : 444,
    "cycleRemaining" : 252000000,
    "driverName" : "Fred Jacobs",
    "dutyStatus" : "OFF_DUTY",
    "cycleTomorrow" : 252000000,
    "shiftDriveRemaining" : 39600000,
    "timeInCurrentStatus" : 5000,
    "drivingInViolationCycle" : 50400000,
    "shiftRemaining" : 50400000
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter hosLogsParam: (body)  

     - returns: RequestBuilder<HosLogsSummaryResponse> 
     */
    public class func getFleetHosLogsSummaryWithRequestBuilder(accessToken accessToken: String, hosLogsParam: InlineObject9) -> RequestBuilder<HosLogsSummaryResponse> {
        let path = "/fleet/hos_logs_summary"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = hosLogsParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<HosLogsSummaryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetLocations(accessToken accessToken: String, groupParam: InlineObject11, completion: ((data: InlineResponse2003?, error: ErrorType?) -> Void)) {
        getFleetLocationsWithRequestBuilder(accessToken: accessToken, groupParam: groupParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/locations
     - POST /fleet/locations
     - Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.     - examples: [{contentType=application/json, example={
  "groupId" : 101,
  "vehicles" : [ {
    "heading" : 246.42,
    "latitude" : 123.456,
    "name" : "Truck A7",
    "location" : "1 Main St, Dallas, TX",
    "odometerMeters" : 71774705,
    "vin" : "JTNBB46KX73011966",
    "id" : 112,
    "onTrip" : true,
    "time" : 1462881998034,
    "speed" : 64.37,
    "longitude" : 32.897
  }, {
    "heading" : 246.42,
    "latitude" : 123.456,
    "name" : "Truck A7",
    "location" : "1 Main St, Dallas, TX",
    "odometerMeters" : 71774705,
    "vin" : "JTNBB46KX73011966",
    "id" : 112,
    "onTrip" : true,
    "time" : 1462881998034,
    "speed" : 64.37,
    "longitude" : 32.897
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  

     - returns: RequestBuilder<InlineResponse2003> 
     */
    public class func getFleetLocationsWithRequestBuilder(accessToken accessToken: String, groupParam: InlineObject11) -> RequestBuilder<InlineResponse2003> {
        let path = "/fleet/locations"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = groupParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/maintenance/list
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetMaintenanceList(accessToken accessToken: String, groupParam: InlineObject13, completion: ((data: InlineResponse2004?, error: ErrorType?) -> Void)) {
        getFleetMaintenanceListWithRequestBuilder(accessToken: accessToken, groupParam: groupParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/maintenance/list
     - POST /fleet/maintenance/list
     - Get list of the vehicles with any engine faults or check light data.     - examples: [{contentType=application/json, example={
  "vehicles" : [ {
    "j1939" : {
      "checkEngineLight" : {
        "protectIsOn" : true,
        "stopIsOn" : true,
        "warningIsOn" : true,
        "emissionsIsOn" : true
      },
      "diagnosticTroubleCodes" : [ {
        "spnDescription" : "spnDescription",
        "fmiText" : "fmiText",
        "spnId" : 0,
        "occurrenceCount" : 6,
        "txId" : 1,
        "fmiId" : 5
      }, {
        "spnDescription" : "spnDescription",
        "fmiText" : "fmiText",
        "spnId" : 0,
        "occurrenceCount" : 6,
        "txId" : 1,
        "fmiId" : 5
      } ]
    },
    "passenger" : {
      "checkEngineLight" : {
        "isOn" : true
      },
      "diagnosticTroubleCodes" : [ {
        "dtcShortCode" : "dtcShortCode",
        "dtcId" : 5,
        "dtcDescription" : "dtcDescription"
      }, {
        "dtcShortCode" : "dtcShortCode",
        "dtcId" : 5,
        "dtcDescription" : "dtcDescription"
      } ]
    },
    "id" : 112
  }, {
    "j1939" : {
      "checkEngineLight" : {
        "protectIsOn" : true,
        "stopIsOn" : true,
        "warningIsOn" : true,
        "emissionsIsOn" : true
      },
      "diagnosticTroubleCodes" : [ {
        "spnDescription" : "spnDescription",
        "fmiText" : "fmiText",
        "spnId" : 0,
        "occurrenceCount" : 6,
        "txId" : 1,
        "fmiId" : 5
      }, {
        "spnDescription" : "spnDescription",
        "fmiText" : "fmiText",
        "spnId" : 0,
        "occurrenceCount" : 6,
        "txId" : 1,
        "fmiId" : 5
      } ]
    },
    "passenger" : {
      "checkEngineLight" : {
        "isOn" : true
      },
      "diagnosticTroubleCodes" : [ {
        "dtcShortCode" : "dtcShortCode",
        "dtcId" : 5,
        "dtcDescription" : "dtcDescription"
      }, {
        "dtcShortCode" : "dtcShortCode",
        "dtcId" : 5,
        "dtcDescription" : "dtcDescription"
      } ]
    },
    "id" : 112
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  

     - returns: RequestBuilder<InlineResponse2004> 
     */
    public class func getFleetMaintenanceListWithRequestBuilder(accessToken accessToken: String, groupParam: InlineObject13) -> RequestBuilder<InlineResponse2004> {
        let path = "/fleet/maintenance/list"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = groupParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/trips
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tripsParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetTrips(accessToken accessToken: String, tripsParam: InlineObject15, completion: ((data: TripResponse?, error: ErrorType?) -> Void)) {
        getFleetTripsWithRequestBuilder(accessToken: accessToken, tripsParam: tripsParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/trips
     - POST /fleet/trips
     - Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.     - examples: [{contentType=application/json, example={
  "trips" : [ {
    "endOdometer" : 210430500,
    "distanceMeters" : 2500,
    "endMs" : 1462881998034,
    "startMs" : 1462878398034,
    "fuelConsumedMl" : 75700,
    "startAddress" : "Ramen Tatsunoya",
    "startCoordinates" : {
      "latitude" : 29.443702345,
      "longitude" : -98.502888123
    },
    "endCoordinates" : {
      "latitude" : 23.413702345,
      "longitude" : -91.502888123
    },
    "startOdometer" : 210430450,
    "driverId" : 719,
    "startLocation" : "16 N Fair Oaks Ave, Pasadena, CA 91103",
    "tollMeters" : 32000,
    "endAddress" : "Winchell's Donuts House",
    "endLocation" : "571 S Lake Ave, Pasadena, CA 91101"
  }, {
    "endOdometer" : 210430500,
    "distanceMeters" : 2500,
    "endMs" : 1462881998034,
    "startMs" : 1462878398034,
    "fuelConsumedMl" : 75700,
    "startAddress" : "Ramen Tatsunoya",
    "startCoordinates" : {
      "latitude" : 29.443702345,
      "longitude" : -98.502888123
    },
    "endCoordinates" : {
      "latitude" : 23.413702345,
      "longitude" : -91.502888123
    },
    "startOdometer" : 210430450,
    "driverId" : 719,
    "startLocation" : "16 N Fair Oaks Ave, Pasadena, CA 91103",
    "tollMeters" : 32000,
    "endAddress" : "Winchell's Donuts House",
    "endLocation" : "571 S Lake Ave, Pasadena, CA 91101"
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tripsParam: (body)  

     - returns: RequestBuilder<TripResponse> 
     */
    public class func getFleetTripsWithRequestBuilder(accessToken accessToken: String, tripsParam: InlineObject15) -> RequestBuilder<TripResponse> {
        let path = "/fleet/trips"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = tripsParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TripResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFleetVehicle(accessToken accessToken: String, vehicleIdOrExternalId: String, completion: ((data: FleetVehicleResponse?, error: ErrorType?) -> Void)) {
        getFleetVehicleWithRequestBuilder(accessToken: accessToken, vehicleIdOrExternalId: vehicleIdOrExternalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/vehicles/{vehicleIdOrExternalId}
     - Gets a specific vehicle.     - examples: [{contentType=application/json, example={
  "harshAccelSetting" : "Heavy",
  "externalIds" : {
    "maintenanceId" : "ABFS18600"
  },
  "name" : "Truck A7",
  "vehicleInfo" : {
    "year" : 1997,
    "model" : "Odyssey",
    "vin" : "1FUJA6BD31LJ09646",
    "make" : "Honda"
  },
  "id" : 112
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<FleetVehicleResponse> 
     */
    public class func getFleetVehicleWithRequestBuilder(accessToken accessToken: String, vehicleIdOrExternalId: String) -> RequestBuilder<FleetVehicleResponse> {
        var path = "/fleet/vehicles/{vehicleIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{vehicle_id_or_external_id}", withString: "\(vehicleIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FleetVehicleResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /addresses/{addressId}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrganizationAddress(accessToken accessToken: String, addressId: Int64, completion: ((data: Address?, error: ErrorType?) -> Void)) {
        getOrganizationAddressWithRequestBuilder(accessToken: accessToken, addressId: addressId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /addresses/{addressId}
     - GET /addresses/{addressId}
     - Fetch an address by its id.     - examples: [{contentType=application/json, example={
  "notes" : "Delivery site 1",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "latitude" : 37.765363,
        "longitude" : -122.403098
      }, {
        "latitude" : 37.765363,
        "longitude" : -122.403098
      } ]
    },
    "circle" : {
      "latitude" : 37.765363,
      "radiusMeters" : 250,
      "longitude" : -122.403098
    }
  },
  "name" : "Samsara HQ",
  "id" : 123,
  "contacts" : [ {
    "firstName" : "Jane",
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "id" : 123,
    "email" : "jane.jones@yahoo.com"
  }, {
    "firstName" : "Jane",
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "id" : 123,
    "email" : "jane.jones@yahoo.com"
  } ],
  "tags" : [ {
    "name" : "Broken Vehicles",
    "id" : 12345
  }, {
    "name" : "Broken Vehicles",
    "id" : 12345
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 

     - returns: RequestBuilder<Address> 
     */
    public class func getOrganizationAddressWithRequestBuilder(accessToken accessToken: String, addressId: Int64) -> RequestBuilder<Address> {
        var path = "/addresses/{addressId}"
        path = path.stringByReplacingOccurrencesOfString("{addressId}", withString: "\(addressId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Address>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /addresses
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrganizationAddresses(accessToken accessToken: String, completion: ((data: [Address]?, error: ErrorType?) -> Void)) {
        getOrganizationAddressesWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /addresses
     - GET /addresses
     - Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.     - examples: [{contentType=application/json, example={
  "notes" : "Delivery site 1",
  "formattedAddress" : "350 Rhode Island St, San Francisco, CA",
  "geofence" : {
    "polygon" : {
      "vertices" : [ {
        "latitude" : 37.765363,
        "longitude" : -122.403098
      }, {
        "latitude" : 37.765363,
        "longitude" : -122.403098
      } ]
    },
    "circle" : {
      "latitude" : 37.765363,
      "radiusMeters" : 250,
      "longitude" : -122.403098
    }
  },
  "name" : "Samsara HQ",
  "id" : 123,
  "contacts" : [ {
    "firstName" : "Jane",
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "id" : 123,
    "email" : "jane.jones@yahoo.com"
  }, {
    "firstName" : "Jane",
    "lastName" : "Jones",
    "phone" : "111-222-3344",
    "id" : 123,
    "email" : "jane.jones@yahoo.com"
  } ],
  "tags" : [ {
    "name" : "Broken Vehicles",
    "id" : 12345
  }, {
    "name" : "Broken Vehicles",
    "id" : 12345
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 

     - returns: RequestBuilder<[Address]> 
     */
    public class func getOrganizationAddressesWithRequestBuilder(accessToken accessToken: String) -> RequestBuilder<[Address]> {
        let path = "/addresses"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Address]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /contacts/{contact_id}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter contactId: (path) ID of the contact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrganizationContact(accessToken accessToken: String, contactId: Int64, completion: ((data: Contact?, error: ErrorType?) -> Void)) {
        getOrganizationContactWithRequestBuilder(accessToken: accessToken, contactId: contactId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /contacts/{contact_id}
     - GET /contacts/{contactId}
     - Fetch a contact by its id.     - examples: [{contentType=application/json, example={
  "firstName" : "Jane",
  "lastName" : "Jones",
  "phone" : "111-222-3344",
  "id" : 123,
  "email" : "jane.jones@yahoo.com"
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter contactId: (path) ID of the contact 

     - returns: RequestBuilder<Contact> 
     */
    public class func getOrganizationContactWithRequestBuilder(accessToken accessToken: String, contactId: Int64) -> RequestBuilder<Contact> {
        var path = "/contacts/{contactId}"
        path = path.stringByReplacingOccurrencesOfString("{contact_id}", withString: "\(contactId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Contact>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
     
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter timestamp: (query) Timestamp in milliseconds representing the timestamp of a harsh event. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVehicleHarshEvent(vehicleId vehicleId: Int64, accessToken: String, timestamp: Int64, completion: ((data: VehicleHarshEventResponse?, error: ErrorType?) -> Void)) {
        getVehicleHarshEventWithRequestBuilder(vehicleId: vehicleId, accessToken: accessToken, timestamp: timestamp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
     - GET /fleet/vehicles/{vehicleId}/safety/harsh_event
     - Fetch harsh event details for a vehicle.     - examples: [{contentType=application/json, example={
  "downloadForwardVideoUrl" : "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?...",
  "downloadInwardVideoUrl" : "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...",
  "incidentReportUrl" : "https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984",
  "harshEventType" : "Harsh Braking",
  "location" : {
    "address" : "350 Rhode Island St, San Francisco, CA",
    "latitude" : "33.07614328",
    "longitude" : "-96.14907287"
  },
  "downloadTrackedInwardVideoUrl" : "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...",
  "isDistracted" : true
}, statusCode=200}]
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter timestamp: (query) Timestamp in milliseconds representing the timestamp of a harsh event. 

     - returns: RequestBuilder<VehicleHarshEventResponse> 
     */
    public class func getVehicleHarshEventWithRequestBuilder(vehicleId vehicleId: Int64, accessToken: String, timestamp: Int64) -> RequestBuilder<VehicleHarshEventResponse> {
        var path = "/fleet/vehicles/{vehicleId}/safety/harsh_event"
        path = path.stringByReplacingOccurrencesOfString("{vehicleId}", withString: "\(vehicleId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "timestamp": timestamp.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VehicleHarshEventResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVehicleLocations(accessToken accessToken: String, vehicleId: Int64, startMs: Int64, endMs: Int64, completion: ((data: [FleetVehicleLocation]?, error: ErrorType?) -> Void)) {
        getVehicleLocationsWithRequestBuilder(accessToken: accessToken, vehicleId: vehicleId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+}/locations
     - GET /fleet/vehicles/{vehicleId}/locations
     - Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.     - examples: [{contentType=application/json, example={
  "latitude" : 37.2,
  "speedMilesPerHour" : 35.2,
  "location" : "525 York, San Francisco, CA",
  "longitude" : -122.5,
  "timeMs" : 1535586471332
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleId: (path) ID of the vehicle with the associated routes. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour) 

     - returns: RequestBuilder<[FleetVehicleLocation]> 
     */
    public class func getVehicleLocationsWithRequestBuilder(accessToken accessToken: String, vehicleId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<[FleetVehicleLocation]> {
        var path = "/fleet/vehicles/{vehicleId}/locations"
        path = path.stringByReplacingOccurrencesOfString("{vehicle_id}", withString: "\(vehicleId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[FleetVehicleLocation]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
     
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVehicleSafetyScore(vehicleId vehicleId: Int64, accessToken: String, startMs: Int64, endMs: Int64, completion: ((data: VehicleSafetyScoreResponse?, error: ErrorType?) -> Void)) {
        getVehicleSafetyScoreWithRequestBuilder(vehicleId: vehicleId, accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
     - GET /fleet/vehicles/{vehicleId}/safety/score
     - Fetch the safety score for the vehicle.     - examples: [{contentType=application/json, example={
  "crashCount" : 0,
  "harshAccelCount" : 1,
  "harshEvents" : [ {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  }, {
    "harshEventType" : "Harsh Braking",
    "vehicleId" : 212014918086169,
    "timestampMs" : 1535590776000
  } ],
  "totalDistanceDrivenMeters" : 291836,
  "safetyScore" : 97,
  "totalHarshEventCount" : 3,
  "totalTimeDrivenMs" : 19708293,
  "vehicleId" : 4321,
  "harshTurningCount" : 0,
  "timeOverSpeedLimitMs" : 3769,
  "harshBrakingCount" : 2,
  "safetyScoreRank" : "26"
}, statusCode=200}]
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 

     - returns: RequestBuilder<VehicleSafetyScoreResponse> 
     */
    public class func getVehicleSafetyScoreWithRequestBuilder(vehicleId vehicleId: Int64, accessToken: String, startMs: Int64, endMs: Int64) -> RequestBuilder<VehicleSafetyScoreResponse> {
        var path = "/fleet/vehicles/{vehicleId}/safety/score"
        path = path.stringByReplacingOccurrencesOfString("{vehicleId}", withString: "\(vehicleId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VehicleSafetyScoreResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter series
     */
    public enum Series_getVehicleStats: String { 
        case Enginestate = "engineState"
        case Auxinput1 = "auxInput1"
        case Auxinput2 = "auxInput2"
    }

    /**
     /fleet/vehicles/stats
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query. 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query. 
     - parameter series: (query) Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2 (optional)
     - parameter tagIds: (query) Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3 (optional)
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVehicleStats(accessToken accessToken: String, startMs: Int32, endMs: Int32, series: Series_getVehicleStats? = nil, tagIds: String? = nil, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil, completion: ((data: InlineResponse2005?, error: ErrorType?) -> Void)) {
        getVehicleStatsWithRequestBuilder(accessToken: accessToken, startMs: startMs, endMs: endMs, series: series, tagIds: tagIds, startingAfter: startingAfter, endingBefore: endingBefore, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/stats
     - GET /fleet/vehicles/stats
     - Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.     - examples: [{contentType=application/json, example={
  "pagination" : {
    "hasPrevPage" : true,
    "hasNextPage" : true,
    "endCursor" : "MTU5MTEzNjA2OTU0MzQ3",
    "startCursor" : "MTU5MTEzNjA2OTU0MzQ3"
  },
  "vehicleStats" : [ {
    "engineState" : [ {
      "value" : "Running",
      "timeMs" : 1546542978484
    }, {
      "value" : "Running",
      "timeMs" : 1546542978484
    } ],
    "auxInput2" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1546542978484
      }, {
        "value" : true,
        "timeMs" : 1546542978484
      } ],
      "name" : "Boom"
    },
    "vehicleId" : 112,
    "auxInput1" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1546542978484
      }, {
        "value" : true,
        "timeMs" : 1546542978484
      } ],
      "name" : "Boom"
    }
  }, {
    "engineState" : [ {
      "value" : "Running",
      "timeMs" : 1546542978484
    }, {
      "value" : "Running",
      "timeMs" : 1546542978484
    } ],
    "auxInput2" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1546542978484
      }, {
        "value" : true,
        "timeMs" : 1546542978484
      } ],
      "name" : "Boom"
    },
    "vehicleId" : 112,
    "auxInput1" : {
      "values" : [ {
        "value" : true,
        "timeMs" : 1546542978484
      }, {
        "value" : true,
        "timeMs" : 1546542978484
      } ],
      "name" : "Boom"
    }
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query. 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query. 
     - parameter series: (query) Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2 (optional)
     - parameter tagIds: (query) Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3 (optional)
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)

     - returns: RequestBuilder<InlineResponse2005> 
     */
    public class func getVehicleStatsWithRequestBuilder(accessToken accessToken: String, startMs: Int32, endMs: Int32, series: Series_getVehicleStats? = nil, tagIds: String? = nil, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil) -> RequestBuilder<InlineResponse2005> {
        let path = "/fleet/vehicles/stats"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON(),
            "series": series?.rawValue,
            "tagIds": tagIds,
            "startingAfter": startingAfter,
            "endingBefore": endingBefore,
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/locations
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVehiclesLocations(accessToken accessToken: String, startMs: Int32, endMs: Int32, completion: ((data: [AnyObject]?, error: ErrorType?) -> Void)) {
        getVehiclesLocationsWithRequestBuilder(accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/locations
     - GET /fleet/vehicles/locations
     - Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.     - examples: [{contentType=application/json, example="{}", statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes) 
     - parameter endMs: (query) Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes) 

     - returns: RequestBuilder<[AnyObject]> 
     */
    public class func getVehiclesLocationsWithRequestBuilder(accessToken accessToken: String, startMs: Int32, endMs: Int32) -> RequestBuilder<[AnyObject]> {
        let path = "/fleet/vehicles/locations"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[AnyObject]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /contacts
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listContacts(accessToken accessToken: String, completion: ((data: [Contact]?, error: ErrorType?) -> Void)) {
        listContactsWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /contacts
     - GET /contacts
     - Fetch all contacts for the organization.     - examples: [{contentType=application/json, example={
  "firstName" : "Jane",
  "lastName" : "Jones",
  "phone" : "111-222-3344",
  "id" : 123,
  "email" : "jane.jones@yahoo.com"
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 

     - returns: RequestBuilder<[Contact]> 
     */
    public class func listContactsWithRequestBuilder(accessToken accessToken: String) -> RequestBuilder<[Contact]> {
        let path = "/contacts"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Contact]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/list
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listFleet(accessToken accessToken: String, groupParam: InlineObject10, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        listFleetWithRequestBuilder(accessToken: accessToken, groupParam: groupParam, startingAfter: startingAfter, endingBefore: endingBefore, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/list
     - POST /fleet/list
     - Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.     - examples: [{contentType=application/json, example={
  "pagination" : {
    "hasPrevPage" : true,
    "hasNextPage" : true,
    "endCursor" : "MTU5MTEzNjA2OTU0MzQ3",
    "startCursor" : "MTU5MTEzNjA2OTU0MzQ3"
  },
  "groupId" : 101,
  "vehicles" : [ {
    "note" : "Red truck 2015 M16",
    "engineHours" : 1500,
    "name" : "Truck A7",
    "fuelLevelPercent" : 0.3,
    "odometerMeters" : 60130000,
    "vin" : "1FUJA6BD31LJ09646",
    "id" : 112
  }, {
    "note" : "Red truck 2015 M16",
    "engineHours" : 1500,
    "name" : "Truck A7",
    "fuelLevelPercent" : 0.3,
    "odometerMeters" : 60130000,
    "vin" : "1FUJA6BD31LJ09646",
    "id" : 112
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupParam: (body)  
     - parameter startingAfter: (query) Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter. (optional)
     - parameter endingBefore: (query) Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter. (optional)
     - parameter limit: (query) Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;. (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func listFleetWithRequestBuilder(accessToken accessToken: String, groupParam: InlineObject10, startingAfter: String? = nil, endingBefore: String? = nil, limit: Int64? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/fleet/list"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = groupParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchFleetVehicle(accessToken accessToken: String, vehicleIdOrExternalId: String, data: InlineObject16, completion: ((data: FleetVehicleResponse?, error: ErrorType?) -> Void)) {
        patchFleetVehicleWithRequestBuilder(accessToken: accessToken, vehicleIdOrExternalId: vehicleIdOrExternalId, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - PATCH /fleet/vehicles/{vehicleIdOrExternalId}
     - Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.     - examples: [{contentType=application/json, example={
  "harshAccelSetting" : "Heavy",
  "externalIds" : {
    "maintenanceId" : "ABFS18600"
  },
  "name" : "Truck A7",
  "vehicleInfo" : {
    "year" : 1997,
    "model" : "Odyssey",
    "vin" : "1FUJA6BD31LJ09646",
    "make" : "Honda"
  },
  "id" : 112
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleIdOrExternalId: (path) ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs. 
     - parameter data: (body)  

     - returns: RequestBuilder<FleetVehicleResponse> 
     */
    public class func patchFleetVehicleWithRequestBuilder(accessToken accessToken: String, vehicleIdOrExternalId: String, data: InlineObject16) -> RequestBuilder<FleetVehicleResponse> {
        var path = "/fleet/vehicles/{vehicleIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{vehicle_id_or_external_id}", withString: "\(vehicleIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FleetVehicleResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter reactivateDriverParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func reactivateDriverById(accessToken accessToken: String, driverIdOrExternalId: String, reactivateDriverParam: InlineObject4, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        reactivateDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId, reactivateDriverParam: reactivateDriverParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - PUT /fleet/drivers/inactive/{driverIdOrExternalId}
     - Reactivate the inactive driver having id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter reactivateDriverParam: (body)  

     - returns: RequestBuilder<Driver> 
     */
    public class func reactivateDriverByIdWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String, reactivateDriverParam: InlineObject4) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/inactive/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = reactivateDriverParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter updateDispatchRouteParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateDispatchRouteById(accessToken accessToken: String, routeId: Int64, updateDispatchRouteParams: DispatchRoute, completion: ((data: DispatchRoute?, error: ErrorType?) -> Void)) {
        updateDispatchRouteByIdWithRequestBuilder(accessToken: accessToken, routeId: routeId, updateDispatchRouteParams: updateDispatchRouteParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/dispatch/routes/{route_id:[0-9]+}/
     - PUT /fleet/dispatch/routes/{routeId}
     - Update a dispatch route and its associated jobs.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter routeId: (path) ID of the dispatch route. 
     - parameter updateDispatchRouteParams: (body)  

     - returns: RequestBuilder<DispatchRoute> 
     */
    public class func updateDispatchRouteByIdWithRequestBuilder(accessToken accessToken: String, routeId: Int64, updateDispatchRouteParams: DispatchRoute) -> RequestBuilder<DispatchRoute> {
        var path = "/fleet/dispatch/routes/{routeId}"
        path = path.stringByReplacingOccurrencesOfString("{route_id}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = updateDispatchRouteParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispatchRoute>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /addresses/{addressId}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter address: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOrganizationAddress(accessToken accessToken: String, addressId: Int64, address: InlineObject1, completion: ((error: ErrorType?) -> Void)) {
        updateOrganizationAddressWithRequestBuilder(accessToken: accessToken, addressId: addressId, address: address).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /addresses/{addressId}
     - PATCH /addresses/{addressId}
     - Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.     - parameter accessToken: (query) Samsara API access token. 
     - parameter addressId: (path) ID of the address/geofence 
     - parameter address: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func updateOrganizationAddressWithRequestBuilder(accessToken accessToken: String, addressId: Int64, address: InlineObject1) -> RequestBuilder<Void> {
        var path = "/addresses/{addressId}"
        path = path.stringByReplacingOccurrencesOfString("{addressId}", withString: "\(addressId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = address.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/set_data
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleUpdateParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVehicles(accessToken accessToken: String, vehicleUpdateParam: InlineObject14, completion: ((error: ErrorType?) -> Void)) {
        updateVehiclesWithRequestBuilder(accessToken: accessToken, vehicleUpdateParam: vehicleUpdateParam).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /fleet/set_data
     - POST /fleet/set_data
     - This method enables the mutation of metadata for vehicles in the Samsara Cloud.     - parameter accessToken: (query) Samsara API access token. 
     - parameter vehicleUpdateParam: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func updateVehiclesWithRequestBuilder(accessToken accessToken: String, vehicleUpdateParam: InlineObject14) -> RequestBuilder<Void> {
        let path = "/fleet/set_data"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = vehicleUpdateParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
