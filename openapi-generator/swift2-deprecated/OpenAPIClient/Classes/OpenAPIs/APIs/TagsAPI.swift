//
// TagsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class TagsAPI: APIBase {
    /**
     /tags
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagCreateParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createTag(accessToken accessToken: String, tagCreateParams: TagCreate, completion: ((data: Tag?, error: ErrorType?) -> Void)) {
        createTagWithRequestBuilder(accessToken: accessToken, tagCreateParams: tagCreateParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /tags
     - POST /tags
     - Create a new tag for the group.     - examples: [{contentType=application/json, example={
  "addresses" : [ null, null ],
  "assets" : [ null, null ],
  "sensors" : [ null, null ],
  "parentTagId" : 8389,
  "groupId" : 2348,
  "name" : "Broken Vehicles",
  "vehicles" : [ null, null ],
  "id" : 12345,
  "machines" : [ null, null ],
  "drivers" : [ null, null ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagCreateParams: (body)  

     - returns: RequestBuilder<Tag> 
     */
    public class func createTagWithRequestBuilder(accessToken accessToken: String, tagCreateParams: TagCreate) -> RequestBuilder<Tag> {
        let path = "/tags"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = tagCreateParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTagById(accessToken accessToken: String, tagId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /tags/{tag_id:[0-9]+}
     - DELETE /tags/{tagId}
     - Permanently deletes a tag.     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteTagByIdWithRequestBuilder(accessToken accessToken: String, tagId: Int64) -> RequestBuilder<Void> {
        var path = "/tags/{tagId}"
        path = path.stringByReplacingOccurrencesOfString("{tag_id}", withString: "\(tagId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /tags
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllTags(accessToken accessToken: String, groupId: Int64? = nil, completion: ((data: InlineResponse2009?, error: ErrorType?) -> Void)) {
        getAllTagsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /tags
     - GET /tags
     - Fetch all of the tags for a group.     - examples: [{contentType=application/json, example={
  "tags" : [ {
    "addresses" : [ null, null ],
    "assets" : [ null, null ],
    "sensors" : [ null, null ],
    "parentTagId" : 8389,
    "groupId" : 2348,
    "name" : "Broken Vehicles",
    "vehicles" : [ null, null ],
    "id" : 12345,
    "machines" : [ null, null ],
    "drivers" : [ null, null ]
  }, {
    "addresses" : [ null, null ],
    "assets" : [ null, null ],
    "sensors" : [ null, null ],
    "parentTagId" : 8389,
    "groupId" : 2348,
    "name" : "Broken Vehicles",
    "vehicles" : [ null, null ],
    "id" : 12345,
    "machines" : [ null, null ],
    "drivers" : [ null, null ]
  } ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<InlineResponse2009> 
     */
    public class func getAllTagsWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse2009> {
        let path = "/tags"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTagById(accessToken accessToken: String, tagId: Int64, completion: ((data: Tag?, error: ErrorType?) -> Void)) {
        getTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /tags/{tag_id:[0-9]+}
     - GET /tags/{tagId}
     - Fetch a tag by id.     - examples: [{contentType=application/json, example={
  "addresses" : [ null, null ],
  "assets" : [ null, null ],
  "sensors" : [ null, null ],
  "parentTagId" : 8389,
  "groupId" : 2348,
  "name" : "Broken Vehicles",
  "vehicles" : [ null, null ],
  "id" : 12345,
  "machines" : [ null, null ],
  "drivers" : [ null, null ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 

     - returns: RequestBuilder<Tag> 
     */
    public class func getTagByIdWithRequestBuilder(accessToken accessToken: String, tagId: Int64) -> RequestBuilder<Tag> {
        var path = "/tags/{tagId}"
        path = path.stringByReplacingOccurrencesOfString("{tag_id}", withString: "\(tagId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter tagModifyParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func modifyTagById(accessToken accessToken: String, tagId: Int64, tagModifyParams: TagModify, completion: ((data: Tag?, error: ErrorType?) -> Void)) {
        modifyTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId, tagModifyParams: tagModifyParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /tags/{tag_id:[0-9]+}
     - PATCH /tags/{tagId}
     - Add or delete specific members from a tag, or modify the name of a tag.     - examples: [{contentType=application/json, example={
  "addresses" : [ null, null ],
  "assets" : [ null, null ],
  "sensors" : [ null, null ],
  "parentTagId" : 8389,
  "groupId" : 2348,
  "name" : "Broken Vehicles",
  "vehicles" : [ null, null ],
  "id" : 12345,
  "machines" : [ null, null ],
  "drivers" : [ null, null ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter tagModifyParams: (body)  

     - returns: RequestBuilder<Tag> 
     */
    public class func modifyTagByIdWithRequestBuilder(accessToken accessToken: String, tagId: Int64, tagModifyParams: TagModify) -> RequestBuilder<Tag> {
        var path = "/tags/{tagId}"
        path = path.stringByReplacingOccurrencesOfString("{tag_id}", withString: "\(tagId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = tagModifyParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /tags/{tag_id:[0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter updateTagParams: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTagById(accessToken accessToken: String, tagId: Int64, updateTagParams: TagUpdate, completion: ((data: Tag?, error: ErrorType?) -> Void)) {
        updateTagByIdWithRequestBuilder(accessToken: accessToken, tagId: tagId, updateTagParams: updateTagParams).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /tags/{tag_id:[0-9]+}
     - PUT /tags/{tagId}
     - Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.     - examples: [{contentType=application/json, example={
  "addresses" : [ null, null ],
  "assets" : [ null, null ],
  "sensors" : [ null, null ],
  "parentTagId" : 8389,
  "groupId" : 2348,
  "name" : "Broken Vehicles",
  "vehicles" : [ null, null ],
  "id" : 12345,
  "machines" : [ null, null ],
  "drivers" : [ null, null ]
}, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter tagId: (path) ID of the tag. 
     - parameter updateTagParams: (body)  

     - returns: RequestBuilder<Tag> 
     */
    public class func updateTagByIdWithRequestBuilder(accessToken accessToken: String, tagId: Int64, updateTagParams: TagUpdate) -> RequestBuilder<Tag> {
        var path = "/tags/{tagId}"
        path = path.stringByReplacingOccurrencesOfString("{tag_id}", withString: "\(tagId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = updateTagParams.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Tag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
