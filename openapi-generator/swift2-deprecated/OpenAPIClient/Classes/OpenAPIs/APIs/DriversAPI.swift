//
// DriversAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class DriversAPI: APIBase {
    /**
     /fleet/drivers/create
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDriverParam: (body) Driver creation body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDriver(accessToken accessToken: String, createDriverParam: DriverForCreate, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        createDriverWithRequestBuilder(accessToken: accessToken, createDriverParam: createDriverParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/create
     - POST /fleet/drivers/create
     - Create a new driver.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter createDriverParam: (body) Driver creation body 

     - returns: RequestBuilder<Driver> 
     */
    public class func createDriverWithRequestBuilder(accessToken accessToken: String, createDriverParam: DriverForCreate) -> RequestBuilder<Driver> {
        let path = "/fleet/drivers/create"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = createDriverParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deactivateDriver(accessToken accessToken: String, driverIdOrExternalId: String, completion: ((error: ErrorType?) -> Void)) {
        deactivateDriverWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - DELETE /fleet/drivers/{driverIdOrExternalId}
     - Deactivate a driver with the given id.     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Void> 
     */
    public class func deactivateDriverWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Void> {
        var path = "/fleet/drivers/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllDeactivatedDrivers(accessToken accessToken: String, groupId: Int64? = nil, completion: ((data: [Driver]?, error: ErrorType?) -> Void)) {
        getAllDeactivatedDriversWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/inactive
     - GET /fleet/drivers/inactive
     - Fetch all deactivated drivers for the group.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)

     - returns: RequestBuilder<[Driver]> 
     */
    public class func getAllDeactivatedDriversWithRequestBuilder(accessToken accessToken: String, groupId: Int64? = nil) -> RequestBuilder<[Driver]> {
        let path = "/fleet/drivers/inactive"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Driver]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDeactivatedDriverById(accessToken accessToken: String, driverIdOrExternalId: String, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        getDeactivatedDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/drivers/inactive/{driverIdOrExternalId}
     - Fetch deactivated driver by id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Driver> 
     */
    public class func getDeactivatedDriverByIdWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/inactive/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDriverById(accessToken accessToken: String, driverIdOrExternalId: String, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        getDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - GET /fleet/drivers/{driverIdOrExternalId}
     - Fetch driver by id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 

     - returns: RequestBuilder<Driver> 
     */
    public class func getDriverByIdWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter reactivateDriverParam: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func reactivateDriverById(accessToken accessToken: String, driverIdOrExternalId: String, reactivateDriverParam: InlineObject4, completion: ((data: Driver?, error: ErrorType?) -> Void)) {
        reactivateDriverByIdWithRequestBuilder(accessToken: accessToken, driverIdOrExternalId: driverIdOrExternalId, reactivateDriverParam: reactivateDriverParam).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
     - PUT /fleet/drivers/inactive/{driverIdOrExternalId}
     - Reactivate the inactive driver having id.     - examples: [{contentType=application/json, example=null, statusCode=200}]
     - parameter accessToken: (query) Samsara API access token. 
     - parameter driverIdOrExternalId: (path) ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs. 
     - parameter reactivateDriverParam: (body)  

     - returns: RequestBuilder<Driver> 
     */
    public class func reactivateDriverByIdWithRequestBuilder(accessToken accessToken: String, driverIdOrExternalId: String, reactivateDriverParam: InlineObject4) -> RequestBuilder<Driver> {
        var path = "/fleet/drivers/inactive/{driverIdOrExternalId}"
        path = path.stringByReplacingOccurrencesOfString("{driver_id_or_external_id}", withString: "\(driverIdOrExternalId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = reactivateDriverParam.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Driver>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
