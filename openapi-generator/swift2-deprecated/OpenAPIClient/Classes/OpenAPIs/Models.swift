// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.contacts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contacts"])
                instance.formattedAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formattedAddress"])
                instance.geofence = Decoders.decodeOptional(clazz: AddressGeofence.self, source: sourceDictionary["geofence"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                return instance
            }


            // Decoder for [AddressGeofence]
            Decoders.addDecoder(clazz: [AddressGeofence].self) { (source: AnyObject) -> [AddressGeofence] in
                return Decoders.decode(clazz: [AddressGeofence].self, source: source)
            }
            // Decoder for AddressGeofence
            Decoders.addDecoder(clazz: AddressGeofence.self) { (source: AnyObject) -> AddressGeofence in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressGeofence()
                instance.circle = Decoders.decodeOptional(clazz: AddressGeofenceCircle.self, source: sourceDictionary["circle"])
                instance.polygon = Decoders.decodeOptional(clazz: AddressGeofencePolygon.self, source: sourceDictionary["polygon"])
                return instance
            }


            // Decoder for [AddressGeofenceCircle]
            Decoders.addDecoder(clazz: [AddressGeofenceCircle].self) { (source: AnyObject) -> [AddressGeofenceCircle] in
                return Decoders.decode(clazz: [AddressGeofenceCircle].self, source: source)
            }
            // Decoder for AddressGeofenceCircle
            Decoders.addDecoder(clazz: AddressGeofenceCircle.self) { (source: AnyObject) -> AddressGeofenceCircle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressGeofenceCircle()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.radiusMeters = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["radiusMeters"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [AddressGeofencePolygon]
            Decoders.addDecoder(clazz: [AddressGeofencePolygon].self) { (source: AnyObject) -> [AddressGeofencePolygon] in
                return Decoders.decode(clazz: [AddressGeofencePolygon].self, source: source)
            }
            // Decoder for AddressGeofencePolygon
            Decoders.addDecoder(clazz: AddressGeofencePolygon.self) { (source: AnyObject) -> AddressGeofencePolygon in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressGeofencePolygon()
                instance.vertices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vertices"])
                return instance
            }


            // Decoder for [AddressGeofencePolygonVertices]
            Decoders.addDecoder(clazz: [AddressGeofencePolygonVertices].self) { (source: AnyObject) -> [AddressGeofencePolygonVertices] in
                return Decoders.decode(clazz: [AddressGeofencePolygonVertices].self, source: source)
            }
            // Decoder for AddressGeofencePolygonVertices
            Decoders.addDecoder(clazz: AddressGeofencePolygonVertices.self) { (source: AnyObject) -> AddressGeofencePolygonVertices in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressGeofencePolygonVertices()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [AddressesAddresses]
            Decoders.addDecoder(clazz: [AddressesAddresses].self) { (source: AnyObject) -> [AddressesAddresses] in
                return Decoders.decode(clazz: [AddressesAddresses].self, source: source)
            }
            // Decoder for AddressesAddresses
            Decoders.addDecoder(clazz: AddressesAddresses.self) { (source: AnyObject) -> AddressesAddresses in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressesAddresses()
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.formattedAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formattedAddress"])
                instance.geofence = Decoders.decodeOptional(clazz: AddressGeofence.self, source: sourceDictionary["geofence"])
                instance.tagIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tagIds"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.contactIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contactIds"])
                return instance
            }


            // Decoder for [AllRouteJobUpdates]
            Decoders.addDecoder(clazz: [AllRouteJobUpdates].self) { (source: AnyObject) -> [AllRouteJobUpdates] in
                return Decoders.decode(clazz: [AllRouteJobUpdates].self, source: source)
            }
            // Decoder for AllRouteJobUpdates
            Decoders.addDecoder(clazz: AllRouteJobUpdates.self) { (source: AnyObject) -> AllRouteJobUpdates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AllRouteJobUpdates()
                instance.jobUpdates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["job_updates"])
                instance.sequenceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sequence_id"])
                return instance
            }


            // Decoder for [Asset]
            Decoders.addDecoder(clazz: [Asset].self) { (source: AnyObject) -> [Asset] in
                return Decoders.decode(clazz: [Asset].self, source: source)
            }
            // Decoder for Asset
            Decoders.addDecoder(clazz: Asset.self) { (source: AnyObject) -> Asset in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Asset()
                instance.assetSerialNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["assetSerialNumber"])
                instance.cable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cable"])
                instance.engineHours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["engineHours"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [AssetCable]
            Decoders.addDecoder(clazz: [AssetCable].self) { (source: AnyObject) -> [AssetCable] in
                return Decoders.decode(clazz: [AssetCable].self, source: source)
            }
            // Decoder for AssetCable
            Decoders.addDecoder(clazz: AssetCable.self) { (source: AnyObject) -> AssetCable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetCable()
                instance.assetType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["assetType"])
                return instance
            }


            // Decoder for [AssetCurrentLocation]
            Decoders.addDecoder(clazz: [AssetCurrentLocation].self) { (source: AnyObject) -> [AssetCurrentLocation] in
                return Decoders.decode(clazz: [AssetCurrentLocation].self, source: source)
            }
            // Decoder for AssetCurrentLocation
            Decoders.addDecoder(clazz: AssetCurrentLocation.self) { (source: AnyObject) -> AssetCurrentLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetCurrentLocation()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                instance.speedMilesPerHour = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["speedMilesPerHour"])
                instance.timeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeMs"])
                return instance
            }


            // Decoder for [AssetCurrentLocationsResponse]
            Decoders.addDecoder(clazz: [AssetCurrentLocationsResponse].self) { (source: AnyObject) -> [AssetCurrentLocationsResponse] in
                return Decoders.decode(clazz: [AssetCurrentLocationsResponse].self, source: source)
            }
            // Decoder for AssetCurrentLocationsResponse
            Decoders.addDecoder(clazz: AssetCurrentLocationsResponse.self) { (source: AnyObject) -> AssetCurrentLocationsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetCurrentLocationsResponse()
                instance.cable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cable"])
                instance.engineHours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["engineHours"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.location = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["location"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [AssetReeferResponse]
            Decoders.addDecoder(clazz: [AssetReeferResponse].self) { (source: AnyObject) -> [AssetReeferResponse] in
                return Decoders.decode(clazz: [AssetReeferResponse].self, source: source)
            }
            // Decoder for AssetReeferResponse
            Decoders.addDecoder(clazz: AssetReeferResponse.self) { (source: AnyObject) -> AssetReeferResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponse()
                instance.assetType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["assetType"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.reeferStats = Decoders.decodeOptional(clazz: AssetReeferResponseReeferStats.self, source: sourceDictionary["reeferStats"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStats]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStats].self) { (source: AnyObject) -> [AssetReeferResponseReeferStats] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStats].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStats
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStats.self) { (source: AnyObject) -> AssetReeferResponseReeferStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStats()
                instance.fuelPercentage = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fuelPercentage"])
                instance.powerStatus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["powerStatus"])
                instance.engineHours = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["engineHours"])
                instance.setPoint = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["setPoint"])
                instance.returnAirTemp = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["returnAirTemp"])
                instance.alarms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alarms"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsAlarms]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsAlarms].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsAlarms] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsAlarms].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsAlarms
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsAlarms.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsAlarms in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsAlarms()
                instance.severity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["severity"])
                instance.operatorAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorAction"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.alarmCode = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["alarmCode"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsAlarms1]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsAlarms1].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsAlarms1] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsAlarms1].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsAlarms1
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsAlarms1.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsAlarms1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsAlarms1()
                instance.alarms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alarms"])
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedAtMs"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsEngineHours]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsEngineHours].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsEngineHours] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsEngineHours].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsEngineHours
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsEngineHours.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsEngineHours in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsEngineHours()
                instance.engineHours = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["engineHours"])
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedAtMs"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsFuelPercentage]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsFuelPercentage].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsFuelPercentage] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsFuelPercentage].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsFuelPercentage
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsFuelPercentage.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsFuelPercentage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsFuelPercentage()
                instance.fuelPercentage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fuelPercentage"])
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedAtMs"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsPowerStatus]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsPowerStatus].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsPowerStatus] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsPowerStatus].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsPowerStatus
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsPowerStatus.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsPowerStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsPowerStatus()
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedAtMs"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsReturnAirTemp]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsReturnAirTemp].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsReturnAirTemp] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsReturnAirTemp].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsReturnAirTemp
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsReturnAirTemp.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsReturnAirTemp in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsReturnAirTemp()
                instance.tempInMilliC = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tempInMilliC"])
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedAtMs"])
                return instance
            }


            // Decoder for [AssetReeferResponseReeferStatsSetPoint]
            Decoders.addDecoder(clazz: [AssetReeferResponseReeferStatsSetPoint].self) { (source: AnyObject) -> [AssetReeferResponseReeferStatsSetPoint] in
                return Decoders.decode(clazz: [AssetReeferResponseReeferStatsSetPoint].self, source: source)
            }
            // Decoder for AssetReeferResponseReeferStatsSetPoint
            Decoders.addDecoder(clazz: AssetReeferResponseReeferStatsSetPoint.self) { (source: AnyObject) -> AssetReeferResponseReeferStatsSetPoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AssetReeferResponseReeferStatsSetPoint()
                instance.tempInMilliC = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tempInMilliC"])
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedAtMs"])
                return instance
            }


            // Decoder for [AuxInput]
            Decoders.addDecoder(clazz: [AuxInput].self) { (source: AnyObject) -> [AuxInput] in
                return Decoders.decode(clazz: [AuxInput].self, source: source)
            }
            // Decoder for AuxInput
            Decoders.addDecoder(clazz: AuxInput.self) { (source: AnyObject) -> AuxInput in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AuxInput()
                instance.timeMs = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["timeMs"])
                instance.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [AuxInputSeries]
            Decoders.addDecoder(clazz: [AuxInputSeries].self) { (source: AnyObject) -> [AuxInputSeries] in
                return Decoders.decode(clazz: [AuxInputSeries].self, source: source)
            }
            // Decoder for AuxInputSeries
            Decoders.addDecoder(clazz: AuxInputSeries.self) { (source: AnyObject) -> AuxInputSeries in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AuxInputSeries()
                instance.name = AuxInputSeries.Name(rawValue: (sourceDictionary["name"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [CargoResponse]
            Decoders.addDecoder(clazz: [CargoResponse].self) { (source: AnyObject) -> [CargoResponse] in
                return Decoders.decode(clazz: [CargoResponse].self, source: source)
            }
            // Decoder for CargoResponse
            Decoders.addDecoder(clazz: CargoResponse.self) { (source: AnyObject) -> CargoResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CargoResponse()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [CargoResponseSensors]
            Decoders.addDecoder(clazz: [CargoResponseSensors].self) { (source: AnyObject) -> [CargoResponseSensors] in
                return Decoders.decode(clazz: [CargoResponseSensors].self, source: source)
            }
            // Decoder for CargoResponseSensors
            Decoders.addDecoder(clazz: CargoResponseSensors.self) { (source: AnyObject) -> CargoResponseSensors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CargoResponseSensors()
                instance.cargoEmpty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cargoEmpty"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [Contact]
            Decoders.addDecoder(clazz: [Contact].self) { (source: AnyObject) -> [Contact] in
                return Decoders.decode(clazz: [Contact].self, source: source)
            }
            // Decoder for Contact
            Decoders.addDecoder(clazz: Contact.self) { (source: AnyObject) -> Contact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Contact()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                return instance
            }


            // Decoder for [CurrentDriver]
            Decoders.addDecoder(clazz: [CurrentDriver].self) { (source: AnyObject) -> [CurrentDriver] in
                return Decoders.decode(clazz: [CurrentDriver].self, source: source)
            }
            // Decoder for CurrentDriver
            Decoders.addDecoder(clazz: CurrentDriver.self) { (source: AnyObject) -> CurrentDriver in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CurrentDriver()
                return instance
            }


            // Decoder for [DataInputHistoryResponse]
            Decoders.addDecoder(clazz: [DataInputHistoryResponse].self) { (source: AnyObject) -> [DataInputHistoryResponse] in
                return Decoders.decode(clazz: [DataInputHistoryResponse].self, source: source)
            }
            // Decoder for DataInputHistoryResponse
            Decoders.addDecoder(clazz: DataInputHistoryResponse.self) { (source: AnyObject) -> DataInputHistoryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DataInputHistoryResponse()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.points = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["points"])
                return instance
            }


            // Decoder for [DataInputHistoryResponsePoints]
            Decoders.addDecoder(clazz: [DataInputHistoryResponsePoints].self) { (source: AnyObject) -> [DataInputHistoryResponsePoints] in
                return Decoders.decode(clazz: [DataInputHistoryResponsePoints].self, source: source)
            }
            // Decoder for DataInputHistoryResponsePoints
            Decoders.addDecoder(clazz: DataInputHistoryResponsePoints.self) { (source: AnyObject) -> DataInputHistoryResponsePoints in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DataInputHistoryResponsePoints()
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.timeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeMs"])
                return instance
            }


            // Decoder for [DispatchJob]
            Decoders.addDecoder(clazz: [DispatchJob].self) { (source: AnyObject) -> [DispatchJob] in
                return Decoders.decode(clazz: [DispatchJob].self, source: source)
            }
            // Decoder for DispatchJob
            Decoders.addDecoder(clazz: DispatchJob.self) { (source: AnyObject) -> DispatchJob in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchJob()
                instance.destinationAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination_address"])
                instance.destinationAddressId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["destination_address_id"])
                instance.destinationLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["destination_lat"])
                instance.destinationLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["destination_lng"])
                instance.destinationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination_name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.scheduledArrivalTimeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_arrival_time_ms"])
                instance.scheduledDepartureTimeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_departure_time_ms"])
                instance.arrivedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["arrived_at_ms"])
                instance.completedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completed_at_ms"])
                instance.dispatchRouteId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["dispatch_route_id"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driver_id"])
                instance.enRouteAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["en_route_at_ms"])
                instance.estimatedArrivalMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["estimated_arrival_ms"])
                instance.fleetViewerUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fleet_viewer_url"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["group_id"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.jobState = Decoders.decodeOptional(clazz: JobStatus.self, source: sourceDictionary["job_state"])
                instance.skippedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["skipped_at_ms"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicle_id"])
                return instance
            }


            // Decoder for [DispatchJobCreate]
            Decoders.addDecoder(clazz: [DispatchJobCreate].self) { (source: AnyObject) -> [DispatchJobCreate] in
                return Decoders.decode(clazz: [DispatchJobCreate].self, source: source)
            }
            // Decoder for DispatchJobCreate
            Decoders.addDecoder(clazz: DispatchJobCreate.self) { (source: AnyObject) -> DispatchJobCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchJobCreate()
                instance.destinationAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination_address"])
                instance.destinationAddressId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["destination_address_id"])
                instance.destinationLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["destination_lat"])
                instance.destinationLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["destination_lng"])
                instance.destinationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination_name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.scheduledArrivalTimeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_arrival_time_ms"])
                instance.scheduledDepartureTimeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_departure_time_ms"])
                return instance
            }


            // Decoder for [DispatchRoute]
            Decoders.addDecoder(clazz: [DispatchRoute].self) { (source: AnyObject) -> [DispatchRoute] in
                return Decoders.decode(clazz: [DispatchRoute].self, source: source)
            }
            // Decoder for DispatchRoute
            Decoders.addDecoder(clazz: DispatchRoute.self) { (source: AnyObject) -> DispatchRoute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchRoute()
                instance.actualEndMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_end_ms"])
                instance.actualStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_start_ms"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driver_id"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["group_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.scheduledEndMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_end_ms"])
                instance.scheduledMeters = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_meters"])
                instance.scheduledStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_start_ms"])
                instance.startLocationAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_location_address"])
                instance.startLocationAddressId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_location_address_id"])
                instance.startLocationLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["start_location_lat"])
                instance.startLocationLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["start_location_lng"])
                instance.startLocationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_location_name"])
                instance.trailerId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["trailer_id"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicle_id"])
                instance.dispatchJobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dispatch_jobs"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [DispatchRouteBase]
            Decoders.addDecoder(clazz: [DispatchRouteBase].self) { (source: AnyObject) -> [DispatchRouteBase] in
                return Decoders.decode(clazz: [DispatchRouteBase].self, source: source)
            }
            // Decoder for DispatchRouteBase
            Decoders.addDecoder(clazz: DispatchRouteBase.self) { (source: AnyObject) -> DispatchRouteBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchRouteBase()
                instance.actualEndMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_end_ms"])
                instance.actualStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_start_ms"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driver_id"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["group_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.scheduledEndMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_end_ms"])
                instance.scheduledMeters = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_meters"])
                instance.scheduledStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_start_ms"])
                instance.startLocationAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_location_address"])
                instance.startLocationAddressId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_location_address_id"])
                instance.startLocationLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["start_location_lat"])
                instance.startLocationLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["start_location_lng"])
                instance.startLocationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_location_name"])
                instance.trailerId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["trailer_id"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicle_id"])
                return instance
            }


            // Decoder for [DispatchRouteCreate]
            Decoders.addDecoder(clazz: [DispatchRouteCreate].self) { (source: AnyObject) -> [DispatchRouteCreate] in
                return Decoders.decode(clazz: [DispatchRouteCreate].self, source: source)
            }
            // Decoder for DispatchRouteCreate
            Decoders.addDecoder(clazz: DispatchRouteCreate.self) { (source: AnyObject) -> DispatchRouteCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchRouteCreate()
                instance.actualEndMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_end_ms"])
                instance.actualStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_start_ms"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driver_id"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["group_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.scheduledEndMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_end_ms"])
                instance.scheduledMeters = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_meters"])
                instance.scheduledStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["scheduled_start_ms"])
                instance.startLocationAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_location_address"])
                instance.startLocationAddressId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_location_address_id"])
                instance.startLocationLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["start_location_lat"])
                instance.startLocationLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["start_location_lng"])
                instance.startLocationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_location_name"])
                instance.trailerId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["trailer_id"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicle_id"])
                instance.dispatchJobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dispatch_jobs"])
                return instance
            }


            // Decoder for [DispatchRouteHistoricalEntry]
            Decoders.addDecoder(clazz: [DispatchRouteHistoricalEntry].self) { (source: AnyObject) -> [DispatchRouteHistoricalEntry] in
                return Decoders.decode(clazz: [DispatchRouteHistoricalEntry].self, source: source)
            }
            // Decoder for DispatchRouteHistoricalEntry
            Decoders.addDecoder(clazz: DispatchRouteHistoricalEntry.self) { (source: AnyObject) -> DispatchRouteHistoricalEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchRouteHistoricalEntry()
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changed_at_ms"])
                instance.route = Decoders.decodeOptional(clazz: DispatchRoute.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [DispatchRouteHistory]
            Decoders.addDecoder(clazz: [DispatchRouteHistory].self) { (source: AnyObject) -> [DispatchRouteHistory] in
                return Decoders.decode(clazz: [DispatchRouteHistory].self, source: source)
            }
            // Decoder for DispatchRouteHistory
            Decoders.addDecoder(clazz: DispatchRouteHistory.self) { (source: AnyObject) -> DispatchRouteHistory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispatchRouteHistory()
                instance.history = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["history"])
                return instance
            }


            // Decoder for [Document]
            Decoders.addDecoder(clazz: [Document].self) { (source: AnyObject) -> [Document] in
                return Decoders.decode(clazz: [Document].self, source: source)
            }
            // Decoder for Document
            Decoders.addDecoder(clazz: Document.self) { (source: AnyObject) -> Document in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Document()
                instance.dispatchJobId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["dispatchJobId"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.documentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentType"])
                instance.driverCreatedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverCreatedAtMs"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                return instance
            }


            // Decoder for [DocumentBase]
            Decoders.addDecoder(clazz: [DocumentBase].self) { (source: AnyObject) -> [DocumentBase] in
                return Decoders.decode(clazz: [DocumentBase].self, source: source)
            }
            // Decoder for DocumentBase
            Decoders.addDecoder(clazz: DocumentBase.self) { (source: AnyObject) -> DocumentBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentBase()
                instance.dispatchJobId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["dispatchJobId"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                return instance
            }


            // Decoder for [DocumentCreate]
            Decoders.addDecoder(clazz: [DocumentCreate].self) { (source: AnyObject) -> [DocumentCreate] in
                return Decoders.decode(clazz: [DocumentCreate].self, source: source)
            }
            // Decoder for DocumentCreate
            Decoders.addDecoder(clazz: DocumentCreate.self) { (source: AnyObject) -> DocumentCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentCreate()
                instance.dispatchJobId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["dispatchJobId"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.documentTypeUuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentTypeUuid"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                return instance
            }


            // Decoder for [DocumentField]
            Decoders.addDecoder(clazz: [DocumentField].self) { (source: AnyObject) -> [DocumentField] in
                return Decoders.decode(clazz: [DocumentField].self, source: source)
            }
            // Decoder for DocumentField
            Decoders.addDecoder(clazz: DocumentField.self) { (source: AnyObject) -> DocumentField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentField()
                instance.numberValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberValue"])
                instance.photoValue = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["photoValue"])
                instance.stringValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stringValue"])
                instance.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valueType"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.value = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [DocumentFieldCreate]
            Decoders.addDecoder(clazz: [DocumentFieldCreate].self) { (source: AnyObject) -> [DocumentFieldCreate] in
                return Decoders.decode(clazz: [DocumentFieldCreate].self, source: source)
            }
            // Decoder for DocumentFieldCreate
            Decoders.addDecoder(clazz: DocumentFieldCreate.self) { (source: AnyObject) -> DocumentFieldCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentFieldCreate()
                instance.numberValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberValue"])
                instance.photoValue = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["photoValue"])
                instance.stringValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stringValue"])
                instance.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valueType"])
                return instance
            }


            // Decoder for [DocumentFieldCreatePhotoValue]
            Decoders.addDecoder(clazz: [DocumentFieldCreatePhotoValue].self) { (source: AnyObject) -> [DocumentFieldCreatePhotoValue] in
                return Decoders.decode(clazz: [DocumentFieldCreatePhotoValue].self, source: source)
            }
            // Decoder for DocumentFieldCreatePhotoValue
            Decoders.addDecoder(clazz: DocumentFieldCreatePhotoValue.self) { (source: AnyObject) -> DocumentFieldCreatePhotoValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentFieldCreatePhotoValue()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [DocumentFieldType]
            Decoders.addDecoder(clazz: [DocumentFieldType].self) { (source: AnyObject) -> [DocumentFieldType] in
                return Decoders.decode(clazz: [DocumentFieldType].self, source: source)
            }
            // Decoder for DocumentFieldType
            Decoders.addDecoder(clazz: DocumentFieldType.self) { (source: AnyObject) -> DocumentFieldType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentFieldType()
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.numberValueTypeMetadata = Decoders.decodeOptional(clazz: DocumentFieldTypeNumberValueTypeMetadata.self, source: sourceDictionary["numberValueTypeMetadata"])
                instance.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valueType"])
                return instance
            }


            // Decoder for [DocumentFieldTypeNumberValueTypeMetadata]
            Decoders.addDecoder(clazz: [DocumentFieldTypeNumberValueTypeMetadata].self) { (source: AnyObject) -> [DocumentFieldTypeNumberValueTypeMetadata] in
                return Decoders.decode(clazz: [DocumentFieldTypeNumberValueTypeMetadata].self, source: source)
            }
            // Decoder for DocumentFieldTypeNumberValueTypeMetadata
            Decoders.addDecoder(clazz: DocumentFieldTypeNumberValueTypeMetadata.self) { (source: AnyObject) -> DocumentFieldTypeNumberValueTypeMetadata in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentFieldTypeNumberValueTypeMetadata()
                instance.numDecimalPlaces = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["numDecimalPlaces"])
                return instance
            }


            // Decoder for [DocumentType]
            Decoders.addDecoder(clazz: [DocumentType].self) { (source: AnyObject) -> [DocumentType] in
                return Decoders.decode(clazz: [DocumentType].self, source: source)
            }
            // Decoder for DocumentType
            Decoders.addDecoder(clazz: DocumentType.self) { (source: AnyObject) -> DocumentType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentType()
                instance.fieldTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fieldTypes"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.orgId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["orgId"])
                instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"])
                return instance
            }


            // Decoder for [DoorResponse]
            Decoders.addDecoder(clazz: [DoorResponse].self) { (source: AnyObject) -> [DoorResponse] in
                return Decoders.decode(clazz: [DoorResponse].self, source: source)
            }
            // Decoder for DoorResponse
            Decoders.addDecoder(clazz: DoorResponse.self) { (source: AnyObject) -> DoorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DoorResponse()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [DoorResponseSensors]
            Decoders.addDecoder(clazz: [DoorResponseSensors].self) { (source: AnyObject) -> [DoorResponseSensors] in
                return Decoders.decode(clazz: [DoorResponseSensors].self, source: source)
            }
            // Decoder for DoorResponseSensors
            Decoders.addDecoder(clazz: DoorResponseSensors.self) { (source: AnyObject) -> DoorResponseSensors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DoorResponseSensors()
                instance.doorClosed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["doorClosed"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [Driver]
            Decoders.addDecoder(clazz: [Driver].self) { (source: AnyObject) -> [Driver] in
                return Decoders.decode(clazz: [Driver].self, source: source)
            }
            // Decoder for Driver
            Decoders.addDecoder(clazz: Driver.self) { (source: AnyObject) -> Driver in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Driver()
                instance.eldAdverseWeatherExemptionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldAdverseWeatherExemptionEnabled"])
                instance.eldBigDayExemptionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldBigDayExemptionEnabled"])
                instance.eldDayStartHour = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["eldDayStartHour"])
                instance.eldExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldExempt"])
                instance.eldExemptReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eldExemptReason"])
                instance.eldPcEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldPcEnabled"])
                instance.eldYmEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldYmEnabled"])
                instance.externalIds = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["externalIds"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.licenseNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseNumber"])
                instance.licenseState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseState"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.isDeactivated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDeactivated"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                return instance
            }


            // Decoder for [DriverBase]
            Decoders.addDecoder(clazz: [DriverBase].self) { (source: AnyObject) -> [DriverBase] in
                return Decoders.decode(clazz: [DriverBase].self, source: source)
            }
            // Decoder for DriverBase
            Decoders.addDecoder(clazz: DriverBase.self) { (source: AnyObject) -> DriverBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriverBase()
                instance.eldAdverseWeatherExemptionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldAdverseWeatherExemptionEnabled"])
                instance.eldBigDayExemptionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldBigDayExemptionEnabled"])
                instance.eldDayStartHour = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["eldDayStartHour"])
                instance.eldExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldExempt"])
                instance.eldExemptReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eldExemptReason"])
                instance.eldPcEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldPcEnabled"])
                instance.eldYmEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldYmEnabled"])
                instance.externalIds = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["externalIds"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.licenseNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseNumber"])
                instance.licenseState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseState"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                return instance
            }


            // Decoder for [DriverDailyLogResponse]
            Decoders.addDecoder(clazz: [DriverDailyLogResponse].self) { (source: AnyObject) -> [DriverDailyLogResponse] in
                return Decoders.decode(clazz: [DriverDailyLogResponse].self, source: source)
            }
            // Decoder for DriverDailyLogResponse
            Decoders.addDecoder(clazz: DriverDailyLogResponse.self) { (source: AnyObject) -> DriverDailyLogResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriverDailyLogResponse()
                instance.days = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["days"])
                return instance
            }


            // Decoder for [DriverDailyLogResponseDays]
            Decoders.addDecoder(clazz: [DriverDailyLogResponseDays].self) { (source: AnyObject) -> [DriverDailyLogResponseDays] in
                return Decoders.decode(clazz: [DriverDailyLogResponseDays].self, source: source)
            }
            // Decoder for DriverDailyLogResponseDays
            Decoders.addDecoder(clazz: DriverDailyLogResponseDays.self) { (source: AnyObject) -> DriverDailyLogResponseDays in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriverDailyLogResponseDays()
                instance.certifiedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["certifiedAtMs"])
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                instance.trailerIds = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["trailerIds"])
                instance.activeHours = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["activeHours"])
                instance.distanceMiles = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["distanceMiles"])
                instance.activeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activeMs"])
                instance.certified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["certified"])
                instance.vehicleIds = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["vehicleIds"])
                return instance
            }


            // Decoder for [DriverForCreate]
            Decoders.addDecoder(clazz: [DriverForCreate].self) { (source: AnyObject) -> [DriverForCreate] in
                return Decoders.decode(clazz: [DriverForCreate].self, source: source)
            }
            // Decoder for DriverForCreate
            Decoders.addDecoder(clazz: DriverForCreate.self) { (source: AnyObject) -> DriverForCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriverForCreate()
                instance.eldAdverseWeatherExemptionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldAdverseWeatherExemptionEnabled"])
                instance.eldBigDayExemptionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldBigDayExemptionEnabled"])
                instance.eldDayStartHour = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["eldDayStartHour"])
                instance.eldExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldExempt"])
                instance.eldExemptReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eldExemptReason"])
                instance.eldPcEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldPcEnabled"])
                instance.eldYmEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eldYmEnabled"])
                instance.externalIds = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["externalIds"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.licenseNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseNumber"])
                instance.licenseState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseState"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.tagIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tagIds"])
                return instance
            }


            // Decoder for [DriverSafetyScoreResponse]
            Decoders.addDecoder(clazz: [DriverSafetyScoreResponse].self) { (source: AnyObject) -> [DriverSafetyScoreResponse] in
                return Decoders.decode(clazz: [DriverSafetyScoreResponse].self, source: source)
            }
            // Decoder for DriverSafetyScoreResponse
            Decoders.addDecoder(clazz: DriverSafetyScoreResponse.self) { (source: AnyObject) -> DriverSafetyScoreResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriverSafetyScoreResponse()
                instance.crashCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["crashCount"])
                instance.driverId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["driverId"])
                instance.harshAccelCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harshAccelCount"])
                instance.harshBrakingCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harshBrakingCount"])
                instance.harshEvents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["harshEvents"])
                instance.harshTurningCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harshTurningCount"])
                instance.safetyScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["safetyScore"])
                instance.safetyScoreRank = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["safetyScoreRank"])
                instance.timeOverSpeedLimitMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeOverSpeedLimitMs"])
                instance.totalDistanceDrivenMeters = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalDistanceDrivenMeters"])
                instance.totalHarshEventCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalHarshEventCount"])
                instance.totalTimeDrivenMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalTimeDrivenMs"])
                return instance
            }


            // Decoder for [DriversResponse]
            Decoders.addDecoder(clazz: [DriversResponse].self) { (source: AnyObject) -> [DriversResponse] in
                return Decoders.decode(clazz: [DriversResponse].self, source: source)
            }
            // Decoder for DriversResponse
            Decoders.addDecoder(clazz: DriversResponse.self) { (source: AnyObject) -> DriversResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriversResponse()
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                return instance
            }


            // Decoder for [DriversSummaryResponse]
            Decoders.addDecoder(clazz: [DriversSummaryResponse].self) { (source: AnyObject) -> [DriversSummaryResponse] in
                return Decoders.decode(clazz: [DriversSummaryResponse].self, source: source)
            }
            // Decoder for DriversSummaryResponse
            Decoders.addDecoder(clazz: DriversSummaryResponse.self) { (source: AnyObject) -> DriversSummaryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriversSummaryResponse()
                instance.summaries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Summaries"])
                return instance
            }


            // Decoder for [DriversSummaryResponseSummaries]
            Decoders.addDecoder(clazz: [DriversSummaryResponseSummaries].self) { (source: AnyObject) -> [DriversSummaryResponseSummaries] in
                return Decoders.decode(clazz: [DriversSummaryResponseSummaries].self, source: source)
            }
            // Decoder for DriversSummaryResponseSummaries
            Decoders.addDecoder(clazz: DriversSummaryResponseSummaries.self) { (source: AnyObject) -> DriversSummaryResponseSummaries in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DriversSummaryResponseSummaries()
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.distanceMiles = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["distanceMiles"])
                instance.driveMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driveMs"])
                instance.activeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activeMs"])
                instance.driverUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["driverUsername"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.driverName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["driverName"])
                instance.onDutyMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["onDutyMs"])
                return instance
            }


            // Decoder for [DvirBase]
            Decoders.addDecoder(clazz: [DvirBase].self) { (source: AnyObject) -> [DvirBase] in
                return Decoders.decode(clazz: [DvirBase].self, source: source)
            }
            // Decoder for DvirBase
            Decoders.addDecoder(clazz: DvirBase.self) { (source: AnyObject) -> DvirBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirBase()
                instance.authorSignature = Decoders.decodeOptional(clazz: DvirBaseAuthorSignature.self, source: sourceDictionary["authorSignature"])
                instance.defectsCorrected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["defectsCorrected"])
                instance.defectsNeedNotBeCorrected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["defectsNeedNotBeCorrected"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.inspectionType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inspectionType"])
                instance.mechanicNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mechanicNotes"])
                instance.mechanicOrAgentSignature = Decoders.decodeOptional(clazz: DvirBaseMechanicOrAgentSignature.self, source: sourceDictionary["mechanicOrAgentSignature"])
                instance.nextDriverSignature = Decoders.decodeOptional(clazz: DvirBaseNextDriverSignature.self, source: sourceDictionary["nextDriverSignature"])
                instance.odometerMiles = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["odometerMiles"])
                instance.timeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeMs"])
                instance.trailerDefects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trailerDefects"])
                instance.trailerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trailerId"])
                instance.trailerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trailerName"])
                instance.vehicle = Decoders.decodeOptional(clazz: DvirBaseVehicle.self, source: sourceDictionary["vehicle"])
                instance.vehicleCondition = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicleCondition"])
                instance.vehicleDefects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicleDefects"])
                return instance
            }


            // Decoder for [DvirBaseAuthorSignature]
            Decoders.addDecoder(clazz: [DvirBaseAuthorSignature].self) { (source: AnyObject) -> [DvirBaseAuthorSignature] in
                return Decoders.decode(clazz: [DvirBaseAuthorSignature].self, source: source)
            }
            // Decoder for DvirBaseAuthorSignature
            Decoders.addDecoder(clazz: DvirBaseAuthorSignature.self) { (source: AnyObject) -> DvirBaseAuthorSignature in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirBaseAuthorSignature()
                instance.mechanicUserId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["mechanicUserId"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.signedAt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["signedAt"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [DvirBaseMechanicOrAgentSignature]
            Decoders.addDecoder(clazz: [DvirBaseMechanicOrAgentSignature].self) { (source: AnyObject) -> [DvirBaseMechanicOrAgentSignature] in
                return Decoders.decode(clazz: [DvirBaseMechanicOrAgentSignature].self, source: source)
            }
            // Decoder for DvirBaseMechanicOrAgentSignature
            Decoders.addDecoder(clazz: DvirBaseMechanicOrAgentSignature.self) { (source: AnyObject) -> DvirBaseMechanicOrAgentSignature in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirBaseMechanicOrAgentSignature()
                instance.mechanicUserId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["mechanicUserId"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.signedAt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["signedAt"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [DvirBaseNextDriverSignature]
            Decoders.addDecoder(clazz: [DvirBaseNextDriverSignature].self) { (source: AnyObject) -> [DvirBaseNextDriverSignature] in
                return Decoders.decode(clazz: [DvirBaseNextDriverSignature].self, source: source)
            }
            // Decoder for DvirBaseNextDriverSignature
            Decoders.addDecoder(clazz: DvirBaseNextDriverSignature.self) { (source: AnyObject) -> DvirBaseNextDriverSignature in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirBaseNextDriverSignature()
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.signedAt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["signedAt"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [DvirBaseTrailerDefects]
            Decoders.addDecoder(clazz: [DvirBaseTrailerDefects].self) { (source: AnyObject) -> [DvirBaseTrailerDefects] in
                return Decoders.decode(clazz: [DvirBaseTrailerDefects].self, source: source)
            }
            // Decoder for DvirBaseTrailerDefects
            Decoders.addDecoder(clazz: DvirBaseTrailerDefects.self) { (source: AnyObject) -> DvirBaseTrailerDefects in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirBaseTrailerDefects()
                instance.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"])
                instance.defectType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defectType"])
                return instance
            }


            // Decoder for [DvirBaseVehicle]
            Decoders.addDecoder(clazz: [DvirBaseVehicle].self) { (source: AnyObject) -> [DvirBaseVehicle] in
                return Decoders.decode(clazz: [DvirBaseVehicle].self, source: source)
            }
            // Decoder for DvirBaseVehicle
            Decoders.addDecoder(clazz: DvirBaseVehicle.self) { (source: AnyObject) -> DvirBaseVehicle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirBaseVehicle()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [DvirListResponse]
            Decoders.addDecoder(clazz: [DvirListResponse].self) { (source: AnyObject) -> [DvirListResponse] in
                return Decoders.decode(clazz: [DvirListResponse].self, source: source)
            }
            // Decoder for DvirListResponse
            Decoders.addDecoder(clazz: DvirListResponse.self) { (source: AnyObject) -> DvirListResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DvirListResponse()
                instance.dvirs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dvirs"])
                return instance
            }


            // Decoder for [EngineState]
            Decoders.addDecoder(clazz: [EngineState].self) { (source: AnyObject) -> [EngineState] in
                return Decoders.decode(clazz: [EngineState].self, source: source)
            }
            // Decoder for EngineState
            Decoders.addDecoder(clazz: EngineState.self) { (source: AnyObject) -> EngineState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EngineState()
                instance.timeMs = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["timeMs"])
                instance.value = EngineState.Value(rawValue: (sourceDictionary["value"] as? String) ?? "") 
                return instance
            }


            // Decoder for [FleetVehicleLocation]
            Decoders.addDecoder(clazz: [FleetVehicleLocation].self) { (source: AnyObject) -> [FleetVehicleLocation] in
                return Decoders.decode(clazz: [FleetVehicleLocation].self, source: source)
            }
            // Decoder for FleetVehicleLocation
            Decoders.addDecoder(clazz: FleetVehicleLocation.self) { (source: AnyObject) -> FleetVehicleLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FleetVehicleLocation()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                instance.speedMilesPerHour = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["speedMilesPerHour"])
                instance.timeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeMs"])
                return instance
            }


            // Decoder for [FleetVehicleResponse]
            Decoders.addDecoder(clazz: [FleetVehicleResponse].self) { (source: AnyObject) -> [FleetVehicleResponse] in
                return Decoders.decode(clazz: [FleetVehicleResponse].self, source: source)
            }
            // Decoder for FleetVehicleResponse
            Decoders.addDecoder(clazz: FleetVehicleResponse.self) { (source: AnyObject) -> FleetVehicleResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FleetVehicleResponse()
                instance.externalIds = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["externalIds"])
                instance.harshAccelSetting = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["harshAccelSetting"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.vehicleInfo = Decoders.decodeOptional(clazz: FleetVehicleResponseVehicleInfo.self, source: sourceDictionary["vehicleInfo"])
                return instance
            }


            // Decoder for [FleetVehicleResponseVehicleInfo]
            Decoders.addDecoder(clazz: [FleetVehicleResponseVehicleInfo].self) { (source: AnyObject) -> [FleetVehicleResponseVehicleInfo] in
                return Decoders.decode(clazz: [FleetVehicleResponseVehicleInfo].self, source: source)
            }
            // Decoder for FleetVehicleResponseVehicleInfo
            Decoders.addDecoder(clazz: FleetVehicleResponseVehicleInfo.self) { (source: AnyObject) -> FleetVehicleResponseVehicleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FleetVehicleResponseVehicleInfo()
                instance.year = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["year"])
                instance.model = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["model"])
                instance.vin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vin"])
                instance.make = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["make"])
                return instance
            }


            // Decoder for [HosAuthenticationLogsResponse]
            Decoders.addDecoder(clazz: [HosAuthenticationLogsResponse].self) { (source: AnyObject) -> [HosAuthenticationLogsResponse] in
                return Decoders.decode(clazz: [HosAuthenticationLogsResponse].self, source: source)
            }
            // Decoder for HosAuthenticationLogsResponse
            Decoders.addDecoder(clazz: HosAuthenticationLogsResponse.self) { (source: AnyObject) -> HosAuthenticationLogsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HosAuthenticationLogsResponse()
                instance.authenticationLogs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["authenticationLogs"])
                return instance
            }


            // Decoder for [HosAuthenticationLogsResponseAuthenticationLogs]
            Decoders.addDecoder(clazz: [HosAuthenticationLogsResponseAuthenticationLogs].self) { (source: AnyObject) -> [HosAuthenticationLogsResponseAuthenticationLogs] in
                return Decoders.decode(clazz: [HosAuthenticationLogsResponseAuthenticationLogs].self, source: source)
            }
            // Decoder for HosAuthenticationLogsResponseAuthenticationLogs
            Decoders.addDecoder(clazz: HosAuthenticationLogsResponseAuthenticationLogs.self) { (source: AnyObject) -> HosAuthenticationLogsResponseAuthenticationLogs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HosAuthenticationLogsResponseAuthenticationLogs()
                instance.actionType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["actionType"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.happenedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["happenedAtMs"])
                instance.addressName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressName"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                return instance
            }


            // Decoder for [HosLogsResponse]
            Decoders.addDecoder(clazz: [HosLogsResponse].self) { (source: AnyObject) -> [HosLogsResponse] in
                return Decoders.decode(clazz: [HosLogsResponse].self, source: source)
            }
            // Decoder for HosLogsResponse
            Decoders.addDecoder(clazz: HosLogsResponse.self) { (source: AnyObject) -> HosLogsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HosLogsResponse()
                instance.logs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["logs"])
                return instance
            }


            // Decoder for [HosLogsResponseLogs]
            Decoders.addDecoder(clazz: [HosLogsResponseLogs].self) { (source: AnyObject) -> [HosLogsResponseLogs] in
                return Decoders.decode(clazz: [HosLogsResponseLogs].self, source: source)
            }
            // Decoder for HosLogsResponseLogs
            Decoders.addDecoder(clazz: HosLogsResponseLogs.self) { (source: AnyObject) -> HosLogsResponseLogs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HosLogsResponseLogs()
                instance.locLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["locLng"])
                instance.logStartMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["logStartMs"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.statusType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statusType"])
                instance.locCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locCity"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.locName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locName"])
                instance.locLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["locLat"])
                instance.remark = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remark"])
                instance.locState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locState"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                instance.codriverIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codriverIds"])
                return instance
            }


            // Decoder for [HosLogsSummaryResponse]
            Decoders.addDecoder(clazz: [HosLogsSummaryResponse].self) { (source: AnyObject) -> [HosLogsSummaryResponse] in
                return Decoders.decode(clazz: [HosLogsSummaryResponse].self, source: source)
            }
            // Decoder for HosLogsSummaryResponse
            Decoders.addDecoder(clazz: HosLogsSummaryResponse.self) { (source: AnyObject) -> HosLogsSummaryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HosLogsSummaryResponse()
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                return instance
            }


            // Decoder for [HosLogsSummaryResponseDrivers]
            Decoders.addDecoder(clazz: [HosLogsSummaryResponseDrivers].self) { (source: AnyObject) -> [HosLogsSummaryResponseDrivers] in
                return Decoders.decode(clazz: [HosLogsSummaryResponseDrivers].self, source: source)
            }
            // Decoder for HosLogsSummaryResponseDrivers
            Decoders.addDecoder(clazz: HosLogsSummaryResponseDrivers.self) { (source: AnyObject) -> HosLogsSummaryResponseDrivers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HosLogsSummaryResponseDrivers()
                instance.timeUntilBreak = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeUntilBreak"])
                instance.vehicleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicleName"])
                instance.drivingInViolationToday = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["drivingInViolationToday"])
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.cycleRemaining = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cycleRemaining"])
                instance.driverName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["driverName"])
                instance.dutyStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dutyStatus"])
                instance.cycleTomorrow = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cycleTomorrow"])
                instance.shiftDriveRemaining = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["shiftDriveRemaining"])
                instance.timeInCurrentStatus = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeInCurrentStatus"])
                instance.drivingInViolationCycle = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["drivingInViolationCycle"])
                instance.shiftRemaining = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["shiftRemaining"])
                return instance
            }


            // Decoder for [HumidityResponse]
            Decoders.addDecoder(clazz: [HumidityResponse].self) { (source: AnyObject) -> [HumidityResponse] in
                return Decoders.decode(clazz: [HumidityResponse].self, source: source)
            }
            // Decoder for HumidityResponse
            Decoders.addDecoder(clazz: HumidityResponse.self) { (source: AnyObject) -> HumidityResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HumidityResponse()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [HumidityResponseSensors]
            Decoders.addDecoder(clazz: [HumidityResponseSensors].self) { (source: AnyObject) -> [HumidityResponseSensors] in
                return Decoders.decode(clazz: [HumidityResponseSensors].self, source: source)
            }
            // Decoder for HumidityResponseSensors
            Decoders.addDecoder(clazz: HumidityResponseSensors.self) { (source: AnyObject) -> HumidityResponseSensors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HumidityResponseSensors()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.humidity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["humidity"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [InlineObject]
            Decoders.addDecoder(clazz: [InlineObject].self) { (source: AnyObject) -> [InlineObject] in
                return Decoders.decode(clazz: [InlineObject].self, source: source)
            }
            // Decoder for InlineObject
            Decoders.addDecoder(clazz: InlineObject.self) { (source: AnyObject) -> InlineObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject()
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                return instance
            }


            // Decoder for [InlineObject1]
            Decoders.addDecoder(clazz: [InlineObject1].self) { (source: AnyObject) -> [InlineObject1] in
                return Decoders.decode(clazz: [InlineObject1].self, source: source)
            }
            // Decoder for InlineObject1
            Decoders.addDecoder(clazz: InlineObject1.self) { (source: AnyObject) -> InlineObject1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject1()
                instance.contactIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contactIds"])
                instance.formattedAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formattedAddress"])
                instance.geofence = Decoders.decodeOptional(clazz: AddressGeofence.self, source: sourceDictionary["geofence"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.tagIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tagIds"])
                return instance
            }


            // Decoder for [InlineObject10]
            Decoders.addDecoder(clazz: [InlineObject10].self) { (source: AnyObject) -> [InlineObject10] in
                return Decoders.decode(clazz: [InlineObject10].self, source: source)
            }
            // Decoder for InlineObject10
            Decoders.addDecoder(clazz: InlineObject10.self) { (source: AnyObject) -> InlineObject10 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject10()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineObject11]
            Decoders.addDecoder(clazz: [InlineObject11].self) { (source: AnyObject) -> [InlineObject11] in
                return Decoders.decode(clazz: [InlineObject11].self, source: source)
            }
            // Decoder for InlineObject11
            Decoders.addDecoder(clazz: InlineObject11.self) { (source: AnyObject) -> InlineObject11 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject11()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineObject12]
            Decoders.addDecoder(clazz: [InlineObject12].self) { (source: AnyObject) -> [InlineObject12] in
                return Decoders.decode(clazz: [InlineObject12].self, source: source)
            }
            // Decoder for InlineObject12
            Decoders.addDecoder(clazz: InlineObject12.self) { (source: AnyObject) -> InlineObject12 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject12()
                instance.inspectionType = InlineObject12.InspectionType(rawValue: (sourceDictionary["inspectionType"] as? String) ?? "") 
                instance.mechanicNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mechanicNotes"])
                instance.odometerMiles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["odometerMiles"])
                instance.previousDefectsCorrected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["previousDefectsCorrected"])
                instance.previousDefectsIgnored = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["previousDefectsIgnored"])
                instance.safe = InlineObject12.Safe(rawValue: (sourceDictionary["safe"] as? String) ?? "") 
                instance.trailerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trailerId"])
                instance.userEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userEmail"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vehicleId"])
                return instance
            }


            // Decoder for [InlineObject13]
            Decoders.addDecoder(clazz: [InlineObject13].self) { (source: AnyObject) -> [InlineObject13] in
                return Decoders.decode(clazz: [InlineObject13].self, source: source)
            }
            // Decoder for InlineObject13
            Decoders.addDecoder(clazz: InlineObject13.self) { (source: AnyObject) -> InlineObject13 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject13()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineObject14]
            Decoders.addDecoder(clazz: [InlineObject14].self) { (source: AnyObject) -> [InlineObject14] in
                return Decoders.decode(clazz: [InlineObject14].self, source: source)
            }
            // Decoder for InlineObject14
            Decoders.addDecoder(clazz: InlineObject14.self) { (source: AnyObject) -> InlineObject14 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject14()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [InlineObject15]
            Decoders.addDecoder(clazz: [InlineObject15].self) { (source: AnyObject) -> [InlineObject15] in
                return Decoders.decode(clazz: [InlineObject15].self, source: source)
            }
            // Decoder for InlineObject15
            Decoders.addDecoder(clazz: InlineObject15.self) { (source: AnyObject) -> InlineObject15 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject15()
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                return instance
            }


            // Decoder for [InlineObject16]
            Decoders.addDecoder(clazz: [InlineObject16].self) { (source: AnyObject) -> [InlineObject16] in
                return Decoders.decode(clazz: [InlineObject16].self, source: source)
            }
            // Decoder for InlineObject16
            Decoders.addDecoder(clazz: InlineObject16.self) { (source: AnyObject) -> InlineObject16 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject16()
                instance.externalIds = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["externalIds"])
                instance.harshAccelSetting = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harsh_accel_setting"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [InlineObject17]
            Decoders.addDecoder(clazz: [InlineObject17].self) { (source: AnyObject) -> [InlineObject17] in
                return Decoders.decode(clazz: [InlineObject17].self, source: source)
            }
            // Decoder for InlineObject17
            Decoders.addDecoder(clazz: InlineObject17.self) { (source: AnyObject) -> InlineObject17 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject17()
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                return instance
            }


            // Decoder for [InlineObject18]
            Decoders.addDecoder(clazz: [InlineObject18].self) { (source: AnyObject) -> [InlineObject18] in
                return Decoders.decode(clazz: [InlineObject18].self, source: source)
            }
            // Decoder for InlineObject18
            Decoders.addDecoder(clazz: InlineObject18.self) { (source: AnyObject) -> InlineObject18 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject18()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineObject19]
            Decoders.addDecoder(clazz: [InlineObject19].self) { (source: AnyObject) -> [InlineObject19] in
                return Decoders.decode(clazz: [InlineObject19].self, source: source)
            }
            // Decoder for InlineObject19
            Decoders.addDecoder(clazz: InlineObject19.self) { (source: AnyObject) -> InlineObject19 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject19()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [InlineObject2]
            Decoders.addDecoder(clazz: [InlineObject2].self) { (source: AnyObject) -> [InlineObject2] in
                return Decoders.decode(clazz: [InlineObject2].self, source: source)
            }
            // Decoder for InlineObject2
            Decoders.addDecoder(clazz: InlineObject2.self) { (source: AnyObject) -> InlineObject2 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject2()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.radius = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["radius"])
                return instance
            }


            // Decoder for [InlineObject20]
            Decoders.addDecoder(clazz: [InlineObject20].self) { (source: AnyObject) -> [InlineObject20] in
                return Decoders.decode(clazz: [InlineObject20].self, source: source)
            }
            // Decoder for InlineObject20
            Decoders.addDecoder(clazz: InlineObject20.self) { (source: AnyObject) -> InlineObject20 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject20()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [InlineObject21]
            Decoders.addDecoder(clazz: [InlineObject21].self) { (source: AnyObject) -> [InlineObject21] in
                return Decoders.decode(clazz: [InlineObject21].self, source: source)
            }
            // Decoder for InlineObject21
            Decoders.addDecoder(clazz: InlineObject21.self) { (source: AnyObject) -> InlineObject21 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject21()
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.fillMissing = InlineObject21.FillMissing(rawValue: (sourceDictionary["fillMissing"] as? String) ?? "") 
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.series = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["series"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                instance.stepMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stepMs"])
                return instance
            }


            // Decoder for [InlineObject22]
            Decoders.addDecoder(clazz: [InlineObject22].self) { (source: AnyObject) -> [InlineObject22] in
                return Decoders.decode(clazz: [InlineObject22].self, source: source)
            }
            // Decoder for InlineObject22
            Decoders.addDecoder(clazz: InlineObject22.self) { (source: AnyObject) -> InlineObject22 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject22()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [InlineObject23]
            Decoders.addDecoder(clazz: [InlineObject23].self) { (source: AnyObject) -> [InlineObject23] in
                return Decoders.decode(clazz: [InlineObject23].self, source: source)
            }
            // Decoder for InlineObject23
            Decoders.addDecoder(clazz: InlineObject23.self) { (source: AnyObject) -> InlineObject23 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject23()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineObject24]
            Decoders.addDecoder(clazz: [InlineObject24].self) { (source: AnyObject) -> [InlineObject24] in
                return Decoders.decode(clazz: [InlineObject24].self, source: source)
            }
            // Decoder for InlineObject24
            Decoders.addDecoder(clazz: InlineObject24.self) { (source: AnyObject) -> InlineObject24 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject24()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [InlineObject3]
            Decoders.addDecoder(clazz: [InlineObject3].self) { (source: AnyObject) -> [InlineObject3] in
                return Decoders.decode(clazz: [InlineObject3].self, source: source)
            }
            // Decoder for InlineObject3
            Decoders.addDecoder(clazz: InlineObject3.self) { (source: AnyObject) -> InlineObject3 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject3()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineObject4]
            Decoders.addDecoder(clazz: [InlineObject4].self) { (source: AnyObject) -> [InlineObject4] in
                return Decoders.decode(clazz: [InlineObject4].self, source: source)
            }
            // Decoder for InlineObject4
            Decoders.addDecoder(clazz: InlineObject4.self) { (source: AnyObject) -> InlineObject4 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject4()
                instance.reactivate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["reactivate"])
                return instance
            }


            // Decoder for [InlineObject5]
            Decoders.addDecoder(clazz: [InlineObject5].self) { (source: AnyObject) -> [InlineObject5] in
                return Decoders.decode(clazz: [InlineObject5].self, source: source)
            }
            // Decoder for InlineObject5
            Decoders.addDecoder(clazz: InlineObject5.self) { (source: AnyObject) -> InlineObject5 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject5()
                instance.endMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endMs"])
                instance.orgId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["orgId"])
                instance.startMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startMs"])
                return instance
            }


            // Decoder for [InlineObject6]
            Decoders.addDecoder(clazz: [InlineObject6].self) { (source: AnyObject) -> [InlineObject6] in
                return Decoders.decode(clazz: [InlineObject6].self, source: source)
            }
            // Decoder for InlineObject6
            Decoders.addDecoder(clazz: InlineObject6.self) { (source: AnyObject) -> InlineObject6 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject6()
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                return instance
            }


            // Decoder for [InlineObject7]
            Decoders.addDecoder(clazz: [InlineObject7].self) { (source: AnyObject) -> [InlineObject7] in
                return Decoders.decode(clazz: [InlineObject7].self, source: source)
            }
            // Decoder for InlineObject7
            Decoders.addDecoder(clazz: InlineObject7.self) { (source: AnyObject) -> InlineObject7 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject7()
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                return instance
            }


            // Decoder for [InlineObject8]
            Decoders.addDecoder(clazz: [InlineObject8].self) { (source: AnyObject) -> [InlineObject8] in
                return Decoders.decode(clazz: [InlineObject8].self, source: source)
            }
            // Decoder for InlineObject8
            Decoders.addDecoder(clazz: InlineObject8.self) { (source: AnyObject) -> InlineObject8 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject8()
                instance.driverId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driverId"])
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                return instance
            }


            // Decoder for [InlineObject9]
            Decoders.addDecoder(clazz: [InlineObject9].self) { (source: AnyObject) -> [InlineObject9] in
                return Decoders.decode(clazz: [InlineObject9].self, source: source)
            }
            // Decoder for InlineObject9
            Decoders.addDecoder(clazz: InlineObject9.self) { (source: AnyObject) -> InlineObject9 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject9()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                return instance
            }


            // Decoder for [InlineResponse2002]
            Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
                return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
            }
            // Decoder for InlineResponse2002
            Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [InlineResponse2003]
            Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
                return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
            }
            // Decoder for InlineResponse2003
            Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [InlineResponse2004]
            Decoders.addDecoder(clazz: [InlineResponse2004].self) { (source: AnyObject) -> [InlineResponse2004] in
                return Decoders.decode(clazz: [InlineResponse2004].self, source: source)
            }
            // Decoder for InlineResponse2004
            Decoders.addDecoder(clazz: InlineResponse2004.self) { (source: AnyObject) -> InlineResponse2004 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2004()
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [InlineResponse2005]
            Decoders.addDecoder(clazz: [InlineResponse2005].self) { (source: AnyObject) -> [InlineResponse2005] in
                return Decoders.decode(clazz: [InlineResponse2005].self, source: source)
            }
            // Decoder for InlineResponse2005
            Decoders.addDecoder(clazz: InlineResponse2005.self) { (source: AnyObject) -> InlineResponse2005 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2005()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                instance.vehicleStats = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicleStats"])
                return instance
            }


            // Decoder for [InlineResponse2005VehicleStats]
            Decoders.addDecoder(clazz: [InlineResponse2005VehicleStats].self) { (source: AnyObject) -> [InlineResponse2005VehicleStats] in
                return Decoders.decode(clazz: [InlineResponse2005VehicleStats].self, source: source)
            }
            // Decoder for InlineResponse2005VehicleStats
            Decoders.addDecoder(clazz: InlineResponse2005VehicleStats.self) { (source: AnyObject) -> InlineResponse2005VehicleStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2005VehicleStats()
                instance.engineState = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["engineState"])
                instance.auxInput2 = Decoders.decodeOptional(clazz: AuxInputSeries.self, source: sourceDictionary["auxInput2"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vehicleId"])
                instance.auxInput1 = Decoders.decodeOptional(clazz: AuxInputSeries.self, source: sourceDictionary["auxInput1"])
                return instance
            }


            // Decoder for [InlineResponse2006]
            Decoders.addDecoder(clazz: [InlineResponse2006].self) { (source: AnyObject) -> [InlineResponse2006] in
                return Decoders.decode(clazz: [InlineResponse2006].self, source: source)
            }
            // Decoder for InlineResponse2006
            Decoders.addDecoder(clazz: InlineResponse2006.self) { (source: AnyObject) -> InlineResponse2006 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2006()
                instance.dataInputs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dataInputs"])
                return instance
            }


            // Decoder for [InlineResponse2007]
            Decoders.addDecoder(clazz: [InlineResponse2007].self) { (source: AnyObject) -> [InlineResponse2007] in
                return Decoders.decode(clazz: [InlineResponse2007].self, source: source)
            }
            // Decoder for InlineResponse2007
            Decoders.addDecoder(clazz: InlineResponse2007.self) { (source: AnyObject) -> InlineResponse2007 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2007()
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                return instance
            }


            // Decoder for [InlineResponse2008]
            Decoders.addDecoder(clazz: [InlineResponse2008].self) { (source: AnyObject) -> [InlineResponse2008] in
                return Decoders.decode(clazz: [InlineResponse2008].self, source: source)
            }
            // Decoder for InlineResponse2008
            Decoders.addDecoder(clazz: InlineResponse2008.self) { (source: AnyObject) -> InlineResponse2008 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2008()
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [InlineResponse2009]
            Decoders.addDecoder(clazz: [InlineResponse2009].self) { (source: AnyObject) -> [InlineResponse2009] in
                return Decoders.decode(clazz: [InlineResponse2009].self, source: source)
            }
            // Decoder for InlineResponse2009
            Decoders.addDecoder(clazz: InlineResponse2009.self) { (source: AnyObject) -> InlineResponse2009 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2009()
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                return instance
            }


            // Decoder for [JobStatus]
            Decoders.addDecoder(clazz: [JobStatus].self) { (source: AnyObject) -> [JobStatus] in
                return Decoders.decode(clazz: [JobStatus].self, source: source)
            }
            // Decoder for JobStatus
            Decoders.addDecoder(clazz: JobStatus.self) { (source: AnyObject) -> JobStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobStatus()
                return instance
            }


            // Decoder for [JobUpdateObject]
            Decoders.addDecoder(clazz: [JobUpdateObject].self) { (source: AnyObject) -> [JobUpdateObject] in
                return Decoders.decode(clazz: [JobUpdateObject].self, source: source)
            }
            // Decoder for JobUpdateObject
            Decoders.addDecoder(clazz: JobUpdateObject.self) { (source: AnyObject) -> JobUpdateObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobUpdateObject()
                instance.changedAtMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changed_at_ms"])
                instance.jobId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["job_id"])
                instance.jobState = Decoders.decodeOptional(clazz: JobStatus.self, source: sourceDictionary["job_state"])
                instance.prevJobState = Decoders.decodeOptional(clazz: PrevJobStatus.self, source: sourceDictionary["prev_job_state"])
                instance.route = Decoders.decodeOptional(clazz: DispatchRoute.self, source: sourceDictionary["route"])
                instance.routeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["route_id"])
                return instance
            }


            // Decoder for [Machine]
            Decoders.addDecoder(clazz: [Machine].self) { (source: AnyObject) -> [Machine] in
                return Decoders.decode(clazz: [Machine].self, source: source)
            }
            // Decoder for Machine
            Decoders.addDecoder(clazz: Machine.self) { (source: AnyObject) -> Machine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Machine()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                return instance
            }


            // Decoder for [MachineHistoryResponse]
            Decoders.addDecoder(clazz: [MachineHistoryResponse].self) { (source: AnyObject) -> [MachineHistoryResponse] in
                return Decoders.decode(clazz: [MachineHistoryResponse].self, source: source)
            }
            // Decoder for MachineHistoryResponse
            Decoders.addDecoder(clazz: MachineHistoryResponse.self) { (source: AnyObject) -> MachineHistoryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MachineHistoryResponse()
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                return instance
            }


            // Decoder for [MachineHistoryResponseMachines]
            Decoders.addDecoder(clazz: [MachineHistoryResponseMachines].self) { (source: AnyObject) -> [MachineHistoryResponseMachines] in
                return Decoders.decode(clazz: [MachineHistoryResponseMachines].self, source: source)
            }
            // Decoder for MachineHistoryResponseMachines
            Decoders.addDecoder(clazz: MachineHistoryResponseMachines.self) { (source: AnyObject) -> MachineHistoryResponseMachines in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MachineHistoryResponseMachines()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.vibrations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vibrations"])
                return instance
            }


            // Decoder for [MachineHistoryResponseVibrations]
            Decoders.addDecoder(clazz: [MachineHistoryResponseVibrations].self) { (source: AnyObject) -> [MachineHistoryResponseVibrations] in
                return Decoders.decode(clazz: [MachineHistoryResponseVibrations].self, source: source)
            }
            // Decoder for MachineHistoryResponseVibrations
            Decoders.addDecoder(clazz: MachineHistoryResponseVibrations.self) { (source: AnyObject) -> MachineHistoryResponseVibrations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MachineHistoryResponseVibrations()
                instance.X = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["X"])
                instance.Y = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Y"])
                instance.Z = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Z"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [Pagination]
            Decoders.addDecoder(clazz: [Pagination].self) { (source: AnyObject) -> [Pagination] in
                return Decoders.decode(clazz: [Pagination].self, source: source)
            }
            // Decoder for Pagination
            Decoders.addDecoder(clazz: Pagination.self) { (source: AnyObject) -> Pagination in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pagination()
                instance.endCursor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endCursor"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPrevPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPrevPage"])
                instance.startCursor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startCursor"])
                return instance
            }


            // Decoder for [PrevJobStatus]
            Decoders.addDecoder(clazz: [PrevJobStatus].self) { (source: AnyObject) -> [PrevJobStatus] in
                return Decoders.decode(clazz: [PrevJobStatus].self, source: source)
            }
            // Decoder for PrevJobStatus
            Decoders.addDecoder(clazz: PrevJobStatus.self) { (source: AnyObject) -> PrevJobStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PrevJobStatus()
                return instance
            }


            // Decoder for [SafetyReportHarshEvent]
            Decoders.addDecoder(clazz: [SafetyReportHarshEvent].self) { (source: AnyObject) -> [SafetyReportHarshEvent] in
                return Decoders.decode(clazz: [SafetyReportHarshEvent].self, source: source)
            }
            // Decoder for SafetyReportHarshEvent
            Decoders.addDecoder(clazz: SafetyReportHarshEvent.self) { (source: AnyObject) -> SafetyReportHarshEvent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SafetyReportHarshEvent()
                instance.harshEventType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["harshEventType"])
                instance.timestampMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestampMs"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vehicleId"])
                return instance
            }


            // Decoder for [Sensor]
            Decoders.addDecoder(clazz: [Sensor].self) { (source: AnyObject) -> [Sensor] in
                return Decoders.decode(clazz: [Sensor].self, source: source)
            }
            // Decoder for Sensor
            Decoders.addDecoder(clazz: Sensor.self) { (source: AnyObject) -> Sensor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Sensor()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["macAddress"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SensorHistoryResponse]
            Decoders.addDecoder(clazz: [SensorHistoryResponse].self) { (source: AnyObject) -> [SensorHistoryResponse] in
                return Decoders.decode(clazz: [SensorHistoryResponse].self, source: source)
            }
            // Decoder for SensorHistoryResponse
            Decoders.addDecoder(clazz: SensorHistoryResponse.self) { (source: AnyObject) -> SensorHistoryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SensorHistoryResponse()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [SensorHistoryResponseResults]
            Decoders.addDecoder(clazz: [SensorHistoryResponseResults].self) { (source: AnyObject) -> [SensorHistoryResponseResults] in
                return Decoders.decode(clazz: [SensorHistoryResponseResults].self, source: source)
            }
            // Decoder for SensorHistoryResponseResults
            Decoders.addDecoder(clazz: SensorHistoryResponseResults.self) { (source: AnyObject) -> SensorHistoryResponseResults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SensorHistoryResponseResults()
                instance.series = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["series"])
                instance.timeMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeMs"])
                return instance
            }


            // Decoder for [SensorsHistorySeries]
            Decoders.addDecoder(clazz: [SensorsHistorySeries].self) { (source: AnyObject) -> [SensorsHistorySeries] in
                return Decoders.decode(clazz: [SensorsHistorySeries].self, source: source)
            }
            // Decoder for SensorsHistorySeries
            Decoders.addDecoder(clazz: SensorsHistorySeries.self) { (source: AnyObject) -> SensorsHistorySeries in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SensorsHistorySeries()
                instance.field = SensorsHistorySeries.Field(rawValue: (sourceDictionary["field"] as? String) ?? "") 
                instance.widgetId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["widgetId"])
                return instance
            }


            // Decoder for [Tag]
            Decoders.addDecoder(clazz: [Tag].self) { (source: AnyObject) -> [Tag] in
                return Decoders.decode(clazz: [Tag].self, source: source)
            }
            // Decoder for Tag
            Decoders.addDecoder(clazz: Tag.self) { (source: AnyObject) -> Tag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Tag()
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parentTagId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["parentTagId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [TagCreate]
            Decoders.addDecoder(clazz: [TagCreate].self) { (source: AnyObject) -> [TagCreate] in
                return Decoders.decode(clazz: [TagCreate].self, source: source)
            }
            // Decoder for TagCreate
            Decoders.addDecoder(clazz: TagCreate.self) { (source: AnyObject) -> TagCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TagCreate()
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parentTagId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["parentTagId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [TagMetadata]
            Decoders.addDecoder(clazz: [TagMetadata].self) { (source: AnyObject) -> [TagMetadata] in
                return Decoders.decode(clazz: [TagMetadata].self, source: source)
            }
            // Decoder for TagMetadata
            Decoders.addDecoder(clazz: TagMetadata.self) { (source: AnyObject) -> TagMetadata in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TagMetadata()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TagModify]
            Decoders.addDecoder(clazz: [TagModify].self) { (source: AnyObject) -> [TagModify] in
                return Decoders.decode(clazz: [TagModify].self, source: source)
            }
            // Decoder for TagModify
            Decoders.addDecoder(clazz: TagModify.self) { (source: AnyObject) -> TagModify in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TagModify()
                instance.add = Decoders.decodeOptional(clazz: TagModifyAdd.self, source: sourceDictionary["add"])
                instance.delete = Decoders.decodeOptional(clazz: TagModifyDelete.self, source: sourceDictionary["delete"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parentTagId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["parentTagId"])
                return instance
            }


            // Decoder for [TagModifyAdd]
            Decoders.addDecoder(clazz: [TagModifyAdd].self) { (source: AnyObject) -> [TagModifyAdd] in
                return Decoders.decode(clazz: [TagModifyAdd].self, source: source)
            }
            // Decoder for TagModifyAdd
            Decoders.addDecoder(clazz: TagModifyAdd.self) { (source: AnyObject) -> TagModifyAdd in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TagModifyAdd()
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                return instance
            }


            // Decoder for [TagModifyDelete]
            Decoders.addDecoder(clazz: [TagModifyDelete].self) { (source: AnyObject) -> [TagModifyDelete] in
                return Decoders.decode(clazz: [TagModifyDelete].self, source: source)
            }
            // Decoder for TagModifyDelete
            Decoders.addDecoder(clazz: TagModifyDelete.self) { (source: AnyObject) -> TagModifyDelete in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TagModifyDelete()
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                return instance
            }


            // Decoder for [TagUpdate]
            Decoders.addDecoder(clazz: [TagUpdate].self) { (source: AnyObject) -> [TagUpdate] in
                return Decoders.decode(clazz: [TagUpdate].self, source: source)
            }
            // Decoder for TagUpdate
            Decoders.addDecoder(clazz: TagUpdate.self) { (source: AnyObject) -> TagUpdate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TagUpdate()
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                instance.drivers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drivers"])
                instance.machines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["machines"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parentTagId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["parentTagId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [TaggedAddress]
            Decoders.addDecoder(clazz: [TaggedAddress].self) { (source: AnyObject) -> [TaggedAddress] in
                return Decoders.decode(clazz: [TaggedAddress].self, source: source)
            }
            // Decoder for TaggedAddress
            Decoders.addDecoder(clazz: TaggedAddress.self) { (source: AnyObject) -> TaggedAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedAddress()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TaggedAddressBase]
            Decoders.addDecoder(clazz: [TaggedAddressBase].self) { (source: AnyObject) -> [TaggedAddressBase] in
                return Decoders.decode(clazz: [TaggedAddressBase].self, source: source)
            }
            // Decoder for TaggedAddressBase
            Decoders.addDecoder(clazz: TaggedAddressBase.self) { (source: AnyObject) -> TaggedAddressBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedAddressBase()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TaggedAsset]
            Decoders.addDecoder(clazz: [TaggedAsset].self) { (source: AnyObject) -> [TaggedAsset] in
                return Decoders.decode(clazz: [TaggedAsset].self, source: source)
            }
            // Decoder for TaggedAsset
            Decoders.addDecoder(clazz: TaggedAsset.self) { (source: AnyObject) -> TaggedAsset in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedAsset()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TaggedAssetBase]
            Decoders.addDecoder(clazz: [TaggedAssetBase].self) { (source: AnyObject) -> [TaggedAssetBase] in
                return Decoders.decode(clazz: [TaggedAssetBase].self, source: source)
            }
            // Decoder for TaggedAssetBase
            Decoders.addDecoder(clazz: TaggedAssetBase.self) { (source: AnyObject) -> TaggedAssetBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedAssetBase()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TaggedDriver]
            Decoders.addDecoder(clazz: [TaggedDriver].self) { (source: AnyObject) -> [TaggedDriver] in
                return Decoders.decode(clazz: [TaggedDriver].self, source: source)
            }
            // Decoder for TaggedDriver
            Decoders.addDecoder(clazz: TaggedDriver.self) { (source: AnyObject) -> TaggedDriver in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedDriver()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TaggedDriverBase]
            Decoders.addDecoder(clazz: [TaggedDriverBase].self) { (source: AnyObject) -> [TaggedDriverBase] in
                return Decoders.decode(clazz: [TaggedDriverBase].self, source: source)
            }
            // Decoder for TaggedDriverBase
            Decoders.addDecoder(clazz: TaggedDriverBase.self) { (source: AnyObject) -> TaggedDriverBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedDriverBase()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TaggedMachine]
            Decoders.addDecoder(clazz: [TaggedMachine].self) { (source: AnyObject) -> [TaggedMachine] in
                return Decoders.decode(clazz: [TaggedMachine].self, source: source)
            }
            // Decoder for TaggedMachine
            Decoders.addDecoder(clazz: TaggedMachine.self) { (source: AnyObject) -> TaggedMachine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedMachine()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TaggedMachineBase]
            Decoders.addDecoder(clazz: [TaggedMachineBase].self) { (source: AnyObject) -> [TaggedMachineBase] in
                return Decoders.decode(clazz: [TaggedMachineBase].self, source: source)
            }
            // Decoder for TaggedMachineBase
            Decoders.addDecoder(clazz: TaggedMachineBase.self) { (source: AnyObject) -> TaggedMachineBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedMachineBase()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TaggedSensor]
            Decoders.addDecoder(clazz: [TaggedSensor].self) { (source: AnyObject) -> [TaggedSensor] in
                return Decoders.decode(clazz: [TaggedSensor].self, source: source)
            }
            // Decoder for TaggedSensor
            Decoders.addDecoder(clazz: TaggedSensor.self) { (source: AnyObject) -> TaggedSensor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedSensor()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TaggedSensorBase]
            Decoders.addDecoder(clazz: [TaggedSensorBase].self) { (source: AnyObject) -> [TaggedSensorBase] in
                return Decoders.decode(clazz: [TaggedSensorBase].self, source: source)
            }
            // Decoder for TaggedSensorBase
            Decoders.addDecoder(clazz: TaggedSensorBase.self) { (source: AnyObject) -> TaggedSensorBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedSensorBase()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TaggedVehicle]
            Decoders.addDecoder(clazz: [TaggedVehicle].self) { (source: AnyObject) -> [TaggedVehicle] in
                return Decoders.decode(clazz: [TaggedVehicle].self, source: source)
            }
            // Decoder for TaggedVehicle
            Decoders.addDecoder(clazz: TaggedVehicle.self) { (source: AnyObject) -> TaggedVehicle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedVehicle()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [TaggedVehicleBase]
            Decoders.addDecoder(clazz: [TaggedVehicleBase].self) { (source: AnyObject) -> [TaggedVehicleBase] in
                return Decoders.decode(clazz: [TaggedVehicleBase].self, source: source)
            }
            // Decoder for TaggedVehicleBase
            Decoders.addDecoder(clazz: TaggedVehicleBase.self) { (source: AnyObject) -> TaggedVehicleBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaggedVehicleBase()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TemperatureResponse]
            Decoders.addDecoder(clazz: [TemperatureResponse].self) { (source: AnyObject) -> [TemperatureResponse] in
                return Decoders.decode(clazz: [TemperatureResponse].self, source: source)
            }
            // Decoder for TemperatureResponse
            Decoders.addDecoder(clazz: TemperatureResponse.self) { (source: AnyObject) -> TemperatureResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TemperatureResponse()
                instance.groupId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["groupId"])
                instance.sensors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sensors"])
                return instance
            }


            // Decoder for [TemperatureResponseSensors]
            Decoders.addDecoder(clazz: [TemperatureResponseSensors].self) { (source: AnyObject) -> [TemperatureResponseSensors] in
                return Decoders.decode(clazz: [TemperatureResponseSensors].self, source: source)
            }
            // Decoder for TemperatureResponseSensors
            Decoders.addDecoder(clazz: TemperatureResponseSensors.self) { (source: AnyObject) -> TemperatureResponseSensors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TemperatureResponseSensors()
                instance.probeTemperature = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["probeTemperature"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.ambientTemperature = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ambientTemperature"])
                return instance
            }


            // Decoder for [TripResponse]
            Decoders.addDecoder(clazz: [TripResponse].self) { (source: AnyObject) -> [TripResponse] in
                return Decoders.decode(clazz: [TripResponse].self, source: source)
            }
            // Decoder for TripResponse
            Decoders.addDecoder(clazz: TripResponse.self) { (source: AnyObject) -> TripResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TripResponse()
                instance.trips = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trips"])
                return instance
            }


            // Decoder for [TripResponseEndCoordinates]
            Decoders.addDecoder(clazz: [TripResponseEndCoordinates].self) { (source: AnyObject) -> [TripResponseEndCoordinates] in
                return Decoders.decode(clazz: [TripResponseEndCoordinates].self, source: source)
            }
            // Decoder for TripResponseEndCoordinates
            Decoders.addDecoder(clazz: TripResponseEndCoordinates.self) { (source: AnyObject) -> TripResponseEndCoordinates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TripResponseEndCoordinates()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [TripResponseStartCoordinates]
            Decoders.addDecoder(clazz: [TripResponseStartCoordinates].self) { (source: AnyObject) -> [TripResponseStartCoordinates] in
                return Decoders.decode(clazz: [TripResponseStartCoordinates].self, source: source)
            }
            // Decoder for TripResponseStartCoordinates
            Decoders.addDecoder(clazz: TripResponseStartCoordinates.self) { (source: AnyObject) -> TripResponseStartCoordinates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TripResponseStartCoordinates()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [TripResponseTrips]
            Decoders.addDecoder(clazz: [TripResponseTrips].self) { (source: AnyObject) -> [TripResponseTrips] in
                return Decoders.decode(clazz: [TripResponseTrips].self, source: source)
            }
            // Decoder for TripResponseTrips
            Decoders.addDecoder(clazz: TripResponseTrips.self) { (source: AnyObject) -> TripResponseTrips in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TripResponseTrips()
                instance.endOdometer = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endOdometer"])
                instance.distanceMeters = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distanceMeters"])
                instance.endMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endMs"])
                instance.startMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startMs"])
                instance.fuelConsumedMl = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fuelConsumedMl"])
                instance.startAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startAddress"])
                instance.startCoordinates = Decoders.decodeOptional(clazz: TripResponseStartCoordinates.self, source: sourceDictionary["startCoordinates"])
                instance.endCoordinates = Decoders.decodeOptional(clazz: TripResponseEndCoordinates.self, source: sourceDictionary["endCoordinates"])
                instance.startOdometer = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startOdometer"])
                instance.driverId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["driverId"])
                instance.startLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startLocation"])
                instance.tollMeters = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tollMeters"])
                instance.endAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endAddress"])
                instance.endLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endLocation"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.authType = User.AuthType(rawValue: (sourceDictionary["authType"] as? String) ?? "") 
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organizationRoleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organizationRoleId"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.organizationRole = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organizationRole"])
                instance.tagRoles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tagRoles"])
                return instance
            }


            // Decoder for [UserBase]
            Decoders.addDecoder(clazz: [UserBase].self) { (source: AnyObject) -> [UserBase] in
                return Decoders.decode(clazz: [UserBase].self, source: source)
            }
            // Decoder for UserBase
            Decoders.addDecoder(clazz: UserBase.self) { (source: AnyObject) -> UserBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserBase()
                instance.authType = UserBase.AuthType(rawValue: (sourceDictionary["authType"] as? String) ?? "") 
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organizationRoleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organizationRoleId"])
                return instance
            }


            // Decoder for [UserRole]
            Decoders.addDecoder(clazz: [UserRole].self) { (source: AnyObject) -> [UserRole] in
                return Decoders.decode(clazz: [UserRole].self, source: source)
            }
            // Decoder for UserRole
            Decoders.addDecoder(clazz: UserRole.self) { (source: AnyObject) -> UserRole in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserRole()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [UserTagRole]
            Decoders.addDecoder(clazz: [UserTagRole].self) { (source: AnyObject) -> [UserTagRole] in
                return Decoders.decode(clazz: [UserTagRole].self, source: source)
            }
            // Decoder for UserTagRole
            Decoders.addDecoder(clazz: UserTagRole.self) { (source: AnyObject) -> UserTagRole in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserTagRole()
                instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"])
                instance.roleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roleId"])
                instance.tag = Decoders.decodeOptional(clazz: UserTagRoleTag.self, source: sourceDictionary["tag"])
                return instance
            }


            // Decoder for [UserTagRoleTag]
            Decoders.addDecoder(clazz: [UserTagRoleTag].self) { (source: AnyObject) -> [UserTagRoleTag] in
                return Decoders.decode(clazz: [UserTagRoleTag].self, source: source)
            }
            // Decoder for UserTagRoleTag
            Decoders.addDecoder(clazz: UserTagRoleTag.self) { (source: AnyObject) -> UserTagRoleTag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserTagRoleTag()
                instance.parentTagId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["parentTagId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [Vehicle]
            Decoders.addDecoder(clazz: [Vehicle].self) { (source: AnyObject) -> [Vehicle] in
                return Decoders.decode(clazz: [Vehicle].self, source: source)
            }
            // Decoder for Vehicle
            Decoders.addDecoder(clazz: Vehicle.self) { (source: AnyObject) -> Vehicle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Vehicle()
                instance.engineHours = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["engineHours"])
                instance.fuelLevelPercent = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fuelLevelPercent"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.odometerMeters = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["odometerMeters"])
                instance.vin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vin"])
                return instance
            }


            // Decoder for [VehicleHarshEventResponse]
            Decoders.addDecoder(clazz: [VehicleHarshEventResponse].self) { (source: AnyObject) -> [VehicleHarshEventResponse] in
                return Decoders.decode(clazz: [VehicleHarshEventResponse].self, source: source)
            }
            // Decoder for VehicleHarshEventResponse
            Decoders.addDecoder(clazz: VehicleHarshEventResponse.self) { (source: AnyObject) -> VehicleHarshEventResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleHarshEventResponse()
                instance.downloadForwardVideoUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadForwardVideoUrl"])
                instance.downloadInwardVideoUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadInwardVideoUrl"])
                instance.downloadTrackedInwardVideoUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadTrackedInwardVideoUrl"])
                instance.harshEventType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["harshEventType"])
                instance.incidentReportUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["incidentReportUrl"])
                instance.isDistracted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDistracted"])
                instance.location = Decoders.decodeOptional(clazz: VehicleHarshEventResponseLocation.self, source: sourceDictionary["location"])
                return instance
            }


            // Decoder for [VehicleHarshEventResponseLocation]
            Decoders.addDecoder(clazz: [VehicleHarshEventResponseLocation].self) { (source: AnyObject) -> [VehicleHarshEventResponseLocation] in
                return Decoders.decode(clazz: [VehicleHarshEventResponseLocation].self, source: source)
            }
            // Decoder for VehicleHarshEventResponseLocation
            Decoders.addDecoder(clazz: VehicleHarshEventResponseLocation.self) { (source: AnyObject) -> VehicleHarshEventResponseLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleHarshEventResponseLocation()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.latitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [VehicleLocation]
            Decoders.addDecoder(clazz: [VehicleLocation].self) { (source: AnyObject) -> [VehicleLocation] in
                return Decoders.decode(clazz: [VehicleLocation].self, source: source)
            }
            // Decoder for VehicleLocation
            Decoders.addDecoder(clazz: VehicleLocation.self) { (source: AnyObject) -> VehicleLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleLocation()
                instance.heading = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["heading"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.odometerMeters = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["odometerMeters"])
                instance.onTrip = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["onTrip"])
                instance.speed = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["speed"])
                instance.time = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time"])
                instance.vin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vin"])
                return instance
            }


            // Decoder for [VehicleMaintenance]
            Decoders.addDecoder(clazz: [VehicleMaintenance].self) { (source: AnyObject) -> [VehicleMaintenance] in
                return Decoders.decode(clazz: [VehicleMaintenance].self, source: source)
            }
            // Decoder for VehicleMaintenance
            Decoders.addDecoder(clazz: VehicleMaintenance.self) { (source: AnyObject) -> VehicleMaintenance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenance()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.j1939 = Decoders.decodeOptional(clazz: VehicleMaintenanceJ1939.self, source: sourceDictionary["j1939"])
                instance.passenger = Decoders.decodeOptional(clazz: VehicleMaintenancePassenger.self, source: sourceDictionary["passenger"])
                return instance
            }


            // Decoder for [VehicleMaintenanceJ1939]
            Decoders.addDecoder(clazz: [VehicleMaintenanceJ1939].self) { (source: AnyObject) -> [VehicleMaintenanceJ1939] in
                return Decoders.decode(clazz: [VehicleMaintenanceJ1939].self, source: source)
            }
            // Decoder for VehicleMaintenanceJ1939
            Decoders.addDecoder(clazz: VehicleMaintenanceJ1939.self) { (source: AnyObject) -> VehicleMaintenanceJ1939 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenanceJ1939()
                instance.checkEngineLight = Decoders.decodeOptional(clazz: VehicleMaintenanceJ1939CheckEngineLight.self, source: sourceDictionary["checkEngineLight"])
                instance.diagnosticTroubleCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["diagnosticTroubleCodes"])
                return instance
            }


            // Decoder for [VehicleMaintenanceJ1939CheckEngineLight]
            Decoders.addDecoder(clazz: [VehicleMaintenanceJ1939CheckEngineLight].self) { (source: AnyObject) -> [VehicleMaintenanceJ1939CheckEngineLight] in
                return Decoders.decode(clazz: [VehicleMaintenanceJ1939CheckEngineLight].self, source: source)
            }
            // Decoder for VehicleMaintenanceJ1939CheckEngineLight
            Decoders.addDecoder(clazz: VehicleMaintenanceJ1939CheckEngineLight.self) { (source: AnyObject) -> VehicleMaintenanceJ1939CheckEngineLight in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenanceJ1939CheckEngineLight()
                instance.protectIsOn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["protectIsOn"])
                instance.stopIsOn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stopIsOn"])
                instance.warningIsOn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["warningIsOn"])
                instance.emissionsIsOn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["emissionsIsOn"])
                return instance
            }


            // Decoder for [VehicleMaintenanceJ1939DiagnosticTroubleCodes]
            Decoders.addDecoder(clazz: [VehicleMaintenanceJ1939DiagnosticTroubleCodes].self) { (source: AnyObject) -> [VehicleMaintenanceJ1939DiagnosticTroubleCodes] in
                return Decoders.decode(clazz: [VehicleMaintenanceJ1939DiagnosticTroubleCodes].self, source: source)
            }
            // Decoder for VehicleMaintenanceJ1939DiagnosticTroubleCodes
            Decoders.addDecoder(clazz: VehicleMaintenanceJ1939DiagnosticTroubleCodes.self) { (source: AnyObject) -> VehicleMaintenanceJ1939DiagnosticTroubleCodes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenanceJ1939DiagnosticTroubleCodes()
                instance.spnDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["spnDescription"])
                instance.fmiText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fmiText"])
                instance.spnId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["spnId"])
                instance.occurrenceCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["occurrenceCount"])
                instance.txId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["txId"])
                instance.fmiId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fmiId"])
                return instance
            }


            // Decoder for [VehicleMaintenancePassenger]
            Decoders.addDecoder(clazz: [VehicleMaintenancePassenger].self) { (source: AnyObject) -> [VehicleMaintenancePassenger] in
                return Decoders.decode(clazz: [VehicleMaintenancePassenger].self, source: source)
            }
            // Decoder for VehicleMaintenancePassenger
            Decoders.addDecoder(clazz: VehicleMaintenancePassenger.self) { (source: AnyObject) -> VehicleMaintenancePassenger in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenancePassenger()
                instance.checkEngineLight = Decoders.decodeOptional(clazz: VehicleMaintenancePassengerCheckEngineLight.self, source: sourceDictionary["checkEngineLight"])
                instance.diagnosticTroubleCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["diagnosticTroubleCodes"])
                return instance
            }


            // Decoder for [VehicleMaintenancePassengerCheckEngineLight]
            Decoders.addDecoder(clazz: [VehicleMaintenancePassengerCheckEngineLight].self) { (source: AnyObject) -> [VehicleMaintenancePassengerCheckEngineLight] in
                return Decoders.decode(clazz: [VehicleMaintenancePassengerCheckEngineLight].self, source: source)
            }
            // Decoder for VehicleMaintenancePassengerCheckEngineLight
            Decoders.addDecoder(clazz: VehicleMaintenancePassengerCheckEngineLight.self) { (source: AnyObject) -> VehicleMaintenancePassengerCheckEngineLight in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenancePassengerCheckEngineLight()
                instance.isOn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isOn"])
                return instance
            }


            // Decoder for [VehicleMaintenancePassengerDiagnosticTroubleCodes]
            Decoders.addDecoder(clazz: [VehicleMaintenancePassengerDiagnosticTroubleCodes].self) { (source: AnyObject) -> [VehicleMaintenancePassengerDiagnosticTroubleCodes] in
                return Decoders.decode(clazz: [VehicleMaintenancePassengerDiagnosticTroubleCodes].self, source: source)
            }
            // Decoder for VehicleMaintenancePassengerDiagnosticTroubleCodes
            Decoders.addDecoder(clazz: VehicleMaintenancePassengerDiagnosticTroubleCodes.self) { (source: AnyObject) -> VehicleMaintenancePassengerDiagnosticTroubleCodes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleMaintenancePassengerDiagnosticTroubleCodes()
                instance.dtcShortCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtcShortCode"])
                instance.dtcId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["dtcId"])
                instance.dtcDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtcDescription"])
                return instance
            }


            // Decoder for [VehicleSafetyScoreResponse]
            Decoders.addDecoder(clazz: [VehicleSafetyScoreResponse].self) { (source: AnyObject) -> [VehicleSafetyScoreResponse] in
                return Decoders.decode(clazz: [VehicleSafetyScoreResponse].self, source: source)
            }
            // Decoder for VehicleSafetyScoreResponse
            Decoders.addDecoder(clazz: VehicleSafetyScoreResponse.self) { (source: AnyObject) -> VehicleSafetyScoreResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleSafetyScoreResponse()
                instance.crashCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["crashCount"])
                instance.harshAccelCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harshAccelCount"])
                instance.harshBrakingCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harshBrakingCount"])
                instance.harshEvents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["harshEvents"])
                instance.harshTurningCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["harshTurningCount"])
                instance.safetyScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["safetyScore"])
                instance.safetyScoreRank = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["safetyScoreRank"])
                instance.timeOverSpeedLimitMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeOverSpeedLimitMs"])
                instance.totalDistanceDrivenMeters = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalDistanceDrivenMeters"])
                instance.totalHarshEventCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalHarshEventCount"])
                instance.totalTimeDrivenMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalTimeDrivenMs"])
                instance.vehicleId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vehicleId"])
                return instance
            }
        }
    }
}
