//
// VehicleLocation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


/** Contains the location, in latitude and longitude, of a vehicle. */
public class VehicleLocation: JSONEncodable {
    /** Heading in degrees. */
    public var heading: Double?
    /** ID of the vehicle. */
    public var id: Int64?
    /** Latitude in decimal degrees. */
    public var latitude: Double?
    /** Text representation of nearest identifiable location to (latitude, longitude) coordinates. */
    public var location: String?
    /** Longitude in decimal degrees. */
    public var longitude: Double?
    /** Name of the vehicle. */
    public var name: String?
    /** The number of meters reported by the odometer. */
    public var odometerMeters: Int64?
    /** Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint. */
    public var onTrip: Bool?
    /** Speed in miles per hour. */
    public var speed: Double?
    /** The time the reported location was logged, reported as a UNIX timestamp in milliseconds. */
    public var time: Int32?
    /** Vehicle Identification Number (VIN) of the vehicle. */
    public var vin: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["heading"] = self.heading
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["latitude"] = self.latitude
        nillableDictionary["location"] = self.location
        nillableDictionary["longitude"] = self.longitude
        nillableDictionary["name"] = self.name
        nillableDictionary["odometerMeters"] = self.odometerMeters?.encodeToJSON()
        nillableDictionary["onTrip"] = self.onTrip
        nillableDictionary["speed"] = self.speed
        nillableDictionary["time"] = self.time?.encodeToJSON()
        nillableDictionary["vin"] = self.vin
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
