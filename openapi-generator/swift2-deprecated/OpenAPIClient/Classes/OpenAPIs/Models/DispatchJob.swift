//
// DispatchJob.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public class DispatchJob: JSONEncodable {
    /** The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided. */
    public var destinationAddress: String?
    /** ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided. */
    public var destinationAddressId: Int64?
    /** Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided. */
    public var destinationLat: Double?
    /** Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided. */
    public var destinationLng: Double?
    /** The name of the job destination. If provided, it will take precedence over the name of the address book entry. */
    public var destinationName: String?
    /** Notes regarding the details of this job. */
    public var notes: String?
    /** The time at which the assigned driver is scheduled to arrive at the job destination. */
    public var scheduledArrivalTimeMs: Int64?
    /** The time at which the assigned driver is scheduled to depart from the job destination. */
    public var scheduledDepartureTimeMs: Int64?
    /** The time at which the driver arrived at the job destination. */
    public var arrivedAtMs: Int64?
    /** The time at which the job was marked complete (e.g. started driving to the next destination). */
    public var completedAtMs: Int64?
    /** ID of the route that this job belongs to. */
    public var dispatchRouteId: Int64?
    /** ID of the driver assigned to the dispatch job. */
    public var driverId: Int64?
    /** The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination). */
    public var enRouteAtMs: Int64?
    /** The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs. */
    public var estimatedArrivalMs: Int64?
    /** Fleet viewer url of the dispatch job. */
    public var fleetViewerUrl: String?
    public var groupId: Int64?
    /** ID of the Samsara dispatch job. */
    public var id: Int64?
    public var jobState: JobStatus?
    /** The time at which the job was marked skipped. */
    public var skippedAtMs: Int64?
    /** ID of the vehicle used for the dispatch job. */
    public var vehicleId: Int64?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["destination_address"] = self.destinationAddress
        nillableDictionary["destination_address_id"] = self.destinationAddressId?.encodeToJSON()
        nillableDictionary["destination_lat"] = self.destinationLat
        nillableDictionary["destination_lng"] = self.destinationLng
        nillableDictionary["destination_name"] = self.destinationName
        nillableDictionary["notes"] = self.notes
        nillableDictionary["scheduled_arrival_time_ms"] = self.scheduledArrivalTimeMs?.encodeToJSON()
        nillableDictionary["scheduled_departure_time_ms"] = self.scheduledDepartureTimeMs?.encodeToJSON()
        nillableDictionary["arrived_at_ms"] = self.arrivedAtMs?.encodeToJSON()
        nillableDictionary["completed_at_ms"] = self.completedAtMs?.encodeToJSON()
        nillableDictionary["dispatch_route_id"] = self.dispatchRouteId?.encodeToJSON()
        nillableDictionary["driver_id"] = self.driverId?.encodeToJSON()
        nillableDictionary["en_route_at_ms"] = self.enRouteAtMs?.encodeToJSON()
        nillableDictionary["estimated_arrival_ms"] = self.estimatedArrivalMs?.encodeToJSON()
        nillableDictionary["fleet_viewer_url"] = self.fleetViewerUrl
        nillableDictionary["group_id"] = self.groupId?.encodeToJSON()
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["job_state"] = self.jobState?.encodeToJSON()
        nillableDictionary["skipped_at_ms"] = self.skippedAtMs?.encodeToJSON()
        nillableDictionary["vehicle_id"] = self.vehicleId?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
