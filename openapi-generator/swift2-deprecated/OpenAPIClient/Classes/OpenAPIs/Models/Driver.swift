//
// Driver.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public class Driver: JSONEncodable {
    /** Flag indicating this driver may use Adverse Weather exemptions in ELD logs. */
    public var eldAdverseWeatherExemptionEnabled: Bool?
    /** Flag indicating this driver may use Big Day excemptions in ELD logs. */
    public var eldBigDayExemptionEnabled: Bool?
    /** 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours. */
    public var eldDayStartHour: Int32?
    /** Flag indicating this driver is exempt from the Electronic Logging Mandate. */
    public var eldExempt: Bool?
    /** Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt). */
    public var eldExemptReason: String?
    /** Flag indicating this driver may select the Personal Conveyance duty status in ELD logs. */
    public var eldPcEnabled: Bool?
    /** Flag indicating this driver may select the Yard Move duty status in ELD logs. */
    public var eldYmEnabled: Bool?
    /** Dictionary of external IDs (string key-value pairs) */
    public var externalIds: [String:String]?
    /** ID of the group if the organization has multiple groups (uncommon). */
    public var groupId: Int64?
    /** Driver&#39;s state issued license number. */
    public var licenseNumber: String?
    /** Abbreviation of state that issued driver&#39;s license. */
    public var licenseState: String?
    /** Driver&#39;s name. */
    public var name: String?
    /** Notes about the driver. */
    public var notes: String?
    /** Driver&#39;s phone number. Please include only digits, ex. 4157771234 */
    public var phone: String?
    /** Driver&#39;s login username into the driver app. */
    public var username: String?
    /** ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon). */
    public var vehicleId: Int64?
    /** ID of the driver. */
    public var id: Int64?
    /** True if the driver account has been deactivated. */
    public var isDeactivated: Bool?
    public var tags: [TagMetadata]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["eldAdverseWeatherExemptionEnabled"] = self.eldAdverseWeatherExemptionEnabled
        nillableDictionary["eldBigDayExemptionEnabled"] = self.eldBigDayExemptionEnabled
        nillableDictionary["eldDayStartHour"] = self.eldDayStartHour?.encodeToJSON()
        nillableDictionary["eldExempt"] = self.eldExempt
        nillableDictionary["eldExemptReason"] = self.eldExemptReason
        nillableDictionary["eldPcEnabled"] = self.eldPcEnabled
        nillableDictionary["eldYmEnabled"] = self.eldYmEnabled
        nillableDictionary["externalIds"] = self.externalIds?.encodeToJSON()
        nillableDictionary["groupId"] = self.groupId?.encodeToJSON()
        nillableDictionary["licenseNumber"] = self.licenseNumber
        nillableDictionary["licenseState"] = self.licenseState
        nillableDictionary["name"] = self.name
        nillableDictionary["notes"] = self.notes
        nillableDictionary["phone"] = self.phone
        nillableDictionary["username"] = self.username
        nillableDictionary["vehicleId"] = self.vehicleId?.encodeToJSON()
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["isDeactivated"] = self.isDeactivated
        nillableDictionary["tags"] = self.tags?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
