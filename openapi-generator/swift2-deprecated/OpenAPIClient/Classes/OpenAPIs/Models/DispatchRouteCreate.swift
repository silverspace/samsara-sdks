//
// DispatchRouteCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public class DispatchRouteCreate: JSONEncodable {
    /** The time in Unix epoch milliseconds that the route actually ended. */
    public var actualEndMs: Int64?
    /** The time in Unix epoch milliseconds that the route actually started. */
    public var actualStartMs: Int64?
    /** ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned. */
    public var driverId: Int64?
    /** ID of the group if the organization has multiple groups (optional). */
    public var groupId: Int64?
    /** Descriptive name of this route. */
    public var name: String?
    /** The time in Unix epoch milliseconds that the last job in the route is scheduled to end. */
    public var scheduledEndMs: Int64?
    /** The distance expected to be traveled for this route in meters. */
    public var scheduledMeters: Int64?
    /** The time in Unix epoch milliseconds that the route is scheduled to start. */
    public var scheduledStartMs: Int64?
    /** The address of the route&#39;s starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided. */
    public var startLocationAddress: String?
    /** ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided. */
    public var startLocationAddressId: Int64?
    /** Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided. */
    public var startLocationLat: Double?
    /** Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided. */
    public var startLocationLng: Double?
    /** The name of the route&#39;s starting location. If provided, it will take precedence over the name of the address book entry. */
    public var startLocationName: String?
    /** ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them. */
    public var trailerId: Int64?
    /** ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned. */
    public var vehicleId: Int64?
    /** The dispatch jobs to create for this route. */
    public var dispatchJobs: [DispatchJobCreate]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["actual_end_ms"] = self.actualEndMs?.encodeToJSON()
        nillableDictionary["actual_start_ms"] = self.actualStartMs?.encodeToJSON()
        nillableDictionary["driver_id"] = self.driverId?.encodeToJSON()
        nillableDictionary["group_id"] = self.groupId?.encodeToJSON()
        nillableDictionary["name"] = self.name
        nillableDictionary["scheduled_end_ms"] = self.scheduledEndMs?.encodeToJSON()
        nillableDictionary["scheduled_meters"] = self.scheduledMeters?.encodeToJSON()
        nillableDictionary["scheduled_start_ms"] = self.scheduledStartMs?.encodeToJSON()
        nillableDictionary["start_location_address"] = self.startLocationAddress
        nillableDictionary["start_location_address_id"] = self.startLocationAddressId?.encodeToJSON()
        nillableDictionary["start_location_lat"] = self.startLocationLat
        nillableDictionary["start_location_lng"] = self.startLocationLng
        nillableDictionary["start_location_name"] = self.startLocationName
        nillableDictionary["trailer_id"] = self.trailerId?.encodeToJSON()
        nillableDictionary["vehicle_id"] = self.vehicleId?.encodeToJSON()
        nillableDictionary["dispatch_jobs"] = self.dispatchJobs?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
