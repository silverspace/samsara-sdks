/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Address;
import org.openapitools.model.InlineObject;
import org.openapitools.model.InlineObject1;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-01T05:40:23.859Z[GMT]")

@Validated
@Api(value = "addresses", description = "the addresses API")
public interface AddressesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "/addresses", nickname = "addOrganizationAddresses", notes = "Add one or more addresses to the organization", response = Address.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of added addresses/geofences. For each address entry, the geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type. Circle geofences added without a specific lat/lng are geocoded asynchronously, and will be 0,0 in the immediate response.", response = Address.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<Address>> addOrganizationAddresses(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject addresses) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"notes\" : \"Delivery site 1\",  \"formattedAddress\" : \"350 Rhode Island St, San Francisco, CA\",  \"geofence\" : {    \"polygon\" : {      \"vertices\" : [ {        \"latitude\" : 37.765363,        \"longitude\" : -122.403098      }, {        \"latitude\" : 37.765363,        \"longitude\" : -122.403098      } ]    },    \"circle\" : {      \"latitude\" : 37.765363,      \"radiusMeters\" : 250,      \"longitude\" : -122.403098    }  },  \"name\" : \"Samsara HQ\",  \"id\" : 123,  \"contacts\" : [ {    \"firstName\" : \"Jane\",    \"lastName\" : \"Jones\",    \"phone\" : \"111-222-3344\",    \"id\" : 123,    \"email\" : \"jane.jones@yahoo.com\"  }, {    \"firstName\" : \"Jane\",    \"lastName\" : \"Jones\",    \"phone\" : \"111-222-3344\",    \"id\" : 123,    \"email\" : \"jane.jones@yahoo.com\"  } ],  \"tags\" : [ {    \"name\" : \"Broken Vehicles\",    \"id\" : 12345  }, {    \"name\" : \"Broken Vehicles\",    \"id\" : 12345  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/addresses/{addressId}", nickname = "deleteOrganizationAddress", notes = "Delete an address.", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address was successfully deleted. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrganizationAddress(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the address/geofence",required=true) @PathVariable("addressId") Long addressId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/addresses/{addressId}", nickname = "getOrganizationAddress", notes = "Fetch an address by its id.", response = Address.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The address/geofence. The geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type.", response = Address.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Address> getOrganizationAddress(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the address/geofence",required=true) @PathVariable("addressId") Long addressId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"notes\" : \"Delivery site 1\",  \"formattedAddress\" : \"350 Rhode Island St, San Francisco, CA\",  \"geofence\" : {    \"polygon\" : {      \"vertices\" : [ {        \"latitude\" : 37.765363,        \"longitude\" : -122.403098      }, {        \"latitude\" : 37.765363,        \"longitude\" : -122.403098      } ]    },    \"circle\" : {      \"latitude\" : 37.765363,      \"radiusMeters\" : 250,      \"longitude\" : -122.403098    }  },  \"name\" : \"Samsara HQ\",  \"id\" : 123,  \"contacts\" : [ {    \"firstName\" : \"Jane\",    \"lastName\" : \"Jones\",    \"phone\" : \"111-222-3344\",    \"id\" : 123,    \"email\" : \"jane.jones@yahoo.com\"  }, {    \"firstName\" : \"Jane\",    \"lastName\" : \"Jones\",    \"phone\" : \"111-222-3344\",    \"id\" : 123,    \"email\" : \"jane.jones@yahoo.com\"  } ],  \"tags\" : [ {    \"name\" : \"Broken Vehicles\",    \"id\" : 12345  }, {    \"name\" : \"Broken Vehicles\",    \"id\" : 12345  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/addresses", nickname = "getOrganizationAddresses", notes = "Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.", response = Address.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of addresses/geofences. For each address entry, the geofence field will only be populated with either 'circle' or 'polygon', depending on the geofence type.", response = Address.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Address>> getOrganizationAddresses(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"notes\" : \"Delivery site 1\",  \"formattedAddress\" : \"350 Rhode Island St, San Francisco, CA\",  \"geofence\" : {    \"polygon\" : {      \"vertices\" : [ {        \"latitude\" : 37.765363,        \"longitude\" : -122.403098      }, {        \"latitude\" : 37.765363,        \"longitude\" : -122.403098      } ]    },    \"circle\" : {      \"latitude\" : 37.765363,      \"radiusMeters\" : 250,      \"longitude\" : -122.403098    }  },  \"name\" : \"Samsara HQ\",  \"id\" : 123,  \"contacts\" : [ {    \"firstName\" : \"Jane\",    \"lastName\" : \"Jones\",    \"phone\" : \"111-222-3344\",    \"id\" : 123,    \"email\" : \"jane.jones@yahoo.com\"  }, {    \"firstName\" : \"Jane\",    \"lastName\" : \"Jones\",    \"phone\" : \"111-222-3344\",    \"id\" : 123,    \"email\" : \"jane.jones@yahoo.com\"  } ],  \"tags\" : [ {    \"name\" : \"Broken Vehicles\",    \"id\" : 12345  }, {    \"name\" : \"Broken Vehicles\",    \"id\" : 12345  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/addresses/{addressId}", nickname = "updateOrganizationAddress", notes = "Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address was successfully updated. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> updateOrganizationAddress(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the address/geofence",required=true) @PathVariable("addressId") Long addressId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject1 address) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
