/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AllRouteJobUpdates;
import org.openapitools.model.AssetReeferResponse;
import org.openapitools.model.DispatchRoute;
import org.openapitools.model.DispatchRouteCreate;
import org.openapitools.model.DispatchRouteHistory;
import org.openapitools.model.Document;
import org.openapitools.model.DocumentCreate;
import org.openapitools.model.DocumentType;
import org.openapitools.model.Driver;
import org.openapitools.model.DriverDailyLogResponse;
import org.openapitools.model.DriverForCreate;
import org.openapitools.model.DriverSafetyScoreResponse;
import org.openapitools.model.DriversResponse;
import org.openapitools.model.DriversSummaryResponse;
import org.openapitools.model.DvirBase;
import org.openapitools.model.DvirListResponse;
import org.openapitools.model.FleetVehicleLocation;
import org.openapitools.model.FleetVehicleResponse;
import org.openapitools.model.HosAuthenticationLogsResponse;
import org.openapitools.model.HosLogsResponse;
import org.openapitools.model.HosLogsSummaryResponse;
import org.openapitools.model.InlineObject10;
import org.openapitools.model.InlineObject11;
import org.openapitools.model.InlineObject12;
import org.openapitools.model.InlineObject13;
import org.openapitools.model.InlineObject14;
import org.openapitools.model.InlineObject15;
import org.openapitools.model.InlineObject16;
import org.openapitools.model.InlineObject2;
import org.openapitools.model.InlineObject3;
import org.openapitools.model.InlineObject4;
import org.openapitools.model.InlineObject5;
import org.openapitools.model.InlineObject6;
import org.openapitools.model.InlineObject7;
import org.openapitools.model.InlineObject8;
import org.openapitools.model.InlineObject9;
import org.openapitools.model.InlineResponse200;
import org.openapitools.model.InlineResponse2001;
import org.openapitools.model.InlineResponse2002;
import org.openapitools.model.InlineResponse2003;
import org.openapitools.model.InlineResponse2004;
import org.openapitools.model.InlineResponse2005;
import org.openapitools.model.TripResponse;
import org.openapitools.model.VehicleHarshEventResponse;
import org.openapitools.model.VehicleSafetyScoreResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-01T05:40:23.859Z[GMT]")

@Validated
@Api(value = "fleet", description = "the fleet API")
public interface FleetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "/fleet/add_address", nickname = "addFleetAddress", notes = "This method adds an address book entry to the specified group.", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address was successfully added. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/add_address",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addFleetAddress(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject2 addressParam) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes", nickname = "createDispatchRoute", notes = "Create a new dispatch route.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created route object including the new route ID.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DispatchRoute> createDispatchRoute(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DispatchRouteCreate createDispatchRouteParams) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/create", nickname = "createDriver", notes = "Create a new driver.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the successfully created the driver.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Driver> createDriver(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Driver creation body" ,required=true )  @Valid @RequestBody DriverForCreate createDriverParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/dispatch/routes", nickname = "createDriverDispatchRoute", notes = "Create a new dispatch route for the driver with driver_id.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created route object including the new route ID.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/dispatch/routes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DispatchRoute> createDriverDispatchRoute(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver with the associated routes.",required=true) @PathVariable("driver_id") Long driverId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DispatchRouteCreate createDispatchRouteParams) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/documents", nickname = "createDriverDocument", notes = "Create a driver document for the given driver.", response = Document.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the created document.", response = Document.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/documents",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Document> createDriverDocument(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver for whom the document is created.",required=true) @PathVariable("driver_id") Long driverId,@ApiParam(value = "To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_." ,required=true )  @Valid @RequestBody DocumentCreate createDocumentParams) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/maintenance/dvirs", nickname = "createDvir", notes = "Create a new dvir, marking a vehicle or trailer safe or unsafe.", response = DvirBase.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Newly created DVIR.", response = DvirBase.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/maintenance/dvirs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DvirBase> createDvir(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject12 createDvirParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"defectsNeedNotBeCorrected\" : false,  \"defectsCorrected\" : true,  \"vehicleCondition\" : \"SATISFACTORY\",  \"inspectionType\" : \"pre trip\",  \"trailerDefects\" : [ {    \"comment\" : \"Air Compressor not working\",    \"defectType\" : \"Air Compressor\"  }, {    \"comment\" : \"Air Compressor not working\",    \"defectType\" : \"Air Compressor\"  } ],  \"mechanicOrAgentSignature\" : {    \"mechanicUserId\" : 14849,    \"driverId\" : 2581,    \"name\" : \"John Smith\",    \"signedAt\" : 12535500000,    \"type\" : \"driver\",    \"email\" : \"j.smith@yahoo.com\",    \"username\" : \"jsmith\"  },  \"mechanicNotes\" : \"The vehicle is now safe.\",  \"vehicle\" : {    \"name\" : \"Storer's vehicle 19\",    \"id\" : 19  },  \"authorSignature\" : {    \"mechanicUserId\" : 14849,    \"driverId\" : 2581,    \"name\" : \"John Smith\",    \"signedAt\" : 12535500000,    \"type\" : \"driver\",    \"email\" : \"j.smith@yahoo.com\",    \"username\" : \"jsmith\"  },  \"odometerMiles\" : 49912,  \"vehicleDefects\" : [ {    \"comment\" : \"Air Compressor not working\",    \"defectType\" : \"Air Compressor\"  }, {    \"comment\" : \"Air Compressor not working\",    \"defectType\" : \"Air Compressor\"  } ],  \"nextDriverSignature\" : {    \"driverId\" : 2581,    \"name\" : \"John Smith\",    \"signedAt\" : 12535500000,    \"type\" : \"driver\",    \"email\" : \"j.smith@yahoo.com\",    \"username\" : \"jsmith\"  },  \"trailerName\" : \"Storer's Trailer 19\",  \"id\" : 19,  \"trailerId\" : 19,  \"timeMs\" : 1453449599999}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes", nickname = "createVehicleDispatchRoute", notes = "Create a new dispatch route for the vehicle with vehicle_id.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created route object including the new route ID.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id}/dispatch/routes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DispatchRoute> createVehicleDispatchRoute(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle with the associated routes.",required=true) @PathVariable("vehicle_id") Long vehicleId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DispatchRouteCreate createDispatchRouteParams) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", nickname = "deactivateDriver", notes = "Deactivate a driver with the given id.", tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deactivated the driver, which is now referenced by /fleet/drivers/inactive/{driver_id}."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deactivateDriver(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}/", nickname = "deleteDispatchRouteById", notes = "Delete a dispatch route and its associated jobs.", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deleted the dispatch route. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteDispatchRouteById(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the dispatch route.",required=true) @PathVariable("route_id") Long routeId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes", nickname = "fetchAllDispatchRoutes", notes = "Fetch all of the dispatch routes for the group.", response = DispatchRoute.class, responseContainer = "List", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All dispatch route objects for the group.", response = DispatchRoute.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DispatchRoute>> fetchAllDispatchRoutes(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).") @Valid @RequestParam(value = "group_id", required = false) Long groupId,@ApiParam(value = "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.") @Valid @RequestParam(value = "end_time", required = false) Long endTime,@ApiParam(value = "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.") @Valid @RequestParam(value = "duration", required = false) Long duration) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes/job_updates", nickname = "fetchAllRouteJobUpdates", notes = "Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID", response = AllRouteJobUpdates.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All job updates on routes.", response = AllRouteJobUpdates.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/job_updates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AllRouteJobUpdates> fetchAllRouteJobUpdates(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).") @Valid @RequestParam(value = "group_id", required = false) Long groupId,@ApiParam(value = "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.") @Valid @RequestParam(value = "sequence_id", required = false) String sequenceId,@ApiParam(value = "Optionally set include=route to include route object in response payload.") @Valid @RequestParam(value = "include", required = false) String include) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"sequence_id\" : \"eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0=\",  \"job_updates\" : [ {    \"changed_at_ms\" : 1462881998034,    \"route_id\" : 556,    \"job_id\" : 773,    \"prev_job_state\" : \"JobState_EnRoute\",    \"job_state\" : \"JobState_Arrived\"  }, {    \"changed_at_ms\" : 1462881998034,    \"route_id\" : 556,    \"job_id\" : 773,    \"prev_job_state\" : \"JobState_EnRoute\",    \"job_state\" : \"JobState_Arrived\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/assets/locations", nickname = "getAllAssetCurrentLocations", notes = "Fetch current locations of all assets for the group.", response = InlineResponse2001.class, tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of assets and their current locations.", response = InlineResponse2001.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2001> getAllAssetCurrentLocations(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).") @Valid @RequestParam(value = "group_id", required = false) Long groupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"assets\" : [ {    \"engineHours\" : 104,    \"name\" : \"Trailer 123\",    \"location\" : [ {      \"latitude\" : 37.0,      \"speedMilesPerHour\" : 35.0,      \"location\" : \"525 York, San Francisco, CA\",      \"longitude\" : -122.7,      \"timeMs\" : 12314151    }, {      \"latitude\" : 37.0,      \"speedMilesPerHour\" : 35.0,      \"location\" : \"525 York, San Francisco, CA\",      \"longitude\" : -122.7,      \"timeMs\" : 12314151    } ],    \"id\" : 1,    \"cable\" : [ {      \"assetType\" : \"Reefer (Thermo King)\"    }, {      \"assetType\" : \"Reefer (Thermo King)\"    } ]  }, {    \"engineHours\" : 104,    \"name\" : \"Trailer 123\",    \"location\" : [ {      \"latitude\" : 37.0,      \"speedMilesPerHour\" : 35.0,      \"location\" : \"525 York, San Francisco, CA\",      \"longitude\" : -122.7,      \"timeMs\" : 12314151    }, {      \"latitude\" : 37.0,      \"speedMilesPerHour\" : 35.0,      \"location\" : \"525 York, San Francisco, CA\",      \"longitude\" : -122.7,      \"timeMs\" : 12314151    } ],    \"id\" : 1,    \"cable\" : [ {      \"assetType\" : \"Reefer (Thermo King)\"    }, {      \"assetType\" : \"Reefer (Thermo King)\"    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/assets", nickname = "getAllAssets", notes = "Fetch all of the assets for the group.", response = InlineResponse200.class, tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of assets.", response = InlineResponse200.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> getAllAssets(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).") @Valid @RequestParam(value = "group_id", required = false) Long groupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"assets\" : [ {    \"assetSerialNumber\" : \"SNTEST123\",    \"engineHours\" : 104,    \"name\" : \"Trailer 123\",    \"id\" : 1,    \"cable\" : [ {      \"assetType\" : \"Reefer (Thermo King)\"    }, {      \"assetType\" : \"Reefer (Thermo King)\"    } ]  }, {    \"assetSerialNumber\" : \"SNTEST123\",    \"engineHours\" : 104,    \"name\" : \"Trailer 123\",    \"id\" : 1,    \"cable\" : [ {      \"assetType\" : \"Reefer (Thermo King)\"    }, {      \"assetType\" : \"Reefer (Thermo King)\"    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/inactive", nickname = "getAllDeactivatedDrivers", notes = "Fetch all deactivated drivers for the group.", response = Driver.class, responseContainer = "List", tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns an array of all deactivated drivers for the group. Deactivated drivers are referenced at /fleet/drivers/inactive/{driver_id}", response = Driver.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/inactive",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Driver>> getAllDeactivatedDrivers(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Optional group ID if the organization has multiple groups (uncommon).") @Valid @RequestParam(value = "group_id", required = false) Long groupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/assets/{assetId:[0-9]+}/locations", nickname = "getAssetLocation", notes = "Fetch the historical locations for the asset.", response = Object.class, responseContainer = "List", tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Asset location details.", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets/{asset_id}/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Object>> getAssetLocation(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the asset",required=true) @PathVariable("asset_id") Long assetId,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true) @Valid @RequestParam(value = "startMs", required = true) Long startMs,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true) @Valid @RequestParam(value = "endMs", required = true) Long endMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "\"{}\"");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/assets/{assetId:[0-9]+}/reefer", nickname = "getAssetReefer", notes = "Fetch the reefer-specific stats of an asset.", response = AssetReeferResponse.class, tags={ "Fleet","Assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reefer-specific asset details.", response = AssetReeferResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/assets/{asset_id}/reefer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AssetReeferResponse> getAssetReefer(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the asset",required=true) @PathVariable("asset_id") Long assetId,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true) @Valid @RequestParam(value = "startMs", required = true) Long startMs,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true) @Valid @RequestParam(value = "endMs", required = true) Long endMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"reeferStats\" : {    \"fuelPercentage\" : [ {      \"fuelPercentage\" : 99,      \"changedAtMs\" : 1453449599999    }, {      \"fuelPercentage\" : 99,      \"changedAtMs\" : 1453449599999    } ],    \"powerStatus\" : [ {      \"changedAtMs\" : 1453449599999,      \"status\" : \"Active (Continuous)\"    }, {      \"changedAtMs\" : 1453449599999,      \"status\" : \"Active (Continuous)\"    } ],    \"engineHours\" : [ {      \"engineHours\" : 1200,      \"changedAtMs\" : 1453449599999    }, {      \"engineHours\" : 1200,      \"changedAtMs\" : 1453449599999    } ],    \"setPoint\" : [ {      \"tempInMilliC\" : 31110,      \"changedAtMs\" : 1453449599999    }, {      \"tempInMilliC\" : 31110,      \"changedAtMs\" : 1453449599999    } ],    \"returnAirTemp\" : [ {      \"tempInMilliC\" : 31110,      \"changedAtMs\" : 1453449599999    }, {      \"tempInMilliC\" : 31110,      \"changedAtMs\" : 1453449599999    } ],    \"alarms\" : [ {      \"alarms\" : [ {        \"severity\" : 1,        \"operatorAction\" : \"Check and repair at end of trip\",        \"description\" : \"Check Return Air Sensor\",        \"alarmCode\" : 102      }, {        \"severity\" : 1,        \"operatorAction\" : \"Check and repair at end of trip\",        \"description\" : \"Check Return Air Sensor\",        \"alarmCode\" : 102      } ],      \"changedAtMs\" : 1453449599999    }, {      \"alarms\" : [ {        \"severity\" : 1,        \"operatorAction\" : \"Check and repair at end of trip\",        \"description\" : \"Check Return Air Sensor\",        \"alarmCode\" : 102      }, {        \"severity\" : 1,        \"operatorAction\" : \"Check and repair at end of trip\",        \"description\" : \"Check Return Air Sensor\",        \"alarmCode\" : 102      } ],      \"changedAtMs\" : 1453449599999    } ]  },  \"name\" : \"Reefer 123\",  \"id\" : 1,  \"assetType\" : \"Reefer (Thermo King)\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", nickname = "getDeactivatedDriverById", notes = "Fetch deactivated driver by id.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the deactivated driver with the given driver_id.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/inactive/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Driver> getDeactivatedDriverById(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}", nickname = "getDispatchRouteById", notes = "Fetch a dispatch route by id.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The dispatch route corresponding to route_id.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DispatchRoute> getDispatchRouteById(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the dispatch route.",required=true) @PathVariable("route_id") Long routeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}/history", nickname = "getDispatchRouteHistory", notes = "Fetch the history of a dispatch route.", response = DispatchRouteHistory.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The historical route state changes between start_time and end_time.", response = DispatchRouteHistory.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}/history",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DispatchRouteHistory> getDispatchRouteHistory(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the route with history.",required=true) @PathVariable("route_id") Long routeId,@ApiParam(value = "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.") @Valid @RequestParam(value = "start_time", required = false) Long startTime,@ApiParam(value = "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.") @Valid @RequestParam(value = "end_time", required = false) Long endTime) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"history\" : [ {    \"changed_at_ms\" : 1499411220000  }, {    \"changed_at_ms\" : 1499411220000  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/dispatch/routes", nickname = "getDispatchRoutesByDriverId", notes = "Fetch all of the dispatch routes for a given driver.", response = DispatchRoute.class, responseContainer = "List", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the dispatch routes for the given driver_id.", response = DispatchRoute.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/dispatch/routes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DispatchRoute>> getDispatchRoutesByDriverId(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver with the associated routes.",required=true) @PathVariable("driver_id") Long driverId,@ApiParam(value = "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.") @Valid @RequestParam(value = "end_time", required = false) Long endTime,@ApiParam(value = "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.") @Valid @RequestParam(value = "duration", required = false) Long duration) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes", nickname = "getDispatchRoutesByVehicleId", notes = "Fetch all of the dispatch routes for a given vehicle.", response = DispatchRoute.class, responseContainer = "List", tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns all of the dispatch routes for the given vehicle_id.", response = DispatchRoute.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id}/dispatch/routes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DispatchRoute>> getDispatchRoutesByVehicleId(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle with the associated routes.",required=true) @PathVariable("vehicle_id") Long vehicleId,@ApiParam(value = "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.") @Valid @RequestParam(value = "end_time", required = false) Long endTime,@ApiParam(value = "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.") @Valid @RequestParam(value = "duration", required = false) Long duration) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", nickname = "getDriverById", notes = "Fetch driver by id.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the driver for the given driver_id.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Driver> getDriverById(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/document_types", nickname = "getDriverDocumentTypesByOrgId", notes = "Fetch all of the document types.", response = DocumentType.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns all of the document types.", response = DocumentType.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/document_types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DocumentType>> getDriverDocumentTypesByOrgId() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"fieldTypes\" : [ null, null ],  \"name\" : \"Fuel Receipt\",  \"uuid\" : \"4aff772c-a7bb-45e6-8e41-6a53e34feb83\",  \"orgId\" : 773}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/documents", nickname = "getDriverDocumentsByOrgId", notes = "Fetch all of the documents.", response = Document.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns all of the documents.", response = Document.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/documents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Document>> getDriverDocumentsByOrgId(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.") @Valid @RequestParam(value = "endMs", required = false) Long endMs,@ApiParam(value = "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.") @Valid @RequestParam(value = "durationMs", required = false) Long durationMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driverId:[0-9]+}/safety/score", nickname = "getDriverSafetyScore", notes = "Fetch the safety score for the driver.", response = DriverSafetyScoreResponse.class, tags={ "Fleet","Safety", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Safety score details.", response = DriverSafetyScoreResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driverId}/safety/score",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DriverSafetyScoreResponse> getDriverSafetyScore(@ApiParam(value = "ID of the driver",required=true) @PathVariable("driverId") Long driverId,@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true) @Valid @RequestParam(value = "startMs", required = true) Long startMs,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true) @Valid @RequestParam(value = "endMs", required = true) Long endMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"crashCount\" : 0,  \"driverId\" : 1234,  \"harshAccelCount\" : 1,  \"harshEvents\" : [ {    \"harshEventType\" : \"Harsh Braking\",    \"vehicleId\" : 212014918086169,    \"timestampMs\" : 1535590776000  }, {    \"harshEventType\" : \"Harsh Braking\",    \"vehicleId\" : 212014918086169,    \"timestampMs\" : 1535590776000  } ],  \"totalDistanceDrivenMeters\" : 291836,  \"safetyScore\" : 97,  \"totalHarshEventCount\" : 3,  \"totalTimeDrivenMs\" : 19708293,  \"harshTurningCount\" : 0,  \"timeOverSpeedLimitMs\" : 3769,  \"harshBrakingCount\" : 2,  \"safetyScoreRank\" : \"26\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/maintenance/dvirs", nickname = "getDvirs", notes = "Get DVIRs for the org within provided time constraints", response = DvirListResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DVIRs for the specified duration.", response = DvirListResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/maintenance/dvirs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DvirListResponse> getDvirs(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@NotNull @ApiParam(value = "time in millis until the last dvir log.", required = true) @Valid @RequestParam(value = "end_ms", required = true) Integer endMs,@NotNull @ApiParam(value = "time in millis which corresponds to the duration before the end_ms.", required = true) @Valid @RequestParam(value = "duration_ms", required = true) Integer durationMs,@ApiParam(value = "Group ID to query.") @Valid @RequestParam(value = "group_id", required = false) Integer groupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"dvirs\" : [ {    \"defectsNeedNotBeCorrected\" : false,    \"defectsCorrected\" : true,    \"vehicleCondition\" : \"SATISFACTORY\",    \"inspectionType\" : \"pre trip\",    \"trailerDefects\" : [ {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    }, {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    } ],    \"mechanicOrAgentSignature\" : {      \"mechanicUserId\" : 14849,      \"driverId\" : 2581,      \"name\" : \"John Smith\",      \"signedAt\" : 12535500000,      \"type\" : \"driver\",      \"email\" : \"j.smith@yahoo.com\",      \"username\" : \"jsmith\"    },    \"mechanicNotes\" : \"The vehicle is now safe.\",    \"vehicle\" : {      \"name\" : \"Storer's vehicle 19\",      \"id\" : 19    },    \"authorSignature\" : {      \"mechanicUserId\" : 14849,      \"driverId\" : 2581,      \"name\" : \"John Smith\",      \"signedAt\" : 12535500000,      \"type\" : \"driver\",      \"email\" : \"j.smith@yahoo.com\",      \"username\" : \"jsmith\"    },    \"odometerMiles\" : 49912,    \"vehicleDefects\" : [ {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    }, {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    } ],    \"nextDriverSignature\" : {      \"driverId\" : 2581,      \"name\" : \"John Smith\",      \"signedAt\" : 12535500000,      \"type\" : \"driver\",      \"email\" : \"j.smith@yahoo.com\",      \"username\" : \"jsmith\"    },    \"trailerName\" : \"Storer's Trailer 19\",    \"id\" : 19,    \"trailerId\" : 19,    \"timeMs\" : 1453449599999  }, {    \"defectsNeedNotBeCorrected\" : false,    \"defectsCorrected\" : true,    \"vehicleCondition\" : \"SATISFACTORY\",    \"inspectionType\" : \"pre trip\",    \"trailerDefects\" : [ {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    }, {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    } ],    \"mechanicOrAgentSignature\" : {      \"mechanicUserId\" : 14849,      \"driverId\" : 2581,      \"name\" : \"John Smith\",      \"signedAt\" : 12535500000,      \"type\" : \"driver\",      \"email\" : \"j.smith@yahoo.com\",      \"username\" : \"jsmith\"    },    \"mechanicNotes\" : \"The vehicle is now safe.\",    \"vehicle\" : {      \"name\" : \"Storer's vehicle 19\",      \"id\" : 19    },    \"authorSignature\" : {      \"mechanicUserId\" : 14849,      \"driverId\" : 2581,      \"name\" : \"John Smith\",      \"signedAt\" : 12535500000,      \"type\" : \"driver\",      \"email\" : \"j.smith@yahoo.com\",      \"username\" : \"jsmith\"    },    \"odometerMiles\" : 49912,    \"vehicleDefects\" : [ {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    }, {      \"comment\" : \"Air Compressor not working\",      \"defectType\" : \"Air Compressor\"    } ],    \"nextDriverSignature\" : {      \"driverId\" : 2581,      \"name\" : \"John Smith\",      \"signedAt\" : 12535500000,      \"type\" : \"driver\",      \"email\" : \"j.smith@yahoo.com\",      \"username\" : \"jsmith\"    },    \"trailerName\" : \"Storer's Trailer 19\",    \"id\" : 19,    \"trailerId\" : 19,    \"timeMs\" : 1453449599999  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers", nickname = "getFleetDrivers", notes = "Get all the drivers for the specified group.", response = DriversResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All drivers in the group.", response = DriversResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DriversResponse> getFleetDrivers(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject3 groupDriversParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"drivers\" : [ null, null ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs", nickname = "getFleetDriversHosDailyLogs", notes = "Get summarized daily HOS charts for a specified driver.", response = DriverDailyLogResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Distance traveled and time active for each driver in the organization over the specified time period.", response = DriverDailyLogResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/{driver_id}/hos_daily_logs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DriverDailyLogResponse> getFleetDriversHosDailyLogs(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver with HOS logs.",required=true) @PathVariable("driver_id") Long driverId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject6 hosLogsParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"days\" : [ {    \"certifiedAtMs\" : 0,    \"endMs\" : 1473836400000,    \"startMs\" : 1473750000000,    \"trailerIds\" : [ 10293, 192933 ],    \"activeHours\" : 5.4,    \"distanceMiles\" : 123.24,    \"activeMs\" : 691200,    \"certified\" : true,    \"vehicleIds\" : [ 192319, 12958 ]  }, {    \"certifiedAtMs\" : 0,    \"endMs\" : 1473836400000,    \"startMs\" : 1473750000000,    \"trailerIds\" : [ 10293, 192933 ],    \"activeHours\" : 5.4,    \"distanceMiles\" : 123.24,    \"activeMs\" : 691200,    \"certified\" : true,    \"vehicleIds\" : [ 192319, 12958 ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/summary", nickname = "getFleetDriversSummary", notes = "Get the distance and time each driver in an organization has driven in a given time period.", response = DriversSummaryResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Distance traveled and time active for each driver in the organization over the specified time period.", response = DriversSummaryResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/summary",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DriversSummaryResponse> getFleetDriversSummary(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject5 driversSummaryParam,@ApiParam(value = "Snap query result to HOS day boundaries.") @Valid @RequestParam(value = "snap_to_day_bounds", required = false) Boolean snapToDayBounds) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Summaries\" : [ {    \"driverId\" : 444,    \"distanceMiles\" : 123.24,    \"driveMs\" : 21600000,    \"activeMs\" : 43200000,    \"driverUsername\" : \"fjacobs\",    \"groupId\" : 111,    \"driverName\" : \"Fred Jacobs\",    \"onDutyMs\" : 21600000  }, {    \"driverId\" : 444,    \"distanceMiles\" : 123.24,    \"driveMs\" : 21600000,    \"activeMs\" : 43200000,    \"driverUsername\" : \"fjacobs\",    \"groupId\" : 111,    \"driverName\" : \"Fred Jacobs\",    \"onDutyMs\" : 21600000  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/hos_authentication_logs", nickname = "getFleetHosAuthenticationLogs", notes = "Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.", response = HosAuthenticationLogsResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HOS authentication logs for the specified driver.", response = HosAuthenticationLogsResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/hos_authentication_logs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HosAuthenticationLogsResponse> getFleetHosAuthenticationLogs(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject7 hosAuthenticationLogsParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"authenticationLogs\" : [ {    \"actionType\" : \"signin\",    \"address\" : \"123 Main St., Ahwatukee, Arizona 85044\",    \"city\" : \"Ahwatukee\",    \"happenedAtMs\" : 1462881998034,    \"addressName\" : \"Garage Number 3\",    \"state\" : \"Arizona\"  }, {    \"actionType\" : \"signin\",    \"address\" : \"123 Main St., Ahwatukee, Arizona 85044\",    \"city\" : \"Ahwatukee\",    \"happenedAtMs\" : 1462881998034,    \"addressName\" : \"Garage Number 3\",    \"state\" : \"Arizona\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/hos_logs", nickname = "getFleetHosLogs", notes = "Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.", response = HosLogsResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HOS logs for the specified driver.", response = HosLogsResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/hos_logs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HosLogsResponse> getFleetHosLogs(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject8 hosLogsParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"logs\" : [ {    \"locLng\" : -98.502888123,    \"logStartMs\" : 1462881998034,    \"driverId\" : 444,    \"statusType\" : \"OFF_DUTY\",    \"locCity\" : \"Ahwatukee\",    \"groupId\" : 101,    \"locName\" : \"McLean Site A\",    \"locLat\" : 23.413702345,    \"remark\" : \"Lunch Break\",    \"locState\" : \"Arizona\",    \"vehicleId\" : 112,    \"codriverIds\" : [ 445, 445 ]  }, {    \"locLng\" : -98.502888123,    \"logStartMs\" : 1462881998034,    \"driverId\" : 444,    \"statusType\" : \"OFF_DUTY\",    \"locCity\" : \"Ahwatukee\",    \"groupId\" : 101,    \"locName\" : \"McLean Site A\",    \"locLat\" : 23.413702345,    \"remark\" : \"Lunch Break\",    \"locState\" : \"Arizona\",    \"vehicleId\" : 112,    \"codriverIds\" : [ 445, 445 ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/hos_logs_summary", nickname = "getFleetHosLogsSummary", notes = "Get the current HOS status for all drivers in the group.", response = HosLogsSummaryResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HOS logs for the specified driver.", response = HosLogsSummaryResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/hos_logs_summary",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HosLogsSummaryResponse> getFleetHosLogsSummary(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject9 hosLogsParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"drivers\" : [ {    \"timeUntilBreak\" : 28800000,    \"vehicleName\" : \"Vehicle 1\",    \"drivingInViolationToday\" : 39600000,    \"driverId\" : 444,    \"cycleRemaining\" : 252000000,    \"driverName\" : \"Fred Jacobs\",    \"dutyStatus\" : \"OFF_DUTY\",    \"cycleTomorrow\" : 252000000,    \"shiftDriveRemaining\" : 39600000,    \"timeInCurrentStatus\" : 5000,    \"drivingInViolationCycle\" : 50400000,    \"shiftRemaining\" : 50400000  }, {    \"timeUntilBreak\" : 28800000,    \"vehicleName\" : \"Vehicle 1\",    \"drivingInViolationToday\" : 39600000,    \"driverId\" : 444,    \"cycleRemaining\" : 252000000,    \"driverName\" : \"Fred Jacobs\",    \"dutyStatus\" : \"OFF_DUTY\",    \"cycleTomorrow\" : 252000000,    \"shiftDriveRemaining\" : 39600000,    \"timeInCurrentStatus\" : 5000,    \"drivingInViolationCycle\" : 50400000,    \"shiftRemaining\" : 50400000  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/locations", nickname = "getFleetLocations", notes = "Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.", response = InlineResponse2003.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of vehicle objects containing their location and the time at which that location was logged.", response = InlineResponse2003.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/locations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2003> getFleetLocations(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject11 groupParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"groupId\" : 101,  \"vehicles\" : [ {    \"heading\" : 246.42,    \"latitude\" : 123.456,    \"name\" : \"Truck A7\",    \"location\" : \"1 Main St, Dallas, TX\",    \"odometerMeters\" : 71774705,    \"vin\" : \"JTNBB46KX73011966\",    \"id\" : 112,    \"onTrip\" : true,    \"time\" : 1462881998034,    \"speed\" : 64.37,    \"longitude\" : 32.897  }, {    \"heading\" : 246.42,    \"latitude\" : 123.456,    \"name\" : \"Truck A7\",    \"location\" : \"1 Main St, Dallas, TX\",    \"odometerMeters\" : 71774705,    \"vin\" : \"JTNBB46KX73011966\",    \"id\" : 112,    \"onTrip\" : true,    \"time\" : 1462881998034,    \"speed\" : 64.37,    \"longitude\" : 32.897  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/maintenance/list", nickname = "getFleetMaintenanceList", notes = "Get list of the vehicles with any engine faults or check light data.", response = InlineResponse2004.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of vehicles and maintenance information about each.", response = InlineResponse2004.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/maintenance/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2004> getFleetMaintenanceList(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject13 groupParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"vehicles\" : [ {    \"j1939\" : {      \"checkEngineLight\" : {        \"protectIsOn\" : true,        \"stopIsOn\" : true,        \"warningIsOn\" : true,        \"emissionsIsOn\" : true      },      \"diagnosticTroubleCodes\" : [ {        \"spnDescription\" : \"spnDescription\",        \"fmiText\" : \"fmiText\",        \"spnId\" : 0,        \"occurrenceCount\" : 6,        \"txId\" : 1,        \"fmiId\" : 5      }, {        \"spnDescription\" : \"spnDescription\",        \"fmiText\" : \"fmiText\",        \"spnId\" : 0,        \"occurrenceCount\" : 6,        \"txId\" : 1,        \"fmiId\" : 5      } ]    },    \"passenger\" : {      \"checkEngineLight\" : {        \"isOn\" : true      },      \"diagnosticTroubleCodes\" : [ {        \"dtcShortCode\" : \"dtcShortCode\",        \"dtcId\" : 5,        \"dtcDescription\" : \"dtcDescription\"      }, {        \"dtcShortCode\" : \"dtcShortCode\",        \"dtcId\" : 5,        \"dtcDescription\" : \"dtcDescription\"      } ]    },    \"id\" : 112  }, {    \"j1939\" : {      \"checkEngineLight\" : {        \"protectIsOn\" : true,        \"stopIsOn\" : true,        \"warningIsOn\" : true,        \"emissionsIsOn\" : true      },      \"diagnosticTroubleCodes\" : [ {        \"spnDescription\" : \"spnDescription\",        \"fmiText\" : \"fmiText\",        \"spnId\" : 0,        \"occurrenceCount\" : 6,        \"txId\" : 1,        \"fmiId\" : 5      }, {        \"spnDescription\" : \"spnDescription\",        \"fmiText\" : \"fmiText\",        \"spnId\" : 0,        \"occurrenceCount\" : 6,        \"txId\" : 1,        \"fmiId\" : 5      } ]    },    \"passenger\" : {      \"checkEngineLight\" : {        \"isOn\" : true      },      \"diagnosticTroubleCodes\" : [ {        \"dtcShortCode\" : \"dtcShortCode\",        \"dtcId\" : 5,        \"dtcDescription\" : \"dtcDescription\"      }, {        \"dtcShortCode\" : \"dtcShortCode\",        \"dtcId\" : 5,        \"dtcDescription\" : \"dtcDescription\"      } ]    },    \"id\" : 112  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/trips", nickname = "getFleetTrips", notes = "Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.", response = TripResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of trips taken by the requested vehicle within the specified timeframe.", response = TripResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/trips",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TripResponse> getFleetTrips(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject15 tripsParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"trips\" : [ {    \"endOdometer\" : 210430500,    \"distanceMeters\" : 2500,    \"endMs\" : 1462881998034,    \"startMs\" : 1462878398034,    \"fuelConsumedMl\" : 75700,    \"startAddress\" : \"Ramen Tatsunoya\",    \"startCoordinates\" : {      \"latitude\" : 29.443702345,      \"longitude\" : -98.502888123    },    \"endCoordinates\" : {      \"latitude\" : 23.413702345,      \"longitude\" : -91.502888123    },    \"startOdometer\" : 210430450,    \"driverId\" : 719,    \"startLocation\" : \"16 N Fair Oaks Ave, Pasadena, CA 91103\",    \"tollMeters\" : 32000,    \"endAddress\" : \"Winchell's Donuts House\",    \"endLocation\" : \"571 S Lake Ave, Pasadena, CA 91101\"  }, {    \"endOdometer\" : 210430500,    \"distanceMeters\" : 2500,    \"endMs\" : 1462881998034,    \"startMs\" : 1462878398034,    \"fuelConsumedMl\" : 75700,    \"startAddress\" : \"Ramen Tatsunoya\",    \"startCoordinates\" : {      \"latitude\" : 29.443702345,      \"longitude\" : -98.502888123    },    \"endCoordinates\" : {      \"latitude\" : 23.413702345,      \"longitude\" : -91.502888123    },    \"startOdometer\" : 210430450,    \"driverId\" : 719,    \"startLocation\" : \"16 N Fair Oaks Ave, Pasadena, CA 91103\",    \"tollMeters\" : 32000,    \"endAddress\" : \"Winchell's Donuts House\",    \"endLocation\" : \"571 S Lake Ave, Pasadena, CA 91101\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", nickname = "getFleetVehicle", notes = "Gets a specific vehicle.", response = FleetVehicleResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The specified vehicle.", response = FleetVehicleResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id_or_external_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<FleetVehicleResponse> getFleetVehicle(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.",required=true) @PathVariable("vehicle_id_or_external_id") String vehicleIdOrExternalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"harshAccelSetting\" : \"Heavy\",  \"externalIds\" : {    \"maintenanceId\" : \"ABFS18600\"  },  \"name\" : \"Truck A7\",  \"vehicleInfo\" : {    \"year\" : 1997,    \"model\" : \"Odyssey\",    \"vin\" : \"1FUJA6BD31LJ09646\",    \"make\" : \"Honda\"  },  \"id\" : 112}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event", nickname = "getVehicleHarshEvent", notes = "Fetch harsh event details for a vehicle.", response = VehicleHarshEventResponse.class, tags={ "Fleet","Safety", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Harsh event details.", response = VehicleHarshEventResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicleId}/safety/harsh_event",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<VehicleHarshEventResponse> getVehicleHarshEvent(@ApiParam(value = "ID of the vehicle",required=true) @PathVariable("vehicleId") Long vehicleId,@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the timestamp of a harsh event.", required = true) @Valid @RequestParam(value = "timestamp", required = true) Long timestamp) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"downloadForwardVideoUrl\" : \"https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?...\",  \"downloadInwardVideoUrl\" : \"https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...\",  \"incidentReportUrl\" : \"https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984\",  \"harshEventType\" : \"Harsh Braking\",  \"location\" : {    \"address\" : \"350 Rhode Island St, San Francisco, CA\",    \"latitude\" : \"33.07614328\",    \"longitude\" : \"-96.14907287\"  },  \"downloadTrackedInwardVideoUrl\" : \"https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...\",  \"isDistracted\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+}/locations", nickname = "getVehicleLocations", notes = "Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.", response = FleetVehicleLocation.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns locations for a given vehicle between a start/end time, with a maximum query duration of one hour.", response = FleetVehicleLocation.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id}/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<FleetVehicleLocation>> getVehicleLocations(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle with the associated routes.",required=true) @PathVariable("vehicle_id") Long vehicleId,@NotNull @ApiParam(value = "Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)", required = true) @Valid @RequestParam(value = "startMs", required = true) Long startMs,@NotNull @ApiParam(value = "Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)", required = true) @Valid @RequestParam(value = "endMs", required = true) Long endMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"latitude\" : 37.2,  \"speedMilesPerHour\" : 35.2,  \"location\" : \"525 York, San Francisco, CA\",  \"longitude\" : -122.5,  \"timeMs\" : 1535586471332}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicleId:[0-9]+}/safety/score", nickname = "getVehicleSafetyScore", notes = "Fetch the safety score for the vehicle.", response = VehicleSafetyScoreResponse.class, tags={ "Fleet","Safety", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Safety score details.", response = VehicleSafetyScoreResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicleId}/safety/score",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<VehicleSafetyScoreResponse> getVehicleSafetyScore(@ApiParam(value = "ID of the vehicle",required=true) @PathVariable("vehicleId") Long vehicleId,@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.", required = true) @Valid @RequestParam(value = "startMs", required = true) Long startMs,@NotNull @ApiParam(value = "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.", required = true) @Valid @RequestParam(value = "endMs", required = true) Long endMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"crashCount\" : 0,  \"harshAccelCount\" : 1,  \"harshEvents\" : [ {    \"harshEventType\" : \"Harsh Braking\",    \"vehicleId\" : 212014918086169,    \"timestampMs\" : 1535590776000  }, {    \"harshEventType\" : \"Harsh Braking\",    \"vehicleId\" : 212014918086169,    \"timestampMs\" : 1535590776000  } ],  \"totalDistanceDrivenMeters\" : 291836,  \"safetyScore\" : 97,  \"totalHarshEventCount\" : 3,  \"totalTimeDrivenMs\" : 19708293,  \"vehicleId\" : 4321,  \"harshTurningCount\" : 0,  \"timeOverSpeedLimitMs\" : 3769,  \"harshBrakingCount\" : 2,  \"safetyScoreRank\" : \"26\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/stats", nickname = "getVehicleStats", notes = "Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.", response = InlineResponse2005.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns engine state and/or aux input data for all vehicles in the group between a start/end time.", response = InlineResponse2005.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/stats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2005> getVehicleStats(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@NotNull @ApiParam(value = "Time in Unix epoch milliseconds for the start of the query.", required = true) @Valid @RequestParam(value = "startMs", required = true) Integer startMs,@NotNull @ApiParam(value = "Time in Unix epoch milliseconds for the end of the query.", required = true) @Valid @RequestParam(value = "endMs", required = true) Integer endMs,@ApiParam(value = "Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series=engineState,auxInput2", allowableValues = "engineState, auxInput1, auxInput2") @Valid @RequestParam(value = "series", required = false) String series,@ApiParam(value = "Comma-separated list of tag ids. Example: tagIds=1,2,3") @Valid @RequestParam(value = "tagIds", required = false) String tagIds,@ApiParam(value = "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.") @Valid @RequestParam(value = "startingAfter", required = false) String startingAfter,@ApiParam(value = "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.") @Valid @RequestParam(value = "endingBefore", required = false) String endingBefore,@ApiParam(value = "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.") @Valid @RequestParam(value = "limit", required = false) Long limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"pagination\" : {    \"hasPrevPage\" : true,    \"hasNextPage\" : true,    \"endCursor\" : \"MTU5MTEzNjA2OTU0MzQ3\",    \"startCursor\" : \"MTU5MTEzNjA2OTU0MzQ3\"  },  \"vehicleStats\" : [ {    \"engineState\" : [ {      \"value\" : \"Running\",      \"timeMs\" : 1546542978484    }, {      \"value\" : \"Running\",      \"timeMs\" : 1546542978484    } ],    \"auxInput2\" : {      \"values\" : [ {        \"value\" : true,        \"timeMs\" : 1546542978484      }, {        \"value\" : true,        \"timeMs\" : 1546542978484      } ],      \"name\" : \"Boom\"    },    \"vehicleId\" : 112,    \"auxInput1\" : {      \"values\" : [ {        \"value\" : true,        \"timeMs\" : 1546542978484      }, {        \"value\" : true,        \"timeMs\" : 1546542978484      } ],      \"name\" : \"Boom\"    }  }, {    \"engineState\" : [ {      \"value\" : \"Running\",      \"timeMs\" : 1546542978484    }, {      \"value\" : \"Running\",      \"timeMs\" : 1546542978484    } ],    \"auxInput2\" : {      \"values\" : [ {        \"value\" : true,        \"timeMs\" : 1546542978484      }, {        \"value\" : true,        \"timeMs\" : 1546542978484      } ],      \"name\" : \"Boom\"    },    \"vehicleId\" : 112,    \"auxInput1\" : {      \"values\" : [ {        \"value\" : true,        \"timeMs\" : 1546542978484      }, {        \"value\" : true,        \"timeMs\" : 1546542978484      } ],      \"name\" : \"Boom\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/locations", nickname = "getVehiclesLocations", notes = "Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.", response = Object.class, responseContainer = "List", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns locations for a given vehicle between a start/end time, with a maximum query duration of 30 minutes.", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Object>> getVehiclesLocations(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@NotNull @ApiParam(value = "Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)", required = true) @Valid @RequestParam(value = "startMs", required = true) Integer startMs,@NotNull @ApiParam(value = "Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)", required = true) @Valid @RequestParam(value = "endMs", required = true) Integer endMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "\"{}\"");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/list", nickname = "listFleet", notes = "Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.", response = InlineResponse2002.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of vehicles and information about each.", response = InlineResponse2002.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2002> listFleet(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject10 groupParam,@ApiParam(value = "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.") @Valid @RequestParam(value = "startingAfter", required = false) String startingAfter,@ApiParam(value = "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.") @Valid @RequestParam(value = "endingBefore", required = false) String endingBefore,@ApiParam(value = "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.") @Valid @RequestParam(value = "limit", required = false) Long limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"pagination\" : {    \"hasPrevPage\" : true,    \"hasNextPage\" : true,    \"endCursor\" : \"MTU5MTEzNjA2OTU0MzQ3\",    \"startCursor\" : \"MTU5MTEzNjA2OTU0MzQ3\"  },  \"groupId\" : 101,  \"vehicles\" : [ {    \"note\" : \"Red truck 2015 M16\",    \"engineHours\" : 1500,    \"name\" : \"Truck A7\",    \"fuelLevelPercent\" : 0.3,    \"odometerMeters\" : 60130000,    \"vin\" : \"1FUJA6BD31LJ09646\",    \"id\" : 112  }, {    \"note\" : \"Red truck 2015 M16\",    \"engineHours\" : 1500,    \"name\" : \"Truck A7\",    \"fuelLevelPercent\" : 0.3,    \"odometerMeters\" : 60130000,    \"vin\" : \"1FUJA6BD31LJ09646\",    \"id\" : 112  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", nickname = "patchFleetVehicle", notes = "Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.", response = FleetVehicleResponse.class, tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated vehicle.", response = FleetVehicleResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/vehicles/{vehicle_id_or_external_id}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<FleetVehicleResponse> patchFleetVehicle(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.",required=true) @PathVariable("vehicle_id_or_external_id") String vehicleIdOrExternalId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject16 data) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"harshAccelSetting\" : \"Heavy\",  \"externalIds\" : {    \"maintenanceId\" : \"ABFS18600\"  },  \"name\" : \"Truck A7\",  \"vehicleInfo\" : {    \"year\" : 1997,    \"model\" : \"Odyssey\",    \"vin\" : \"1FUJA6BD31LJ09646\",    \"make\" : \"Honda\"  },  \"id\" : 112}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}", nickname = "reactivateDriverById", notes = "Reactivate the inactive driver having id.", response = Driver.class, tags={ "Fleet","Drivers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the reactivated driver, which is now available at /fleet/drivers/{driver_id}.", response = Driver.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/drivers/inactive/{driver_id_or_external_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Driver> reactivateDriverById(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.",required=true) @PathVariable("driver_id_or_external_id") String driverIdOrExternalId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject4 reactivateDriverParam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/dispatch/routes/{route_id:[0-9]+}/", nickname = "updateDispatchRouteById", notes = "Update a dispatch route and its associated jobs.", response = DispatchRoute.class, tags={ "Fleet","Routes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update the dispatch route. Allowable updates include setting job state, adding or removing jobs, and changing job locations and times.", response = DispatchRoute.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/dispatch/routes/{route_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<DispatchRoute> updateDispatchRouteById(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "ID of the dispatch route.",required=true) @PathVariable("route_id") Long routeId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DispatchRoute updateDispatchRouteParams) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "/fleet/set_data", nickname = "updateVehicles", notes = "This method enables the mutation of metadata for vehicles in the Samsara Cloud.", tags={ "Fleet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Vehicles were successfully updated. No response body is returned."),
        @ApiResponse(code = 200, message = "Unexpected error.", response = String.class) })
    @RequestMapping(value = "/fleet/set_data",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateVehicles(@NotNull @ApiParam(value = "Samsara API access token.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject14 vehicleUpdateParam) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
