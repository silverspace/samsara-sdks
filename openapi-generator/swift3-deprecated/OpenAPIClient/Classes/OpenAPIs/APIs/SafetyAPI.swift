//
// SafetyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire


open class SafetyAPI: APIBase {
    /**
     /fleet/drivers/{driverId:[0-9]+}/safety/score
     - parameter driverId: (path) ID of the driver 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDriverSafetyScore(driverId: Int64, accessToken: String, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: DriverSafetyScoreResponse?, _ error: ErrorResponse?) -> Void)) {
        getDriverSafetyScoreWithRequestBuilder(driverId: driverId, accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/drivers/{driverId:[0-9]+}/safety/score
     - GET /fleet/drivers/{driverId}/safety/score
     - Fetch the safety score for the driver.
     - parameter driverId: (path) ID of the driver 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - returns: RequestBuilder<DriverSafetyScoreResponse> 
     */
    open class func getDriverSafetyScoreWithRequestBuilder(driverId: Int64, accessToken: String, startMs: Int64, endMs: Int64) -> RequestBuilder<DriverSafetyScoreResponse> {
        var path = "/fleet/drivers/{driverId}/safety/score"
        let driverIdPreEscape = "\(driverId)"
        let driverIdPostEscape = driverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driverId}", with: driverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DriverSafetyScoreResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter timestamp: (query) Timestamp in milliseconds representing the timestamp of a harsh event. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehicleHarshEvent(vehicleId: Int64, accessToken: String, timestamp: Int64, completion: @escaping ((_ data: VehicleHarshEventResponse?, _ error: ErrorResponse?) -> Void)) {
        getVehicleHarshEventWithRequestBuilder(vehicleId: vehicleId, accessToken: accessToken, timestamp: timestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
     - GET /fleet/vehicles/{vehicleId}/safety/harsh_event
     - Fetch harsh event details for a vehicle.
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter timestamp: (query) Timestamp in milliseconds representing the timestamp of a harsh event. 
     - returns: RequestBuilder<VehicleHarshEventResponse> 
     */
    open class func getVehicleHarshEventWithRequestBuilder(vehicleId: Int64, accessToken: String, timestamp: Int64) -> RequestBuilder<VehicleHarshEventResponse> {
        var path = "/fleet/vehicles/{vehicleId}/safety/harsh_event"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicleId}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "timestamp": timestamp.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<VehicleHarshEventResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVehicleSafetyScore(vehicleId: Int64, accessToken: String, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: VehicleSafetyScoreResponse?, _ error: ErrorResponse?) -> Void)) {
        getVehicleSafetyScoreWithRequestBuilder(vehicleId: vehicleId, accessToken: accessToken, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
     - GET /fleet/vehicles/{vehicleId}/safety/score
     - Fetch the safety score for the vehicle.
     - parameter vehicleId: (path) ID of the vehicle 
     - parameter accessToken: (query) Samsara API access token. 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - returns: RequestBuilder<VehicleSafetyScoreResponse> 
     */
    open class func getVehicleSafetyScoreWithRequestBuilder(vehicleId: Int64, accessToken: String, startMs: Int64, endMs: Int64) -> RequestBuilder<VehicleSafetyScoreResponse> {
        var path = "/fleet/vehicles/{vehicleId}/safety/score"
        let vehicleIdPreEscape = "\(vehicleId)"
        let vehicleIdPostEscape = vehicleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vehicleId}", with: vehicleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<VehicleSafetyScoreResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
