//
// AssetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire


open class AssetsAPI: APIBase {
    /**
     /fleet/assets/locations
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllAssetCurrentLocations(accessToken: String, groupId: Int64? = nil, completion: @escaping ((_ data: InlineResponse2001?, _ error: ErrorResponse?) -> Void)) {
        getAllAssetCurrentLocationsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets/locations
     - GET /fleet/assets/locations
     - Fetch current locations of all assets for the group.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getAllAssetCurrentLocationsWithRequestBuilder(accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/fleet/assets/locations"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllAssets(accessToken: String, groupId: Int64? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        getAllAssetsWithRequestBuilder(accessToken: accessToken, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets
     - GET /fleet/assets
     - Fetch all of the assets for the group.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter groupId: (query) Optional group ID if the organization has multiple groups (uncommon). (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getAllAssetsWithRequestBuilder(accessToken: String, groupId: Int64? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/fleet/assets"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "group_id": groupId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets/{assetId:[0-9]+}/locations
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssetLocation(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: [Any]?, _ error: ErrorResponse?) -> Void)) {
        getAssetLocationWithRequestBuilder(accessToken: accessToken, assetId: assetId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets/{assetId:[0-9]+}/locations
     - GET /fleet/assets/{asset_id}/locations
     - Fetch the historical locations for the asset.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - returns: RequestBuilder<[Any]> 
     */
    open class func getAssetLocationWithRequestBuilder(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<[Any]> {
        var path = "/fleet/assets/{asset_id}/locations"
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /fleet/assets/{assetId:[0-9]+}/reefer
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssetReefer(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64, completion: @escaping ((_ data: AssetReeferResponse?, _ error: ErrorResponse?) -> Void)) {
        getAssetReeferWithRequestBuilder(accessToken: accessToken, assetId: assetId, startMs: startMs, endMs: endMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     /fleet/assets/{assetId:[0-9]+}/reefer
     - GET /fleet/assets/{asset_id}/reefer
     - Fetch the reefer-specific stats of an asset.
     - parameter accessToken: (query) Samsara API access token. 
     - parameter assetId: (path) ID of the asset 
     - parameter startMs: (query) Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. 
     - parameter endMs: (query) Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. 
     - returns: RequestBuilder<AssetReeferResponse> 
     */
    open class func getAssetReeferWithRequestBuilder(accessToken: String, assetId: Int64, startMs: Int64, endMs: Int64) -> RequestBuilder<AssetReeferResponse> {
        var path = "/fleet/assets/{asset_id}/reefer"
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token": accessToken,
            "startMs": startMs.encodeToJSON(),
            "endMs": endMs.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AssetReeferResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
