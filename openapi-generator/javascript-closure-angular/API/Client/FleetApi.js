/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.FleetApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * # Introduction  Samsara provides API endpoints for interacting with Samsara Cloud, so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara Cloud API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer) accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client such as wget or curl, or HTTP libraries of most modern programming languages including python, ruby, java. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We allow you to interact securely with our API from a client-side web application (though you should never expose your secret API key). [JSON](http://www.json.org/) is returned by all API responses, including errors. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. To start developing with Samsara APIs you will need to [obtain your API keys](#section/Authentication) to authenticate your API requests.  If you have any questions you can reach out to us on [support@samsara.com](mailto:support@samsara.com)  # Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  &#x60;&#x60;&#x60;curl https://api.samsara.com/&lt;version&gt;/&lt;endpoint&gt; &#x60;&#x60;&#x60;  All our APIs are [versioned](#section/Versioning). If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version.  # Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under &#x60;Settings-&gt;Organization-&gt;API Tokens&#x60;.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Provide your API token as the basic access_token value in the URL. You do not need to provide a password.  &#x60;&#x60;&#x60;curl https://api.samsara.com/&lt;version&gt;/&lt;endpoint&gt;?access_token&#x3D;{access_token} &#x60;&#x60;&#x60;  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  # Request Methods  Our API endpoints use [HTTP request methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) to specify the desired operation to be performed. The documentation below specified request method supported by each endpoint and the resulting action.  ## GET  GET requests are typically used for fetching data (like data for a particular driver).  ## POST  POST requests are typically used for creating or updating a record (like adding new tags to the system). With that being said, a few of our POST requests can be used for fetching data (like current location data of your fleet).  ## PUT  PUT requests are typically used for updating an existing record (like updating all devices associated with a particular tag).  ## PATCH  PATCH requests are typically used for modifying an existing record (like modifying a few devices associated with a particular tag).  ## DELETE  DELETE requests are used for deleting a record (like deleting a tag from the system).  # Response Codes  All API requests will respond with appropriate [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). Your API client should handle each response class differently.  ## 2XX  These are successful responses and indicate that the API request returned the expected response.  ## 4XX  These indicate that there was a problem with the request like a missing parameter or invalid values. Check the response for specific [error details](#section/Error-Responses). Requests that respond with a 4XX status code, should be modified before retrying.  ## 5XX  These indicate server errors when the server is unreachable or is misconfigured. In this case, you should retry the API request after some delay.  # Error Responses  In case of a 4XX status code, the body of the response will contain information to briefly explain the error reported. To help debugging the error, you can refer to the following table for understanding the error message.  | Status Code | Message | Description | |-------------|----------------|-------------------------------------------------------------------| | 401 | Invalid token | The API token is invalid and could not be authenticated. Please refer to the [authentication section](#section/Authentication). | | 404 | Page not found | The API endpoint being accessed is invalid. | | 400 | Bad request | Default response for an invalid request. Please check the request to make sure it follows the format specified in the documentation. |  # Versioning  All our APIs are versioned. Our current API version is &#x60;v1&#x60; and we are continuously working on improving it further and provide additional endpoints. If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version. Thus, you can use our current API version worry free.  # FAQs  Check out our [responses to FAQs here](https://kb.samsara.com/hc/en-us/sections/360000538054-APIs). Don’t see an answer to your question? Reach out to us on [support@samsara.com](mailto:support@samsara.com).
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.FleetApi');

goog.require('API.Client.Address');
goog.require('API.Client.AssetReeferResponse');
goog.require('API.Client.Contact');
goog.require('API.Client.DispatchRoute');
goog.require('API.Client.DispatchRouteCreate');
goog.require('API.Client.DispatchRouteHistory');
goog.require('API.Client.Document');
goog.require('API.Client.DocumentCreate');
goog.require('API.Client.DocumentType');
goog.require('API.Client.Driver');
goog.require('API.Client.DriverDailyLogResponse');
goog.require('API.Client.DriverForCreate');
goog.require('API.Client.DriverSafetyScoreResponse');
goog.require('API.Client.DriversResponse');
goog.require('API.Client.DriversSummaryResponse');
goog.require('API.Client.DvirBase');
goog.require('API.Client.DvirListResponse');
goog.require('API.Client.FleetVehicleLocation');
goog.require('API.Client.FleetVehicleResponse');
goog.require('API.Client.HosAuthenticationLogsResponse');
goog.require('API.Client.HosLogsResponse');
goog.require('API.Client.HosLogsSummaryResponse');
goog.require('API.Client.InlineObject');
goog.require('API.Client.InlineObject1');
goog.require('API.Client.InlineObject10');
goog.require('API.Client.InlineObject11');
goog.require('API.Client.InlineObject12');
goog.require('API.Client.InlineObject13');
goog.require('API.Client.InlineObject14');
goog.require('API.Client.InlineObject15');
goog.require('API.Client.InlineObject16');
goog.require('API.Client.InlineObject2');
goog.require('API.Client.InlineObject3');
goog.require('API.Client.InlineObject4');
goog.require('API.Client.InlineObject5');
goog.require('API.Client.InlineObject6');
goog.require('API.Client.InlineObject7');
goog.require('API.Client.InlineObject8');
goog.require('API.Client.InlineObject9');
goog.require('API.Client.TripResponse');
goog.require('API.Client.VehicleHarshEventResponse');
goog.require('API.Client.VehicleSafetyScoreResponse');
goog.require('API.Client.allRouteJobUpdates');
goog.require('API.Client.inline_response_200');
goog.require('API.Client.inline_response_200_1');
goog.require('API.Client.inline_response_200_2');
goog.require('API.Client.inline_response_200_3');
goog.require('API.Client.inline_response_200_4');
goog.require('API.Client.inline_response_200_5');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.FleetApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('FleetApiBasePath') ?
                   /** @type {!string} */ ($injector.get('FleetApiBasePath')) :
                   'https://api.samsara.com/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('FleetApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('FleetApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.FleetApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * /fleet/add_address
 * This method adds an address book entry to the specified group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject2} addressParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FleetApi.prototype.addFleetAddress = function(accessToken, addressParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/add_address';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling addFleetAddress');
  }
  // verify required parameter 'addressParam' is set
  if (!addressParam) {
    throw new Error('Missing required parameter addressParam when calling addFleetAddress');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: addressParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /addresses
 * Add one or more addresses to the organization
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject} addresses 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Address>>}
 */
API.Client.FleetApi.prototype.addOrganizationAddresses = function(accessToken, addresses, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/addresses';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling addOrganizationAddresses');
  }
  // verify required parameter 'addresses' is set
  if (!addresses) {
    throw new Error('Missing required parameter addresses when calling addOrganizationAddresses');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: addresses,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes
 * Create a new dispatch route.
 * @param {!string} accessToken Samsara API access token.
 * @param {!DispatchRouteCreate} createDispatchRouteParams 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DispatchRoute>}
 */
API.Client.FleetApi.prototype.createDispatchRoute = function(accessToken, createDispatchRouteParams, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling createDispatchRoute');
  }
  // verify required parameter 'createDispatchRouteParams' is set
  if (!createDispatchRouteParams) {
    throw new Error('Missing required parameter createDispatchRouteParams when calling createDispatchRoute');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createDispatchRouteParams,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/create
 * Create a new driver.
 * @param {!string} accessToken Samsara API access token.
 * @param {!DriverForCreate} createDriverParam Driver creation body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Driver>}
 */
API.Client.FleetApi.prototype.createDriver = function(accessToken, createDriverParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/create';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling createDriver');
  }
  // verify required parameter 'createDriverParam' is set
  if (!createDriverParam) {
    throw new Error('Missing required parameter createDriverParam when calling createDriver');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createDriverParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
 * Create a new dispatch route for the driver with driver_id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} driverId ID of the driver with the associated routes.
 * @param {!DispatchRouteCreate} createDispatchRouteParams 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DispatchRoute>}
 */
API.Client.FleetApi.prototype.createDriverDispatchRoute = function(accessToken, driverId, createDispatchRouteParams, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driver_id}/dispatch/routes'
      .replace('{' + 'driver_id' + '}', String(driverId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling createDriverDispatchRoute');
  }
  // verify required parameter 'driverId' is set
  if (!driverId) {
    throw new Error('Missing required parameter driverId when calling createDriverDispatchRoute');
  }
  // verify required parameter 'createDispatchRouteParams' is set
  if (!createDispatchRouteParams) {
    throw new Error('Missing required parameter createDispatchRouteParams when calling createDriverDispatchRoute');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createDispatchRouteParams,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driver_id:[0-9]+}/documents
 * Create a driver document for the given driver.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} driverId ID of the driver for whom the document is created.
 * @param {!DocumentCreate} createDocumentParams To create a document for a given document type, the document type&#39;s uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field&#39;s valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Document>}
 */
API.Client.FleetApi.prototype.createDriverDocument = function(accessToken, driverId, createDocumentParams, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driver_id}/documents'
      .replace('{' + 'driver_id' + '}', String(driverId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling createDriverDocument');
  }
  // verify required parameter 'driverId' is set
  if (!driverId) {
    throw new Error('Missing required parameter driverId when calling createDriverDocument');
  }
  // verify required parameter 'createDocumentParams' is set
  if (!createDocumentParams) {
    throw new Error('Missing required parameter createDocumentParams when calling createDriverDocument');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createDocumentParams,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/maintenance/dvirs
 * Create a new dvir, marking a vehicle or trailer safe or unsafe.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject12} createDvirParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DvirBase>}
 */
API.Client.FleetApi.prototype.createDvir = function(accessToken, createDvirParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/maintenance/dvirs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling createDvir');
  }
  // verify required parameter 'createDvirParam' is set
  if (!createDvirParam) {
    throw new Error('Missing required parameter createDvirParam when calling createDvir');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createDvirParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
 * Create a new dispatch route for the vehicle with vehicle_id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} vehicleId ID of the vehicle with the associated routes.
 * @param {!DispatchRouteCreate} createDispatchRouteParams 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DispatchRoute>}
 */
API.Client.FleetApi.prototype.createVehicleDispatchRoute = function(accessToken, vehicleId, createDispatchRouteParams, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicle_id}/dispatch/routes'
      .replace('{' + 'vehicle_id' + '}', String(vehicleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling createVehicleDispatchRoute');
  }
  // verify required parameter 'vehicleId' is set
  if (!vehicleId) {
    throw new Error('Missing required parameter vehicleId when calling createVehicleDispatchRoute');
  }
  // verify required parameter 'createDispatchRouteParams' is set
  if (!createDispatchRouteParams) {
    throw new Error('Missing required parameter createDispatchRouteParams when calling createVehicleDispatchRoute');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createDispatchRouteParams,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
 * Deactivate a driver with the given id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!string} driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FleetApi.prototype.deactivateDriver = function(accessToken, driverIdOrExternalId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driver_id_or_external_id}'
      .replace('{' + 'driver_id_or_external_id' + '}', String(driverIdOrExternalId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling deactivateDriver');
  }
  // verify required parameter 'driverIdOrExternalId' is set
  if (!driverIdOrExternalId) {
    throw new Error('Missing required parameter driverIdOrExternalId when calling deactivateDriver');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes/{route_id:[0-9]+}/
 * Delete a dispatch route and its associated jobs.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} routeId ID of the dispatch route.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FleetApi.prototype.deleteDispatchRouteById = function(accessToken, routeId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes/{route_id}'
      .replace('{' + 'route_id' + '}', String(routeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling deleteDispatchRouteById');
  }
  // verify required parameter 'routeId' is set
  if (!routeId) {
    throw new Error('Missing required parameter routeId when calling deleteDispatchRouteById');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /addresses/{addressId}
 * Delete an address.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} addressId ID of the address/geofence
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FleetApi.prototype.deleteOrganizationAddress = function(accessToken, addressId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/addresses/{addressId}'
      .replace('{' + 'addressId' + '}', String(addressId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling deleteOrganizationAddress');
  }
  // verify required parameter 'addressId' is set
  if (!addressId) {
    throw new Error('Missing required parameter addressId when calling deleteOrganizationAddress');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes
 * Fetch all of the dispatch routes for the group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number=} opt_groupId Optional group ID if the organization has multiple groups (uncommon).
 * @param {!number=} opt_endTime Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
 * @param {!number=} opt_duration Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.DispatchRoute>>}
 */
API.Client.FleetApi.prototype.fetchAllDispatchRoutes = function(accessToken, opt_groupId, opt_endTime, opt_duration, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling fetchAllDispatchRoutes');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_groupId !== undefined) {
    queryParameters['group_id'] = opt_groupId;
  }

  if (opt_endTime !== undefined) {
    queryParameters['end_time'] = opt_endTime;
  }

  if (opt_duration !== undefined) {
    queryParameters['duration'] = opt_duration;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes/job_updates
 * Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID
 * @param {!string} accessToken Samsara API access token.
 * @param {!number=} opt_groupId Optional group ID if the organization has multiple groups (uncommon).
 * @param {!string=} opt_sequenceId Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
 * @param {!string=} opt_include Optionally set include&#x3D;route to include route object in response payload.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.allRouteJobUpdates>}
 */
API.Client.FleetApi.prototype.fetchAllRouteJobUpdates = function(accessToken, opt_groupId, opt_sequenceId, opt_include, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes/job_updates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling fetchAllRouteJobUpdates');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_groupId !== undefined) {
    queryParameters['group_id'] = opt_groupId;
  }

  if (opt_sequenceId !== undefined) {
    queryParameters['sequence_id'] = opt_sequenceId;
  }

  if (opt_include !== undefined) {
    queryParameters['include'] = opt_include;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/assets/locations
 * Fetch current locations of all assets for the group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number=} opt_groupId Optional group ID if the organization has multiple groups (uncommon).
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_1>}
 */
API.Client.FleetApi.prototype.getAllAssetCurrentLocations = function(accessToken, opt_groupId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/assets/locations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getAllAssetCurrentLocations');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_groupId !== undefined) {
    queryParameters['group_id'] = opt_groupId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/assets
 * Fetch all of the assets for the group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number=} opt_groupId Optional group ID if the organization has multiple groups (uncommon).
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200>}
 */
API.Client.FleetApi.prototype.getAllAssets = function(accessToken, opt_groupId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/assets';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getAllAssets');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_groupId !== undefined) {
    queryParameters['group_id'] = opt_groupId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/inactive
 * Fetch all deactivated drivers for the group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number=} opt_groupId Optional group ID if the organization has multiple groups (uncommon).
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Driver>>}
 */
API.Client.FleetApi.prototype.getAllDeactivatedDrivers = function(accessToken, opt_groupId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/inactive';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getAllDeactivatedDrivers');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_groupId !== undefined) {
    queryParameters['group_id'] = opt_groupId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/assets/{assetId:[0-9]+}/locations
 * Fetch the historical locations for the asset.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} assetId ID of the asset
 * @param {!number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
 * @param {!number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Object>>}
 */
API.Client.FleetApi.prototype.getAssetLocation = function(accessToken, assetId, startMs, endMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/assets/{asset_id}/locations'
      .replace('{' + 'asset_id' + '}', String(assetId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getAssetLocation');
  }
  // verify required parameter 'assetId' is set
  if (!assetId) {
    throw new Error('Missing required parameter assetId when calling getAssetLocation');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getAssetLocation');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getAssetLocation');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/assets/{assetId:[0-9]+}/reefer
 * Fetch the reefer-specific stats of an asset.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} assetId ID of the asset
 * @param {!number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
 * @param {!number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AssetReeferResponse>}
 */
API.Client.FleetApi.prototype.getAssetReefer = function(accessToken, assetId, startMs, endMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/assets/{asset_id}/reefer'
      .replace('{' + 'asset_id' + '}', String(assetId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getAssetReefer');
  }
  // verify required parameter 'assetId' is set
  if (!assetId) {
    throw new Error('Missing required parameter assetId when calling getAssetReefer');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getAssetReefer');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getAssetReefer');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
 * Fetch deactivated driver by id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!string} driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Driver>}
 */
API.Client.FleetApi.prototype.getDeactivatedDriverById = function(accessToken, driverIdOrExternalId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/inactive/{driver_id_or_external_id}'
      .replace('{' + 'driver_id_or_external_id' + '}', String(driverIdOrExternalId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDeactivatedDriverById');
  }
  // verify required parameter 'driverIdOrExternalId' is set
  if (!driverIdOrExternalId) {
    throw new Error('Missing required parameter driverIdOrExternalId when calling getDeactivatedDriverById');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes/{route_id:[0-9]+}
 * Fetch a dispatch route by id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} routeId ID of the dispatch route.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DispatchRoute>}
 */
API.Client.FleetApi.prototype.getDispatchRouteById = function(accessToken, routeId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes/{route_id}'
      .replace('{' + 'route_id' + '}', String(routeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDispatchRouteById');
  }
  // verify required parameter 'routeId' is set
  if (!routeId) {
    throw new Error('Missing required parameter routeId when calling getDispatchRouteById');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes/{route_id:[0-9]+}/history
 * Fetch the history of a dispatch route.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} routeId ID of the route with history.
 * @param {!number=} opt_startTime Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
 * @param {!number=} opt_endTime Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DispatchRouteHistory>}
 */
API.Client.FleetApi.prototype.getDispatchRouteHistory = function(accessToken, routeId, opt_startTime, opt_endTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes/{route_id}/history'
      .replace('{' + 'route_id' + '}', String(routeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDispatchRouteHistory');
  }
  // verify required parameter 'routeId' is set
  if (!routeId) {
    throw new Error('Missing required parameter routeId when calling getDispatchRouteHistory');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_startTime !== undefined) {
    queryParameters['start_time'] = opt_startTime;
  }

  if (opt_endTime !== undefined) {
    queryParameters['end_time'] = opt_endTime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
 * Fetch all of the dispatch routes for a given driver.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} driverId ID of the driver with the associated routes.
 * @param {!number=} opt_endTime Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
 * @param {!number=} opt_duration Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.DispatchRoute>>}
 */
API.Client.FleetApi.prototype.getDispatchRoutesByDriverId = function(accessToken, driverId, opt_endTime, opt_duration, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driver_id}/dispatch/routes'
      .replace('{' + 'driver_id' + '}', String(driverId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDispatchRoutesByDriverId');
  }
  // verify required parameter 'driverId' is set
  if (!driverId) {
    throw new Error('Missing required parameter driverId when calling getDispatchRoutesByDriverId');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_endTime !== undefined) {
    queryParameters['end_time'] = opt_endTime;
  }

  if (opt_duration !== undefined) {
    queryParameters['duration'] = opt_duration;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
 * Fetch all of the dispatch routes for a given vehicle.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} vehicleId ID of the vehicle with the associated routes.
 * @param {!number=} opt_endTime Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
 * @param {!number=} opt_duration Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.DispatchRoute>>}
 */
API.Client.FleetApi.prototype.getDispatchRoutesByVehicleId = function(accessToken, vehicleId, opt_endTime, opt_duration, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicle_id}/dispatch/routes'
      .replace('{' + 'vehicle_id' + '}', String(vehicleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDispatchRoutesByVehicleId');
  }
  // verify required parameter 'vehicleId' is set
  if (!vehicleId) {
    throw new Error('Missing required parameter vehicleId when calling getDispatchRoutesByVehicleId');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_endTime !== undefined) {
    queryParameters['end_time'] = opt_endTime;
  }

  if (opt_duration !== undefined) {
    queryParameters['duration'] = opt_duration;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
 * Fetch driver by id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!string} driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Driver>}
 */
API.Client.FleetApi.prototype.getDriverById = function(accessToken, driverIdOrExternalId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driver_id_or_external_id}'
      .replace('{' + 'driver_id_or_external_id' + '}', String(driverIdOrExternalId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDriverById');
  }
  // verify required parameter 'driverIdOrExternalId' is set
  if (!driverIdOrExternalId) {
    throw new Error('Missing required parameter driverIdOrExternalId when calling getDriverById');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/document_types
 * Fetch all of the document types.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.DocumentType>>}
 */
API.Client.FleetApi.prototype.getDriverDocumentTypesByOrgId = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/document_types';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/documents
 * Fetch all of the documents.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number=} opt_endMs Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
 * @param {!number=} opt_durationMs Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Document>>}
 */
API.Client.FleetApi.prototype.getDriverDocumentsByOrgId = function(accessToken, opt_endMs, opt_durationMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/documents';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDriverDocumentsByOrgId');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_endMs !== undefined) {
    queryParameters['endMs'] = opt_endMs;
  }

  if (opt_durationMs !== undefined) {
    queryParameters['durationMs'] = opt_durationMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driverId:[0-9]+}/safety/score
 * Fetch the safety score for the driver.
 * @param {!number} driverId ID of the driver
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
 * @param {!number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DriverSafetyScoreResponse>}
 */
API.Client.FleetApi.prototype.getDriverSafetyScore = function(driverId, accessToken, startMs, endMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driverId}/safety/score'
      .replace('{' + 'driverId' + '}', String(driverId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'driverId' is set
  if (!driverId) {
    throw new Error('Missing required parameter driverId when calling getDriverSafetyScore');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDriverSafetyScore');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getDriverSafetyScore');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getDriverSafetyScore');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/maintenance/dvirs
 * Get DVIRs for the org within provided time constraints
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} endMs time in millis until the last dvir log.
 * @param {!number} durationMs time in millis which corresponds to the duration before the end_ms.
 * @param {!number=} opt_groupId Group ID to query.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DvirListResponse>}
 */
API.Client.FleetApi.prototype.getDvirs = function(accessToken, endMs, durationMs, opt_groupId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/maintenance/dvirs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getDvirs');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getDvirs');
  }
  // verify required parameter 'durationMs' is set
  if (!durationMs) {
    throw new Error('Missing required parameter durationMs when calling getDvirs');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (endMs !== undefined) {
    queryParameters['end_ms'] = endMs;
  }

  if (durationMs !== undefined) {
    queryParameters['duration_ms'] = durationMs;
  }

  if (opt_groupId !== undefined) {
    queryParameters['group_id'] = opt_groupId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers
 * Get all the drivers for the specified group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject3} groupDriversParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DriversResponse>}
 */
API.Client.FleetApi.prototype.getFleetDrivers = function(accessToken, groupDriversParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetDrivers');
  }
  // verify required parameter 'groupDriversParam' is set
  if (!groupDriversParam) {
    throw new Error('Missing required parameter groupDriversParam when calling getFleetDrivers');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: groupDriversParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
 * Get summarized daily HOS charts for a specified driver.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} driverId ID of the driver with HOS logs.
 * @param {!InlineObject6} hosLogsParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DriverDailyLogResponse>}
 */
API.Client.FleetApi.prototype.getFleetDriversHosDailyLogs = function(accessToken, driverId, hosLogsParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/{driver_id}/hos_daily_logs'
      .replace('{' + 'driver_id' + '}', String(driverId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetDriversHosDailyLogs');
  }
  // verify required parameter 'driverId' is set
  if (!driverId) {
    throw new Error('Missing required parameter driverId when calling getFleetDriversHosDailyLogs');
  }
  // verify required parameter 'hosLogsParam' is set
  if (!hosLogsParam) {
    throw new Error('Missing required parameter hosLogsParam when calling getFleetDriversHosDailyLogs');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: hosLogsParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/summary
 * Get the distance and time each driver in an organization has driven in a given time period.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject5} driversSummaryParam 
 * @param {!boolean=} opt_snapToDayBounds Snap query result to HOS day boundaries.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DriversSummaryResponse>}
 */
API.Client.FleetApi.prototype.getFleetDriversSummary = function(accessToken, driversSummaryParam, opt_snapToDayBounds, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/summary';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetDriversSummary');
  }
  // verify required parameter 'driversSummaryParam' is set
  if (!driversSummaryParam) {
    throw new Error('Missing required parameter driversSummaryParam when calling getFleetDriversSummary');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_snapToDayBounds !== undefined) {
    queryParameters['snap_to_day_bounds'] = opt_snapToDayBounds;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: driversSummaryParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/hos_authentication_logs
 * Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject7} hosAuthenticationLogsParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.HosAuthenticationLogsResponse>}
 */
API.Client.FleetApi.prototype.getFleetHosAuthenticationLogs = function(accessToken, hosAuthenticationLogsParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/hos_authentication_logs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetHosAuthenticationLogs');
  }
  // verify required parameter 'hosAuthenticationLogsParam' is set
  if (!hosAuthenticationLogsParam) {
    throw new Error('Missing required parameter hosAuthenticationLogsParam when calling getFleetHosAuthenticationLogs');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: hosAuthenticationLogsParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/hos_logs
 * Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject8} hosLogsParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.HosLogsResponse>}
 */
API.Client.FleetApi.prototype.getFleetHosLogs = function(accessToken, hosLogsParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/hos_logs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetHosLogs');
  }
  // verify required parameter 'hosLogsParam' is set
  if (!hosLogsParam) {
    throw new Error('Missing required parameter hosLogsParam when calling getFleetHosLogs');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: hosLogsParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/hos_logs_summary
 * Get the current HOS status for all drivers in the group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject9} hosLogsParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.HosLogsSummaryResponse>}
 */
API.Client.FleetApi.prototype.getFleetHosLogsSummary = function(accessToken, hosLogsParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/hos_logs_summary';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetHosLogsSummary');
  }
  // verify required parameter 'hosLogsParam' is set
  if (!hosLogsParam) {
    throw new Error('Missing required parameter hosLogsParam when calling getFleetHosLogsSummary');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: hosLogsParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/locations
 * Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject11} groupParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_3>}
 */
API.Client.FleetApi.prototype.getFleetLocations = function(accessToken, groupParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/locations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetLocations');
  }
  // verify required parameter 'groupParam' is set
  if (!groupParam) {
    throw new Error('Missing required parameter groupParam when calling getFleetLocations');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: groupParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/maintenance/list
 * Get list of the vehicles with any engine faults or check light data.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject13} groupParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_4>}
 */
API.Client.FleetApi.prototype.getFleetMaintenanceList = function(accessToken, groupParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/maintenance/list';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetMaintenanceList');
  }
  // verify required parameter 'groupParam' is set
  if (!groupParam) {
    throw new Error('Missing required parameter groupParam when calling getFleetMaintenanceList');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: groupParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/trips
 * Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject15} tripsParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TripResponse>}
 */
API.Client.FleetApi.prototype.getFleetTrips = function(accessToken, tripsParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/trips';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetTrips');
  }
  // verify required parameter 'tripsParam' is set
  if (!tripsParam) {
    throw new Error('Missing required parameter tripsParam when calling getFleetTrips');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: tripsParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
 * Gets a specific vehicle.
 * @param {!string} accessToken Samsara API access token.
 * @param {!string} vehicleIdOrExternalId ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FleetVehicleResponse>}
 */
API.Client.FleetApi.prototype.getFleetVehicle = function(accessToken, vehicleIdOrExternalId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicle_id_or_external_id}'
      .replace('{' + 'vehicle_id_or_external_id' + '}', String(vehicleIdOrExternalId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getFleetVehicle');
  }
  // verify required parameter 'vehicleIdOrExternalId' is set
  if (!vehicleIdOrExternalId) {
    throw new Error('Missing required parameter vehicleIdOrExternalId when calling getFleetVehicle');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /addresses/{addressId}
 * Fetch an address by its id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} addressId ID of the address/geofence
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Address>}
 */
API.Client.FleetApi.prototype.getOrganizationAddress = function(accessToken, addressId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/addresses/{addressId}'
      .replace('{' + 'addressId' + '}', String(addressId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getOrganizationAddress');
  }
  // verify required parameter 'addressId' is set
  if (!addressId) {
    throw new Error('Missing required parameter addressId when calling getOrganizationAddress');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /addresses
 * Fetch all addresses/geofences for the organization. An address contains either a circle or polygon geofence describing the address boundaries.
 * @param {!string} accessToken Samsara API access token.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Address>>}
 */
API.Client.FleetApi.prototype.getOrganizationAddresses = function(accessToken, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/addresses';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getOrganizationAddresses');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /contacts/{contact_id}
 * Fetch a contact by its id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} contactId ID of the contact
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Contact>}
 */
API.Client.FleetApi.prototype.getOrganizationContact = function(accessToken, contactId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/contacts/{contact_id}'
      .replace('{' + 'contact_id' + '}', String(contactId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getOrganizationContact');
  }
  // verify required parameter 'contactId' is set
  if (!contactId) {
    throw new Error('Missing required parameter contactId when calling getOrganizationContact');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
 * Fetch harsh event details for a vehicle.
 * @param {!number} vehicleId ID of the vehicle
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.VehicleHarshEventResponse>}
 */
API.Client.FleetApi.prototype.getVehicleHarshEvent = function(vehicleId, accessToken, timestamp, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicleId}/safety/harsh_event'
      .replace('{' + 'vehicleId' + '}', String(vehicleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'vehicleId' is set
  if (!vehicleId) {
    throw new Error('Missing required parameter vehicleId when calling getVehicleHarshEvent');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getVehicleHarshEvent');
  }
  // verify required parameter 'timestamp' is set
  if (!timestamp) {
    throw new Error('Missing required parameter timestamp when calling getVehicleHarshEvent');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (timestamp !== undefined) {
    queryParameters['timestamp'] = timestamp;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicle_id:[0-9]+}/locations
 * Fetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} vehicleId ID of the vehicle with the associated routes.
 * @param {!number} startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
 * @param {!number} endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.FleetVehicleLocation>>}
 */
API.Client.FleetApi.prototype.getVehicleLocations = function(accessToken, vehicleId, startMs, endMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicle_id}/locations'
      .replace('{' + 'vehicle_id' + '}', String(vehicleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getVehicleLocations');
  }
  // verify required parameter 'vehicleId' is set
  if (!vehicleId) {
    throw new Error('Missing required parameter vehicleId when calling getVehicleLocations');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getVehicleLocations');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getVehicleLocations');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
 * Fetch the safety score for the vehicle.
 * @param {!number} vehicleId ID of the vehicle
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
 * @param {!number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.VehicleSafetyScoreResponse>}
 */
API.Client.FleetApi.prototype.getVehicleSafetyScore = function(vehicleId, accessToken, startMs, endMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicleId}/safety/score'
      .replace('{' + 'vehicleId' + '}', String(vehicleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'vehicleId' is set
  if (!vehicleId) {
    throw new Error('Missing required parameter vehicleId when calling getVehicleSafetyScore');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getVehicleSafetyScore');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getVehicleSafetyScore');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getVehicleSafetyScore');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/stats
 * Fetch engine state and aux input data for all vehicles in the group between a start/end time. Data returned may be affected by device connectivity and processing time.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} startMs Time in Unix epoch milliseconds for the start of the query.
 * @param {!number} endMs Time in Unix epoch milliseconds for the end of the query.
 * @param {!string=} opt_series Comma-separated list of stat types. Options are engineState, auxInput1, and auxInput2. If this parameter is excluded, all 3 stat types will be returned. Example: series&#x3D;engineState,auxInput2
 * @param {!string=} opt_tagIds Comma-separated list of tag ids. Example: tagIds&#x3D;1,2,3
 * @param {!string=} opt_startingAfter Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.
 * @param {!string=} opt_endingBefore Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.
 * @param {!number=} opt_limit Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_5>}
 */
API.Client.FleetApi.prototype.getVehicleStats = function(accessToken, startMs, endMs, opt_series, opt_tagIds, opt_startingAfter, opt_endingBefore, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/stats';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getVehicleStats');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getVehicleStats');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getVehicleStats');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  if (opt_series !== undefined) {
    queryParameters['series'] = opt_series;
  }

  if (opt_tagIds !== undefined) {
    queryParameters['tagIds'] = opt_tagIds;
  }

  if (opt_startingAfter !== undefined) {
    queryParameters['startingAfter'] = opt_startingAfter;
  }

  if (opt_endingBefore !== undefined) {
    queryParameters['endingBefore'] = opt_endingBefore;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/locations
 * Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30 minutes.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 30 minutes)
 * @param {!number} endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Object>>}
 */
API.Client.FleetApi.prototype.getVehiclesLocations = function(accessToken, startMs, endMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/locations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling getVehiclesLocations');
  }
  // verify required parameter 'startMs' is set
  if (!startMs) {
    throw new Error('Missing required parameter startMs when calling getVehiclesLocations');
  }
  // verify required parameter 'endMs' is set
  if (!endMs) {
    throw new Error('Missing required parameter endMs when calling getVehiclesLocations');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (startMs !== undefined) {
    queryParameters['startMs'] = startMs;
  }

  if (endMs !== undefined) {
    queryParameters['endMs'] = endMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /contacts
 * Fetch all contacts for the organization.
 * @param {!string} accessToken Samsara API access token.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Contact>>}
 */
API.Client.FleetApi.prototype.listContacts = function(accessToken, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/contacts';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling listContacts');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/list
 * Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject10} groupParam 
 * @param {!string=} opt_startingAfter Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;endingBefore&#39; parameter.
 * @param {!string=} opt_endingBefore Pagination parameter indicating the cursor position to return results before. Used in conjunction with the &#39;limit&#39; parameter. Mutually exclusive with &#39;startingAfter&#39; parameter.
 * @param {!number=} opt_limit Pagination parameter indicating the number of results to return in this request. Used in conjunction with either &#39;startingAfter&#39; or &#39;endingBefore&#39;.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_2>}
 */
API.Client.FleetApi.prototype.listFleet = function(accessToken, groupParam, opt_startingAfter, opt_endingBefore, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/list';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling listFleet');
  }
  // verify required parameter 'groupParam' is set
  if (!groupParam) {
    throw new Error('Missing required parameter groupParam when calling listFleet');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  if (opt_startingAfter !== undefined) {
    queryParameters['startingAfter'] = opt_startingAfter;
  }

  if (opt_endingBefore !== undefined) {
    queryParameters['endingBefore'] = opt_endingBefore;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: groupParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
 * Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396: https://tools.ietf.org/html/rfc7396.
 * @param {!string} accessToken Samsara API access token.
 * @param {!string} vehicleIdOrExternalId ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
 * @param {!InlineObject16} data 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FleetVehicleResponse>}
 */
API.Client.FleetApi.prototype.patchFleetVehicle = function(accessToken, vehicleIdOrExternalId, data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/vehicles/{vehicle_id_or_external_id}'
      .replace('{' + 'vehicle_id_or_external_id' + '}', String(vehicleIdOrExternalId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling patchFleetVehicle');
  }
  // verify required parameter 'vehicleIdOrExternalId' is set
  if (!vehicleIdOrExternalId) {
    throw new Error('Missing required parameter vehicleIdOrExternalId when calling patchFleetVehicle');
  }
  // verify required parameter 'data' is set
  if (!data) {
    throw new Error('Missing required parameter data when calling patchFleetVehicle');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
 * Reactivate the inactive driver having id.
 * @param {!string} accessToken Samsara API access token.
 * @param {!string} driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
 * @param {!InlineObject4} reactivateDriverParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Driver>}
 */
API.Client.FleetApi.prototype.reactivateDriverById = function(accessToken, driverIdOrExternalId, reactivateDriverParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/drivers/inactive/{driver_id_or_external_id}'
      .replace('{' + 'driver_id_or_external_id' + '}', String(driverIdOrExternalId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling reactivateDriverById');
  }
  // verify required parameter 'driverIdOrExternalId' is set
  if (!driverIdOrExternalId) {
    throw new Error('Missing required parameter driverIdOrExternalId when calling reactivateDriverById');
  }
  // verify required parameter 'reactivateDriverParam' is set
  if (!reactivateDriverParam) {
    throw new Error('Missing required parameter reactivateDriverParam when calling reactivateDriverById');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: reactivateDriverParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/dispatch/routes/{route_id:[0-9]+}/
 * Update a dispatch route and its associated jobs.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} routeId ID of the dispatch route.
 * @param {!DispatchRoute} updateDispatchRouteParams 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DispatchRoute>}
 */
API.Client.FleetApi.prototype.updateDispatchRouteById = function(accessToken, routeId, updateDispatchRouteParams, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/dispatch/routes/{route_id}'
      .replace('{' + 'route_id' + '}', String(routeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling updateDispatchRouteById');
  }
  // verify required parameter 'routeId' is set
  if (!routeId) {
    throw new Error('Missing required parameter routeId when calling updateDispatchRouteById');
  }
  // verify required parameter 'updateDispatchRouteParams' is set
  if (!updateDispatchRouteParams) {
    throw new Error('Missing required parameter updateDispatchRouteParams when calling updateDispatchRouteById');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: updateDispatchRouteParams,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /addresses/{addressId}
 * Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The set of tags or contacts associated with this address will be updated to exactly match the list of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove notes, pass an empty string.
 * @param {!string} accessToken Samsara API access token.
 * @param {!number} addressId ID of the address/geofence
 * @param {!InlineObject1} address 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FleetApi.prototype.updateOrganizationAddress = function(accessToken, addressId, address, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/addresses/{addressId}'
      .replace('{' + 'addressId' + '}', String(addressId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling updateOrganizationAddress');
  }
  // verify required parameter 'addressId' is set
  if (!addressId) {
    throw new Error('Missing required parameter addressId when calling updateOrganizationAddress');
  }
  // verify required parameter 'address' is set
  if (!address) {
    throw new Error('Missing required parameter address when calling updateOrganizationAddress');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: address,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * /fleet/set_data
 * This method enables the mutation of metadata for vehicles in the Samsara Cloud.
 * @param {!string} accessToken Samsara API access token.
 * @param {!InlineObject14} vehicleUpdateParam 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FleetApi.prototype.updateVehicles = function(accessToken, vehicleUpdateParam, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fleet/set_data';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling updateVehicles');
  }
  // verify required parameter 'vehicleUpdateParam' is set
  if (!vehicleUpdateParam) {
    throw new Error('Missing required parameter vehicleUpdateParam when calling updateVehicles');
  }
  if (accessToken !== undefined) {
    queryParameters['access_token'] = accessToken;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: vehicleUpdateParam,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
