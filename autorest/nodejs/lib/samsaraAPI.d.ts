/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";
import * as operations from "./operations";

/**
 * SamsaraAPIOptions for SamsaraAPI.
 */
declare interface SamsaraAPIOptions extends ServiceClientOptions {
  /**
   * @property {number} [endMs1] - Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
   */
  endMs1?: number;
  /**
   * @property {number} [startMs1] - Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.
   */
  startMs1?: number;
  /**
   * @property {number} [durationMs] - Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
   */
  durationMs?: number;
  /**
   * @property {number} [endMs2] - Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
   */
  endMs2?: number;
  /**
   * @property {number} [groupId] - Optional group ID if the organization has multiple groups (uncommon).
   */
  groupId?: number;
  /**
   * @property {string} [include] - Optionally set include=route to include route object in response payload.
   */
  include?: string;
  /**
   * @property {string} [sequenceId] - Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
   */
  sequenceId?: string;
  /**
   * @property {string} [endingBefore] - Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
   */
  endingBefore?: string;
  /**
   * @property {number} [limit] - Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
   */
  limit?: number;
  /**
   * @property {string} [startingAfter] - Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
   */
  startingAfter?: string;
  /**
   * @property {number} [duration] - Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
   */
  duration?: number;
  /**
   * @property {number} [endTime] - Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
   */
  endTime?: number;
  /**
   * @property {number} [endTime1] - Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
   */
  endTime1?: number;
  /**
   * @property {number} [startTime] - Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
   */
  startTime?: number;
}

export default class SamsaraAPI extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the SamsaraAPI class.
   * @constructor
   *
   * @param {string} accessToken - Samsara API access token.
   *
   * @param {number} endMs - Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
   *
   * @param {number} startMs - Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
   *
   * @param {number} assetId - ID of the asset
   *
   * @param {number} dataInputId - ID of the data input
   *
   * @param {string} driverIdOrExternalId - ID of the driver.  This must be either the numeric ID generated by Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
   *
   * @param {number} timestamp - Timestamp in milliseconds representing the timestamp of a harsh event.
   *
   * @param {number} endMs3 - Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
   *
   * @param {number} startMs2 - Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
   *
   * @param {number} tagId - ID of the tag.
   *
   * @param {string} vehicleIdOrExternalId - ID of the vehicle.  This must be either the numeric ID generated by Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {number} [options.endMs1] - Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
   *
   * @param {number} [options.startMs1] - Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.
   *
   * @param {number} [options.durationMs] - Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
   *
   * @param {number} [options.endMs2] - Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
   *
   * @param {number} [options.groupId] - Optional group ID if the organization has multiple groups (uncommon).
   *
   * @param {string} [options.include] - Optionally set include=route to include route object in response payload.
   *
   * @param {string} [options.sequenceId] - Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.
   *
   * @param {string} [options.endingBefore] - Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.
   *
   * @param {number} [options.limit] - Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
   *
   * @param {string} [options.startingAfter] - Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.
   *
   * @param {number} [options.duration] - Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.
   *
   * @param {number} [options.endTime] - Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.
   *
   * @param {number} [options.endTime1] - Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.
   *
   * @param {number} [options.startTime] - Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.
   *
   */
  constructor(accessToken: string, endMs: number, startMs: number, assetId: number, dataInputId: number, driverIdOrExternalId: string, timestamp: number, endMs3: number, startMs2: number, tagId: number, vehicleIdOrExternalId: string, baseUri?: string, options?: SamsaraAPIOptions);

  accessToken: string;

  endMs: number;

  startMs: number;

  assetId: number;

  endMs1: number;

  dataInputId: number;

  startMs1: number;

  durationMs: number;

  endMs2: number;

  driverIdOrExternalId: string;

  groupId: number;

  timestamp: number;

  include: string;

  sequenceId: string;

  endingBefore: string;

  limit: number;

  startingAfter: string;

  duration: number;

  endTime: number;

  endTime1: number;

  startTime: number;

  endMs3: number;

  startMs2: number;

  tagId: number;

  vehicleIdOrExternalId: string;

  // Operation groups
  add: operations.Add;
  get: operations.Get;
  list: operations.List;
  create: operations.Create;
  update: operations.Update;


  /**
   * @summary /addresses
   *
   * Fetch all addresses/geofences for the organization. An address contains
   * either a circle or polygon geofence describing the address boundaries.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getOrganizationAddressesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Address[]>>;

  /**
   * @summary /addresses
   *
   * Fetch all addresses/geofences for the organization. An address contains
   * either a circle or polygon geofence describing the address boundaries.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getOrganizationAddresses(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Address[]>;
  getOrganizationAddresses(callback: ServiceCallback<models.Address[]>): void;
  getOrganizationAddresses(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Address[]>): void;


  /**
   * @summary /addresses
   *
   * Add one or more addresses to the organization
   *
   * @param {object} addresses List of addresses/geofences to add. Geofences can
   * be circular or a polygon.
   * For each address, only one of 'circle' or 'polygon' should be provided. If
   * both are provided, the geofence will be saved as a polygon.
   *
   * @param {array} addresses.addresses
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  addOrganizationAddressesWithHttpOperationResponse(addresses: models.Addresses, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Address[]>>;

  /**
   * @summary /addresses
   *
   * Add one or more addresses to the organization
   *
   * @param {object} addresses List of addresses/geofences to add. Geofences can
   * be circular or a polygon.
   * For each address, only one of 'circle' or 'polygon' should be provided. If
   * both are provided, the geofence will be saved as a polygon.
   *
   * @param {array} addresses.addresses
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  addOrganizationAddresses(addresses: models.Addresses, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Address[]>;
  addOrganizationAddresses(addresses: models.Addresses, callback: ServiceCallback<models.Address[]>): void;
  addOrganizationAddresses(addresses: models.Addresses, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Address[]>): void;


  /**
   * @summary /addresses/{addressId}
   *
   * Fetch an address by its id.
   *
   * @param {number} addressId ID of the address/geofence
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Address>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getOrganizationAddressWithHttpOperationResponse(addressId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Address>>;

  /**
   * @summary /addresses/{addressId}
   *
   * Fetch an address by its id.
   *
   * @param {number} addressId ID of the address/geofence
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Address} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Address} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Address} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getOrganizationAddress(addressId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Address>;
  getOrganizationAddress(addressId: number, callback: ServiceCallback<models.Address>): void;
  getOrganizationAddress(addressId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Address>): void;


  /**
   * @summary /addresses/{addressId}
   *
   * Delete an address.
   *
   * @param {number} addressId ID of the address/geofence
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteOrganizationAddressWithHttpOperationResponse(addressId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary /addresses/{addressId}
   *
   * Delete an address.
   *
   * @param {number} addressId ID of the address/geofence
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteOrganizationAddress(addressId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteOrganizationAddress(addressId: number, callback: ServiceCallback<void>): void;
  deleteOrganizationAddress(addressId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary /addresses/{addressId}
   *
   * Update the name, formatted address, geofence, notes, or tag and contact Ids
   * for an address. The set of tags or contacts associated with this address
   * will be updated to exactly match the list of IDs passed in. To remove all
   * tags or contacts from an address, pass an empty list; to remove notes, pass
   * an empty string.
   *
   * @param {object} address Update parts of an address's value. If the geofence
   * 'circle' or 'polygon' key is specified, the update will change the type of
   * geofence accordingly.
   *
   * @param {array} [address.contactIds]
   *
   * @param {string} [address.formattedAddress] The full address associated with
   * this address/geofence, as it might be recognized by maps.google.com
   *
   * @param {object} [address.geofence]
   *
   * @param {object} [address.geofence.circle] Information about a circular
   * geofence. This field is only populated if the geofence is a circle.
   *
   * @param {number} [address.geofence.circle.latitude] The latitude of the
   * center of the circular geofence
   *
   * @param {number} [address.geofence.circle.longitude] The longitude of the
   * center of the circular geofence
   *
   * @param {number} [address.geofence.circle.radiusMeters] The radius of the
   * circular geofence
   *
   * @param {object} [address.geofence.polygon] Information about a polygon
   * geofence. This field is only populated if the geofence is a polygon.
   *
   * @param {array} [address.geofence.polygon.vertices] The vertices of the
   * polygon geofence. These geofence vertices describe the perimeter of the
   * polygon, and must consist of at least 3 vertices and less than 40.
   *
   * @param {string} [address.name] The name of this address/geofence
   *
   * @param {string} [address.notes]
   *
   * @param {array} [address.tagIds]
   *
   * @param {number} addressId ID of the address/geofence
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateOrganizationAddressWithHttpOperationResponse(address: models.AddressModel, addressId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary /addresses/{addressId}
   *
   * Update the name, formatted address, geofence, notes, or tag and contact Ids
   * for an address. The set of tags or contacts associated with this address
   * will be updated to exactly match the list of IDs passed in. To remove all
   * tags or contacts from an address, pass an empty list; to remove notes, pass
   * an empty string.
   *
   * @param {object} address Update parts of an address's value. If the geofence
   * 'circle' or 'polygon' key is specified, the update will change the type of
   * geofence accordingly.
   *
   * @param {array} [address.contactIds]
   *
   * @param {string} [address.formattedAddress] The full address associated with
   * this address/geofence, as it might be recognized by maps.google.com
   *
   * @param {object} [address.geofence]
   *
   * @param {object} [address.geofence.circle] Information about a circular
   * geofence. This field is only populated if the geofence is a circle.
   *
   * @param {number} [address.geofence.circle.latitude] The latitude of the
   * center of the circular geofence
   *
   * @param {number} [address.geofence.circle.longitude] The longitude of the
   * center of the circular geofence
   *
   * @param {number} [address.geofence.circle.radiusMeters] The radius of the
   * circular geofence
   *
   * @param {object} [address.geofence.polygon] Information about a polygon
   * geofence. This field is only populated if the geofence is a polygon.
   *
   * @param {array} [address.geofence.polygon.vertices] The vertices of the
   * polygon geofence. These geofence vertices describe the perimeter of the
   * polygon, and must consist of at least 3 vertices and less than 40.
   *
   * @param {string} [address.name] The name of this address/geofence
   *
   * @param {string} [address.notes]
   *
   * @param {array} [address.tagIds]
   *
   * @param {number} addressId ID of the address/geofence
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateOrganizationAddress(address: models.AddressModel, addressId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateOrganizationAddress(address: models.AddressModel, addressId: number, callback: ServiceCallback<void>): void;
  updateOrganizationAddress(address: models.AddressModel, addressId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary /contacts
   *
   * Fetch all contacts for the organization.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listContactsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Contact[]>>;

  /**
   * @summary /contacts
   *
   * Fetch all contacts for the organization.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listContacts(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Contact[]>;
  listContacts(callback: ServiceCallback<models.Contact[]>): void;
  listContacts(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contact[]>): void;


  /**
   * @summary /contacts/{contact_id}
   *
   * Fetch a contact by its id.
   *
   * @param {number} contactId ID of the contact
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Contact>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getOrganizationContactWithHttpOperationResponse(contactId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Contact>>;

  /**
   * @summary /contacts/{contact_id}
   *
   * Fetch a contact by its id.
   *
   * @param {number} contactId ID of the contact
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Contact} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Contact} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Contact} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getOrganizationContact(contactId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Contact>;
  getOrganizationContact(contactId: number, callback: ServiceCallback<models.Contact>): void;
  getOrganizationContact(contactId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contact>): void;


  /**
   * @summary /fleet/assets
   *
   * Fetch all of the assets for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAllAssetsOKResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllAssetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllAssetsOKResponse>>;

  /**
   * @summary /fleet/assets
   *
   * Fetch all of the assets for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GetAllAssetsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GetAllAssetsOKResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAllAssetsOKResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllAssets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllAssetsOKResponse>;
  getAllAssets(callback: ServiceCallback<models.GetAllAssetsOKResponse>): void;
  getAllAssets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllAssetsOKResponse>): void;


  /**
   * @summary /fleet/assets/locations
   *
   * Fetch current locations of all assets for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAllAssetCurrentLocationsOKResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllAssetCurrentLocationsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllAssetCurrentLocationsOKResponse>>;

  /**
   * @summary /fleet/assets/locations
   *
   * Fetch current locations of all assets for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GetAllAssetCurrentLocationsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GetAllAssetCurrentLocationsOKResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAllAssetCurrentLocationsOKResponse} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllAssetCurrentLocations(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllAssetCurrentLocationsOKResponse>;
  getAllAssetCurrentLocations(callback: ServiceCallback<models.GetAllAssetCurrentLocationsOKResponse>): void;
  getAllAssetCurrentLocations(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllAssetCurrentLocationsOKResponse>): void;


  /**
   * @summary /fleet/assets/{assetId:[0-9]+}/locations
   *
   * Fetch the historical locations for the asset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAssetLocationWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AssetLocationResponseItem[]>>;

  /**
   * @summary /fleet/assets/{assetId:[0-9]+}/locations
   *
   * Fetch the historical locations for the asset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAssetLocation(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AssetLocationResponseItem[]>;
  getAssetLocation(callback: ServiceCallback<models.AssetLocationResponseItem[]>): void;
  getAssetLocation(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AssetLocationResponseItem[]>): void;


  /**
   * @summary /fleet/assets/{assetId:[0-9]+}/reefer
   *
   * Fetch the reefer-specific stats of an asset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AssetReeferResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAssetReeferWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AssetReeferResponse>>;

  /**
   * @summary /fleet/assets/{assetId:[0-9]+}/reefer
   *
   * Fetch the reefer-specific stats of an asset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {AssetReeferResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {AssetReeferResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AssetReeferResponse} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAssetReefer(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AssetReeferResponse>;
  getAssetReefer(callback: ServiceCallback<models.AssetReeferResponse>): void;
  getAssetReefer(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AssetReeferResponse>): void;


  /**
   * @summary /fleet/dispatch/routes
   *
   * Fetch all of the dispatch routes for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  fetchAllDispatchRoutesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute[]>>;

  /**
   * @summary /fleet/dispatch/routes
   *
   * Fetch all of the dispatch routes for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  fetchAllDispatchRoutes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute[]>;
  fetchAllDispatchRoutes(callback: ServiceCallback<models.DispatchRoute[]>): void;
  fetchAllDispatchRoutes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute[]>): void;


  /**
   * @summary /fleet/dispatch/routes
   *
   * Create a new dispatch route.
   *
   * @param {object} createDispatchRouteParams
   *
   * @param {array} createDispatchRouteParams.dispatchJobs The dispatch jobs to
   * create for this route.
   *
   * @param {number} [createDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [createDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [createDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [createDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} createDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} createDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [createDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} createDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [createDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [createDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [createDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [createDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DispatchRoute>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createDispatchRouteWithHttpOperationResponse(createDispatchRouteParams: models.DispatchRouteCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute>>;

  /**
   * @summary /fleet/dispatch/routes
   *
   * Create a new dispatch route.
   *
   * @param {object} createDispatchRouteParams
   *
   * @param {array} createDispatchRouteParams.dispatchJobs The dispatch jobs to
   * create for this route.
   *
   * @param {number} [createDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [createDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [createDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [createDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} createDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} createDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [createDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} createDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [createDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [createDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [createDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [createDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DispatchRoute} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DispatchRoute} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DispatchRoute} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute>;
  createDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, callback: ServiceCallback<models.DispatchRoute>): void;
  createDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute>): void;


  /**
   * @summary /fleet/dispatch/routes/job_updates
   *
   * Fetch all updates to a job including route data in the last 24 hours or
   * subsequent to an sequence ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AllRouteJobUpdates>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  fetchAllRouteJobUpdatesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AllRouteJobUpdates>>;

  /**
   * @summary /fleet/dispatch/routes/job_updates
   *
   * Fetch all updates to a job including route data in the last 24 hours or
   * subsequent to an sequence ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {AllRouteJobUpdates} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {AllRouteJobUpdates} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AllRouteJobUpdates} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  fetchAllRouteJobUpdates(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AllRouteJobUpdates>;
  fetchAllRouteJobUpdates(callback: ServiceCallback<models.AllRouteJobUpdates>): void;
  fetchAllRouteJobUpdates(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AllRouteJobUpdates>): void;


  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}
   *
   * Fetch a dispatch route by id.
   *
   * @param {number} routeId ID of the dispatch route.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DispatchRoute>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDispatchRouteByIdWithHttpOperationResponse(routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute>>;

  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}
   *
   * Fetch a dispatch route by id.
   *
   * @param {number} routeId ID of the dispatch route.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DispatchRoute} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DispatchRoute} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DispatchRoute} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDispatchRouteById(routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute>;
  getDispatchRouteById(routeId: number, callback: ServiceCallback<models.DispatchRoute>): void;
  getDispatchRouteById(routeId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute>): void;


  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/
   *
   * Update a dispatch route and its associated jobs.
   *
   * @param {object} updateDispatchRouteParams
   *
   * @param {array} updateDispatchRouteParams.dispatchJobs The dispatch jobs
   * associated with this route.
   *
   * @param {number} updateDispatchRouteParams.id ID of the Samsara dispatch
   * route.
   *
   * @param {number} [updateDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [updateDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [updateDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [updateDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} updateDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} updateDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [updateDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} updateDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [updateDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [updateDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [updateDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [updateDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [updateDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [updateDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [updateDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} routeId ID of the dispatch route.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DispatchRoute>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateDispatchRouteByIdWithHttpOperationResponse(updateDispatchRouteParams: models.DispatchRoute, routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute>>;

  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/
   *
   * Update a dispatch route and its associated jobs.
   *
   * @param {object} updateDispatchRouteParams
   *
   * @param {array} updateDispatchRouteParams.dispatchJobs The dispatch jobs
   * associated with this route.
   *
   * @param {number} updateDispatchRouteParams.id ID of the Samsara dispatch
   * route.
   *
   * @param {number} [updateDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [updateDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [updateDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [updateDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} updateDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} updateDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [updateDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} updateDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [updateDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [updateDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [updateDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [updateDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [updateDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [updateDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [updateDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} routeId ID of the dispatch route.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DispatchRoute} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DispatchRoute} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DispatchRoute} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateDispatchRouteById(updateDispatchRouteParams: models.DispatchRoute, routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute>;
  updateDispatchRouteById(updateDispatchRouteParams: models.DispatchRoute, routeId: number, callback: ServiceCallback<models.DispatchRoute>): void;
  updateDispatchRouteById(updateDispatchRouteParams: models.DispatchRoute, routeId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute>): void;


  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/
   *
   * Delete a dispatch route and its associated jobs.
   *
   * @param {number} routeId ID of the dispatch route.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteDispatchRouteByIdWithHttpOperationResponse(routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/
   *
   * Delete a dispatch route and its associated jobs.
   *
   * @param {number} routeId ID of the dispatch route.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDispatchRouteById(routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteDispatchRouteById(routeId: number, callback: ServiceCallback<void>): void;
  deleteDispatchRouteById(routeId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/history
   *
   * Fetch the history of a dispatch route.
   *
   * @param {number} routeId ID of the route with history.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DispatchRouteHistory>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDispatchRouteHistoryWithHttpOperationResponse(routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRouteHistory>>;

  /**
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/history
   *
   * Fetch the history of a dispatch route.
   *
   * @param {number} routeId ID of the route with history.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DispatchRouteHistory} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DispatchRouteHistory} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DispatchRouteHistory} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDispatchRouteHistory(routeId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRouteHistory>;
  getDispatchRouteHistory(routeId: number, callback: ServiceCallback<models.DispatchRouteHistory>): void;
  getDispatchRouteHistory(routeId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRouteHistory>): void;


  /**
   * @summary /fleet/drivers/create
   *
   * Create a new driver.
   *
   * @param {object} createDriverParam Driver creation body
   *
   * @param {string} createDriverParam.password Driver's password for the driver
   * app.
   *
   * @param {array} [createDriverParam.tagIds]
   *
   * @param {boolean} [createDriverParam.eldAdverseWeatherExemptionEnabled] Flag
   * indicating this driver may use Adverse Weather exemptions in ELD logs.
   *
   * @param {boolean} [createDriverParam.eldBigDayExemptionEnabled] Flag
   * indicating this driver may use Big Day excemptions in ELD logs.
   *
   * @param {number} [createDriverParam.eldDayStartHour] 0 indicating
   * midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving
   * hours.
   *
   * @param {boolean} [createDriverParam.eldExempt] Flag indicating this driver
   * is exempt from the Electronic Logging Mandate.
   *
   * @param {string} [createDriverParam.eldExemptReason] Reason that this driver
   * is exempt from the Electronic Logging Mandate (see eldExempt).
   *
   * @param {boolean} [createDriverParam.eldPcEnabled] Flag indicating this
   * driver may select the Personal Conveyance duty status in ELD logs.
   *
   * @param {boolean} [createDriverParam.eldYmEnabled] Flag indicating this
   * driver may select the Yard Move duty status in ELD logs.
   *
   * @param {object} [createDriverParam.externalIds] Dictionary of external IDs
   * (string key-value pairs)
   *
   * @param {number} [createDriverParam.groupId] ID of the group if the
   * organization has multiple groups (uncommon).
   *
   * @param {string} [createDriverParam.licenseNumber] Driver's state issued
   * license number.
   *
   * @param {string} [createDriverParam.licenseState] Abbreviation of state that
   * issued driver's license.
   *
   * @param {string} createDriverParam.name Driver's name.
   *
   * @param {string} [createDriverParam.notes] Notes about the driver.
   *
   * @param {string} [createDriverParam.phone] Driver's phone number. Please
   * include only digits, ex. 4157771234
   *
   * @param {string} [createDriverParam.username] Driver's login username into
   * the driver app.
   *
   * @param {number} [createDriverParam.vehicleId] ID of the vehicle assigned to
   * the driver for static vehicle assignments. (uncommon).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CurrentDriver>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createDriverWithHttpOperationResponse(createDriverParam: models.DriverForCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CurrentDriver>>;

  /**
   * @summary /fleet/drivers/create
   *
   * Create a new driver.
   *
   * @param {object} createDriverParam Driver creation body
   *
   * @param {string} createDriverParam.password Driver's password for the driver
   * app.
   *
   * @param {array} [createDriverParam.tagIds]
   *
   * @param {boolean} [createDriverParam.eldAdverseWeatherExemptionEnabled] Flag
   * indicating this driver may use Adverse Weather exemptions in ELD logs.
   *
   * @param {boolean} [createDriverParam.eldBigDayExemptionEnabled] Flag
   * indicating this driver may use Big Day excemptions in ELD logs.
   *
   * @param {number} [createDriverParam.eldDayStartHour] 0 indicating
   * midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving
   * hours.
   *
   * @param {boolean} [createDriverParam.eldExempt] Flag indicating this driver
   * is exempt from the Electronic Logging Mandate.
   *
   * @param {string} [createDriverParam.eldExemptReason] Reason that this driver
   * is exempt from the Electronic Logging Mandate (see eldExempt).
   *
   * @param {boolean} [createDriverParam.eldPcEnabled] Flag indicating this
   * driver may select the Personal Conveyance duty status in ELD logs.
   *
   * @param {boolean} [createDriverParam.eldYmEnabled] Flag indicating this
   * driver may select the Yard Move duty status in ELD logs.
   *
   * @param {object} [createDriverParam.externalIds] Dictionary of external IDs
   * (string key-value pairs)
   *
   * @param {number} [createDriverParam.groupId] ID of the group if the
   * organization has multiple groups (uncommon).
   *
   * @param {string} [createDriverParam.licenseNumber] Driver's state issued
   * license number.
   *
   * @param {string} [createDriverParam.licenseState] Abbreviation of state that
   * issued driver's license.
   *
   * @param {string} createDriverParam.name Driver's name.
   *
   * @param {string} [createDriverParam.notes] Notes about the driver.
   *
   * @param {string} [createDriverParam.phone] Driver's phone number. Please
   * include only digits, ex. 4157771234
   *
   * @param {string} [createDriverParam.username] Driver's login username into
   * the driver app.
   *
   * @param {number} [createDriverParam.vehicleId] ID of the vehicle assigned to
   * the driver for static vehicle assignments. (uncommon).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CurrentDriver} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CurrentDriver} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CurrentDriver} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createDriver(createDriverParam: models.DriverForCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CurrentDriver>;
  createDriver(createDriverParam: models.DriverForCreate, callback: ServiceCallback<models.CurrentDriver>): void;
  createDriver(createDriverParam: models.DriverForCreate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CurrentDriver>): void;


  /**
   * @summary /fleet/drivers/document_types
   *
   * Fetch all of the document types.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDriverDocumentTypesByOrgIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DocumentType[]>>;

  /**
   * @summary /fleet/drivers/document_types
   *
   * Fetch all of the document types.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDriverDocumentTypesByOrgId(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DocumentType[]>;
  getDriverDocumentTypesByOrgId(callback: ServiceCallback<models.DocumentType[]>): void;
  getDriverDocumentTypesByOrgId(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DocumentType[]>): void;


  /**
   * @summary /fleet/drivers/documents
   *
   * Fetch all of the documents.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDriverDocumentsByOrgIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Document[]>>;

  /**
   * @summary /fleet/drivers/documents
   *
   * Fetch all of the documents.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDriverDocumentsByOrgId(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Document[]>;
  getDriverDocumentsByOrgId(callback: ServiceCallback<models.Document[]>): void;
  getDriverDocumentsByOrgId(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Document[]>): void;


  /**
   * @summary /fleet/drivers/inactive
   *
   * Fetch all deactivated drivers for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllDeactivatedDriversWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CurrentDriver[]>>;

  /**
   * @summary /fleet/drivers/inactive
   *
   * Fetch all deactivated drivers for the group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllDeactivatedDrivers(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CurrentDriver[]>;
  getAllDeactivatedDrivers(callback: ServiceCallback<models.CurrentDriver[]>): void;
  getAllDeactivatedDrivers(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CurrentDriver[]>): void;


  /**
   * @summary /fleet/drivers/inactive/{driver_id:[0-9]+ |
   * external_id:[a-zA-Z0-9]+}
   *
   * Fetch deactivated driver by id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CurrentDriver>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeactivatedDriverByIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CurrentDriver>>;

  /**
   * @summary /fleet/drivers/inactive/{driver_id:[0-9]+ |
   * external_id:[a-zA-Z0-9]+}
   *
   * Fetch deactivated driver by id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CurrentDriver} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CurrentDriver} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CurrentDriver} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeactivatedDriverById(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CurrentDriver>;
  getDeactivatedDriverById(callback: ServiceCallback<models.CurrentDriver>): void;
  getDeactivatedDriverById(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CurrentDriver>): void;


  /**
   * @summary /fleet/drivers/inactive/{driver_id:[0-9]+ |
   * external_id:[a-zA-Z0-9]+}
   *
   * Reactivate the inactive driver having id.
   *
   * @param {object} reactivateDriverParam Driver reactivation body
   *
   * @param {boolean} reactivateDriverParam.reactivate True indicates that this
   * driver should be reactivated.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CurrentDriver>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  reactivateDriverByIdWithHttpOperationResponse(reactivateDriverParam: models.ReactivateDriverParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CurrentDriver>>;

  /**
   * @summary /fleet/drivers/inactive/{driver_id:[0-9]+ |
   * external_id:[a-zA-Z0-9]+}
   *
   * Reactivate the inactive driver having id.
   *
   * @param {object} reactivateDriverParam Driver reactivation body
   *
   * @param {boolean} reactivateDriverParam.reactivate True indicates that this
   * driver should be reactivated.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CurrentDriver} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CurrentDriver} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CurrentDriver} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  reactivateDriverById(reactivateDriverParam: models.ReactivateDriverParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CurrentDriver>;
  reactivateDriverById(reactivateDriverParam: models.ReactivateDriverParam, callback: ServiceCallback<models.CurrentDriver>): void;
  reactivateDriverById(reactivateDriverParam: models.ReactivateDriverParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CurrentDriver>): void;


  /**
   * @summary /fleet/drivers/{driverId:[0-9]+}/safety/score
   *
   * Fetch the safety score for the driver.
   *
   * @param {number} driverId ID of the driver
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DriverSafetyScoreResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDriverSafetyScoreWithHttpOperationResponse(driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DriverSafetyScoreResponse>>;

  /**
   * @summary /fleet/drivers/{driverId:[0-9]+}/safety/score
   *
   * Fetch the safety score for the driver.
   *
   * @param {number} driverId ID of the driver
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DriverSafetyScoreResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DriverSafetyScoreResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DriverSafetyScoreResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDriverSafetyScore(driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DriverSafetyScoreResponse>;
  getDriverSafetyScore(driverId: number, callback: ServiceCallback<models.DriverSafetyScoreResponse>): void;
  getDriverSafetyScore(driverId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DriverSafetyScoreResponse>): void;


  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Fetch driver by id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CurrentDriver>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDriverByIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CurrentDriver>>;

  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Fetch driver by id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CurrentDriver} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CurrentDriver} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CurrentDriver} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDriverById(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CurrentDriver>;
  getDriverById(callback: ServiceCallback<models.CurrentDriver>): void;
  getDriverById(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CurrentDriver>): void;


  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Deactivate a driver with the given id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deactivateDriverWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Deactivate a driver with the given id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deactivateDriver(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deactivateDriver(callback: ServiceCallback<void>): void;
  deactivateDriver(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
   *
   * Fetch all of the dispatch routes for a given driver.
   *
   * @param {number} driverId ID of the driver with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDispatchRoutesByDriverIdWithHttpOperationResponse(driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute[]>>;

  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
   *
   * Fetch all of the dispatch routes for a given driver.
   *
   * @param {number} driverId ID of the driver with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDispatchRoutesByDriverId(driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute[]>;
  getDispatchRoutesByDriverId(driverId: number, callback: ServiceCallback<models.DispatchRoute[]>): void;
  getDispatchRoutesByDriverId(driverId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute[]>): void;


  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
   *
   * Create a new dispatch route for the driver with driver_id.
   *
   * @param {object} createDispatchRouteParams
   *
   * @param {array} createDispatchRouteParams.dispatchJobs The dispatch jobs to
   * create for this route.
   *
   * @param {number} [createDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [createDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [createDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [createDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} createDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} createDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [createDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} createDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [createDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [createDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [createDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [createDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} driverId ID of the driver with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DispatchRoute>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createDriverDispatchRouteWithHttpOperationResponse(createDispatchRouteParams: models.DispatchRouteCreate, driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute>>;

  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
   *
   * Create a new dispatch route for the driver with driver_id.
   *
   * @param {object} createDispatchRouteParams
   *
   * @param {array} createDispatchRouteParams.dispatchJobs The dispatch jobs to
   * create for this route.
   *
   * @param {number} [createDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [createDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [createDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [createDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} createDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} createDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [createDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} createDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [createDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [createDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [createDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [createDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} driverId ID of the driver with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DispatchRoute} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DispatchRoute} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DispatchRoute} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createDriverDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute>;
  createDriverDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, driverId: number, callback: ServiceCallback<models.DispatchRoute>): void;
  createDriverDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, driverId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute>): void;


  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+}/documents
   *
   * Create a driver document for the given driver.
   *
   * @param {object} createDocumentParams To create a document for a given
   * document type, the document type's uuid needs to be passed in to
   * documentTypeUuid. The list of fields passed in should match the document
   * type’s list of field types in the correct order. In other words, a field's
   * valueType and value (i.e. only one of: stringValue, numberValue, or
   * photoValue) at index _i_ should match with the document field type’s
   * valueType at index _i_.
   *
   * @param {string} createDocumentParams.documentTypeUuid Universally unique
   * identifier for the document type this document is being created for.
   *
   * @param {array} createDocumentParams.fields List of fields should match the
   * document type’s list of field types in the correct order. In other words, a
   * field's valueType and value (i.e. only one of: stringValue, numberValue, or
   * photoValue) at index _i_ should match with the document field type’s
   * valueType at index _i_.
   *
   * @param {number} [createDocumentParams.dispatchJobId] ID of the Samsara
   * dispatch job for which the document is submitted
   *
   * @param {string} [createDocumentParams.notes] Notes submitted with this
   * document.
   *
   * @param {number} driverId ID of the driver for whom the document is created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Document>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createDriverDocumentWithHttpOperationResponse(createDocumentParams: models.DocumentCreate, driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Document>>;

  /**
   * @summary /fleet/drivers/{driver_id:[0-9]+}/documents
   *
   * Create a driver document for the given driver.
   *
   * @param {object} createDocumentParams To create a document for a given
   * document type, the document type's uuid needs to be passed in to
   * documentTypeUuid. The list of fields passed in should match the document
   * type’s list of field types in the correct order. In other words, a field's
   * valueType and value (i.e. only one of: stringValue, numberValue, or
   * photoValue) at index _i_ should match with the document field type’s
   * valueType at index _i_.
   *
   * @param {string} createDocumentParams.documentTypeUuid Universally unique
   * identifier for the document type this document is being created for.
   *
   * @param {array} createDocumentParams.fields List of fields should match the
   * document type’s list of field types in the correct order. In other words, a
   * field's valueType and value (i.e. only one of: stringValue, numberValue, or
   * photoValue) at index _i_ should match with the document field type’s
   * valueType at index _i_.
   *
   * @param {number} [createDocumentParams.dispatchJobId] ID of the Samsara
   * dispatch job for which the document is submitted
   *
   * @param {string} [createDocumentParams.notes] Notes submitted with this
   * document.
   *
   * @param {number} driverId ID of the driver for whom the document is created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Document} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Document} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Document} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createDriverDocument(createDocumentParams: models.DocumentCreate, driverId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Document>;
  createDriverDocument(createDocumentParams: models.DocumentCreate, driverId: number, callback: ServiceCallback<models.Document>): void;
  createDriverDocument(createDocumentParams: models.DocumentCreate, driverId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Document>): void;


  /**
   * @summary /fleet/vehicles/locations
   *
   * Fetch locations for a given vehicle between a start/end time. The maximum
   * query duration is 30 minutes.
   *
   * @param {number} startMs Time in Unix epoch milliseconds for the start of the
   * query (cannot exceed 30 minutes)
   *
   * @param {number} endMs Time in Unix epoch milliseconds for the end of the
   * query (cannot exceed 30 minutes)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVehiclesLocationsWithHttpOperationResponse(startMs: number, endMs: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FleetVehiclesLocationsItem[]>>;

  /**
   * @summary /fleet/vehicles/locations
   *
   * Fetch locations for a given vehicle between a start/end time. The maximum
   * query duration is 30 minutes.
   *
   * @param {number} startMs Time in Unix epoch milliseconds for the start of the
   * query (cannot exceed 30 minutes)
   *
   * @param {number} endMs Time in Unix epoch milliseconds for the end of the
   * query (cannot exceed 30 minutes)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVehiclesLocations(startMs: number, endMs: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FleetVehiclesLocationsItem[]>;
  getVehiclesLocations(startMs: number, endMs: number, callback: ServiceCallback<models.FleetVehiclesLocationsItem[]>): void;
  getVehiclesLocations(startMs: number, endMs: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FleetVehiclesLocationsItem[]>): void;


  /**
   * @summary /fleet/vehicles/stats
   *
   * Fetch engine state and aux input data for all vehicles in the group between
   * a start/end time. Data returned may be affected by device connectivity and
   * processing time.
   *
   * @param {number} startMs Time in Unix epoch milliseconds for the start of the
   * query.
   *
   * @param {number} endMs Time in Unix epoch milliseconds for the end of the
   * query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.series] Comma-separated list of stat types. Options
   * are engineState, auxInput1, and auxInput2. If this parameter is excluded,
   * all 3 stat types will be returned. Example: series=engineState,auxInput2.
   * Possible values include: 'engineState', 'auxInput1', 'auxInput2'
   *
   * @param {string} [options.tagIds] Comma-separated list of tag ids. Example:
   * tagIds=1,2,3
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetVehicleStatsOKResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVehicleStatsWithHttpOperationResponse(startMs: number, endMs: number, options?: { series? : string, tagIds? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetVehicleStatsOKResponse>>;

  /**
   * @summary /fleet/vehicles/stats
   *
   * Fetch engine state and aux input data for all vehicles in the group between
   * a start/end time. Data returned may be affected by device connectivity and
   * processing time.
   *
   * @param {number} startMs Time in Unix epoch milliseconds for the start of the
   * query.
   *
   * @param {number} endMs Time in Unix epoch milliseconds for the end of the
   * query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.series] Comma-separated list of stat types. Options
   * are engineState, auxInput1, and auxInput2. If this parameter is excluded,
   * all 3 stat types will be returned. Example: series=engineState,auxInput2.
   * Possible values include: 'engineState', 'auxInput1', 'auxInput2'
   *
   * @param {string} [options.tagIds] Comma-separated list of tag ids. Example:
   * tagIds=1,2,3
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GetVehicleStatsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GetVehicleStatsOKResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetVehicleStatsOKResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVehicleStats(startMs: number, endMs: number, options?: { series? : string, tagIds? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetVehicleStatsOKResponse>;
  getVehicleStats(startMs: number, endMs: number, callback: ServiceCallback<models.GetVehicleStatsOKResponse>): void;
  getVehicleStats(startMs: number, endMs: number, options: { series? : string, tagIds? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetVehicleStatsOKResponse>): void;


  /**
   * @summary /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
   *
   * Fetch harsh event details for a vehicle.
   *
   * @param {number} vehicleId ID of the vehicle
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VehicleHarshEventResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVehicleHarshEventWithHttpOperationResponse(vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VehicleHarshEventResponse>>;

  /**
   * @summary /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
   *
   * Fetch harsh event details for a vehicle.
   *
   * @param {number} vehicleId ID of the vehicle
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {VehicleHarshEventResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {VehicleHarshEventResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VehicleHarshEventResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVehicleHarshEvent(vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VehicleHarshEventResponse>;
  getVehicleHarshEvent(vehicleId: number, callback: ServiceCallback<models.VehicleHarshEventResponse>): void;
  getVehicleHarshEvent(vehicleId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VehicleHarshEventResponse>): void;


  /**
   * @summary /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
   *
   * Fetch the safety score for the vehicle.
   *
   * @param {number} vehicleId ID of the vehicle
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VehicleSafetyScoreResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVehicleSafetyScoreWithHttpOperationResponse(vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VehicleSafetyScoreResponse>>;

  /**
   * @summary /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
   *
   * Fetch the safety score for the vehicle.
   *
   * @param {number} vehicleId ID of the vehicle
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {VehicleSafetyScoreResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {VehicleSafetyScoreResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VehicleSafetyScoreResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVehicleSafetyScore(vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VehicleSafetyScoreResponse>;
  getVehicleSafetyScore(vehicleId: number, callback: ServiceCallback<models.VehicleSafetyScoreResponse>): void;
  getVehicleSafetyScore(vehicleId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VehicleSafetyScoreResponse>): void;


  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Gets a specific vehicle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FleetVehicleResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFleetVehicleWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FleetVehicleResponse>>;

  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Gets a specific vehicle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {FleetVehicleResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {FleetVehicleResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FleetVehicleResponse} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFleetVehicle(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FleetVehicleResponse>;
  getFleetVehicle(callback: ServiceCallback<models.FleetVehicleResponse>): void;
  getFleetVehicle(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FleetVehicleResponse>): void;


  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Updates the specified vehicle using JSON merge patch format. See IETF RFC
   * 7396: https://tools.ietf.org/html/rfc7396.
   *
   * @param {object} data
   *
   * @param {object} [data.externalIds]
   *
   * @param {number} [data.harshAccelSetting] Harsh Event Detection Setting
   * * 0: Passenger
   * * 1: Light Truck
   * * 2: Heavy
   * * 3: Off
   * * 4: Automatic
   *
   * @param {string} [data.name] Name
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FleetVehicleResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  patchFleetVehicleWithHttpOperationResponse(data: models.Data, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FleetVehicleResponse>>;

  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   *
   * Updates the specified vehicle using JSON merge patch format. See IETF RFC
   * 7396: https://tools.ietf.org/html/rfc7396.
   *
   * @param {object} data
   *
   * @param {object} [data.externalIds]
   *
   * @param {number} [data.harshAccelSetting] Harsh Event Detection Setting
   * * 0: Passenger
   * * 1: Light Truck
   * * 2: Heavy
   * * 3: Off
   * * 4: Automatic
   *
   * @param {string} [data.name] Name
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {FleetVehicleResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {FleetVehicleResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FleetVehicleResponse} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  patchFleetVehicle(data: models.Data, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FleetVehicleResponse>;
  patchFleetVehicle(data: models.Data, callback: ServiceCallback<models.FleetVehicleResponse>): void;
  patchFleetVehicle(data: models.Data, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FleetVehicleResponse>): void;


  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
   *
   * Fetch all of the dispatch routes for a given vehicle.
   *
   * @param {number} vehicleId ID of the vehicle with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDispatchRoutesByVehicleIdWithHttpOperationResponse(vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute[]>>;

  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
   *
   * Fetch all of the dispatch routes for a given vehicle.
   *
   * @param {number} vehicleId ID of the vehicle with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDispatchRoutesByVehicleId(vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute[]>;
  getDispatchRoutesByVehicleId(vehicleId: number, callback: ServiceCallback<models.DispatchRoute[]>): void;
  getDispatchRoutesByVehicleId(vehicleId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute[]>): void;


  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
   *
   * Create a new dispatch route for the vehicle with vehicle_id.
   *
   * @param {object} createDispatchRouteParams
   *
   * @param {array} createDispatchRouteParams.dispatchJobs The dispatch jobs to
   * create for this route.
   *
   * @param {number} [createDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [createDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [createDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [createDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} createDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} createDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [createDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} createDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [createDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [createDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [createDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [createDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} vehicleId ID of the vehicle with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DispatchRoute>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createVehicleDispatchRouteWithHttpOperationResponse(createDispatchRouteParams: models.DispatchRouteCreate, vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DispatchRoute>>;

  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
   *
   * Create a new dispatch route for the vehicle with vehicle_id.
   *
   * @param {object} createDispatchRouteParams
   *
   * @param {array} createDispatchRouteParams.dispatchJobs The dispatch jobs to
   * create for this route.
   *
   * @param {number} [createDispatchRouteParams.actualEndMs] The time in Unix
   * epoch milliseconds that the route actually ended.
   *
   * @param {number} [createDispatchRouteParams.actualStartMs] The time in Unix
   * epoch milliseconds that the route actually started.
   *
   * @param {number} [createDispatchRouteParams.driverId] ID of the driver
   * assigned to the dispatch route. Note that driver_id and vehicle_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} [createDispatchRouteParams.groupId] ID of the group if the
   * organization has multiple groups (optional).
   *
   * @param {string} createDispatchRouteParams.name Descriptive name of this
   * route.
   *
   * @param {number} createDispatchRouteParams.scheduledEndMs The time in Unix
   * epoch milliseconds that the last job in the route is scheduled to end.
   *
   * @param {number} [createDispatchRouteParams.scheduledMeters] The distance
   * expected to be traveled for this route in meters.
   *
   * @param {number} createDispatchRouteParams.scheduledStartMs The time in Unix
   * epoch milliseconds that the route is scheduled to start.
   *
   * @param {string} [createDispatchRouteParams.startLocationAddress] The address
   * of the route's starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationAddressId] ID of the
   * start location associated with an address book entry. Optional if valid
   * values are provided for start location address or latitude/longitude. If a
   * valid start location address ID is provided, address/latitude/longitude will
   * be used from the address book entry. Name of the address book entry will
   * only be used if the start location name is not provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLat] Latitude of the
   * start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {number} [createDispatchRouteParams.startLocationLng] Longitude of
   * the start location in decimal degrees. Optional if a valid start location
   * address ID is provided.
   *
   * @param {string} [createDispatchRouteParams.startLocationName] The name of
   * the route's starting location. If provided, it will take precedence over the
   * name of the address book entry.
   *
   * @param {number} [createDispatchRouteParams.trailerId] ID of the trailer
   * assigned to the dispatch route. Note that trailers can only be assigned to
   * routes that have a Vehicle or Driver assigned to them.
   *
   * @param {number} [createDispatchRouteParams.vehicleId] ID of the vehicle
   * assigned to the dispatch route. Note that vehicle_id and driver_id are
   * mutually exclusive. If neither is specified, then the route is unassigned.
   *
   * @param {number} vehicleId ID of the vehicle with the associated routes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DispatchRoute} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DispatchRoute} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DispatchRoute} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createVehicleDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, vehicleId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DispatchRoute>;
  createVehicleDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, vehicleId: number, callback: ServiceCallback<models.DispatchRoute>): void;
  createVehicleDispatchRoute(createDispatchRouteParams: models.DispatchRouteCreate, vehicleId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DispatchRoute>): void;


  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/locations
   *
   * Fetch locations for a given vehicle between a start/end time. The maximum
   * query duration is one hour.
   *
   * @param {number} vehicleId ID of the vehicle with the associated routes.
   *
   * @param {number} startMs Time in Unix epoch milliseconds for the start of the
   * query (cannot exceed 1 hour)
   *
   * @param {number} endMs Time in Unix epoch milliseconds for the end of the
   * query (cannot exceed 1 hour)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVehicleLocationsWithHttpOperationResponse(vehicleId: number, startMs: number, endMs: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FleetVehicleLocation[]>>;

  /**
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/locations
   *
   * Fetch locations for a given vehicle between a start/end time. The maximum
   * query duration is one hour.
   *
   * @param {number} vehicleId ID of the vehicle with the associated routes.
   *
   * @param {number} startMs Time in Unix epoch milliseconds for the start of the
   * query (cannot exceed 1 hour)
   *
   * @param {number} endMs Time in Unix epoch milliseconds for the end of the
   * query (cannot exceed 1 hour)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FleetVehicleLocation[]>;
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, callback: ServiceCallback<models.FleetVehicleLocation[]>): void;
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FleetVehicleLocation[]>): void;


  /**
   * @summary /industrial/data
   *
   * Fetch all of the data inputs for a group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAllDataInputsOKResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllDataInputsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllDataInputsOKResponse>>;

  /**
   * @summary /industrial/data
   *
   * Fetch all of the data inputs for a group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GetAllDataInputsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GetAllDataInputsOKResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAllDataInputsOKResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllDataInputs(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllDataInputsOKResponse>;
  getAllDataInputs(callback: ServiceCallback<models.GetAllDataInputsOKResponse>): void;
  getAllDataInputs(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllDataInputsOKResponse>): void;


  /**
   * @summary /industrial/data/{data_input_id:[0-9]+}
   *
   * Fetch datapoints from a given data input.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DataInputHistoryResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDataInputWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataInputHistoryResponse>>;

  /**
   * @summary /industrial/data/{data_input_id:[0-9]+}
   *
   * Fetch datapoints from a given data input.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DataInputHistoryResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DataInputHistoryResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DataInputHistoryResponse} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDataInput(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataInputHistoryResponse>;
  getDataInput(callback: ServiceCallback<models.DataInputHistoryResponse>): void;
  getDataInput(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataInputHistoryResponse>): void;


  /**
   * @summary /tags
   *
   * Fetch all of the tags for a group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAllTagsOKResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllTagsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllTagsOKResponse>>;

  /**
   * @summary /tags
   *
   * Fetch all of the tags for a group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GetAllTagsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GetAllTagsOKResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAllTagsOKResponse} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllTags(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllTagsOKResponse>;
  getAllTags(callback: ServiceCallback<models.GetAllTagsOKResponse>): void;
  getAllTags(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllTagsOKResponse>): void;


  /**
   * @summary /tags
   *
   * Create a new tag for the group.
   *
   * @param {object} tagCreateParams
   *
   * @param {array} [tagCreateParams.assets] The assets that belong to this tag.
   *
   * @param {array} [tagCreateParams.drivers] The drivers that belong to this
   * tag.
   *
   * @param {array} [tagCreateParams.machines] The machines that belong to this
   * tag.
   *
   * @param {string} tagCreateParams.name Name of this tag.
   *
   * @param {number} [tagCreateParams.parentTagId] If this tag is part a
   * hierarchical tag tree as a child tag, the parentTagId is the ID of this
   * tag's parent tag.
   *
   * @param {array} [tagCreateParams.sensors] The sensors that belong to this
   * tag.
   *
   * @param {array} [tagCreateParams.vehicles] The vehicles that belong to this
   * tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createTagWithHttpOperationResponse(tagCreateParams: models.TagCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary /tags
   *
   * Create a new tag for the group.
   *
   * @param {object} tagCreateParams
   *
   * @param {array} [tagCreateParams.assets] The assets that belong to this tag.
   *
   * @param {array} [tagCreateParams.drivers] The drivers that belong to this
   * tag.
   *
   * @param {array} [tagCreateParams.machines] The machines that belong to this
   * tag.
   *
   * @param {string} tagCreateParams.name Name of this tag.
   *
   * @param {number} [tagCreateParams.parentTagId] If this tag is part a
   * hierarchical tag tree as a child tag, the parentTagId is the ID of this
   * tag's parent tag.
   *
   * @param {array} [tagCreateParams.sensors] The sensors that belong to this
   * tag.
   *
   * @param {array} [tagCreateParams.vehicles] The vehicles that belong to this
   * tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createTag(tagCreateParams: models.TagCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  createTag(tagCreateParams: models.TagCreate, callback: ServiceCallback<models.Tag>): void;
  createTag(tagCreateParams: models.TagCreate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;


  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Fetch a tag by id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTagByIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Fetch a tag by id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTagById(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  getTagById(callback: ServiceCallback<models.Tag>): void;
  getTagById(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;


  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Update a tag with a new name and new members. This API call would replace
   * all old members of a tag with new members specified in the request body. To
   * modify only a few devices associated with a tag use the PATCH endpoint.
   *
   * @param {object} updateTagParams
   *
   * @param {array} [updateTagParams.assets] The assets that belong to this tag.
   *
   * @param {array} [updateTagParams.drivers] The drivers that belong to this
   * tag.
   *
   * @param {array} [updateTagParams.machines] The machines that belong to this
   * tag.
   *
   * @param {string} [updateTagParams.name] Updated name of this tag.
   *
   * @param {number} [updateTagParams.parentTagId] If this tag is part a
   * hierarchical tag tree as a child tag, the parentTagId is the ID of this
   * tag's parent tag.
   *
   * @param {array} [updateTagParams.sensors] The sensors that belong to this
   * tag.
   *
   * @param {array} [updateTagParams.vehicles] The vehicles that belong to this
   * tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateTagByIdWithHttpOperationResponse(updateTagParams: models.TagUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Update a tag with a new name and new members. This API call would replace
   * all old members of a tag with new members specified in the request body. To
   * modify only a few devices associated with a tag use the PATCH endpoint.
   *
   * @param {object} updateTagParams
   *
   * @param {array} [updateTagParams.assets] The assets that belong to this tag.
   *
   * @param {array} [updateTagParams.drivers] The drivers that belong to this
   * tag.
   *
   * @param {array} [updateTagParams.machines] The machines that belong to this
   * tag.
   *
   * @param {string} [updateTagParams.name] Updated name of this tag.
   *
   * @param {number} [updateTagParams.parentTagId] If this tag is part a
   * hierarchical tag tree as a child tag, the parentTagId is the ID of this
   * tag's parent tag.
   *
   * @param {array} [updateTagParams.sensors] The sensors that belong to this
   * tag.
   *
   * @param {array} [updateTagParams.vehicles] The vehicles that belong to this
   * tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTagById(updateTagParams: models.TagUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  updateTagById(updateTagParams: models.TagUpdate, callback: ServiceCallback<models.Tag>): void;
  updateTagById(updateTagParams: models.TagUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;


  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Permanently deletes a tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteTagByIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Permanently deletes a tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTagById(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteTagById(callback: ServiceCallback<void>): void;
  deleteTagById(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Add or delete specific members from a tag, or modify the name of a tag.
   *
   * @param {object} tagModifyParams
   *
   * @param {object} [tagModifyParams.add] Specify devices, etc. that should be
   * added to the tag.
   *
   * @param {array} [tagModifyParams.add.assets] The assets to be added to this
   * tag.
   *
   * @param {array} [tagModifyParams.add.drivers] The drivers to be added to this
   * tag.
   *
   * @param {array} [tagModifyParams.add.machines] The machines to be added to
   * this tag.
   *
   * @param {array} [tagModifyParams.add.sensors] The sensors to be added to this
   * tag.
   *
   * @param {array} [tagModifyParams.add.vehicles] The vehicles to be added to
   * this tag.
   *
   * @param {object} [tagModifyParams.deleteProperty] Specify devices, etc. that
   * should be removed from the tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.assets] The assets to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.drivers] The drivers to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.machines] The machines to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.sensors] The sensors to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.vehicles] The vehicles to be
   * removed from this tag.
   *
   * @param {string} [tagModifyParams.name] Updated name of this tag.
   *
   * @param {number} [tagModifyParams.parentTagId] If this tag is part a
   * hierarchical tag tree as a child tag, the parentTagId is the ID of this
   * tag's parent tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  modifyTagByIdWithHttpOperationResponse(tagModifyParams: models.TagModify, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary /tags/{tag_id:[0-9]+}
   *
   * Add or delete specific members from a tag, or modify the name of a tag.
   *
   * @param {object} tagModifyParams
   *
   * @param {object} [tagModifyParams.add] Specify devices, etc. that should be
   * added to the tag.
   *
   * @param {array} [tagModifyParams.add.assets] The assets to be added to this
   * tag.
   *
   * @param {array} [tagModifyParams.add.drivers] The drivers to be added to this
   * tag.
   *
   * @param {array} [tagModifyParams.add.machines] The machines to be added to
   * this tag.
   *
   * @param {array} [tagModifyParams.add.sensors] The sensors to be added to this
   * tag.
   *
   * @param {array} [tagModifyParams.add.vehicles] The vehicles to be added to
   * this tag.
   *
   * @param {object} [tagModifyParams.deleteProperty] Specify devices, etc. that
   * should be removed from the tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.assets] The assets to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.drivers] The drivers to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.machines] The machines to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.sensors] The sensors to be
   * removed from this tag.
   *
   * @param {array} [tagModifyParams.deleteProperty.vehicles] The vehicles to be
   * removed from this tag.
   *
   * @param {string} [tagModifyParams.name] Updated name of this tag.
   *
   * @param {number} [tagModifyParams.parentTagId] If this tag is part a
   * hierarchical tag tree as a child tag, the parentTagId is the ID of this
   * tag's parent tag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  modifyTagById(tagModifyParams: models.TagModify, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  modifyTagById(tagModifyParams: models.TagModify, callback: ServiceCallback<models.Tag>): void;
  modifyTagById(tagModifyParams: models.TagModify, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;


  /**
   * @summary /user_roles
   *
   * Get all roles in the organization.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listUserRolesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserRole[]>>;

  /**
   * @summary /user_roles
   *
   * Get all roles in the organization.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listUserRoles(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserRole[]>;
  listUserRoles(callback: ServiceCallback<models.UserRole[]>): void;
  listUserRoles(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserRole[]>): void;


  /**
   * @summary /users/{userId:[0-9]+}
   *
   * Get a user.
   *
   * @param {number} userId ID of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<User>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUserByIdWithHttpOperationResponse(userId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

  /**
   * @summary /users/{userId:[0-9]+}
   *
   * Get a user.
   *
   * @param {number} userId ID of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {User} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {User} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link User} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUserById(userId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
  getUserById(userId: number, callback: ServiceCallback<models.User>): void;
  getUserById(userId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


  /**
   * @summary /users/{userId:[0-9]+}
   *
   * Remove a user from the organization.
   *
   * @param {number} userId ID of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteUserByIdWithHttpOperationResponse(userId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary /users/{userId:[0-9]+}
   *
   * Remove a user from the organization.
   *
   * @param {number} userId ID of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUserById(userId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteUserById(userId: number, callback: ServiceCallback<void>): void;
  deleteUserById(userId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export { SamsaraAPI, models as SamsaraAPIModels };
