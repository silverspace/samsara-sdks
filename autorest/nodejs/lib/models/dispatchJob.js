/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a DispatchJob.
 * @extends models['DispatchJobCreate']
 */
class DispatchJob extends models['DispatchJobCreate'] {
  /**
   * Create a DispatchJob.
   * @property {number} [arrivedAtMs] The time at which the driver arrived at
   * the job destination.
   * @property {number} [completedAtMs] The time at which the job was marked
   * complete (e.g. started driving to the next destination).
   * @property {number} dispatchRouteId ID of the route that this job belongs
   * to.
   * @property {number} [driverId] ID of the driver assigned to the dispatch
   * job.
   * @property {number} [enRouteAtMs] The time at which the assigned driver
   * started fulfilling the job (e.g. started driving to the destination).
   * @property {number} [estimatedArrivalMs] The time at which the assigned
   * driver is estimated to arrive at the job destination. Only valid for
   * en-route jobs.
   * @property {string} [fleetViewerUrl] Fleet viewer url of the dispatch job.
   * @property {number} groupId
   * @property {number} id ID of the Samsara dispatch job.
   * @property {string} jobState Possible values include:
   * 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
   * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
   * @property {number} [skippedAtMs] The time at which the job was marked
   * skipped.
   * @property {number} [vehicleId] ID of the vehicle used for the dispatch
   * job.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DispatchJob
   *
   * @returns {object} metadata of DispatchJob
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DispatchJob',
      type: {
        name: 'Composite',
        className: 'DispatchJob',
        modelProperties: {
          destinationAddress: {
            required: false,
            serializedName: 'destination_address',
            type: {
              name: 'String'
            }
          },
          destinationAddressId: {
            required: false,
            serializedName: 'destination_address_id',
            type: {
              name: 'Number'
            }
          },
          destinationLat: {
            required: false,
            serializedName: 'destination_lat',
            type: {
              name: 'Number'
            }
          },
          destinationLng: {
            required: false,
            serializedName: 'destination_lng',
            type: {
              name: 'Number'
            }
          },
          destinationName: {
            required: false,
            serializedName: 'destination_name',
            type: {
              name: 'String'
            }
          },
          notes: {
            required: false,
            serializedName: 'notes',
            type: {
              name: 'String'
            }
          },
          scheduledArrivalTimeMs: {
            required: true,
            serializedName: 'scheduled_arrival_time_ms',
            type: {
              name: 'Number'
            }
          },
          scheduledDepartureTimeMs: {
            required: false,
            serializedName: 'scheduled_departure_time_ms',
            type: {
              name: 'Number'
            }
          },
          arrivedAtMs: {
            required: false,
            serializedName: 'arrived_at_ms',
            type: {
              name: 'Number'
            }
          },
          completedAtMs: {
            required: false,
            serializedName: 'completed_at_ms',
            type: {
              name: 'Number'
            }
          },
          dispatchRouteId: {
            required: true,
            serializedName: 'dispatch_route_id',
            type: {
              name: 'Number'
            }
          },
          driverId: {
            required: false,
            serializedName: 'driver_id',
            type: {
              name: 'Number'
            }
          },
          enRouteAtMs: {
            required: false,
            serializedName: 'en_route_at_ms',
            type: {
              name: 'Number'
            }
          },
          estimatedArrivalMs: {
            required: false,
            serializedName: 'estimated_arrival_ms',
            type: {
              name: 'Number'
            }
          },
          fleetViewerUrl: {
            required: false,
            serializedName: 'fleet_viewer_url',
            type: {
              name: 'String'
            }
          },
          groupId: {
            required: true,
            serializedName: 'group_id',
            type: {
              name: 'Number'
            }
          },
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'Number'
            }
          },
          jobState: {
            required: true,
            serializedName: 'job_state',
            type: {
              name: 'String'
            }
          },
          skippedAtMs: {
            required: false,
            serializedName: 'skipped_at_ms',
            type: {
              name: 'Number'
            }
          },
          vehicleId: {
            required: false,
            serializedName: 'vehicle_id',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = DispatchJob;
