/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a Tag.
 */
class Tag {
  /**
   * Create a Tag.
   * @property {array} [addresses] The addresses that belong to this tag.
   * @property {array} [assets] The assets that belong to this tag.
   * @property {array} [drivers] The drivers that belong to this tag.
   * @property {number} [groupId] The GroupID that this tag belongs to.
   * @property {number} id The ID of this tag.
   * @property {array} [machines] The machines that belong to this tag.
   * @property {string} name Name of this tag.
   * @property {number} [parentTagId] If this tag is part a hierarchical tag
   * tree as a child tag, the parentTagId is the ID of this tag's parent tag.
   * @property {array} [sensors] The sensors that belong to this tag.
   * @property {array} [vehicles] The vehicles that belong to this tag.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Tag
   *
   * @returns {object} metadata of Tag
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Tag',
      type: {
        name: 'Composite',
        className: 'Tag',
        modelProperties: {
          addresses: {
            required: false,
            serializedName: 'addresses',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaggedAddressElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaggedAddress'
                  }
              }
            }
          },
          assets: {
            required: false,
            serializedName: 'assets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaggedAssetElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaggedAsset'
                  }
              }
            }
          },
          drivers: {
            required: false,
            serializedName: 'drivers',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaggedDriverElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaggedDriver'
                  }
              }
            }
          },
          groupId: {
            required: false,
            serializedName: 'groupId',
            type: {
              name: 'Number'
            }
          },
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'Number'
            }
          },
          machines: {
            required: false,
            serializedName: 'machines',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaggedMachineElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaggedMachine'
                  }
              }
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          parentTagId: {
            required: false,
            serializedName: 'parentTagId',
            type: {
              name: 'Number'
            }
          },
          sensors: {
            required: false,
            serializedName: 'sensors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaggedSensorElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaggedSensor'
                  }
              }
            }
          },
          vehicles: {
            required: false,
            serializedName: 'vehicles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaggedVehicleElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaggedVehicle'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Tag;
