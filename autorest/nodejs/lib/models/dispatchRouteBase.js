/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a DispatchRouteBase.
 */
class DispatchRouteBase {
  /**
   * Create a DispatchRouteBase.
   * @property {number} [actualEndMs] The time in Unix epoch milliseconds that
   * the route actually ended.
   * @property {number} [actualStartMs] The time in Unix epoch milliseconds
   * that the route actually started.
   * @property {number} [driverId] ID of the driver assigned to the dispatch
   * route. Note that driver_id and vehicle_id are mutually exclusive. If
   * neither is specified, then the route is unassigned.
   * @property {number} [groupId] ID of the group if the organization has
   * multiple groups (optional).
   * @property {string} name Descriptive name of this route.
   * @property {number} scheduledEndMs The time in Unix epoch milliseconds that
   * the last job in the route is scheduled to end.
   * @property {number} [scheduledMeters] The distance expected to be traveled
   * for this route in meters.
   * @property {number} scheduledStartMs The time in Unix epoch milliseconds
   * that the route is scheduled to start.
   * @property {string} [startLocationAddress] The address of the route's
   * starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is
   * provided.
   * @property {number} [startLocationAddressId] ID of the start location
   * associated with an address book entry. Optional if valid values are
   * provided for start location address or latitude/longitude. If a valid
   * start location address ID is provided, address/latitude/longitude will be
   * used from the address book entry. Name of the address book entry will only
   * be used if the start location name is not provided.
   * @property {number} [startLocationLat] Latitude of the start location in
   * decimal degrees. Optional if a valid start location address ID is
   * provided.
   * @property {number} [startLocationLng] Longitude of the start location in
   * decimal degrees. Optional if a valid start location address ID is
   * provided.
   * @property {string} [startLocationName] The name of the route's starting
   * location. If provided, it will take precedence over the name of the
   * address book entry.
   * @property {number} [trailerId] ID of the trailer assigned to the dispatch
   * route. Note that trailers can only be assigned to routes that have a
   * Vehicle or Driver assigned to them.
   * @property {number} [vehicleId] ID of the vehicle assigned to the dispatch
   * route. Note that vehicle_id and driver_id are mutually exclusive. If
   * neither is specified, then the route is unassigned.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DispatchRouteBase
   *
   * @returns {object} metadata of DispatchRouteBase
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DispatchRouteBase',
      type: {
        name: 'Composite',
        className: 'DispatchRouteBase',
        modelProperties: {
          actualEndMs: {
            required: false,
            serializedName: 'actual_end_ms',
            type: {
              name: 'Number'
            }
          },
          actualStartMs: {
            required: false,
            serializedName: 'actual_start_ms',
            type: {
              name: 'Number'
            }
          },
          driverId: {
            required: false,
            serializedName: 'driver_id',
            type: {
              name: 'Number'
            }
          },
          groupId: {
            required: false,
            serializedName: 'group_id',
            type: {
              name: 'Number'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          scheduledEndMs: {
            required: true,
            serializedName: 'scheduled_end_ms',
            type: {
              name: 'Number'
            }
          },
          scheduledMeters: {
            required: false,
            serializedName: 'scheduled_meters',
            type: {
              name: 'Number'
            }
          },
          scheduledStartMs: {
            required: true,
            serializedName: 'scheduled_start_ms',
            type: {
              name: 'Number'
            }
          },
          startLocationAddress: {
            required: false,
            serializedName: 'start_location_address',
            type: {
              name: 'String'
            }
          },
          startLocationAddressId: {
            required: false,
            serializedName: 'start_location_address_id',
            type: {
              name: 'Number'
            }
          },
          startLocationLat: {
            required: false,
            serializedName: 'start_location_lat',
            type: {
              name: 'Number'
            }
          },
          startLocationLng: {
            required: false,
            serializedName: 'start_location_lng',
            type: {
              name: 'Number'
            }
          },
          startLocationName: {
            required: false,
            serializedName: 'start_location_name',
            type: {
              name: 'String'
            }
          },
          trailerId: {
            required: false,
            serializedName: 'trailer_id',
            type: {
              name: 'Number'
            }
          },
          vehicleId: {
            required: false,
            serializedName: 'vehicle_id',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = DispatchRouteBase;
