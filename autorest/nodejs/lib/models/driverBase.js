/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a DriverBase.
 */
class DriverBase {
  /**
   * Create a DriverBase.
   * @property {boolean} [eldAdverseWeatherExemptionEnabled] Flag indicating
   * this driver may use Adverse Weather exemptions in ELD logs.
   * @property {boolean} [eldBigDayExemptionEnabled] Flag indicating this
   * driver may use Big Day excemptions in ELD logs.
   * @property {number} [eldDayStartHour] 0 indicating midnight-to-midnight ELD
   * driving hours, 12 to indicate noon-to-noon driving hours.
   * @property {boolean} [eldExempt] Flag indicating this driver is exempt from
   * the Electronic Logging Mandate.
   * @property {string} [eldExemptReason] Reason that this driver is exempt
   * from the Electronic Logging Mandate (see eldExempt).
   * @property {boolean} [eldPcEnabled] Flag indicating this driver may select
   * the Personal Conveyance duty status in ELD logs. Default value: false .
   * @property {boolean} [eldYmEnabled] Flag indicating this driver may select
   * the Yard Move duty status in ELD logs. Default value: false .
   * @property {object} [externalIds] Dictionary of external IDs (string
   * key-value pairs)
   * @property {number} [groupId] ID of the group if the organization has
   * multiple groups (uncommon).
   * @property {string} [licenseNumber] Driver's state issued license number.
   * @property {string} [licenseState] Abbreviation of state that issued
   * driver's license.
   * @property {string} name Driver's name.
   * @property {string} [notes] Notes about the driver.
   * @property {string} [phone] Driver's phone number. Please include only
   * digits, ex. 4157771234
   * @property {string} [username] Driver's login username into the driver app.
   * @property {number} [vehicleId] ID of the vehicle assigned to the driver
   * for static vehicle assignments. (uncommon).
   */
  constructor() {
  }

  /**
   * Defines the metadata of DriverBase
   *
   * @returns {object} metadata of DriverBase
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DriverBase',
      type: {
        name: 'Composite',
        className: 'DriverBase',
        modelProperties: {
          eldAdverseWeatherExemptionEnabled: {
            required: false,
            serializedName: 'eldAdverseWeatherExemptionEnabled',
            type: {
              name: 'Boolean'
            }
          },
          eldBigDayExemptionEnabled: {
            required: false,
            serializedName: 'eldBigDayExemptionEnabled',
            type: {
              name: 'Boolean'
            }
          },
          eldDayStartHour: {
            required: false,
            serializedName: 'eldDayStartHour',
            type: {
              name: 'Number'
            }
          },
          eldExempt: {
            required: false,
            serializedName: 'eldExempt',
            type: {
              name: 'Boolean'
            }
          },
          eldExemptReason: {
            required: false,
            serializedName: 'eldExemptReason',
            type: {
              name: 'String'
            }
          },
          eldPcEnabled: {
            required: false,
            serializedName: 'eldPcEnabled',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          eldYmEnabled: {
            required: false,
            serializedName: 'eldYmEnabled',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          externalIds: {
            required: false,
            serializedName: 'externalIds',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          groupId: {
            required: false,
            serializedName: 'groupId',
            type: {
              name: 'Number'
            }
          },
          licenseNumber: {
            required: false,
            serializedName: 'licenseNumber',
            type: {
              name: 'String'
            }
          },
          licenseState: {
            required: false,
            serializedName: 'licenseState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          notes: {
            required: false,
            serializedName: 'notes',
            type: {
              name: 'String'
            }
          },
          phone: {
            required: false,
            serializedName: 'phone',
            type: {
              name: 'String'
            }
          },
          username: {
            required: false,
            serializedName: 'username',
            type: {
              name: 'String'
            }
          },
          vehicleId: {
            required: false,
            serializedName: 'vehicleId',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = DriverBase;
