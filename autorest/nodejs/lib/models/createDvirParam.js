/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a CreateDvirParam.
 */
class CreateDvirParam {
  /**
   * Create a CreateDvirParam.
   * @property {string} [mechanicNotes] Any notes from the mechanic.
   * @property {number} [odometerMiles] The current odometer of the vehicle.
   * @property {boolean} [previousDefectsCorrected] Whether any previous
   * defects were corrected. If this vehicle or trailer was previously marked
   * unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or
   * previousDefectsIgnored must be true.
   * @property {boolean} [previousDefectsIgnored] Whether any previous defects
   * were ignored. If this vehicle or trailer was previously marked unsafe, and
   * this DVIR marks it as safe, either previousDefectsCorrected or
   * previousDefectsIgnored must be true.
   * @property {string} safe Whether or not this vehicle or trailer is safe to
   * drive. Possible values include: 'safe', 'unsafe'
   * @property {number} [trailerId] Id of trailer being inspected. Either
   * vehicleId or trailerId must be provided.
   * @property {string} userEmail The Samsara login email for the person
   * creating the DVIR. The email must correspond to a Samsara user's email.
   * @property {number} [vehicleId] Id of vehicle being inspected. Either
   * vehicleId or trailerId must be provided.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CreateDvirParam
   *
   * @returns {object} metadata of CreateDvirParam
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'createDvirParam',
      type: {
        name: 'Composite',
        className: 'CreateDvirParam',
        modelProperties: {
          inspectionType: {
            required: true,
            isConstant: true,
            serializedName: 'inspectionType',
            defaultValue: 'mechanic',
            type: {
              name: 'String'
            }
          },
          mechanicNotes: {
            required: false,
            serializedName: 'mechanicNotes',
            type: {
              name: 'String'
            }
          },
          odometerMiles: {
            required: false,
            serializedName: 'odometerMiles',
            type: {
              name: 'Number'
            }
          },
          previousDefectsCorrected: {
            required: false,
            serializedName: 'previousDefectsCorrected',
            type: {
              name: 'Boolean'
            }
          },
          previousDefectsIgnored: {
            required: false,
            serializedName: 'previousDefectsIgnored',
            type: {
              name: 'Boolean'
            }
          },
          safe: {
            required: true,
            serializedName: 'safe',
            type: {
              name: 'String'
            }
          },
          trailerId: {
            required: false,
            serializedName: 'trailerId',
            type: {
              name: 'Number'
            }
          },
          userEmail: {
            required: true,
            serializedName: 'userEmail',
            type: {
              name: 'String'
            }
          },
          vehicleId: {
            required: false,
            serializedName: 'vehicleId',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = CreateDvirParam;
