/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The geofence that defines this address and its bounds. This can either be a
 * circle, or a polygon - only one key should be provided, depending on the
 * geofence type.
 *
 */
class AddressGeofence {
  /**
   * Create a AddressGeofence.
   * @property {object} [circle] Information about a circular geofence. This
   * field is only populated if the geofence is a circle.
   * @property {number} [circle.latitude] The latitude of the center of the
   * circular geofence
   * @property {number} [circle.longitude] The longitude of the center of the
   * circular geofence
   * @property {number} [circle.radiusMeters] The radius of the circular
   * geofence
   * @property {object} [polygon] Information about a polygon geofence. This
   * field is only populated if the geofence is a polygon.
   * @property {array} [polygon.vertices] The vertices of the polygon geofence.
   * These geofence vertices describe the perimeter of the polygon, and must
   * consist of at least 3 vertices and less than 40.
   */
  constructor() {
  }

  /**
   * Defines the metadata of AddressGeofence
   *
   * @returns {object} metadata of AddressGeofence
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AddressGeofence',
      type: {
        name: 'Composite',
        className: 'AddressGeofence',
        modelProperties: {
          circle: {
            required: false,
            serializedName: 'circle',
            type: {
              name: 'Composite',
              className: 'AddressGeofenceCircle'
            }
          },
          polygon: {
            required: false,
            serializedName: 'polygon',
            type: {
              name: 'Composite',
              className: 'AddressGeofencePolygon'
            }
          }
        }
      }
    };
  }
}

module.exports = AddressGeofence;
