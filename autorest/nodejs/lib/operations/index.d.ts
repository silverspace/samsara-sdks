/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Add
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SamsaraAPI.
 */
export interface Add {


    /**
     * @summary /fleet/add_address
     *
     * This method adds an address book entry to the specified group.
     *
     * @param {object} addressParam
     *
     * @param {string} addressParam.address The address of the entry to add, as it
     * would be recognized if provided to maps.google.com.
     *
     * @param {number} addressParam.groupId Group ID to query.
     *
     * @param {string} addressParam.name Name of the location to add to the address
     * book.
     *
     * @param {number} addressParam.radius Radius in meters of the address (used
     * for matching vehicle trip stops to this location).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addressMethodWithHttpOperationResponse(addressParam: models.AddressParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary /fleet/add_address
     *
     * This method adds an address book entry to the specified group.
     *
     * @param {object} addressParam
     *
     * @param {string} addressParam.address The address of the entry to add, as it
     * would be recognized if provided to maps.google.com.
     *
     * @param {number} addressParam.groupId Group ID to query.
     *
     * @param {string} addressParam.name Name of the location to add to the address
     * book.
     *
     * @param {number} addressParam.radius Radius in meters of the address (used
     * for matching vehicle trip stops to this location).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addressMethod(addressParam: models.AddressParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addressMethod(addressParam: models.AddressParam, callback: ServiceCallback<void>): void;
    addressMethod(addressParam: models.AddressParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Get
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SamsaraAPI.
 */
export interface Get {


    /**
     * @summary /fleet/drivers
     *
     * Get all the drivers for the specified group.
     *
     * @param {object} groupDriversParam
     *
     * @param {number} groupDriversParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DriversResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    driversWithHttpOperationResponse(groupDriversParam: models.GroupDriversParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DriversResponse>>;

    /**
     * @summary /fleet/drivers
     *
     * Get all the drivers for the specified group.
     *
     * @param {object} groupDriversParam
     *
     * @param {number} groupDriversParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DriversResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DriversResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DriversResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    drivers(groupDriversParam: models.GroupDriversParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DriversResponse>;
    drivers(groupDriversParam: models.GroupDriversParam, callback: ServiceCallback<models.DriversResponse>): void;
    drivers(groupDriversParam: models.GroupDriversParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DriversResponse>): void;


    /**
     * @summary /fleet/drivers/summary
     *
     * Get the distance and time each driver in an organization has driven in a
     * given time period.
     *
     * @param {object} driversSummaryParam Org ID and time range to query.
     *
     * @param {number} driversSummaryParam.endMs End time (ms) of queried time
     * period.
     *
     * @param {number} driversSummaryParam.orgId Org ID to query.
     *
     * @param {number} driversSummaryParam.startMs Start time (ms) of queried time
     * period.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.snapToDayBounds] Snap query result to HOS day
     * boundaries.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DriversSummaryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summaryWithHttpOperationResponse(driversSummaryParam: models.DriversSummaryParam, options?: { snapToDayBounds? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DriversSummaryResponse>>;

    /**
     * @summary /fleet/drivers/summary
     *
     * Get the distance and time each driver in an organization has driven in a
     * given time period.
     *
     * @param {object} driversSummaryParam Org ID and time range to query.
     *
     * @param {number} driversSummaryParam.endMs End time (ms) of queried time
     * period.
     *
     * @param {number} driversSummaryParam.orgId Org ID to query.
     *
     * @param {number} driversSummaryParam.startMs Start time (ms) of queried time
     * period.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.snapToDayBounds] Snap query result to HOS day
     * boundaries.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DriversSummaryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DriversSummaryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DriversSummaryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summary(driversSummaryParam: models.DriversSummaryParam, options?: { snapToDayBounds? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.DriversSummaryResponse>;
    summary(driversSummaryParam: models.DriversSummaryParam, callback: ServiceCallback<models.DriversSummaryResponse>): void;
    summary(driversSummaryParam: models.DriversSummaryParam, options: { snapToDayBounds? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DriversSummaryResponse>): void;


    /**
     * @summary /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
     *
     * Get summarized daily HOS charts for a specified driver.
     *
     * @param {number} driverId ID of the driver with HOS logs.
     *
     * @param {object} hosLogsParam
     *
     * @param {number} hosLogsParam.driverId Driver ID to query.
     *
     * @param {number} hosLogsParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} hosLogsParam.groupId Group ID to query.
     *
     * @param {number} hosLogsParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DriverDailyLogResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    logsWithHttpOperationResponse(driverId: number, hosLogsParam: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DriverDailyLogResponse>>;

    /**
     * @summary /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
     *
     * Get summarized daily HOS charts for a specified driver.
     *
     * @param {number} driverId ID of the driver with HOS logs.
     *
     * @param {object} hosLogsParam
     *
     * @param {number} hosLogsParam.driverId Driver ID to query.
     *
     * @param {number} hosLogsParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} hosLogsParam.groupId Group ID to query.
     *
     * @param {number} hosLogsParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DriverDailyLogResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DriverDailyLogResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DriverDailyLogResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    logs(driverId: number, hosLogsParam: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DriverDailyLogResponse>;
    logs(driverId: number, hosLogsParam: models.Body, callback: ServiceCallback<models.DriverDailyLogResponse>): void;
    logs(driverId: number, hosLogsParam: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DriverDailyLogResponse>): void;


    /**
     * @summary /fleet/hos_authentication_logs
     *
     * Get the HOS (hours of service) signin and signout logs for the specified
     * driver. Only signout logs include location information.
     *
     * @param {object} hosAuthenticationLogsParam
     *
     * @param {number} hosAuthenticationLogsParam.driverId Driver ID to query.
     *
     * @param {number} hosAuthenticationLogsParam.endMs End of the time range,
     * specified in milliseconds UNIX time.
     *
     * @param {number} hosAuthenticationLogsParam.groupId Group ID to query.
     *
     * @param {number} hosAuthenticationLogsParam.startMs Beginning of the time
     * range, specified in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HosAuthenticationLogsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    logs1WithHttpOperationResponse(hosAuthenticationLogsParam: models.HosAuthenticationLogsParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HosAuthenticationLogsResponse>>;

    /**
     * @summary /fleet/hos_authentication_logs
     *
     * Get the HOS (hours of service) signin and signout logs for the specified
     * driver. Only signout logs include location information.
     *
     * @param {object} hosAuthenticationLogsParam
     *
     * @param {number} hosAuthenticationLogsParam.driverId Driver ID to query.
     *
     * @param {number} hosAuthenticationLogsParam.endMs End of the time range,
     * specified in milliseconds UNIX time.
     *
     * @param {number} hosAuthenticationLogsParam.groupId Group ID to query.
     *
     * @param {number} hosAuthenticationLogsParam.startMs Beginning of the time
     * range, specified in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HosAuthenticationLogsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HosAuthenticationLogsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HosAuthenticationLogsResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    logs1(hosAuthenticationLogsParam: models.HosAuthenticationLogsParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HosAuthenticationLogsResponse>;
    logs1(hosAuthenticationLogsParam: models.HosAuthenticationLogsParam, callback: ServiceCallback<models.HosAuthenticationLogsResponse>): void;
    logs1(hosAuthenticationLogsParam: models.HosAuthenticationLogsParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HosAuthenticationLogsResponse>): void;


    /**
     * @summary /fleet/hos_logs
     *
     * Get the HOS (hours of service) logs for the specified driver. This method
     * returns all the HOS statuses that the driver was in during this time period.
     *
     * @param {object} hosLogsParam
     *
     * @param {number} hosLogsParam.driverId Driver ID to query.
     *
     * @param {number} hosLogsParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} hosLogsParam.groupId Group ID to query.
     *
     * @param {number} hosLogsParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HosLogsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    logs2WithHttpOperationResponse(hosLogsParam: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HosLogsResponse>>;

    /**
     * @summary /fleet/hos_logs
     *
     * Get the HOS (hours of service) logs for the specified driver. This method
     * returns all the HOS statuses that the driver was in during this time period.
     *
     * @param {object} hosLogsParam
     *
     * @param {number} hosLogsParam.driverId Driver ID to query.
     *
     * @param {number} hosLogsParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} hosLogsParam.groupId Group ID to query.
     *
     * @param {number} hosLogsParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HosLogsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HosLogsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HosLogsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    logs2(hosLogsParam: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HosLogsResponse>;
    logs2(hosLogsParam: models.Body, callback: ServiceCallback<models.HosLogsResponse>): void;
    logs2(hosLogsParam: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HosLogsResponse>): void;


    /**
     * @summary /fleet/hos_logs_summary
     *
     * Get the current HOS status for all drivers in the group.
     *
     * @param {object} hosLogsParam
     *
     * @param {number} hosLogsParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HosLogsSummaryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summary1WithHttpOperationResponse(hosLogsParam: models.HosLogsParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HosLogsSummaryResponse>>;

    /**
     * @summary /fleet/hos_logs_summary
     *
     * Get the current HOS status for all drivers in the group.
     *
     * @param {object} hosLogsParam
     *
     * @param {number} hosLogsParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HosLogsSummaryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HosLogsSummaryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HosLogsSummaryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summary1(hosLogsParam: models.HosLogsParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HosLogsSummaryResponse>;
    summary1(hosLogsParam: models.HosLogsParam, callback: ServiceCallback<models.HosLogsSummaryResponse>): void;
    summary1(hosLogsParam: models.HosLogsParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HosLogsSummaryResponse>): void;


    /**
     * @summary /fleet/locations
     *
     * Get current location of vehicles in a group. This method returns the current
     * location in latitude and longitude of all vehicles in a requested group.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocationsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    locationsWithHttpOperationResponse(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocationsOKResponse>>;

    /**
     * @summary /fleet/locations
     *
     * Get current location of vehicles in a group. This method returns the current
     * location in latitude and longitude of all vehicles in a requested group.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocationsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocationsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocationsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    locations(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocationsOKResponse>;
    locations(groupParam: models.BodyModel, callback: ServiceCallback<models.LocationsOKResponse>): void;
    locations(groupParam: models.BodyModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationsOKResponse>): void;


    /**
     * @summary /fleet/maintenance/dvirs
     *
     * Get DVIRs for the org within provided time constraints
     *
     * @param {number} endMs time in millis until the last dvir log.
     *
     * @param {number} durationMs time in millis which corresponds to the duration
     * before the end_ms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.groupId] Group ID to query.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DvirListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    dvirsWithHttpOperationResponse(endMs: number, durationMs: number, options?: { groupId? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DvirListResponse>>;

    /**
     * @summary /fleet/maintenance/dvirs
     *
     * Get DVIRs for the org within provided time constraints
     *
     * @param {number} endMs time in millis until the last dvir log.
     *
     * @param {number} durationMs time in millis which corresponds to the duration
     * before the end_ms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.groupId] Group ID to query.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DvirListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DvirListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DvirListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    dvirs(endMs: number, durationMs: number, options?: { groupId? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DvirListResponse>;
    dvirs(endMs: number, durationMs: number, callback: ServiceCallback<models.DvirListResponse>): void;
    dvirs(endMs: number, durationMs: number, options: { groupId? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DvirListResponse>): void;


    /**
     * @summary /fleet/maintenance/list
     *
     * Get list of the vehicles with any engine faults or check light data.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMethodWithHttpOperationResponse(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponse>>;

    /**
     * @summary /fleet/maintenance/list
     *
     * Get list of the vehicles with any engine faults or check light data.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMethod(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponse>;
    listMethod(groupParam: models.BodyModel, callback: ServiceCallback<models.ListOKResponse>): void;
    listMethod(groupParam: models.BodyModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponse>): void;


    /**
     * @summary /fleet/trips
     *
     * Get historical trips data for specified vehicle. This method returns a set
     * of historical trips data for the specified vehicle in the specified time
     * range.
     *
     * @param {object} tripsParam Group ID, vehicle ID and time range to query.
     *
     * @param {number} tripsParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} tripsParam.groupId Group ID to query.
     *
     * @param {number} tripsParam.startMs Beginning of the time range, specified in
     * milliseconds UNIX time. Limited to a 90 day window with respect to startMs
     * and endMs
     *
     * @param {number} tripsParam.vehicleId Vehicle ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TripResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    tripsWithHttpOperationResponse(tripsParam: models.TripsParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TripResponse>>;

    /**
     * @summary /fleet/trips
     *
     * Get historical trips data for specified vehicle. This method returns a set
     * of historical trips data for the specified vehicle in the specified time
     * range.
     *
     * @param {object} tripsParam Group ID, vehicle ID and time range to query.
     *
     * @param {number} tripsParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} tripsParam.groupId Group ID to query.
     *
     * @param {number} tripsParam.startMs Beginning of the time range, specified in
     * milliseconds UNIX time. Limited to a 90 day window with respect to startMs
     * and endMs
     *
     * @param {number} tripsParam.vehicleId Vehicle ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TripResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TripResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TripResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    trips(tripsParam: models.TripsParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TripResponse>;
    trips(tripsParam: models.TripsParam, callback: ServiceCallback<models.TripResponse>): void;
    trips(tripsParam: models.TripsParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TripResponse>): void;


    /**
     * @summary /machines/history
     *
     * Get historical data for machine objects. This method returns a set of
     * historical data for all machines in a group
     *
     * @param {object} historyParam Group ID and time range to query for events
     *
     * @param {number} historyParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} historyParam.groupId Group ID to query.
     *
     * @param {number} historyParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineHistoryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    historyWithHttpOperationResponse(historyParam: models.HistoryParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineHistoryResponse>>;

    /**
     * @summary /machines/history
     *
     * Get historical data for machine objects. This method returns a set of
     * historical data for all machines in a group
     *
     * @param {object} historyParam Group ID and time range to query for events
     *
     * @param {number} historyParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {number} historyParam.groupId Group ID to query.
     *
     * @param {number} historyParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineHistoryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineHistoryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineHistoryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    history(historyParam: models.HistoryParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineHistoryResponse>;
    history(historyParam: models.HistoryParam, callback: ServiceCallback<models.MachineHistoryResponse>): void;
    history(historyParam: models.HistoryParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineHistoryResponse>): void;


    /**
     * @summary /machines/list
     *
     * Get machine objects. This method returns a list of the machine objects in
     * the Samsara Cloud and information about them.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachinesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    machinesWithHttpOperationResponse(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachinesOKResponse>>;

    /**
     * @summary /machines/list
     *
     * Get machine objects. This method returns a list of the machine objects in
     * the Samsara Cloud and information about them.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachinesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachinesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachinesOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    machines(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachinesOKResponse>;
    machines(groupParam: models.BodyModel, callback: ServiceCallback<models.MachinesOKResponse>): void;
    machines(groupParam: models.BodyModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachinesOKResponse>): void;


    /**
     * @summary /sensors/cargo
     *
     * Get cargo monitor status (empty / full) for requested sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CargoResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cargoWithHttpOperationResponse(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CargoResponse>>;

    /**
     * @summary /sensors/cargo
     *
     * Get cargo monitor status (empty / full) for requested sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CargoResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CargoResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CargoResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cargo(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CargoResponse>;
    cargo(sensorParam: models.BodyModelModel, callback: ServiceCallback<models.CargoResponse>): void;
    cargo(sensorParam: models.BodyModelModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CargoResponse>): void;


    /**
     * @summary /sensors/door
     *
     * Get door monitor status (closed / open) for requested sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DoorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    doorWithHttpOperationResponse(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DoorResponse>>;

    /**
     * @summary /sensors/door
     *
     * Get door monitor status (closed / open) for requested sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DoorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DoorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DoorResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    door(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DoorResponse>;
    door(sensorParam: models.BodyModelModel, callback: ServiceCallback<models.DoorResponse>): void;
    door(sensorParam: models.BodyModelModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DoorResponse>): void;


    /**
     * @summary /sensors/history
     *
     * Get historical data for specified sensors. This method returns a set of
     * historical data for the specified sensors in the specified time range and at
     * the specified time resolution.
     *
     * @param {object} historyParam Group ID, time range and resolution, and list
     * of sensor ID, field pairs to query.
     *
     * @param {number} historyParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {string} [historyParam.fillMissing] Possible values include:
     * 'withNull', 'withPrevious'
     *
     * @param {number} historyParam.groupId Group ID to query.
     *
     * @param {array} historyParam.series
     *
     * @param {number} historyParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {number} historyParam.stepMs Time resolution for which data should be
     * returned, in milliseconds. Specifying 3600000 will return data at hour
     * intervals.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SensorHistoryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    history1WithHttpOperationResponse(historyParam: models.HistoryParamModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SensorHistoryResponse>>;

    /**
     * @summary /sensors/history
     *
     * Get historical data for specified sensors. This method returns a set of
     * historical data for the specified sensors in the specified time range and at
     * the specified time resolution.
     *
     * @param {object} historyParam Group ID, time range and resolution, and list
     * of sensor ID, field pairs to query.
     *
     * @param {number} historyParam.endMs End of the time range, specified in
     * milliseconds UNIX time.
     *
     * @param {string} [historyParam.fillMissing] Possible values include:
     * 'withNull', 'withPrevious'
     *
     * @param {number} historyParam.groupId Group ID to query.
     *
     * @param {array} historyParam.series
     *
     * @param {number} historyParam.startMs Beginning of the time range, specified
     * in milliseconds UNIX time.
     *
     * @param {number} historyParam.stepMs Time resolution for which data should be
     * returned, in milliseconds. Specifying 3600000 will return data at hour
     * intervals.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SensorHistoryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SensorHistoryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SensorHistoryResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    history1(historyParam: models.HistoryParamModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SensorHistoryResponse>;
    history1(historyParam: models.HistoryParamModel, callback: ServiceCallback<models.SensorHistoryResponse>): void;
    history1(historyParam: models.HistoryParamModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SensorHistoryResponse>): void;


    /**
     * @summary /sensors/humidity
     *
     * Get humidity for requested sensors. This method returns the current relative
     * humidity for the requested sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HumidityResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    humidityWithHttpOperationResponse(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HumidityResponse>>;

    /**
     * @summary /sensors/humidity
     *
     * Get humidity for requested sensors. This method returns the current relative
     * humidity for the requested sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HumidityResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HumidityResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HumidityResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    humidity(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HumidityResponse>;
    humidity(sensorParam: models.BodyModelModel, callback: ServiceCallback<models.HumidityResponse>): void;
    humidity(sensorParam: models.BodyModelModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HumidityResponse>): void;


    /**
     * @summary /sensors/list
     *
     * Get sensor objects. This method returns a list of the sensor objects in the
     * Samsara Cloud and information about them.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SensorsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sensorsWithHttpOperationResponse(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SensorsOKResponse>>;

    /**
     * @summary /sensors/list
     *
     * Get sensor objects. This method returns a list of the sensor objects in the
     * Samsara Cloud and information about them.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SensorsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SensorsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SensorsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sensors(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SensorsOKResponse>;
    sensors(groupParam: models.BodyModel, callback: ServiceCallback<models.SensorsOKResponse>): void;
    sensors(groupParam: models.BodyModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SensorsOKResponse>): void;


    /**
     * @summary /sensors/temperature
     *
     * Get temperature for requested sensors. This method returns the current
     * ambient temperature (and probe temperature if applicable) for the requested
     * sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TemperatureResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    temperatureWithHttpOperationResponse(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TemperatureResponse>>;

    /**
     * @summary /sensors/temperature
     *
     * Get temperature for requested sensors. This method returns the current
     * ambient temperature (and probe temperature if applicable) for the requested
     * sensors.
     *
     * @param {object} sensorParam Group ID and list of sensor IDs to query.
     *
     * @param {number} sensorParam.groupId Group ID to query.
     *
     * @param {array} sensorParam.sensors List of sensor IDs to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TemperatureResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TemperatureResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TemperatureResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    temperature(sensorParam: models.BodyModelModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TemperatureResponse>;
    temperature(sensorParam: models.BodyModelModel, callback: ServiceCallback<models.TemperatureResponse>): void;
    temperature(sensorParam: models.BodyModelModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TemperatureResponse>): void;
}

/**
 * @class
 * List
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SamsaraAPI.
 */
export interface List {


    /**
     * @summary /fleet/list
     *
     * Get list of the vehicles. This method returns a list of the vehicles in the
     * Samsara Cloud and information about them.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FleetOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    fleetWithHttpOperationResponse(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FleetOKResponse>>;

    /**
     * @summary /fleet/list
     *
     * Get list of the vehicles. This method returns a list of the vehicles in the
     * Samsara Cloud and information about them.
     *
     * @param {object} groupParam Group ID to query.
     *
     * @param {number} groupParam.groupId Group ID to query.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FleetOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FleetOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FleetOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    fleet(groupParam: models.BodyModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FleetOKResponse>;
    fleet(groupParam: models.BodyModel, callback: ServiceCallback<models.FleetOKResponse>): void;
    fleet(groupParam: models.BodyModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FleetOKResponse>): void;


    /**
     * @summary /users
     *
     * List all users in the organization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    usersWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User[]>>;

    /**
     * @summary /users
     *
     * List all users in the organization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    users(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User[]>;
    users(callback: ServiceCallback<models.User[]>): void;
    users(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User[]>): void;
}

/**
 * @class
 * Create
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SamsaraAPI.
 */
export interface Create {


    /**
     * @summary /fleet/maintenance/dvirs
     *
     * Create a new dvir, marking a vehicle or trailer safe or unsafe.
     *
     * @param {object} createDvirParam DVIR creation body
     *
     * @param {string} [createDvirParam.mechanicNotes] Any notes from the mechanic.
     *
     * @param {number} [createDvirParam.odometerMiles] The current odometer of the
     * vehicle.
     *
     * @param {boolean} [createDvirParam.previousDefectsCorrected] Whether any
     * previous defects were corrected. If this vehicle or trailer was previously
     * marked unsafe, and this DVIR marks it as safe, either
     * previousDefectsCorrected or previousDefectsIgnored must be true.
     *
     * @param {boolean} [createDvirParam.previousDefectsIgnored] Whether any
     * previous defects were ignored. If this vehicle or trailer was previously
     * marked unsafe, and this DVIR marks it as safe, either
     * previousDefectsCorrected or previousDefectsIgnored must be true.
     *
     * @param {string} createDvirParam.safe Whether or not this vehicle or trailer
     * is safe to drive. Possible values include: 'safe', 'unsafe'
     *
     * @param {number} [createDvirParam.trailerId] Id of trailer being inspected.
     * Either vehicleId or trailerId must be provided.
     *
     * @param {string} createDvirParam.userEmail The Samsara login email for the
     * person creating the DVIR. The email must correspond to a Samsara user's
     * email.
     *
     * @param {number} [createDvirParam.vehicleId] Id of vehicle being inspected.
     * Either vehicleId or trailerId must be provided.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DvirBase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    dvirWithHttpOperationResponse(createDvirParam: models.CreateDvirParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DvirBase>>;

    /**
     * @summary /fleet/maintenance/dvirs
     *
     * Create a new dvir, marking a vehicle or trailer safe or unsafe.
     *
     * @param {object} createDvirParam DVIR creation body
     *
     * @param {string} [createDvirParam.mechanicNotes] Any notes from the mechanic.
     *
     * @param {number} [createDvirParam.odometerMiles] The current odometer of the
     * vehicle.
     *
     * @param {boolean} [createDvirParam.previousDefectsCorrected] Whether any
     * previous defects were corrected. If this vehicle or trailer was previously
     * marked unsafe, and this DVIR marks it as safe, either
     * previousDefectsCorrected or previousDefectsIgnored must be true.
     *
     * @param {boolean} [createDvirParam.previousDefectsIgnored] Whether any
     * previous defects were ignored. If this vehicle or trailer was previously
     * marked unsafe, and this DVIR marks it as safe, either
     * previousDefectsCorrected or previousDefectsIgnored must be true.
     *
     * @param {string} createDvirParam.safe Whether or not this vehicle or trailer
     * is safe to drive. Possible values include: 'safe', 'unsafe'
     *
     * @param {number} [createDvirParam.trailerId] Id of trailer being inspected.
     * Either vehicleId or trailerId must be provided.
     *
     * @param {string} createDvirParam.userEmail The Samsara login email for the
     * person creating the DVIR. The email must correspond to a Samsara user's
     * email.
     *
     * @param {number} [createDvirParam.vehicleId] Id of vehicle being inspected.
     * Either vehicleId or trailerId must be provided.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DvirBase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DvirBase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DvirBase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    dvir(createDvirParam: models.CreateDvirParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DvirBase>;
    dvir(createDvirParam: models.CreateDvirParam, callback: ServiceCallback<models.DvirBase>): void;
    dvir(createDvirParam: models.CreateDvirParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DvirBase>): void;
}

/**
 * @class
 * Update
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SamsaraAPI.
 */
export interface Update {


    /**
     * @summary /fleet/set_data
     *
     * This method enables the mutation of metadata for vehicles in the Samsara
     * Cloud.
     *
     * @param {object} vehicleUpdateParam
     *
     * @param {number} vehicleUpdateParam.groupId Group ID to query.
     *
     * @param {array} vehicleUpdateParam.vehicles
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    vehiclesWithHttpOperationResponse(vehicleUpdateParam: models.VehicleUpdateParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary /fleet/set_data
     *
     * This method enables the mutation of metadata for vehicles in the Samsara
     * Cloud.
     *
     * @param {object} vehicleUpdateParam
     *
     * @param {number} vehicleUpdateParam.groupId Group ID to query.
     *
     * @param {array} vehicleUpdateParam.vehicles
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    vehicles(vehicleUpdateParam: models.VehicleUpdateParam, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    vehicles(vehicleUpdateParam: models.VehicleUpdateParam, callback: ServiceCallback<void>): void;
    vehicles(vehicleUpdateParam: models.VehicleUpdateParam, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
