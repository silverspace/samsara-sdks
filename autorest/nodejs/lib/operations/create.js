/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * @summary /fleet/maintenance/dvirs
 *
 * Create a new dvir, marking a vehicle or trailer safe or unsafe.
 *
 * @param {object} createDvirParam DVIR creation body
 *
 * @param {string} [createDvirParam.mechanicNotes] Any notes from the mechanic.
 *
 * @param {number} [createDvirParam.odometerMiles] The current odometer of the
 * vehicle.
 *
 * @param {boolean} [createDvirParam.previousDefectsCorrected] Whether any
 * previous defects were corrected. If this vehicle or trailer was previously
 * marked unsafe, and this DVIR marks it as safe, either
 * previousDefectsCorrected or previousDefectsIgnored must be true.
 *
 * @param {boolean} [createDvirParam.previousDefectsIgnored] Whether any
 * previous defects were ignored. If this vehicle or trailer was previously
 * marked unsafe, and this DVIR marks it as safe, either
 * previousDefectsCorrected or previousDefectsIgnored must be true.
 *
 * @param {string} createDvirParam.safe Whether or not this vehicle or trailer
 * is safe to drive. Possible values include: 'safe', 'unsafe'
 *
 * @param {number} [createDvirParam.trailerId] Id of trailer being inspected.
 * Either vehicleId or trailerId must be provided.
 *
 * @param {string} createDvirParam.userEmail The Samsara login email for the
 * person creating the DVIR. The email must correspond to a Samsara user's
 * email.
 *
 * @param {number} [createDvirParam.vehicleId] Id of vehicle being inspected.
 * Either vehicleId or trailerId must be provided.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DvirBase} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _dvir(createDvirParam, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  if (createDvirParam === null || createDvirParam === undefined)
  {
    createDvirParam = {};
  }
  // Validate
  try {
    if (this.client.accessToken === null || this.client.accessToken === undefined || typeof this.client.accessToken.valueOf() !== 'string') {
      throw new Error('this.client.accessToken cannot be null or undefined and it must be of type string.');
    }
    if (createDvirParam === null || createDvirParam === undefined) {
      throw new Error('createDvirParam cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'fleet/maintenance/dvirs';
  let queryParameters = [];
  queryParameters.push('access_token=' + encodeURIComponent(this.client.accessToken));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (createDvirParam !== null && createDvirParam !== undefined) {
      let requestModelMapper = new client.models['CreateDvirParam']().mapper();
      requestModel = client.serialize(requestModelMapper, createDvirParam, 'createDvirParam');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(createDvirParam, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedErrorResponse',
            type: {
              name: 'String'
            }
          };
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DvirBase']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Create. */
class Create {
  /**
   * Create a Create.
   * @param {SamsaraAPI} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._dvir = _dvir;
  }

  /**
   * @summary /fleet/maintenance/dvirs
   *
   * Create a new dvir, marking a vehicle or trailer safe or unsafe.
   *
   * @param {object} createDvirParam DVIR creation body
   *
   * @param {string} [createDvirParam.mechanicNotes] Any notes from the mechanic.
   *
   * @param {number} [createDvirParam.odometerMiles] The current odometer of the
   * vehicle.
   *
   * @param {boolean} [createDvirParam.previousDefectsCorrected] Whether any
   * previous defects were corrected. If this vehicle or trailer was previously
   * marked unsafe, and this DVIR marks it as safe, either
   * previousDefectsCorrected or previousDefectsIgnored must be true.
   *
   * @param {boolean} [createDvirParam.previousDefectsIgnored] Whether any
   * previous defects were ignored. If this vehicle or trailer was previously
   * marked unsafe, and this DVIR marks it as safe, either
   * previousDefectsCorrected or previousDefectsIgnored must be true.
   *
   * @param {string} createDvirParam.safe Whether or not this vehicle or trailer
   * is safe to drive. Possible values include: 'safe', 'unsafe'
   *
   * @param {number} [createDvirParam.trailerId] Id of trailer being inspected.
   * Either vehicleId or trailerId must be provided.
   *
   * @param {string} createDvirParam.userEmail The Samsara login email for the
   * person creating the DVIR. The email must correspond to a Samsara user's
   * email.
   *
   * @param {number} [createDvirParam.vehicleId] Id of vehicle being inspected.
   * Either vehicleId or trailerId must be provided.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DvirBase>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  dvirWithHttpOperationResponse(createDvirParam, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._dvir(createDvirParam, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary /fleet/maintenance/dvirs
   *
   * Create a new dvir, marking a vehicle or trailer safe or unsafe.
   *
   * @param {object} createDvirParam DVIR creation body
   *
   * @param {string} [createDvirParam.mechanicNotes] Any notes from the mechanic.
   *
   * @param {number} [createDvirParam.odometerMiles] The current odometer of the
   * vehicle.
   *
   * @param {boolean} [createDvirParam.previousDefectsCorrected] Whether any
   * previous defects were corrected. If this vehicle or trailer was previously
   * marked unsafe, and this DVIR marks it as safe, either
   * previousDefectsCorrected or previousDefectsIgnored must be true.
   *
   * @param {boolean} [createDvirParam.previousDefectsIgnored] Whether any
   * previous defects were ignored. If this vehicle or trailer was previously
   * marked unsafe, and this DVIR marks it as safe, either
   * previousDefectsCorrected or previousDefectsIgnored must be true.
   *
   * @param {string} createDvirParam.safe Whether or not this vehicle or trailer
   * is safe to drive. Possible values include: 'safe', 'unsafe'
   *
   * @param {number} [createDvirParam.trailerId] Id of trailer being inspected.
   * Either vehicleId or trailerId must be provided.
   *
   * @param {string} createDvirParam.userEmail The Samsara login email for the
   * person creating the DVIR. The email must correspond to a Samsara user's
   * email.
   *
   * @param {number} [createDvirParam.vehicleId] Id of vehicle being inspected.
   * Either vehicleId or trailerId must be provided.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DvirBase} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DvirBase} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  dvir(createDvirParam, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._dvir(createDvirParam, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._dvir(createDvirParam, options, optionalCallback);
    }
  }

}

module.exports = Create;
