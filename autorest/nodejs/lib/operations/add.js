/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * @summary /fleet/add_address
 *
 * This method adds an address book entry to the specified group.
 *
 * @param {object} addressParam
 *
 * @param {string} addressParam.address The address of the entry to add, as it
 * would be recognized if provided to maps.google.com.
 *
 * @param {number} addressParam.groupId Group ID to query.
 *
 * @param {string} addressParam.name Name of the location to add to the address
 * book.
 *
 * @param {number} addressParam.radius Radius in meters of the address (used
 * for matching vehicle trip stops to this location).
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addressMethod(addressParam, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.accessToken === null || this.client.accessToken === undefined || typeof this.client.accessToken.valueOf() !== 'string') {
      throw new Error('this.client.accessToken cannot be null or undefined and it must be of type string.');
    }
    if (addressParam === null || addressParam === undefined) {
      throw new Error('addressParam cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'fleet/add_address';
  let queryParameters = [];
  queryParameters.push('access_token=' + encodeURIComponent(this.client.accessToken));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (addressParam !== null && addressParam !== undefined) {
      let requestModelMapper = new client.models['AddressParam']().mapper();
      requestModel = client.serialize(requestModelMapper, addressParam, 'addressParam');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(addressParam, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedErrorResponse',
            type: {
              name: 'String'
            }
          };
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Add. */
class Add {
  /**
   * Create a Add.
   * @param {SamsaraAPI} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._addressMethod = _addressMethod;
  }

  /**
   * @summary /fleet/add_address
   *
   * This method adds an address book entry to the specified group.
   *
   * @param {object} addressParam
   *
   * @param {string} addressParam.address The address of the entry to add, as it
   * would be recognized if provided to maps.google.com.
   *
   * @param {number} addressParam.groupId Group ID to query.
   *
   * @param {string} addressParam.name Name of the location to add to the address
   * book.
   *
   * @param {number} addressParam.radius Radius in meters of the address (used
   * for matching vehicle trip stops to this location).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addressMethodWithHttpOperationResponse(addressParam, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addressMethod(addressParam, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary /fleet/add_address
   *
   * This method adds an address book entry to the specified group.
   *
   * @param {object} addressParam
   *
   * @param {string} addressParam.address The address of the entry to add, as it
   * would be recognized if provided to maps.google.com.
   *
   * @param {number} addressParam.groupId Group ID to query.
   *
   * @param {string} addressParam.name Name of the location to add to the address
   * book.
   *
   * @param {number} addressParam.radius Radius in meters of the address (used
   * for matching vehicle trip stops to this location).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addressMethod(addressParam, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addressMethod(addressParam, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addressMethod(addressParam, options, optionalCallback);
    }
  }

}

module.exports = Add;
