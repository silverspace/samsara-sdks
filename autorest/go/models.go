package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
)

// The package's fully qualified name.
const fqdn = "go"

        // AuthTypeEnum enumerates the values for auth type enum.
    type AuthTypeEnum string

    const (
                // Default ...
        Default AuthTypeEnum = "default"
                // Saml ...
        Saml AuthTypeEnum = "saml"
            )
    // PossibleAuthTypeEnumValues returns an array of possible values for the AuthTypeEnum const type.
    func PossibleAuthTypeEnumValues() []AuthTypeEnum {
        return []AuthTypeEnum{Default,Saml}
    }

        // FieldEnum enumerates the values for field enum.
    type FieldEnum string

    const (
                // AmbientTemperature ...
        AmbientTemperature FieldEnum = "ambientTemperature"
                // CurrentLoop1Mapped ...
        CurrentLoop1Mapped FieldEnum = "currentLoop1Mapped"
                // CurrentLoop1Raw ...
        CurrentLoop1Raw FieldEnum = "currentLoop1Raw"
                // CurrentLoop2Mapped ...
        CurrentLoop2Mapped FieldEnum = "currentLoop2Mapped"
                // CurrentLoop2Raw ...
        CurrentLoop2Raw FieldEnum = "currentLoop2Raw"
                // PmPhase1Power ...
        PmPhase1Power FieldEnum = "pmPhase1Power"
                // PmPhase1PowerFactor ...
        PmPhase1PowerFactor FieldEnum = "pmPhase1PowerFactor"
                // PmPhase2Power ...
        PmPhase2Power FieldEnum = "pmPhase2Power"
                // PmPhase2PowerFactor ...
        PmPhase2PowerFactor FieldEnum = "pmPhase2PowerFactor"
                // PmPhase3Power ...
        PmPhase3Power FieldEnum = "pmPhase3Power"
                // PmPhase3PowerFactor ...
        PmPhase3PowerFactor FieldEnum = "pmPhase3PowerFactor"
                // PmPowerTotal ...
        PmPowerTotal FieldEnum = "pmPowerTotal"
                // ProbeTemperature ...
        ProbeTemperature FieldEnum = "probeTemperature"
            )
    // PossibleFieldEnumValues returns an array of possible values for the FieldEnum const type.
    func PossibleFieldEnumValues() []FieldEnum {
        return []FieldEnum{AmbientTemperature,CurrentLoop1Mapped,CurrentLoop1Raw,CurrentLoop2Mapped,CurrentLoop2Raw,PmPhase1Power,PmPhase1PowerFactor,PmPhase2Power,PmPhase2PowerFactor,PmPhase3Power,PmPhase3PowerFactor,PmPowerTotal,ProbeTemperature}
    }

        // FillMissingEnum enumerates the values for fill missing enum.
    type FillMissingEnum string

    const (
                // WithNull ...
        WithNull FillMissingEnum = "withNull"
                // WithPrevious ...
        WithPrevious FillMissingEnum = "withPrevious"
            )
    // PossibleFillMissingEnumValues returns an array of possible values for the FillMissingEnum const type.
    func PossibleFillMissingEnumValues() []FillMissingEnum {
        return []FillMissingEnum{WithNull,WithPrevious}
    }

        // JobState1Enum enumerates the values for job state 1 enum.
    type JobState1Enum string

    const (
                // JobStateArrived ...
        JobStateArrived JobState1Enum = "JobState_Arrived"
                // JobStateCompleted ...
        JobStateCompleted JobState1Enum = "JobState_Completed"
                // JobStateEnRoute ...
        JobStateEnRoute JobState1Enum = "JobState_EnRoute"
                // JobStateScheduled ...
        JobStateScheduled JobState1Enum = "JobState_Scheduled"
                // JobStateSkipped ...
        JobStateSkipped JobState1Enum = "JobState_Skipped"
                // JobStateUnassigned ...
        JobStateUnassigned JobState1Enum = "JobState_Unassigned"
            )
    // PossibleJobState1EnumValues returns an array of possible values for the JobState1Enum const type.
    func PossibleJobState1EnumValues() []JobState1Enum {
        return []JobState1Enum{JobStateArrived,JobStateCompleted,JobStateEnRoute,JobStateScheduled,JobStateSkipped,JobStateUnassigned}
    }

        // JobStateEnum enumerates the values for job state enum.
    type JobStateEnum string

    const (
                // JobStateEnumJobStateArrived ...
        JobStateEnumJobStateArrived JobStateEnum = "JobState_Arrived"
                // JobStateEnumJobStateCompleted ...
        JobStateEnumJobStateCompleted JobStateEnum = "JobState_Completed"
                // JobStateEnumJobStateEnRoute ...
        JobStateEnumJobStateEnRoute JobStateEnum = "JobState_EnRoute"
                // JobStateEnumJobStateScheduled ...
        JobStateEnumJobStateScheduled JobStateEnum = "JobState_Scheduled"
                // JobStateEnumJobStateSkipped ...
        JobStateEnumJobStateSkipped JobStateEnum = "JobState_Skipped"
                // JobStateEnumJobStateUnassigned ...
        JobStateEnumJobStateUnassigned JobStateEnum = "JobState_Unassigned"
            )
    // PossibleJobStateEnumValues returns an array of possible values for the JobStateEnum const type.
    func PossibleJobStateEnumValues() []JobStateEnum {
        return []JobStateEnum{JobStateEnumJobStateArrived,JobStateEnumJobStateCompleted,JobStateEnumJobStateEnRoute,JobStateEnumJobStateScheduled,JobStateEnumJobStateSkipped,JobStateEnumJobStateUnassigned}
    }

        // NameEnum enumerates the values for name enum.
    type NameEnum string

    const (
                // Boom ...
        Boom NameEnum = "Boom"
                // EmergencyAlarm ...
        EmergencyAlarm NameEnum = "Emergency Alarm"
                // EmergencyLights ...
        EmergencyLights NameEnum = "Emergency Lights"
                // Plow ...
        Plow NameEnum = "Plow"
                // PowerTakeOff ...
        PowerTakeOff NameEnum = "Power Take-Off"
                // Salter ...
        Salter NameEnum = "Salter"
                // StopPaddle ...
        StopPaddle NameEnum = "Stop Paddle"
                // Sweeper ...
        Sweeper NameEnum = "Sweeper"
            )
    // PossibleNameEnumValues returns an array of possible values for the NameEnum const type.
    func PossibleNameEnumValues() []NameEnum {
        return []NameEnum{Boom,EmergencyAlarm,EmergencyLights,Plow,PowerTakeOff,Salter,StopPaddle,Sweeper}
    }

        // PrevJobStateEnum enumerates the values for prev job state enum.
    type PrevJobStateEnum string

    const (
                // PrevJobStateEnumJobStateArrived ...
        PrevJobStateEnumJobStateArrived PrevJobStateEnum = "JobState_Arrived"
                // PrevJobStateEnumJobStateCompleted ...
        PrevJobStateEnumJobStateCompleted PrevJobStateEnum = "JobState_Completed"
                // PrevJobStateEnumJobStateEnRoute ...
        PrevJobStateEnumJobStateEnRoute PrevJobStateEnum = "JobState_EnRoute"
                // PrevJobStateEnumJobStateScheduled ...
        PrevJobStateEnumJobStateScheduled PrevJobStateEnum = "JobState_Scheduled"
                // PrevJobStateEnumJobStateSkipped ...
        PrevJobStateEnumJobStateSkipped PrevJobStateEnum = "JobState_Skipped"
                // PrevJobStateEnumJobStateUnassigned ...
        PrevJobStateEnumJobStateUnassigned PrevJobStateEnum = "JobState_Unassigned"
            )
    // PossiblePrevJobStateEnumValues returns an array of possible values for the PrevJobStateEnum const type.
    func PossiblePrevJobStateEnumValues() []PrevJobStateEnum {
        return []PrevJobStateEnum{PrevJobStateEnumJobStateArrived,PrevJobStateEnumJobStateCompleted,PrevJobStateEnumJobStateEnRoute,PrevJobStateEnumJobStateScheduled,PrevJobStateEnumJobStateSkipped,PrevJobStateEnumJobStateUnassigned}
    }

        // SafeEnum enumerates the values for safe enum.
    type SafeEnum string

    const (
                // Safe ...
        Safe SafeEnum = "safe"
                // Unsafe ...
        Unsafe SafeEnum = "unsafe"
            )
    // PossibleSafeEnumValues returns an array of possible values for the SafeEnum const type.
    func PossibleSafeEnumValues() []SafeEnum {
        return []SafeEnum{Safe,Unsafe}
    }

        // ValueEnum enumerates the values for value enum.
    type ValueEnum string

    const (
                // Idle ...
        Idle ValueEnum = "Idle"
                // Off ...
        Off ValueEnum = "Off"
                // Running ...
        Running ValueEnum = "Running"
            )
    // PossibleValueEnumValues returns an array of possible values for the ValueEnum const type.
    func PossibleValueEnumValues() []ValueEnum {
        return []ValueEnum{Idle,Off,Running}
    }

            // AddressesAddressesItemType ...
            type AddressesAddressesItemType struct {
            ContactIds *[]float64 `json:"contactIds,omitempty"`
            // FormattedAddress - The full address associated with this address/geofence, as it might be recognized by maps.google.com
            FormattedAddress *string `json:"formattedAddress,omitempty"`
            Geofence *AddressGeofenceType `json:"geofence,omitempty"`
            // Name - The name of this address/geofence
            Name *string `json:"name,omitempty"`
            Notes *string `json:"notes,omitempty"`
            TagIds *[]float64 `json:"tagIds,omitempty"`
            }

            // AddressesType ...
            type AddressesType struct {
            Addresses *[]AddressesAddressesItemType `json:"addresses,omitempty"`
            }

            // AddressGeofenceCircleType information about a circular geofence. This field is only populated if the
            // geofence is a circle.
            type AddressGeofenceCircleType struct {
            // Latitude - The latitude of the center of the circular geofence
            Latitude *float64 `json:"latitude,omitempty"`
            // Longitude - The longitude of the center of the circular geofence
            Longitude *float64 `json:"longitude,omitempty"`
            // RadiusMeters - The radius of the circular geofence
            RadiusMeters *float64 `json:"radiusMeters,omitempty"`
            }

            // AddressGeofencePolygonType information about a polygon geofence. This field is only populated if the
            // geofence is a polygon.
            type AddressGeofencePolygonType struct {
            // Vertices - The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.
            Vertices *[]AddressGeofencePolygonVerticesItemType `json:"vertices,omitempty"`
            }

            // AddressGeofencePolygonVerticesItemType ...
            type AddressGeofencePolygonVerticesItemType struct {
            // Latitude - The longitude of a geofence vertex
            Latitude *float64 `json:"latitude,omitempty"`
            // Longitude - The longitude of a geofence vertex
            Longitude *float64 `json:"longitude,omitempty"`
            }

            // AddressGeofenceType the geofence that defines this address and its bounds. This can either be a circle,
            // or a polygon - only one key should be provided, depending on the geofence type.
            type AddressGeofenceType struct {
            // Circle - Information about a circular geofence. This field is only populated if the geofence is a circle.
            Circle *AddressGeofenceCircleType `json:"circle,omitempty"`
            // Polygon - Information about a polygon geofence. This field is only populated if the geofence is a polygon.
            Polygon *AddressGeofencePolygonType `json:"polygon,omitempty"`
            }

            // AddressModelType ...
            type AddressModelType struct {
            ContactIds *[]float64 `json:"contactIds,omitempty"`
            // FormattedAddress - The full address associated with this address/geofence, as it might be recognized by maps.google.com
            FormattedAddress *string `json:"formattedAddress,omitempty"`
            Geofence *AddressGeofenceType `json:"geofence,omitempty"`
            // Name - The name of this address/geofence
            Name *string `json:"name,omitempty"`
            Notes *string `json:"notes,omitempty"`
            TagIds *[]float64 `json:"tagIds,omitempty"`
            }

            // AddressParamType ...
            type AddressParamType struct {
            // Address - The address of the entry to add, as it would be recognized if provided to maps.google.com.
            Address *string `json:"address,omitempty"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            // Name - Name of the location to add to the address book.
            Name *string `json:"name,omitempty"`
            // Radius - Radius in meters of the address (used for matching vehicle trip stops to this location).
            Radius *int32 `json:"radius,omitempty"`
            }

            // AddressType information about an address/geofence. Geofences are either a circle or a polygon.
            type AddressType struct {
            autorest.Response `json:"-"`
            Contacts *[]ContactType `json:"contacts,omitempty"`
            // FormattedAddress - The full address associated with this address/geofence, as it might be recognized by maps.google.com
            FormattedAddress *string `json:"formattedAddress,omitempty"`
            Geofence *AddressGeofenceType `json:"geofence,omitempty"`
            // ID - ID of the address
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the address or geofence
            Name *string `json:"name,omitempty"`
            Notes *string `json:"notes,omitempty"`
            Tags *[]TagMetadataType `json:"tags,omitempty"`
            }

            // AllRouteJobUpdatesType ...
            type AllRouteJobUpdatesType struct {
            autorest.Response `json:"-"`
            JobUpdates *[]JobUpdateObjectType `json:"job_updates,omitempty"`
            // SequenceID - Sequence ID of the last update returned in the response
            SequenceID *string `json:"sequence_id,omitempty"`
            }

            // AssetCableItemType ...
            type AssetCableItemType struct {
            // AssetType - Asset type
            AssetType *string `json:"assetType,omitempty"`
            }

            // AssetCurrentLocationsResponseCableItemType ...
            type AssetCurrentLocationsResponseCableItemType struct {
            // AssetType - Asset type
            AssetType *string `json:"assetType,omitempty"`
            }

            // AssetCurrentLocationsResponseType basic information of an asset
            type AssetCurrentLocationsResponseType struct {
            // Cable - The cable connected to the asset
            Cable *[]AssetCurrentLocationsResponseCableItemType `json:"cable,omitempty"`
            // EngineHours - Engine hours
            EngineHours *int32 `json:"engineHours,omitempty"`
            // ID - Asset ID
            ID *int64 `json:"id,omitempty"`
            // Location - Current location of an asset
            Location *[]AssetCurrentLocationType `json:"location,omitempty"`
            // Name - Asset name
            Name *string `json:"name,omitempty"`
            }

            // AssetCurrentLocationType current location of an asset
            type AssetCurrentLocationType struct {
            // Latitude - The latitude of the location in degrees.
            Latitude *float64 `json:"latitude,omitempty"`
            // Location - The best effort (street,city,state) for the latitude and longitude.
            Location *string `json:"location,omitempty"`
            // Longitude - The longitude of the location in degrees.
            Longitude *float64 `json:"longitude,omitempty"`
            // SpeedMilesPerHour - The speed calculated from GPS that the asset was traveling at in miles per hour.
            SpeedMilesPerHour *float64 `json:"speedMilesPerHour,omitempty"`
            // TimeMs - Time in Unix milliseconds since epoch when the asset was at the location.
            TimeMs *float64 `json:"timeMs,omitempty"`
            }

            // AssetLocationResponseItemType asset location details.
            type AssetLocationResponseItemType struct {
            // Latitude - The latitude of the location in degrees.
            Latitude *float64 `json:"latitude,omitempty"`
            // Location - The best effort (street,city,state) for the latitude and longitude.
            Location *string `json:"location,omitempty"`
            // Longitude - The longitude of the location in degrees.
            Longitude *float64 `json:"longitude,omitempty"`
            // SpeedMilesPerHour - The speed calculated from GPS that the asset was traveling at in miles per hour.
            SpeedMilesPerHour *float64 `json:"speedMilesPerHour,omitempty"`
            // Time - Time in Unix milliseconds since epoch when the asset was at the location.
            Time *float64 `json:"time,omitempty"`
            }

            // AssetReeferResponseReeferStatsAlarmsItemAlarmsItemType ...
            type AssetReeferResponseReeferStatsAlarmsItemAlarmsItemType struct {
            // AlarmCode - ID of the alarm
            AlarmCode *int64 `json:"alarmCode,omitempty"`
            // Description - Description of the alarm
            Description *string `json:"description,omitempty"`
            // OperatorAction - Recommended operator action
            OperatorAction *string `json:"operatorAction,omitempty"`
            // Severity - Severity of the alarm: 1: OK to run, 2: Check as specified, 3: Take immediate action
            Severity *int64 `json:"severity,omitempty"`
            }

            // AssetReeferResponseReeferStatsAlarmsItemType ...
            type AssetReeferResponseReeferStatsAlarmsItemType struct {
            Alarms *[]AssetReeferResponseReeferStatsAlarmsItemAlarmsItemType `json:"alarms,omitempty"`
            // ChangedAtMs - Timestamp when the alarms were reported, in Unix milliseconds since epoch
            ChangedAtMs *int64 `json:"changedAtMs,omitempty"`
            }

            // AssetReeferResponseReeferStatsEngineHoursItemType ...
            type AssetReeferResponseReeferStatsEngineHoursItemType struct {
            // ChangedAtMs - Timestamp in Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changedAtMs,omitempty"`
            // EngineHours - Engine hours of the reefer.
            EngineHours *int64 `json:"engineHours,omitempty"`
            }

            // AssetReeferResponseReeferStatsFuelPercentageItemType ...
            type AssetReeferResponseReeferStatsFuelPercentageItemType struct {
            // ChangedAtMs - Timestamp in Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changedAtMs,omitempty"`
            // FuelPercentage - Fuel percentage of the reefer.
            FuelPercentage *int64 `json:"fuelPercentage,omitempty"`
            }

            // AssetReeferResponseReeferStatsPowerStatusItemType ...
            type AssetReeferResponseReeferStatsPowerStatusItemType struct {
            // ChangedAtMs - Timestamp in Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changedAtMs,omitempty"`
            // Status - Power status of the reefer.
            Status *string `json:"status,omitempty"`
            }

            // AssetReeferResponseReeferStatsReturnAirTempItemType ...
            type AssetReeferResponseReeferStatsReturnAirTempItemType struct {
            // ChangedAtMs - Timestamp in Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changedAtMs,omitempty"`
            // TempInMilliC - Return air temperature in millidegree Celsius.
            TempInMilliC *int64 `json:"tempInMilliC,omitempty"`
            }

            // AssetReeferResponseReeferStatsSetPointItemType ...
            type AssetReeferResponseReeferStatsSetPointItemType struct {
            // ChangedAtMs - Timestamp in Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changedAtMs,omitempty"`
            // TempInMilliC - Set point temperature in millidegree Celsius.
            TempInMilliC *int64 `json:"tempInMilliC,omitempty"`
            }

            // AssetReeferResponseReeferStatsType ...
            type AssetReeferResponseReeferStatsType struct {
            // Alarms - Reefer alarms
            Alarms *[]AssetReeferResponseReeferStatsAlarmsItemType `json:"alarms,omitempty"`
            // EngineHours - Engine hours of the reefer
            EngineHours *[]AssetReeferResponseReeferStatsEngineHoursItemType `json:"engineHours,omitempty"`
            // FuelPercentage - Fuel percentage of the reefer
            FuelPercentage *[]AssetReeferResponseReeferStatsFuelPercentageItemType `json:"fuelPercentage,omitempty"`
            // PowerStatus - Power status of the reefer
            PowerStatus *[]AssetReeferResponseReeferStatsPowerStatusItemType `json:"powerStatus,omitempty"`
            // ReturnAirTemp - Return air temperature of the reefer
            ReturnAirTemp *[]AssetReeferResponseReeferStatsReturnAirTempItemType `json:"returnAirTemp,omitempty"`
            // SetPoint - Set point temperature of the reefer
            SetPoint *[]AssetReeferResponseReeferStatsSetPointItemType `json:"setPoint,omitempty"`
            }

            // AssetReeferResponseType reefer-specific asset details
            type AssetReeferResponseType struct {
            autorest.Response `json:"-"`
            // AssetType - Asset type
            AssetType *string `json:"assetType,omitempty"`
            // ID - Asset ID
            ID *int32 `json:"id,omitempty"`
            // Name - Asset name
            Name *string `json:"name,omitempty"`
            ReeferStats *AssetReeferResponseReeferStatsType `json:"reeferStats,omitempty"`
            }

            // AssetType basic information of an asset
            type AssetType struct {
            // AssetSerialNumber - Serial number of the host asset
            AssetSerialNumber *string `json:"assetSerialNumber,omitempty"`
            // Cable - The cable connected to the asset
            Cable *[]AssetCableItemType `json:"cable,omitempty"`
            // EngineHours - Engine hours
            EngineHours *int32 `json:"engineHours,omitempty"`
            // ID - Asset ID
            ID *int64 `json:"id,omitempty"`
            // Name - Asset name
            Name *string `json:"name,omitempty"`
            }

            // AuxInputSeriesType a list of aux input values over a timerange.
            type AuxInputSeriesType struct {
            // Name - The name of the aux input. Possible values include: 'EmergencyLights', 'EmergencyAlarm', 'StopPaddle', 'PowerTakeOff', 'Plow', 'Sweeper', 'Salter', 'Boom'
            Name NameEnum `json:"name,omitempty"`
            Values *[]AuxInputType `json:"values,omitempty"`
            }

            // AuxInputType digital value of an aux input.
            type AuxInputType struct {
            // TimeMs - Timestamp in Unix epoch milliseconds.
            TimeMs *float64 `json:"timeMs,omitempty"`
            // Value - Boolean representing the digital value of the aux input.
            Value *bool `json:"value,omitempty"`
            }

            // BodyModelModelType ...
            type BodyModelModelType struct {
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            // Sensors - List of sensor IDs to query.
            Sensors *[]int64 `json:"sensors,omitempty"`
            }

            // BodyModelType ...
            type BodyModelType struct {
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            }

            // BodyType ...
            type BodyType struct {
            // DriverID - Driver ID to query.
            DriverID *int64 `json:"driverId,omitempty"`
            // EndMs - End of the time range, specified in milliseconds UNIX time.
            EndMs *int32 `json:"endMs,omitempty"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            // StartMs - Beginning of the time range, specified in milliseconds UNIX time.
            StartMs *int32 `json:"startMs,omitempty"`
            }

            // CargoResponseSensorsItemType ...
            type CargoResponseSensorsItemType struct {
            // CargoEmpty - Flag indicating whether the current cargo is empty or loaded.
            CargoEmpty *bool `json:"cargoEmpty,omitempty"`
            // ID - ID of the sensor.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the sensor.
            Name *string `json:"name,omitempty"`
            }

            // CargoResponseType contains the current cargo status of a sensor.
            type CargoResponseType struct {
            autorest.Response `json:"-"`
            GroupID *int64 `json:"groupId,omitempty"`
            Sensors *[]CargoResponseSensorsItemType `json:"sensors,omitempty"`
            }

            // ContactType information about a notification contact for alerts.
            type ContactType struct {
            autorest.Response `json:"-"`
            // Email - Email address of the contact
            Email *string `json:"email,omitempty"`
            // FirstName - First name of the contact
            FirstName *string `json:"firstName,omitempty"`
            // ID - ID of the contact
            ID *int64 `json:"id,omitempty"`
            // LastName - Last name of the contact
            LastName *string `json:"lastName,omitempty"`
            // Phone - Phone number of the contact
            Phone *string `json:"phone,omitempty"`
            }

            // CreateDvirParamType ...
            type CreateDvirParamType struct {
            // InspectionType - Only type 'mechanic' is currently accepted.
            InspectionType *string `json:"inspectionType,omitempty"`
            // MechanicNotes - Any notes from the mechanic.
            MechanicNotes *string `json:"mechanicNotes,omitempty"`
            // OdometerMiles - The current odometer of the vehicle.
            OdometerMiles *int32 `json:"odometerMiles,omitempty"`
            // PreviousDefectsCorrected - Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
            PreviousDefectsCorrected *bool `json:"previousDefectsCorrected,omitempty"`
            // PreviousDefectsIgnored - Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
            PreviousDefectsIgnored *bool `json:"previousDefectsIgnored,omitempty"`
            // Safe - Whether or not this vehicle or trailer is safe to drive. Possible values include: 'Safe', 'Unsafe'
            Safe SafeEnum `json:"safe,omitempty"`
            // TrailerID - Id of trailer being inspected. Either vehicleId or trailerId must be provided.
            TrailerID *int32 `json:"trailerId,omitempty"`
            // UserEmail - The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
            UserEmail *string `json:"userEmail,omitempty"`
            // VehicleID - Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
            VehicleID *int32 `json:"vehicleId,omitempty"`
            }

            // CurrentDriverType ...
            type CurrentDriverType struct {
            autorest.Response `json:"-"`
            // ID - ID of the driver.
            ID *int64 `json:"id,omitempty"`
            // IsDeactivated - True if the driver account has been deactivated.
            IsDeactivated *bool `json:"isDeactivated,omitempty"`
            Tags *[]TagMetadataType `json:"tags,omitempty"`
            // CurrentVehicleID - ID of the vehicle that this driver is currently assigned to. Omitted if there is no current vehicle assignment for this driver.
            CurrentVehicleID *int64 `json:"currentVehicleId,omitempty"`
            // EldAdverseWeatherExemptionEnabled - Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
            EldAdverseWeatherExemptionEnabled *bool `json:"eldAdverseWeatherExemptionEnabled,omitempty"`
            // EldBigDayExemptionEnabled - Flag indicating this driver may use Big Day excemptions in ELD logs.
            EldBigDayExemptionEnabled *bool `json:"eldBigDayExemptionEnabled,omitempty"`
            // EldDayStartHour - 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
            EldDayStartHour *int32 `json:"eldDayStartHour,omitempty"`
            // EldExempt - Flag indicating this driver is exempt from the Electronic Logging Mandate.
            EldExempt *bool `json:"eldExempt,omitempty"`
            // EldExemptReason - Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
            EldExemptReason *string `json:"eldExemptReason,omitempty"`
            // EldPcEnabled - Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
            EldPcEnabled *bool `json:"eldPcEnabled,omitempty"`
            // EldYmEnabled - Flag indicating this driver may select the Yard Move duty status in ELD logs.
            EldYmEnabled *bool `json:"eldYmEnabled,omitempty"`
            // ExternalIds - Dictionary of external IDs (string key-value pairs)
            ExternalIds map[string]*string `json:"externalIds"`
            // GroupID - ID of the group if the organization has multiple groups (uncommon).
            GroupID *int64 `json:"groupId,omitempty"`
            // LicenseNumber - Driver's state issued license number.
            LicenseNumber *string `json:"licenseNumber,omitempty"`
            // LicenseState - Abbreviation of state that issued driver's license.
            LicenseState *string `json:"licenseState,omitempty"`
            // Name - Driver's name.
            Name *string `json:"name,omitempty"`
            // Notes - Notes about the driver.
            Notes *string `json:"notes,omitempty"`
            // Phone - Driver's phone number. Please include only digits, ex. 4157771234
            Phone *string `json:"phone,omitempty"`
            // Username - Driver's login username into the driver app.
            Username *string `json:"username,omitempty"`
            // VehicleID - ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
            VehicleID *int64 `json:"vehicleId,omitempty"`
            }

        // MarshalJSON is the custom marshaler for CurrentDriverType.
        func (cdt CurrentDriverType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(cdt.ID != nil) {
                objectMap["id"] = cdt.ID
                }
                if(cdt.IsDeactivated != nil) {
                objectMap["isDeactivated"] = cdt.IsDeactivated
                }
                if(cdt.Tags != nil) {
                objectMap["tags"] = cdt.Tags
                }
                if(cdt.CurrentVehicleID != nil) {
                objectMap["currentVehicleId"] = cdt.CurrentVehicleID
                }
                if(cdt.EldAdverseWeatherExemptionEnabled != nil) {
                objectMap["eldAdverseWeatherExemptionEnabled"] = cdt.EldAdverseWeatherExemptionEnabled
                }
                if(cdt.EldBigDayExemptionEnabled != nil) {
                objectMap["eldBigDayExemptionEnabled"] = cdt.EldBigDayExemptionEnabled
                }
                if(cdt.EldDayStartHour != nil) {
                objectMap["eldDayStartHour"] = cdt.EldDayStartHour
                }
                if(cdt.EldExempt != nil) {
                objectMap["eldExempt"] = cdt.EldExempt
                }
                if(cdt.EldExemptReason != nil) {
                objectMap["eldExemptReason"] = cdt.EldExemptReason
                }
                if(cdt.EldPcEnabled != nil) {
                objectMap["eldPcEnabled"] = cdt.EldPcEnabled
                }
                if(cdt.EldYmEnabled != nil) {
                objectMap["eldYmEnabled"] = cdt.EldYmEnabled
                }
                if(cdt.ExternalIds != nil) {
                objectMap["externalIds"] = cdt.ExternalIds
                }
                if(cdt.GroupID != nil) {
                objectMap["groupId"] = cdt.GroupID
                }
                if(cdt.LicenseNumber != nil) {
                objectMap["licenseNumber"] = cdt.LicenseNumber
                }
                if(cdt.LicenseState != nil) {
                objectMap["licenseState"] = cdt.LicenseState
                }
                if(cdt.Name != nil) {
                objectMap["name"] = cdt.Name
                }
                if(cdt.Notes != nil) {
                objectMap["notes"] = cdt.Notes
                }
                if(cdt.Phone != nil) {
                objectMap["phone"] = cdt.Phone
                }
                if(cdt.Username != nil) {
                objectMap["username"] = cdt.Username
                }
                if(cdt.VehicleID != nil) {
                objectMap["vehicleId"] = cdt.VehicleID
                }
                return json.Marshal(objectMap)
        }

            // DataInputHistoryResponsePointsItemType ...
            type DataInputHistoryResponsePointsItemType struct {
            TimeMs *int64 `json:"timeMs,omitempty"`
            Value *float64 `json:"value,omitempty"`
            }

            // DataInputHistoryResponseType ...
            type DataInputHistoryResponseType struct {
            autorest.Response `json:"-"`
            // ID - The ID of this data input
            ID *int64 `json:"id,omitempty"`
            // Name - Name of this data input
            Name *string `json:"name,omitempty"`
            // Points - Data points from this data input
            Points *[]DataInputHistoryResponsePointsItemType `json:"points,omitempty"`
            }

            // DataType ...
            type DataType struct {
            ExternalIds map[string]*string `json:"externalIds"`
            // HarshAccelSetting - Harsh Event Detection Setting
            // * 0: Passenger
            // * 1: Light Truck
            // * 2: Heavy
            // * 3: Off
            // * 4: Automatic
            HarshAccelSetting *int32 `json:"harsh_accel_setting,omitempty"`
            // Name - Name
            Name *string `json:"name,omitempty"`
            }

        // MarshalJSON is the custom marshaler for DataType.
        func (dt DataType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(dt.ExternalIds != nil) {
                objectMap["externalIds"] = dt.ExternalIds
                }
                if(dt.HarshAccelSetting != nil) {
                objectMap["harsh_accel_setting"] = dt.HarshAccelSetting
                }
                if(dt.Name != nil) {
                objectMap["name"] = dt.Name
                }
                return json.Marshal(objectMap)
        }

            // DispatchJobCreateType ...
            type DispatchJobCreateType struct {
            // DestinationAddress - The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
            DestinationAddress *string `json:"destination_address,omitempty"`
            // DestinationAddressID - ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
            DestinationAddressID *int64 `json:"destination_address_id,omitempty"`
            // DestinationLat - Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
            DestinationLat *float64 `json:"destination_lat,omitempty"`
            // DestinationLng - Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
            DestinationLng *float64 `json:"destination_lng,omitempty"`
            // DestinationName - The name of the job destination. If provided, it will take precedence over the name of the address book entry.
            DestinationName *string `json:"destination_name,omitempty"`
            // Notes - Notes regarding the details of this job.
            Notes *string `json:"notes,omitempty"`
            // ScheduledArrivalTimeMs - The time at which the assigned driver is scheduled to arrive at the job destination.
            ScheduledArrivalTimeMs *int64 `json:"scheduled_arrival_time_ms,omitempty"`
            // ScheduledDepartureTimeMs - The time at which the assigned driver is scheduled to depart from the job destination.
            ScheduledDepartureTimeMs *int64 `json:"scheduled_departure_time_ms,omitempty"`
            }

            // DispatchJobType ...
            type DispatchJobType struct {
            // ArrivedAtMs - The time at which the driver arrived at the job destination.
            ArrivedAtMs *int64 `json:"arrived_at_ms,omitempty"`
            // CompletedAtMs - The time at which the job was marked complete (e.g. started driving to the next destination).
            CompletedAtMs *int64 `json:"completed_at_ms,omitempty"`
            // DispatchRouteID - ID of the route that this job belongs to.
            DispatchRouteID *int64 `json:"dispatch_route_id,omitempty"`
            // DriverID - ID of the driver assigned to the dispatch job.
            DriverID *int64 `json:"driver_id,omitempty"`
            // EnRouteAtMs - The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
            EnRouteAtMs *int64 `json:"en_route_at_ms,omitempty"`
            // EstimatedArrivalMs - The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.
            EstimatedArrivalMs *int64 `json:"estimated_arrival_ms,omitempty"`
            // FleetViewerURL - Fleet viewer url of the dispatch job.
            FleetViewerURL *string `json:"fleet_viewer_url,omitempty"`
            GroupID *int64 `json:"group_id,omitempty"`
            // ID - ID of the Samsara dispatch job.
            ID *int64 `json:"id,omitempty"`
            // JobState - Possible values include: 'JobStateEnumJobStateUnassigned', 'JobStateEnumJobStateScheduled', 'JobStateEnumJobStateEnRoute', 'JobStateEnumJobStateArrived', 'JobStateEnumJobStateCompleted', 'JobStateEnumJobStateSkipped'
            JobState JobStateEnum `json:"job_state,omitempty"`
            // SkippedAtMs - The time at which the job was marked skipped.
            SkippedAtMs *int64 `json:"skipped_at_ms,omitempty"`
            // VehicleID - ID of the vehicle used for the dispatch job.
            VehicleID *int64 `json:"vehicle_id,omitempty"`
            // DestinationAddress - The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
            DestinationAddress *string `json:"destination_address,omitempty"`
            // DestinationAddressID - ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address or latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
            DestinationAddressID *int64 `json:"destination_address_id,omitempty"`
            // DestinationLat - Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
            DestinationLat *float64 `json:"destination_lat,omitempty"`
            // DestinationLng - Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
            DestinationLng *float64 `json:"destination_lng,omitempty"`
            // DestinationName - The name of the job destination. If provided, it will take precedence over the name of the address book entry.
            DestinationName *string `json:"destination_name,omitempty"`
            // Notes - Notes regarding the details of this job.
            Notes *string `json:"notes,omitempty"`
            // ScheduledArrivalTimeMs - The time at which the assigned driver is scheduled to arrive at the job destination.
            ScheduledArrivalTimeMs *int64 `json:"scheduled_arrival_time_ms,omitempty"`
            // ScheduledDepartureTimeMs - The time at which the assigned driver is scheduled to depart from the job destination.
            ScheduledDepartureTimeMs *int64 `json:"scheduled_departure_time_ms,omitempty"`
            }

            // DispatchRouteBaseType ...
            type DispatchRouteBaseType struct {
            // ActualEndMs - The time in Unix epoch milliseconds that the route actually ended.
            ActualEndMs *int64 `json:"actual_end_ms,omitempty"`
            // ActualStartMs - The time in Unix epoch milliseconds that the route actually started.
            ActualStartMs *int64 `json:"actual_start_ms,omitempty"`
            // DriverID - ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
            DriverID *int64 `json:"driver_id,omitempty"`
            // GroupID - ID of the group if the organization has multiple groups (optional).
            GroupID *int64 `json:"group_id,omitempty"`
            // Name - Descriptive name of this route.
            Name *string `json:"name,omitempty"`
            // ScheduledEndMs - The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
            ScheduledEndMs *int64 `json:"scheduled_end_ms,omitempty"`
            // ScheduledMeters - The distance expected to be traveled for this route in meters.
            ScheduledMeters *int64 `json:"scheduled_meters,omitempty"`
            // ScheduledStartMs - The time in Unix epoch milliseconds that the route is scheduled to start.
            ScheduledStartMs *int64 `json:"scheduled_start_ms,omitempty"`
            // StartLocationAddress - The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
            StartLocationAddress *string `json:"start_location_address,omitempty"`
            // StartLocationAddressID - ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
            StartLocationAddressID *int64 `json:"start_location_address_id,omitempty"`
            // StartLocationLat - Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
            StartLocationLat *float64 `json:"start_location_lat,omitempty"`
            // StartLocationLng - Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
            StartLocationLng *float64 `json:"start_location_lng,omitempty"`
            // StartLocationName - The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
            StartLocationName *string `json:"start_location_name,omitempty"`
            // TrailerID - ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
            TrailerID *int64 `json:"trailer_id,omitempty"`
            // VehicleID - ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
            VehicleID *int64 `json:"vehicle_id,omitempty"`
            }

            // DispatchRouteCreateType ...
            type DispatchRouteCreateType struct {
            // DispatchJobs - The dispatch jobs to create for this route.
            DispatchJobs *[]DispatchJobCreateType `json:"dispatch_jobs,omitempty"`
            // ActualEndMs - The time in Unix epoch milliseconds that the route actually ended.
            ActualEndMs *int64 `json:"actual_end_ms,omitempty"`
            // ActualStartMs - The time in Unix epoch milliseconds that the route actually started.
            ActualStartMs *int64 `json:"actual_start_ms,omitempty"`
            // DriverID - ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
            DriverID *int64 `json:"driver_id,omitempty"`
            // GroupID - ID of the group if the organization has multiple groups (optional).
            GroupID *int64 `json:"group_id,omitempty"`
            // Name - Descriptive name of this route.
            Name *string `json:"name,omitempty"`
            // ScheduledEndMs - The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
            ScheduledEndMs *int64 `json:"scheduled_end_ms,omitempty"`
            // ScheduledMeters - The distance expected to be traveled for this route in meters.
            ScheduledMeters *int64 `json:"scheduled_meters,omitempty"`
            // ScheduledStartMs - The time in Unix epoch milliseconds that the route is scheduled to start.
            ScheduledStartMs *int64 `json:"scheduled_start_ms,omitempty"`
            // StartLocationAddress - The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
            StartLocationAddress *string `json:"start_location_address,omitempty"`
            // StartLocationAddressID - ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
            StartLocationAddressID *int64 `json:"start_location_address_id,omitempty"`
            // StartLocationLat - Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
            StartLocationLat *float64 `json:"start_location_lat,omitempty"`
            // StartLocationLng - Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
            StartLocationLng *float64 `json:"start_location_lng,omitempty"`
            // StartLocationName - The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
            StartLocationName *string `json:"start_location_name,omitempty"`
            // TrailerID - ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
            TrailerID *int64 `json:"trailer_id,omitempty"`
            // VehicleID - ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
            VehicleID *int64 `json:"vehicle_id,omitempty"`
            }

            // DispatchRouteHistoricalEntryType ...
            type DispatchRouteHistoricalEntryType struct {
            // ChangedAtMs - Timestamp that the route was updated, represented as Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changed_at_ms,omitempty"`
            Route *DispatchRouteType `json:"route,omitempty"`
            }

            // DispatchRouteHistoryType ...
            type DispatchRouteHistoryType struct {
            autorest.Response `json:"-"`
            // History - History of the route's state changes.
            History *[]DispatchRouteHistoricalEntryType `json:"history,omitempty"`
            }

            // DispatchRouteType ...
            type DispatchRouteType struct {
            autorest.Response `json:"-"`
            // DispatchJobs - The dispatch jobs associated with this route.
            DispatchJobs *[]DispatchJobType `json:"dispatch_jobs,omitempty"`
            // ID - ID of the Samsara dispatch route.
            ID *int64 `json:"id,omitempty"`
            // ActualEndMs - The time in Unix epoch milliseconds that the route actually ended.
            ActualEndMs *int64 `json:"actual_end_ms,omitempty"`
            // ActualStartMs - The time in Unix epoch milliseconds that the route actually started.
            ActualStartMs *int64 `json:"actual_start_ms,omitempty"`
            // DriverID - ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
            DriverID *int64 `json:"driver_id,omitempty"`
            // GroupID - ID of the group if the organization has multiple groups (optional).
            GroupID *int64 `json:"group_id,omitempty"`
            // Name - Descriptive name of this route.
            Name *string `json:"name,omitempty"`
            // ScheduledEndMs - The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
            ScheduledEndMs *int64 `json:"scheduled_end_ms,omitempty"`
            // ScheduledMeters - The distance expected to be traveled for this route in meters.
            ScheduledMeters *int64 `json:"scheduled_meters,omitempty"`
            // ScheduledStartMs - The time in Unix epoch milliseconds that the route is scheduled to start.
            ScheduledStartMs *int64 `json:"scheduled_start_ms,omitempty"`
            // StartLocationAddress - The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
            StartLocationAddress *string `json:"start_location_address,omitempty"`
            // StartLocationAddressID - ID of the start location associated with an address book entry. Optional if valid values are provided for start location address or latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
            StartLocationAddressID *int64 `json:"start_location_address_id,omitempty"`
            // StartLocationLat - Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
            StartLocationLat *float64 `json:"start_location_lat,omitempty"`
            // StartLocationLng - Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
            StartLocationLng *float64 `json:"start_location_lng,omitempty"`
            // StartLocationName - The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
            StartLocationName *string `json:"start_location_name,omitempty"`
            // TrailerID - ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
            TrailerID *int64 `json:"trailer_id,omitempty"`
            // VehicleID - ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
            VehicleID *int64 `json:"vehicle_id,omitempty"`
            }

            // DocumentBaseType ...
            type DocumentBaseType struct {
            // DispatchJobID - ID of the Samsara dispatch job for which the document is submitted
            DispatchJobID *int64 `json:"dispatchJobId,omitempty"`
            // Notes - Notes submitted with this document.
            Notes *string `json:"notes,omitempty"`
            }

            // DocumentCreateType ...
            type DocumentCreateType struct {
            // DocumentTypeUUID - Universally unique identifier for the document type this document is being created for.
            DocumentTypeUUID *string `json:"documentTypeUuid,omitempty"`
            // Fields - List of fields should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.
            Fields *[]DocumentFieldType `json:"fields,omitempty"`
            // DispatchJobID - ID of the Samsara dispatch job for which the document is submitted
            DispatchJobID *int64 `json:"dispatchJobId,omitempty"`
            // Notes - Notes submitted with this document.
            Notes *string `json:"notes,omitempty"`
            }

            // DocumentFieldCreatePhotoValueItemType ...
            type DocumentFieldCreatePhotoValueItemType struct {
            // URL - Photo URL for a JPG image
            URL *string `json:"url,omitempty"`
            }

            // DocumentFieldCreateType ...
            type DocumentFieldCreateType struct {
            // NumberValue - Value of this field if this document field has valueType: ValueType_Number.
            NumberValue *float64 `json:"numberValue,omitempty"`
            // PhotoValue - Value of this field if this document field has valueType: ValueType_Photo. Array of photo objects where each object contains a URL for a photo.
            PhotoValue *[]DocumentFieldCreatePhotoValueItemType `json:"photoValue,omitempty"`
            // StringValue - Value of this field if this document field has valueType: ValueType_String.
            StringValue *string `json:"stringValue,omitempty"`
            // ValueType - Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
            ValueType *string `json:"valueType,omitempty"`
            }

            // DocumentFieldType ...
            type DocumentFieldType struct {
            // Label - Descriptive name of this field.
            Label *string `json:"label,omitempty"`
            // Value - DEPRECATED: Please use stringValue, numberValue, or photoValue instead. Value of this field. Depending on what kind of field it is, this may be one of the following: an array of image urls, a float, an integer, or a string.
            Value interface{} `json:"value,omitempty"`
            // NumberValue - Value of this field if this document field has valueType: ValueType_Number.
            NumberValue *float64 `json:"numberValue,omitempty"`
            // PhotoValue - Value of this field if this document field has valueType: ValueType_Photo. Array of photo objects where each object contains a URL for a photo.
            PhotoValue *[]DocumentFieldCreatePhotoValueItemType `json:"photoValue,omitempty"`
            // StringValue - Value of this field if this document field has valueType: ValueType_String.
            StringValue *string `json:"stringValue,omitempty"`
            // ValueType - Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
            ValueType *string `json:"valueType,omitempty"`
            }

            // DocumentFieldTypeNumberValueTypeMetadataType additional metadata information for a number field type.
            // Only defined when a field type has valueType: ValueType_Number.
            type DocumentFieldTypeNumberValueTypeMetadataType struct {
            // NumDecimalPlaces - Number of decimal places that values for this field type can have.
            NumDecimalPlaces *float64 `json:"numDecimalPlaces,omitempty"`
            }

            // DocumentFieldTypeType ...
            type DocumentFieldTypeType struct {
            // Label - Descriptive name of this field type.
            Label *string `json:"label,omitempty"`
            // NumberValueTypeMetadata - Additional metadata information for a number field type. Only defined when a field type has valueType: ValueType_Number.
            NumberValueTypeMetadata *DocumentFieldTypeNumberValueTypeMetadataType `json:"numberValueTypeMetadata,omitempty"`
            // ValueType - The kind of value that can be submitted for this fieldType. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.
            ValueType *string `json:"valueType,omitempty"`
            }

            // DocumentType ...
            type DocumentType struct {
            autorest.Response `json:"-"`
            // DocumentType - Descriptive name of this type of document.
            DocumentType *string `json:"documentType,omitempty"`
            // DriverCreatedAtMs - The time in Unix epoch milliseconds that the document is created.
            DriverCreatedAtMs *int64 `json:"driverCreatedAtMs,omitempty"`
            // DriverID - ID of the driver for whom the document is submitted
            DriverID *int64 `json:"driverId,omitempty"`
            // Fields - The fields associated with this document.
            Fields *[]DocumentFieldType `json:"fields,omitempty"`
            // VehicleID - VehicleID of the driver at document creation.
            VehicleID *int64 `json:"vehicleId,omitempty"`
            // DispatchJobID - ID of the Samsara dispatch job for which the document is submitted
            DispatchJobID *int64 `json:"dispatchJobId,omitempty"`
            // Notes - Notes submitted with this document.
            Notes *string `json:"notes,omitempty"`
            }

            // DocumentTypeType ...
            type DocumentTypeType struct {
            // FieldTypes - The field types determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.
            FieldTypes *[][]DocumentFieldTypeType `json:"fieldTypes,omitempty"`
            // Name - Name of the document type.
            Name *string `json:"name,omitempty"`
            // OrgID - ID for the organization this document belongs to.
            OrgID *int64 `json:"orgId,omitempty"`
            // UUID - Universally unique identifier for the document type. Can be passed in as a documentTypeUuid when creating a document for this document type.
            UUID *string `json:"uuid,omitempty"`
            }

            // DoorResponseSensorsItemType ...
            type DoorResponseSensorsItemType struct {
            // DoorClosed - Flag indicating whether the current door is closed or open.
            DoorClosed *bool `json:"doorClosed,omitempty"`
            // ID - ID of the sensor.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the sensor.
            Name *string `json:"name,omitempty"`
            }

            // DoorResponseType contains the current door status of a sensor.
            type DoorResponseType struct {
            autorest.Response `json:"-"`
            GroupID *int64 `json:"groupId,omitempty"`
            Sensors *[]DoorResponseSensorsItemType `json:"sensors,omitempty"`
            }

            // DriverBaseType ...
            type DriverBaseType struct {
            // EldAdverseWeatherExemptionEnabled - Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
            EldAdverseWeatherExemptionEnabled *bool `json:"eldAdverseWeatherExemptionEnabled,omitempty"`
            // EldBigDayExemptionEnabled - Flag indicating this driver may use Big Day excemptions in ELD logs.
            EldBigDayExemptionEnabled *bool `json:"eldBigDayExemptionEnabled,omitempty"`
            // EldDayStartHour - 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
            EldDayStartHour *int32 `json:"eldDayStartHour,omitempty"`
            // EldExempt - Flag indicating this driver is exempt from the Electronic Logging Mandate.
            EldExempt *bool `json:"eldExempt,omitempty"`
            // EldExemptReason - Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
            EldExemptReason *string `json:"eldExemptReason,omitempty"`
            // EldPcEnabled - Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
            EldPcEnabled *bool `json:"eldPcEnabled,omitempty"`
            // EldYmEnabled - Flag indicating this driver may select the Yard Move duty status in ELD logs.
            EldYmEnabled *bool `json:"eldYmEnabled,omitempty"`
            // ExternalIds - Dictionary of external IDs (string key-value pairs)
            ExternalIds map[string]*string `json:"externalIds"`
            // GroupID - ID of the group if the organization has multiple groups (uncommon).
            GroupID *int64 `json:"groupId,omitempty"`
            // LicenseNumber - Driver's state issued license number.
            LicenseNumber *string `json:"licenseNumber,omitempty"`
            // LicenseState - Abbreviation of state that issued driver's license.
            LicenseState *string `json:"licenseState,omitempty"`
            // Name - Driver's name.
            Name *string `json:"name,omitempty"`
            // Notes - Notes about the driver.
            Notes *string `json:"notes,omitempty"`
            // Phone - Driver's phone number. Please include only digits, ex. 4157771234
            Phone *string `json:"phone,omitempty"`
            // Username - Driver's login username into the driver app.
            Username *string `json:"username,omitempty"`
            // VehicleID - ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
            VehicleID *int64 `json:"vehicleId,omitempty"`
            }

        // MarshalJSON is the custom marshaler for DriverBaseType.
        func (dbt DriverBaseType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(dbt.EldAdverseWeatherExemptionEnabled != nil) {
                objectMap["eldAdverseWeatherExemptionEnabled"] = dbt.EldAdverseWeatherExemptionEnabled
                }
                if(dbt.EldBigDayExemptionEnabled != nil) {
                objectMap["eldBigDayExemptionEnabled"] = dbt.EldBigDayExemptionEnabled
                }
                if(dbt.EldDayStartHour != nil) {
                objectMap["eldDayStartHour"] = dbt.EldDayStartHour
                }
                if(dbt.EldExempt != nil) {
                objectMap["eldExempt"] = dbt.EldExempt
                }
                if(dbt.EldExemptReason != nil) {
                objectMap["eldExemptReason"] = dbt.EldExemptReason
                }
                if(dbt.EldPcEnabled != nil) {
                objectMap["eldPcEnabled"] = dbt.EldPcEnabled
                }
                if(dbt.EldYmEnabled != nil) {
                objectMap["eldYmEnabled"] = dbt.EldYmEnabled
                }
                if(dbt.ExternalIds != nil) {
                objectMap["externalIds"] = dbt.ExternalIds
                }
                if(dbt.GroupID != nil) {
                objectMap["groupId"] = dbt.GroupID
                }
                if(dbt.LicenseNumber != nil) {
                objectMap["licenseNumber"] = dbt.LicenseNumber
                }
                if(dbt.LicenseState != nil) {
                objectMap["licenseState"] = dbt.LicenseState
                }
                if(dbt.Name != nil) {
                objectMap["name"] = dbt.Name
                }
                if(dbt.Notes != nil) {
                objectMap["notes"] = dbt.Notes
                }
                if(dbt.Phone != nil) {
                objectMap["phone"] = dbt.Phone
                }
                if(dbt.Username != nil) {
                objectMap["username"] = dbt.Username
                }
                if(dbt.VehicleID != nil) {
                objectMap["vehicleId"] = dbt.VehicleID
                }
                return json.Marshal(objectMap)
        }

            // DriverDailyLogResponseDaysItemType ...
            type DriverDailyLogResponseDaysItemType struct {
            // ActiveHours - Hours spent on duty or driving, rounded to two decimal places.
            ActiveHours *float64 `json:"activeHours,omitempty"`
            // ActiveMs - Milliseconds spent on duty or driving.
            ActiveMs *int64 `json:"activeMs,omitempty"`
            // Certified - Whether this HOS day chart was certified by the driver.
            Certified *bool `json:"certified,omitempty"`
            // CertifiedAtMs - Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.
            CertifiedAtMs *float64 `json:"certifiedAtMs,omitempty"`
            // DistanceMiles - Distance driven in miles, rounded to two decimal places.
            DistanceMiles *float64 `json:"distanceMiles,omitempty"`
            // EndMs - End of the HOS day, specified in milliseconds UNIX time.
            EndMs *int32 `json:"endMs,omitempty"`
            // StartMs - End of the HOS day, specified in milliseconds UNIX time.
            StartMs *int32 `json:"startMs,omitempty"`
            // TrailerIds - List of trailer ID's associated with the driver for the day.
            TrailerIds interface{} `json:"trailerIds,omitempty"`
            // VehicleIds - List of vehicle ID's associated with the driver for the day.
            VehicleIds interface{} `json:"vehicleIds,omitempty"`
            }

            // DriverDailyLogResponseType ...
            type DriverDailyLogResponseType struct {
            autorest.Response `json:"-"`
            Days *[]DriverDailyLogResponseDaysItemType `json:"days,omitempty"`
            }

            // DriverForCreateType ...
            type DriverForCreateType struct {
            // Password - Driver's password for the driver app.
            Password *string `json:"password,omitempty"`
            TagIds *[]float64 `json:"tagIds,omitempty"`
            // EldAdverseWeatherExemptionEnabled - Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
            EldAdverseWeatherExemptionEnabled *bool `json:"eldAdverseWeatherExemptionEnabled,omitempty"`
            // EldBigDayExemptionEnabled - Flag indicating this driver may use Big Day excemptions in ELD logs.
            EldBigDayExemptionEnabled *bool `json:"eldBigDayExemptionEnabled,omitempty"`
            // EldDayStartHour - 0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
            EldDayStartHour *int32 `json:"eldDayStartHour,omitempty"`
            // EldExempt - Flag indicating this driver is exempt from the Electronic Logging Mandate.
            EldExempt *bool `json:"eldExempt,omitempty"`
            // EldExemptReason - Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
            EldExemptReason *string `json:"eldExemptReason,omitempty"`
            // EldPcEnabled - Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
            EldPcEnabled *bool `json:"eldPcEnabled,omitempty"`
            // EldYmEnabled - Flag indicating this driver may select the Yard Move duty status in ELD logs.
            EldYmEnabled *bool `json:"eldYmEnabled,omitempty"`
            // ExternalIds - Dictionary of external IDs (string key-value pairs)
            ExternalIds map[string]*string `json:"externalIds"`
            // GroupID - ID of the group if the organization has multiple groups (uncommon).
            GroupID *int64 `json:"groupId,omitempty"`
            // LicenseNumber - Driver's state issued license number.
            LicenseNumber *string `json:"licenseNumber,omitempty"`
            // LicenseState - Abbreviation of state that issued driver's license.
            LicenseState *string `json:"licenseState,omitempty"`
            // Name - Driver's name.
            Name *string `json:"name,omitempty"`
            // Notes - Notes about the driver.
            Notes *string `json:"notes,omitempty"`
            // Phone - Driver's phone number. Please include only digits, ex. 4157771234
            Phone *string `json:"phone,omitempty"`
            // Username - Driver's login username into the driver app.
            Username *string `json:"username,omitempty"`
            // VehicleID - ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
            VehicleID *int64 `json:"vehicleId,omitempty"`
            }

        // MarshalJSON is the custom marshaler for DriverForCreateType.
        func (dfct DriverForCreateType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(dfct.Password != nil) {
                objectMap["password"] = dfct.Password
                }
                if(dfct.TagIds != nil) {
                objectMap["tagIds"] = dfct.TagIds
                }
                if(dfct.EldAdverseWeatherExemptionEnabled != nil) {
                objectMap["eldAdverseWeatherExemptionEnabled"] = dfct.EldAdverseWeatherExemptionEnabled
                }
                if(dfct.EldBigDayExemptionEnabled != nil) {
                objectMap["eldBigDayExemptionEnabled"] = dfct.EldBigDayExemptionEnabled
                }
                if(dfct.EldDayStartHour != nil) {
                objectMap["eldDayStartHour"] = dfct.EldDayStartHour
                }
                if(dfct.EldExempt != nil) {
                objectMap["eldExempt"] = dfct.EldExempt
                }
                if(dfct.EldExemptReason != nil) {
                objectMap["eldExemptReason"] = dfct.EldExemptReason
                }
                if(dfct.EldPcEnabled != nil) {
                objectMap["eldPcEnabled"] = dfct.EldPcEnabled
                }
                if(dfct.EldYmEnabled != nil) {
                objectMap["eldYmEnabled"] = dfct.EldYmEnabled
                }
                if(dfct.ExternalIds != nil) {
                objectMap["externalIds"] = dfct.ExternalIds
                }
                if(dfct.GroupID != nil) {
                objectMap["groupId"] = dfct.GroupID
                }
                if(dfct.LicenseNumber != nil) {
                objectMap["licenseNumber"] = dfct.LicenseNumber
                }
                if(dfct.LicenseState != nil) {
                objectMap["licenseState"] = dfct.LicenseState
                }
                if(dfct.Name != nil) {
                objectMap["name"] = dfct.Name
                }
                if(dfct.Notes != nil) {
                objectMap["notes"] = dfct.Notes
                }
                if(dfct.Phone != nil) {
                objectMap["phone"] = dfct.Phone
                }
                if(dfct.Username != nil) {
                objectMap["username"] = dfct.Username
                }
                if(dfct.VehicleID != nil) {
                objectMap["vehicleId"] = dfct.VehicleID
                }
                return json.Marshal(objectMap)
        }

            // DriverSafetyScoreResponseType safety score details for a driver
            type DriverSafetyScoreResponseType struct {
            autorest.Response `json:"-"`
            // CrashCount - Crash event count
            CrashCount *int32 `json:"crashCount,omitempty"`
            // DriverID - Driver ID
            DriverID *int32 `json:"driverId,omitempty"`
            // HarshAccelCount - Harsh acceleration event count
            HarshAccelCount *int32 `json:"harshAccelCount,omitempty"`
            // HarshBrakingCount - Harsh braking event count
            HarshBrakingCount *int32 `json:"harshBrakingCount,omitempty"`
            HarshEvents *[]SafetyReportHarshEventType `json:"harshEvents,omitempty"`
            // HarshTurningCount - Harsh turning event count
            HarshTurningCount *int32 `json:"harshTurningCount,omitempty"`
            // SafetyScore - Safety Score
            SafetyScore *int32 `json:"safetyScore,omitempty"`
            // SafetyScoreRank - Safety Score Rank
            SafetyScoreRank *string `json:"safetyScoreRank,omitempty"`
            // TimeOverSpeedLimitMs - Amount of time driven over the speed limit in milliseconds
            TimeOverSpeedLimitMs *int32 `json:"timeOverSpeedLimitMs,omitempty"`
            // TotalDistanceDrivenMeters - Total distance driven in meters
            TotalDistanceDrivenMeters *int32 `json:"totalDistanceDrivenMeters,omitempty"`
            // TotalHarshEventCount - Total harsh event count
            TotalHarshEventCount *int32 `json:"totalHarshEventCount,omitempty"`
            // TotalTimeDrivenMs - Amount of time driven in milliseconds
            TotalTimeDrivenMs *int32 `json:"totalTimeDrivenMs,omitempty"`
            }

            // DriversResponseType ...
            type DriversResponseType struct {
            autorest.Response `json:"-"`
            Drivers *[]CurrentDriverType `json:"drivers,omitempty"`
            }

            // DriversSummaryParamType ...
            type DriversSummaryParamType struct {
            // EndMs - End time (ms) of queried time period.
            EndMs *int64 `json:"endMs,omitempty"`
            // OrgID - Org ID to query.
            OrgID *int64 `json:"orgId,omitempty"`
            // StartMs - Start time (ms) of queried time period.
            StartMs *int64 `json:"startMs,omitempty"`
            }

            // DriversSummaryResponseSummariesItemType ...
            type DriversSummaryResponseSummariesItemType struct {
            // ActiveMs - Duration in milliseconds that driver was on duty or driving during the requested time range
            ActiveMs *float64 `json:"activeMs,omitempty"`
            // DistanceMiles - Distance driven in miles, rounded to two decimal places.
            DistanceMiles *float64 `json:"distanceMiles,omitempty"`
            // DriveMs - Duration in milliseconds that driver was driving during the requested time range
            DriveMs *float64 `json:"driveMs,omitempty"`
            // DriverID - ID of the driver.
            DriverID *int64 `json:"driverId,omitempty"`
            // DriverName - Name of the driver.
            DriverName *string `json:"driverName,omitempty"`
            // DriverUsername - Username of the driver.
            DriverUsername *string `json:"driverUsername,omitempty"`
            // GroupID - Group of the driver.
            GroupID *int64 `json:"groupId,omitempty"`
            // OnDutyMs - Duration in milliseconds that driver was on duty during the requested time range
            OnDutyMs *float64 `json:"onDutyMs,omitempty"`
            }

            // DriversSummaryResponseType ...
            type DriversSummaryResponseType struct {
            autorest.Response `json:"-"`
            Summaries *[]DriversSummaryResponseSummariesItemType `json:"Summaries,omitempty"`
            }

            // DvirBaseAuthorSignatureType the authors signature for the DVIR.
            type DvirBaseAuthorSignatureType struct {
            // DriverID - ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
            DriverID *int64 `json:"driverId,omitempty"`
            // Email - Email of the  driver|mechanic who signed the DVIR.
            Email *string `json:"email,omitempty"`
            // MechanicUserID - ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
            MechanicUserID *int64 `json:"mechanicUserId,omitempty"`
            // Name - The name of the driver or mechanic who signed the DVIR.
            Name *string `json:"name,omitempty"`
            // SignedAt - The time in millis when the DVIR was signed
            SignedAt *int64 `json:"signedAt,omitempty"`
            // Type - Type corresponds to whether the signature corresponds to driver|mechanic.
            Type *string `json:"type,omitempty"`
            // Username - Username of the  driver|mechanic who signed the DVIR.
            Username *string `json:"username,omitempty"`
            }

            // DvirBaseMechanicOrAgentSignatureType the mechanic's or agent's signature for the DVIR.
            type DvirBaseMechanicOrAgentSignatureType struct {
            // DriverID - ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
            DriverID *int64 `json:"driverId,omitempty"`
            // Email - Email of the  agent|mechanic who signed the DVIR.
            Email *string `json:"email,omitempty"`
            // MechanicUserID - ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
            MechanicUserID *int64 `json:"mechanicUserId,omitempty"`
            // Name - The name of the agent or mechanic who signed the DVIR.
            Name *string `json:"name,omitempty"`
            // SignedAt - The time in millis when the DVIR was signed
            SignedAt *int64 `json:"signedAt,omitempty"`
            // Type - Type corresponds to whether the signature corresponds to driver|mechanic.
            Type *string `json:"type,omitempty"`
            // Username - Username of the  agent|mechanic who signed the DVIR.
            Username *string `json:"username,omitempty"`
            }

            // DvirBaseNextDriverSignatureType the next driver signature for the DVIR.
            type DvirBaseNextDriverSignatureType struct {
            // DriverID - ID of the driver who signed the DVIR
            DriverID *int64 `json:"driverId,omitempty"`
            // Email - Email of the  driver who signed the next DVIR on this vehicle.
            Email *string `json:"email,omitempty"`
            // Name - The name of the driver who signed the next DVIR on this vehicle.
            Name *string `json:"name,omitempty"`
            // SignedAt - The time in millis when the next driver signed the DVIR on this vehicle.
            SignedAt *int64 `json:"signedAt,omitempty"`
            // Type - Type corresponds to driver.
            Type *string `json:"type,omitempty"`
            // Username - Username of the  driver who signed the next DVIR on this vehicle.
            Username *string `json:"username,omitempty"`
            }

            // DvirBaseTrailerDefectsItemType ...
            type DvirBaseTrailerDefectsItemType struct {
            // Comment - The comment describing the type of DVIR defect
            Comment *string `json:"comment,omitempty"`
            // DefectType - The type of DVIR defect
            DefectType *string `json:"defectType,omitempty"`
            }

            // DvirBaseType ...
            type DvirBaseType struct {
            autorest.Response `json:"-"`
            // AuthorSignature - The authors signature for the DVIR.
            AuthorSignature *DvirBaseAuthorSignatureType `json:"authorSignature,omitempty"`
            // DefectsCorrected - Signifies if the defects on the vehicle corrected after the DVIR is done.
            DefectsCorrected *bool `json:"defectsCorrected,omitempty"`
            // DefectsNeedNotBeCorrected - Signifies if the defects on this vehicle can be ignored.
            DefectsNeedNotBeCorrected *bool `json:"defectsNeedNotBeCorrected,omitempty"`
            // ID - The id of this DVIR record.
            ID *int64 `json:"id,omitempty"`
            // InspectionType - Inspection type of the DVIR.
            InspectionType *string `json:"inspectionType,omitempty"`
            // MechanicNotes - The mechanics notes on the DVIR.
            MechanicNotes *string `json:"mechanicNotes,omitempty"`
            // MechanicOrAgentSignature - The mechanic's or agent's signature for the DVIR.
            MechanicOrAgentSignature *DvirBaseMechanicOrAgentSignatureType `json:"mechanicOrAgentSignature,omitempty"`
            // NextDriverSignature - The next driver signature for the DVIR.
            NextDriverSignature *DvirBaseNextDriverSignatureType `json:"nextDriverSignature,omitempty"`
            // OdometerMiles - The odometer reading in miles for the vehicle when the DVIR was done.
            OdometerMiles *int64 `json:"odometerMiles,omitempty"`
            // TimeMs - Timestamp of this DVIR in UNIX milliseconds.
            TimeMs *int64 `json:"timeMs,omitempty"`
            // TrailerDefects - Defects registered for the trailer which was part of the DVIR.
            TrailerDefects *[]DvirBaseTrailerDefectsItemType `json:"trailerDefects,omitempty"`
            // TrailerID - The id of the trailer which was part of the DVIR.
            TrailerID *int32 `json:"trailerId,omitempty"`
            // TrailerName - The name of the trailer which was part of the DVIR.
            TrailerName *string `json:"trailerName,omitempty"`
            // Vehicle - The vehicle on which DVIR was done.
            Vehicle *DvirBaseVehicleType `json:"vehicle,omitempty"`
            // VehicleCondition - The condition of vechile on which DVIR was done.
            VehicleCondition *string `json:"vehicleCondition,omitempty"`
            // VehicleDefects - Defects registered for the vehicle which was part of the DVIR.
            VehicleDefects *[]DvirBaseVehicleDefectsItemType `json:"vehicleDefects,omitempty"`
            }

            // DvirBaseVehicleDefectsItemType ...
            type DvirBaseVehicleDefectsItemType struct {
            // Comment - The comment describing the type of DVIR defect
            Comment *string `json:"comment,omitempty"`
            // DefectType - The type of DVIR defect
            DefectType *string `json:"defectType,omitempty"`
            }

            // DvirBaseVehicleType the vehicle on which DVIR was done.
            type DvirBaseVehicleType struct {
            // ID - The vehicle id on which DVIR was done.
            ID *int64 `json:"id,omitempty"`
            // Name - The vehicle on which DVIR was done.
            Name *string `json:"name,omitempty"`
            }

            // DvirListResponseType ...
            type DvirListResponseType struct {
            autorest.Response `json:"-"`
            Dvirs *[]DvirBaseType `json:"dvirs,omitempty"`
            }

            // EngineStateType the state of the vehicle over time. State can be Running, Off, or Idle.
            type EngineStateType struct {
            // TimeMs - Timestamp in Unix epoch milliseconds.
            TimeMs *float64 `json:"timeMs,omitempty"`
            // Value - Possible values include: 'Running', 'Off', 'Idle'
            Value ValueEnum `json:"value,omitempty"`
            }

            // FleetOKResponseType ...
            type FleetOKResponseType struct {
            autorest.Response `json:"-"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            Pagination *PaginationType `json:"pagination,omitempty"`
            Vehicles *[]VehicleType `json:"vehicles,omitempty"`
            }

            // FleetVehicleLocationType contains the location and speed of a vehicle at a particular time
            type FleetVehicleLocationType struct {
            // Latitude - The latitude of the location in degrees.
            Latitude *float64 `json:"latitude,omitempty"`
            // Location - The best effort (street,city,state) for the latitude and longitude.
            Location *string `json:"location,omitempty"`
            // Longitude - The longitude of the location in degrees.
            Longitude *float64 `json:"longitude,omitempty"`
            // SpeedMilesPerHour - The speed calculated from GPS that the asset was traveling at in miles per hour.
            SpeedMilesPerHour *float64 `json:"speedMilesPerHour,omitempty"`
            // TimeMs - Time in Unix milliseconds since epoch when the asset was at the location.
            TimeMs *float64 `json:"timeMs,omitempty"`
            }

            // FleetVehicleResponseType a vehicle object as returned for fleet/vehicle
            type FleetVehicleResponseType struct {
            autorest.Response `json:"-"`
            ExternalIds map[string]*string `json:"externalIds"`
            // HarshAccelSetting - Harsh event detection setting.
            HarshAccelSetting *string `json:"harshAccelSetting,omitempty"`
            // ID - ID of the vehicle.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the vehicle.
            Name *string `json:"name,omitempty"`
            VehicleInfo *FleetVehicleResponseVehicleInfoType `json:"vehicleInfo,omitempty"`
            }

        // MarshalJSON is the custom marshaler for FleetVehicleResponseType.
        func (fvrt FleetVehicleResponseType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(fvrt.ExternalIds != nil) {
                objectMap["externalIds"] = fvrt.ExternalIds
                }
                if(fvrt.HarshAccelSetting != nil) {
                objectMap["harshAccelSetting"] = fvrt.HarshAccelSetting
                }
                if(fvrt.ID != nil) {
                objectMap["id"] = fvrt.ID
                }
                if(fvrt.Name != nil) {
                objectMap["name"] = fvrt.Name
                }
                if(fvrt.VehicleInfo != nil) {
                objectMap["vehicleInfo"] = fvrt.VehicleInfo
                }
                return json.Marshal(objectMap)
        }

            // FleetVehicleResponseVehicleInfoType ...
            type FleetVehicleResponseVehicleInfoType struct {
            // Make - Make of the vehicle.
            Make *string `json:"make,omitempty"`
            // Model - Model of the Vehicle.
            Model *string `json:"model,omitempty"`
            // Vin - Vehicle Identification Number.
            Vin *string `json:"vin,omitempty"`
            // Year - Year of the vehicle.
            Year *int64 `json:"year,omitempty"`
            }

            // FleetVehiclesLocationsItemType ...
            type FleetVehiclesLocationsItemType struct {
            // ID - ID of the vehicle.
            ID *int64 `json:"id,omitempty"`
            Locations *[]FleetVehicleLocationType `json:"locations,omitempty"`
            // Name - Name of the vehicle.
            Name *string `json:"name,omitempty"`
            }

            // GetAllAssetCurrentLocationsOKResponseType ...
            type GetAllAssetCurrentLocationsOKResponseType struct {
            autorest.Response `json:"-"`
            Assets *[]AssetCurrentLocationsResponseType `json:"assets,omitempty"`
            }

            // GetAllAssetsOKResponseType ...
            type GetAllAssetsOKResponseType struct {
            autorest.Response `json:"-"`
            Assets *[]AssetType `json:"assets,omitempty"`
            }

            // GetAllDataInputsOKResponseType ...
            type GetAllDataInputsOKResponseType struct {
            autorest.Response `json:"-"`
            DataInputs *[]DataInputHistoryResponseType `json:"dataInputs,omitempty"`
            }

            // GetAllTagsOKResponseType ...
            type GetAllTagsOKResponseType struct {
            autorest.Response `json:"-"`
            Tags *[]TagType `json:"tags,omitempty"`
            }

            // GetVehicleStatsOKResponseType ...
            type GetVehicleStatsOKResponseType struct {
            autorest.Response `json:"-"`
            Pagination *PaginationType `json:"pagination,omitempty"`
            VehicleStats *[]GetVehicleStatsOKResponseVehicleStatsItemType `json:"vehicleStats,omitempty"`
            }

            // GetVehicleStatsOKResponseVehicleStatsItemType ...
            type GetVehicleStatsOKResponseVehicleStatsItemType struct {
            AuxInput1 *AuxInputSeriesType `json:"auxInput1,omitempty"`
            AuxInput2 *AuxInputSeriesType `json:"auxInput2,omitempty"`
            EngineState *[]EngineStateType `json:"engineState,omitempty"`
            // VehicleID - ID of the vehicle.
            VehicleID *int64 `json:"vehicleId,omitempty"`
            }

            // GroupDriversParamType ...
            type GroupDriversParamType struct {
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            }

            // HistoryParamModelType ...
            type HistoryParamModelType struct {
            // EndMs - End of the time range, specified in milliseconds UNIX time.
            EndMs *int32 `json:"endMs,omitempty"`
            // FillMissing - Possible values include: 'WithNull', 'WithPrevious'
            FillMissing FillMissingEnum `json:"fillMissing,omitempty"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            Series *[]HistoryParamSeriesItemType `json:"series,omitempty"`
            // StartMs - Beginning of the time range, specified in milliseconds UNIX time.
            StartMs *int32 `json:"startMs,omitempty"`
            // StepMs - Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.
            StepMs *int32 `json:"stepMs,omitempty"`
            }

            // HistoryParamSeriesItemType sensor ID and field to query.
            type HistoryParamSeriesItemType struct {
            // Field - Field to query. Possible values include: 'AmbientTemperature', 'ProbeTemperature', 'CurrentLoop1Raw', 'CurrentLoop1Mapped', 'CurrentLoop2Raw', 'CurrentLoop2Mapped', 'PmPowerTotal', 'PmPhase1Power', 'PmPhase2Power', 'PmPhase3Power', 'PmPhase1PowerFactor', 'PmPhase2PowerFactor', 'PmPhase3PowerFactor'
            Field FieldEnum `json:"field,omitempty"`
            // WidgetID - Sensor ID to query.
            WidgetID *int64 `json:"widgetId,omitempty"`
            }

            // HistoryParamType ...
            type HistoryParamType struct {
            // EndMs - End of the time range, specified in milliseconds UNIX time.
            EndMs *int32 `json:"endMs,omitempty"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            // StartMs - Beginning of the time range, specified in milliseconds UNIX time.
            StartMs *int32 `json:"startMs,omitempty"`
            }

            // HosAuthenticationLogsParamType ...
            type HosAuthenticationLogsParamType struct {
            // DriverID - Driver ID to query.
            DriverID *int64 `json:"driverId,omitempty"`
            // EndMs - End of the time range, specified in milliseconds UNIX time.
            EndMs *int32 `json:"endMs,omitempty"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            // StartMs - Beginning of the time range, specified in milliseconds UNIX time.
            StartMs *int32 `json:"startMs,omitempty"`
            }

            // HosAuthenticationLogsResponseAuthenticationLogsItemType ...
            type HosAuthenticationLogsResponseAuthenticationLogsItemType struct {
            // ActionType - The log type - one of 'signin' or 'signout'
            ActionType *string `json:"actionType,omitempty"`
            // Address - Address at which the log was recorded, if applicable.
            Address *string `json:"address,omitempty"`
            // AddressName - Address name from the group address book at which the log was recorded, if applicable.
            AddressName *string `json:"addressName,omitempty"`
            // City - City in which the log was recorded, if applicable.
            City *string `json:"city,omitempty"`
            // HappenedAtMs - The time at which the event was recorded in UNIX milliseconds.
            HappenedAtMs *int64 `json:"happenedAtMs,omitempty"`
            // State - State in which the log was recorded, if applicable.
            State *string `json:"state,omitempty"`
            }

            // HosAuthenticationLogsResponseType ...
            type HosAuthenticationLogsResponseType struct {
            autorest.Response `json:"-"`
            AuthenticationLogs *[]HosAuthenticationLogsResponseAuthenticationLogsItemType `json:"authenticationLogs,omitempty"`
            }

            // HosLogsParamType ...
            type HosLogsParamType struct {
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            }

            // HosLogsResponseLogsItemType ...
            type HosLogsResponseLogsItemType struct {
            CodriverIds *[]float64 `json:"codriverIds,omitempty"`
            // DriverID - ID of the driver.
            DriverID *int64 `json:"driverId,omitempty"`
            // GroupID - ID of the group.
            GroupID *int64 `json:"groupId,omitempty"`
            // LocCity - City in which the log was recorded.
            LocCity *string `json:"locCity,omitempty"`
            // LocLat - Latitude at which the log was recorded.
            LocLat *float64 `json:"locLat,omitempty"`
            // LocLng - Longitude at which the log was recorded.
            LocLng *float64 `json:"locLng,omitempty"`
            // LocName - Name of location at which the log was recorded.
            LocName *string `json:"locName,omitempty"`
            // LocState - State in which the log was recorded.
            LocState *string `json:"locState,omitempty"`
            // LogStartMs - The time at which the log/HOS status started in UNIX milliseconds.
            LogStartMs *int64 `json:"logStartMs,omitempty"`
            // Remark - Remark associated with the log entry.
            Remark *string `json:"remark,omitempty"`
            // StatusType - The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
            StatusType *string `json:"statusType,omitempty"`
            // VehicleID - ID of the vehicle.
            VehicleID *int64 `json:"vehicleId,omitempty"`
            }

            // HosLogsResponseType ...
            type HosLogsResponseType struct {
            autorest.Response `json:"-"`
            Logs *[]HosLogsResponseLogsItemType `json:"logs,omitempty"`
            }

            // HosLogsSummaryResponseDriversItemType ...
            type HosLogsSummaryResponseDriversItemType struct {
            // CycleRemaining - The amount of remaining cycle time (in ms).
            CycleRemaining *int64 `json:"cycleRemaining,omitempty"`
            // CycleTomorrow - The amount of cycle time (in ms) available tomorrow.
            CycleTomorrow *int64 `json:"cycleTomorrow,omitempty"`
            // DriverID - ID of the driver.
            DriverID *int64 `json:"driverId,omitempty"`
            // DriverName - Name of the driver.
            DriverName *string `json:"driverName,omitempty"`
            // DrivingInViolationCycle - The amount of driving time in violation in this cycle (in ms).
            DrivingInViolationCycle *int64 `json:"drivingInViolationCycle,omitempty"`
            // DrivingInViolationToday - The amount of driving time in violation today (in ms).
            DrivingInViolationToday *int64 `json:"drivingInViolationToday,omitempty"`
            // DutyStatus - The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
            DutyStatus *string `json:"dutyStatus,omitempty"`
            // ShiftDriveRemaining - The amount of remaining shift drive time (in ms).
            ShiftDriveRemaining *int64 `json:"shiftDriveRemaining,omitempty"`
            // ShiftRemaining - The amount of remaining shift time (in ms).
            ShiftRemaining *int64 `json:"shiftRemaining,omitempty"`
            // TimeInCurrentStatus - The amount of time (in ms) that the driver has been in the current `dutyStatus`.
            TimeInCurrentStatus *int64 `json:"timeInCurrentStatus,omitempty"`
            // TimeUntilBreak - The amount of time (in ms) remaining until the driver cannot drive without a rest break.
            TimeUntilBreak *int64 `json:"timeUntilBreak,omitempty"`
            // VehicleName - Name of the vehicle.
            VehicleName *string `json:"vehicleName,omitempty"`
            }

            // HosLogsSummaryResponseType ...
            type HosLogsSummaryResponseType struct {
            autorest.Response `json:"-"`
            Drivers *[]HosLogsSummaryResponseDriversItemType `json:"drivers,omitempty"`
            }

            // HumidityResponseSensorsItemType ...
            type HumidityResponseSensorsItemType struct {
            // Humidity - Currently reported relative humidity in percent, from 0-100.
            Humidity *int32 `json:"humidity,omitempty"`
            // ID - ID of the sensor.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the sensor.
            Name *string `json:"name,omitempty"`
            }

            // HumidityResponseType contains the current humidity of a sensor.
            type HumidityResponseType struct {
            autorest.Response `json:"-"`
            GroupID *int64 `json:"groupId,omitempty"`
            Sensors *[]HumidityResponseSensorsItemType `json:"sensors,omitempty"`
            }

            // JobUpdateObjectType ...
            type JobUpdateObjectType struct {
            // ChangedAtMs - Timestamp that this event was updated, represented as Unix milliseconds since epoch.
            ChangedAtMs *int64 `json:"changed_at_ms,omitempty"`
            // JobID - ID of the Samsara job.
            JobID *int64 `json:"job_id,omitempty"`
            // JobState - Possible values include: 'JobStateUnassigned', 'JobStateScheduled', 'JobStateEnRoute', 'JobStateArrived', 'JobStateCompleted', 'JobStateSkipped'
            JobState JobState1Enum `json:"job_state,omitempty"`
            // PrevJobState - Possible values include: 'PrevJobStateEnumJobStateUnassigned', 'PrevJobStateEnumJobStateScheduled', 'PrevJobStateEnumJobStateEnRoute', 'PrevJobStateEnumJobStateArrived', 'PrevJobStateEnumJobStateCompleted', 'PrevJobStateEnumJobStateSkipped'
            PrevJobState PrevJobStateEnum `json:"prev_job_state,omitempty"`
            Route *DispatchRouteType `json:"route,omitempty"`
            // RouteID - ID of the Samsara dispatch route.
            RouteID *int64 `json:"route_id,omitempty"`
            }

            // ListAddressType ...
            type ListAddressType struct {
            autorest.Response `json:"-"`
            Value *[]AddressType `json:"value,omitempty"`
            }

            // ListAssetLocationResponseItemType ...
            type ListAssetLocationResponseItemType struct {
            autorest.Response `json:"-"`
            Value *[]AssetLocationResponseItemType `json:"value,omitempty"`
            }

            // ListContactType ...
            type ListContactType struct {
            autorest.Response `json:"-"`
            Value *[]ContactType `json:"value,omitempty"`
            }

            // ListCurrentDriverType ...
            type ListCurrentDriverType struct {
            autorest.Response `json:"-"`
            Value *[]CurrentDriverType `json:"value,omitempty"`
            }

            // ListDispatchRouteType ...
            type ListDispatchRouteType struct {
            autorest.Response `json:"-"`
            Value *[]DispatchRouteType `json:"value,omitempty"`
            }

            // ListDocumentType ...
            type ListDocumentType struct {
            autorest.Response `json:"-"`
            Value *[]DocumentType `json:"value,omitempty"`
            }

            // ListDocumentTypeType ...
            type ListDocumentTypeType struct {
            autorest.Response `json:"-"`
            Value *[]DocumentTypeType `json:"value,omitempty"`
            }

            // ListFleetVehicleLocationType ...
            type ListFleetVehicleLocationType struct {
            autorest.Response `json:"-"`
            Value *[]FleetVehicleLocationType `json:"value,omitempty"`
            }

            // ListFleetVehiclesLocationsItemType ...
            type ListFleetVehiclesLocationsItemType struct {
            autorest.Response `json:"-"`
            Value *[]FleetVehiclesLocationsItemType `json:"value,omitempty"`
            }

            // ListOKResponseType ...
            type ListOKResponseType struct {
            autorest.Response `json:"-"`
            Vehicles *[]VehicleMaintenanceType `json:"vehicles,omitempty"`
            }

            // ListUserRoleType ...
            type ListUserRoleType struct {
            autorest.Response `json:"-"`
            Value *[]UserRoleType `json:"value,omitempty"`
            }

            // ListUserType ...
            type ListUserType struct {
            autorest.Response `json:"-"`
            Value *[]UserType `json:"value,omitempty"`
            }

            // LocationsOKResponseType ...
            type LocationsOKResponseType struct {
            autorest.Response `json:"-"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            Vehicles *[]VehicleLocationType `json:"vehicles,omitempty"`
            }

            // MachineHistoryResponseMachinesItemType ...
            type MachineHistoryResponseMachinesItemType struct {
            // ID - Machine ID
            ID *int32 `json:"id,omitempty"`
            // Name - Machine name
            Name *string `json:"name,omitempty"`
            // Vibrations - List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s
            Vibrations *[]MachineHistoryResponseMachinesItemVibrationsItemType `json:"vibrations,omitempty"`
            }

            // MachineHistoryResponseMachinesItemVibrationsItemType ...
            type MachineHistoryResponseMachinesItemVibrationsItemType struct {
            X *float64 `json:"X,omitempty"`
            Y *float64 `json:"Y,omitempty"`
            Z *float64 `json:"Z,omitempty"`
            Time *int64 `json:"time,omitempty"`
            }

            // MachineHistoryResponseType contains the results for a machine history request
            type MachineHistoryResponseType struct {
            autorest.Response `json:"-"`
            Machines *[]MachineHistoryResponseMachinesItemType `json:"machines,omitempty"`
            }

            // MachinesOKResponseType ...
            type MachinesOKResponseType struct {
            autorest.Response `json:"-"`
            Machines *[]MachineType `json:"machines,omitempty"`
            }

            // MachineType contains information about a machine.
            type MachineType struct {
            // ID - ID of the machine.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the machine.
            Name *string `json:"name,omitempty"`
            // Notes - Notes about the machine
            Notes *string `json:"notes,omitempty"`
            }

            // PaginationType ...
            type PaginationType struct {
            // EndCursor - Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'starting_after' query parameter.
            EndCursor *string `json:"endCursor,omitempty"`
            // HasNextPage - True if there are more pages of results after this response.
            HasNextPage *bool `json:"hasNextPage,omitempty"`
            // HasPrevPage - True if there are more pages of results before this response.
            HasPrevPage *bool `json:"hasPrevPage,omitempty"`
            // StartCursor - Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request's 'ending_before' query parameter.
            StartCursor *string `json:"startCursor,omitempty"`
            }

            // ReactivateDriverParamType ...
            type ReactivateDriverParamType struct {
            // Reactivate - True indicates that this driver should be reactivated.
            Reactivate *bool `json:"reactivate,omitempty"`
            }

            // SafetyReportHarshEventType list of harsh events
            type SafetyReportHarshEventType struct {
            // HarshEventType - Type of the harsh event
            HarshEventType *string `json:"harshEventType,omitempty"`
            // TimestampMs - Timestamp that the harsh event occurred in Unix milliseconds since epoch
            TimestampMs *int32 `json:"timestampMs,omitempty"`
            // VehicleID - Vehicle associated with the harsh event
            VehicleID *int32 `json:"vehicleId,omitempty"`
            }

            // SensorHistoryResponseResultsItemType ...
            type SensorHistoryResponseResultsItemType struct {
            // Series - List of datapoints, one for each requested (sensor, field) pair.
            Series *[]int64 `json:"series,omitempty"`
            // TimeMs - Timestamp in UNIX milliseconds.
            TimeMs *int32 `json:"timeMs,omitempty"`
            }

            // SensorHistoryResponseType contains the results for a sensor history request. Each result contains a
            // timestamp and datapoint for each requested (sensor, field) pair.
            type SensorHistoryResponseType struct {
            autorest.Response `json:"-"`
            Results *[]SensorHistoryResponseResultsItemType `json:"results,omitempty"`
            }

            // SensorsOKResponseType ...
            type SensorsOKResponseType struct {
            autorest.Response `json:"-"`
            Sensors *[]SensorType `json:"sensors,omitempty"`
            }

            // SensorType contains information about a sensor.
            type SensorType struct {
            // ID - ID of the sensor.
            ID *int64 `json:"id,omitempty"`
            // MacAddress - MAC address of the sensor.
            MacAddress *string `json:"macAddress,omitempty"`
            // Name - Name of the sensor.
            Name *string `json:"name,omitempty"`
            }

            // TagCreateType ...
            type TagCreateType struct {
            // Assets - The assets that belong to this tag.
            Assets *[]TaggedAssetBaseType `json:"assets,omitempty"`
            // Drivers - The drivers that belong to this tag.
            Drivers *[]TaggedDriverBaseType `json:"drivers,omitempty"`
            // Machines - The machines that belong to this tag.
            Machines *[]TaggedMachineBaseType `json:"machines,omitempty"`
            // Name - Name of this tag.
            Name *string `json:"name,omitempty"`
            // ParentTagID - If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
            ParentTagID *int64 `json:"parentTagId,omitempty"`
            // Sensors - The sensors that belong to this tag.
            Sensors *[]TaggedSensorBaseType `json:"sensors,omitempty"`
            // Vehicles - The vehicles that belong to this tag.
            Vehicles *[]TaggedVehicleBaseType `json:"vehicles,omitempty"`
            }

            // TaggedAddressBaseType ...
            type TaggedAddressBaseType struct {
            // ID - The ID of the address being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedAddressType ...
            type TaggedAddressType struct {
            // Name - Name of the address being tagged.
            Name *string `json:"name,omitempty"`
            // ID - The ID of the address being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedAssetBaseType ...
            type TaggedAssetBaseType struct {
            // ID - The ID of the Asset being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedAssetType ...
            type TaggedAssetType struct {
            // Name - Name of the Asset being tagged.
            Name *string `json:"name,omitempty"`
            // ID - The ID of the Asset being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedDriverBaseType ...
            type TaggedDriverBaseType struct {
            // ID - The ID of the Driver being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedDriverType ...
            type TaggedDriverType struct {
            // Name - Name of the Driver being tagged.
            Name *string `json:"name,omitempty"`
            // ID - The ID of the Driver being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedMachineBaseType ...
            type TaggedMachineBaseType struct {
            // ID - The ID of the Machine being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedMachineType ...
            type TaggedMachineType struct {
            // Name - Name of the Machine being tagged.
            Name *string `json:"name,omitempty"`
            // ID - The ID of the Machine being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedSensorBaseType ...
            type TaggedSensorBaseType struct {
            // ID - The ID of the Sensor being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedSensorType ...
            type TaggedSensorType struct {
            // Name - Name of the Sensor being tagged.
            Name *string `json:"name,omitempty"`
            // ID - The ID of the Sensor being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedVehicleBaseType ...
            type TaggedVehicleBaseType struct {
            // ID - The ID of the Vehicle being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TaggedVehicleType ...
            type TaggedVehicleType struct {
            // Name - Name of the Vehicle being tagged.
            Name *string `json:"name,omitempty"`
            // ID - The ID of the Vehicle being tagged.
            ID *int64 `json:"id,omitempty"`
            }

            // TagMetadataType ...
            type TagMetadataType struct {
            // ID - The ID of this tag.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of this tag.
            Name *string `json:"name,omitempty"`
            }

            // TagModifyAddType specify devices, etc. that should be added to the tag.
            type TagModifyAddType struct {
            // Assets - The assets to be added to this tag.
            Assets *[]TaggedAssetBaseType `json:"assets,omitempty"`
            // Drivers - The drivers to be added to this tag.
            Drivers *[]TaggedDriverBaseType `json:"drivers,omitempty"`
            // Machines - The machines to be added to this tag.
            Machines *[]TaggedMachineBaseType `json:"machines,omitempty"`
            // Sensors - The sensors to be added to this tag.
            Sensors *[]TaggedSensorBaseType `json:"sensors,omitempty"`
            // Vehicles - The vehicles to be added to this tag.
            Vehicles *[]TaggedVehicleBaseType `json:"vehicles,omitempty"`
            }

            // TagModifyDeleteType specify devices, etc. that should be removed from the tag.
            type TagModifyDeleteType struct {
            // Assets - The assets to be removed from this tag.
            Assets *[]TaggedAssetBaseType `json:"assets,omitempty"`
            // Drivers - The drivers to be removed from this tag.
            Drivers *[]TaggedDriverBaseType `json:"drivers,omitempty"`
            // Machines - The machines to be removed from this tag.
            Machines *[]TaggedMachineBaseType `json:"machines,omitempty"`
            // Sensors - The sensors to be removed from this tag.
            Sensors *[]TaggedSensorBaseType `json:"sensors,omitempty"`
            // Vehicles - The vehicles to be removed from this tag.
            Vehicles *[]TaggedVehicleBaseType `json:"vehicles,omitempty"`
            }

            // TagModifyType ...
            type TagModifyType struct {
            // Add - Specify devices, etc. that should be added to the tag.
            Add *TagModifyAddType `json:"add,omitempty"`
            // Delete - Specify devices, etc. that should be removed from the tag.
            Delete *TagModifyDeleteType `json:"delete,omitempty"`
            // Name - Updated name of this tag.
            Name *string `json:"name,omitempty"`
            // ParentTagID - If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
            ParentTagID *int64 `json:"parentTagId,omitempty"`
            }

            // TagType ...
            type TagType struct {
            autorest.Response `json:"-"`
            // Addresses - The addresses that belong to this tag.
            Addresses *[]TaggedAddressType `json:"addresses,omitempty"`
            // Assets - The assets that belong to this tag.
            Assets *[]TaggedAssetType `json:"assets,omitempty"`
            // Drivers - The drivers that belong to this tag.
            Drivers *[]TaggedDriverType `json:"drivers,omitempty"`
            // GroupID - The GroupID that this tag belongs to.
            GroupID *int64 `json:"groupId,omitempty"`
            // ID - The ID of this tag.
            ID *int64 `json:"id,omitempty"`
            // Machines - The machines that belong to this tag.
            Machines *[]TaggedMachineType `json:"machines,omitempty"`
            // Name - Name of this tag.
            Name *string `json:"name,omitempty"`
            // ParentTagID - If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
            ParentTagID *int64 `json:"parentTagId,omitempty"`
            // Sensors - The sensors that belong to this tag.
            Sensors *[]TaggedSensorType `json:"sensors,omitempty"`
            // Vehicles - The vehicles that belong to this tag.
            Vehicles *[]TaggedVehicleType `json:"vehicles,omitempty"`
            }

            // TagUpdateType ...
            type TagUpdateType struct {
            // Assets - The assets that belong to this tag.
            Assets *[]TaggedAssetBaseType `json:"assets,omitempty"`
            // Drivers - The drivers that belong to this tag.
            Drivers *[]TaggedDriverBaseType `json:"drivers,omitempty"`
            // Machines - The machines that belong to this tag.
            Machines *[]TaggedMachineBaseType `json:"machines,omitempty"`
            // Name - Updated name of this tag.
            Name *string `json:"name,omitempty"`
            // ParentTagID - If this tag is part a hierarchical tag tree as a child tag, the parentTagId is the ID of this tag's parent tag.
            ParentTagID *int64 `json:"parentTagId,omitempty"`
            // Sensors - The sensors that belong to this tag.
            Sensors *[]TaggedSensorBaseType `json:"sensors,omitempty"`
            // Vehicles - The vehicles that belong to this tag.
            Vehicles *[]TaggedVehicleBaseType `json:"vehicles,omitempty"`
            }

            // TemperatureResponseSensorsItemType ...
            type TemperatureResponseSensorsItemType struct {
            // AmbientTemperature - Currently reported ambient temperature in millidegrees celsius.
            AmbientTemperature *int32 `json:"ambientTemperature,omitempty"`
            // ID - ID of the sensor.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the sensor.
            Name *string `json:"name,omitempty"`
            // ProbeTemperature - Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.
            ProbeTemperature *int32 `json:"probeTemperature,omitempty"`
            }

            // TemperatureResponseType contains the current temperatures of a sensor.
            type TemperatureResponseType struct {
            autorest.Response `json:"-"`
            GroupID *int64 `json:"groupId,omitempty"`
            Sensors *[]TemperatureResponseSensorsItemType `json:"sensors,omitempty"`
            }

            // TripResponseTripsItemEndCoordinatesType end (latitude, longitude) in decimal degrees.
            type TripResponseTripsItemEndCoordinatesType struct {
            Latitude *float64 `json:"latitude,omitempty"`
            Longitude *float64 `json:"longitude,omitempty"`
            }

            // TripResponseTripsItemStartCoordinatesType start (latitude, longitude) in decimal degrees.
            type TripResponseTripsItemStartCoordinatesType struct {
            Latitude *float64 `json:"latitude,omitempty"`
            Longitude *float64 `json:"longitude,omitempty"`
            }

            // TripResponseTripsItemType ...
            type TripResponseTripsItemType struct {
            // DistanceMeters - Length of the trip in meters.
            DistanceMeters *int32 `json:"distanceMeters,omitempty"`
            // DriverID - ID of the driver.
            DriverID *int32 `json:"driverId,omitempty"`
            // EndAddress - Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
            EndAddress *string `json:"endAddress,omitempty"`
            // EndCoordinates - End (latitude, longitude) in decimal degrees.
            EndCoordinates *TripResponseTripsItemEndCoordinatesType `json:"endCoordinates,omitempty"`
            // EndLocation - Geocoded street address of start (latitude, longitude) coordinates.
            EndLocation *string `json:"endLocation,omitempty"`
            // EndMs - End of the trip in UNIX milliseconds.
            EndMs *int32 `json:"endMs,omitempty"`
            // EndOdometer - Odometer reading at the end of the trip.
            EndOdometer *int32 `json:"endOdometer,omitempty"`
            // FuelConsumedMl - Amount in milliliters of fuel consumed on this trip.
            FuelConsumedMl *int32 `json:"fuelConsumedMl,omitempty"`
            // StartAddress - Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
            StartAddress *string `json:"startAddress,omitempty"`
            // StartCoordinates - Start (latitude, longitude) in decimal degrees.
            StartCoordinates *TripResponseTripsItemStartCoordinatesType `json:"startCoordinates,omitempty"`
            // StartLocation - Geocoded street address of start (latitude, longitude) coordinates.
            StartLocation *string `json:"startLocation,omitempty"`
            // StartMs - Beginning of the trip in UNIX milliseconds.
            StartMs *int32 `json:"startMs,omitempty"`
            // StartOdometer - Odometer reading at the beginning of the trip.
            StartOdometer *int32 `json:"startOdometer,omitempty"`
            // TollMeters - Length in meters trip spent on toll roads.
            TollMeters *int32 `json:"tollMeters,omitempty"`
            }

            // TripResponseType contains the trips for the vehicle in the requested timeframe. A trip is represented as
            // an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation,
            // endAddress and endCoordinates.
            type TripResponseType struct {
            autorest.Response `json:"-"`
            Trips *[]TripResponseTripsItemType `json:"trips,omitempty"`
            }

            // TripsParamType ...
            type TripsParamType struct {
            // EndMs - End of the time range, specified in milliseconds UNIX time.
            EndMs *int32 `json:"endMs,omitempty"`
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            // StartMs - Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
            StartMs *int32 `json:"startMs,omitempty"`
            // VehicleID - Vehicle ID to query.
            VehicleID *int64 `json:"vehicleId,omitempty"`
            }

            // UserBaseType ...
            type UserBaseType struct {
            // AuthType - The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration. Possible values include: 'Default', 'Saml'
            AuthType AuthTypeEnum `json:"authType,omitempty"`
            // Email - The email address of this user.
            Email *string `json:"email,omitempty"`
            // Name - The first and last name of the user.
            Name *string `json:"name,omitempty"`
            // OrganizationRoleID - The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
            OrganizationRoleID *string `json:"organizationRoleId,omitempty"`
            }

            // UserRoleType ...
            type UserRoleType struct {
            ID *string `json:"id,omitempty"`
            Name *string `json:"name,omitempty"`
            }

            // UserTagRoleTagType ...
            type UserTagRoleTagType struct {
            // ID - The ID of this tag.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of this tag.
            Name *string `json:"name,omitempty"`
            // ParentTagID - The ID of this tag.
            ParentTagID *int64 `json:"parentTagId,omitempty"`
            }

            // UserTagRoleType ...
            type UserTagRoleType struct {
            // Role - The name of the role the user has been granted on this tag.
            Role *string `json:"role,omitempty"`
            // RoleID - The id of the role the user has been granted on this tag.
            RoleID *string `json:"roleId,omitempty"`
            Tag *UserTagRoleTagType `json:"tag,omitempty"`
            }

            // UserType ...
            type UserType struct {
            autorest.Response `json:"-"`
            // ID - The ID of the User record.
            ID *int64 `json:"id,omitempty"`
            // OrganizationRole - The name of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
            OrganizationRole *string `json:"organizationRole,omitempty"`
            // TagRoles - The specific tags this user has access to. This will be blank for users that have full access to the organization.
            TagRoles *[]UserTagRoleType `json:"tagRoles,omitempty"`
            // AuthType - The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration. Possible values include: 'Default', 'Saml'
            AuthType AuthTypeEnum `json:"authType,omitempty"`
            // Email - The email address of this user.
            Email *string `json:"email,omitempty"`
            // Name - The first and last name of the user.
            Name *string `json:"name,omitempty"`
            // OrganizationRoleID - The id of the role the user is assigned to at the organization level. This will be blank for users that only have access to specific tags.
            OrganizationRoleID *string `json:"organizationRoleId,omitempty"`
            }

            // VehicleHarshEventResponseLocationType ...
            type VehicleHarshEventResponseLocationType struct {
            // Address - Address of location where the harsh event occurred
            Address *string `json:"address,omitempty"`
            // Latitude - Latitude of location where the harsh event occurred
            Latitude *string `json:"latitude,omitempty"`
            // Longitude - Longitude of location where the harsh event occurred
            Longitude *string `json:"longitude,omitempty"`
            }

            // VehicleHarshEventResponseType harsh event details for a vehicle
            type VehicleHarshEventResponseType struct {
            autorest.Response `json:"-"`
            // DownloadForwardVideoURL - URL for downloading the forward facing video
            DownloadForwardVideoURL *string `json:"downloadForwardVideoUrl,omitempty"`
            // DownloadInwardVideoURL - URL for downloading the inward facing video
            DownloadInwardVideoURL *string `json:"downloadInwardVideoUrl,omitempty"`
            // DownloadTrackedInwardVideoURL - URL for downloading the tracked inward facing video
            DownloadTrackedInwardVideoURL *string `json:"downloadTrackedInwardVideoUrl,omitempty"`
            // HarshEventType - Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]
            HarshEventType *string `json:"harshEventType,omitempty"`
            // IncidentReportURL - URL of the associated incident report page
            IncidentReportURL *string `json:"incidentReportUrl,omitempty"`
            // IsDistracted - Whether the driver was deemed distracted during this harsh event
            IsDistracted *bool `json:"isDistracted,omitempty"`
            Location *VehicleHarshEventResponseLocationType `json:"location,omitempty"`
            }

            // VehicleLocationType contains the location, in latitude and longitude, of a vehicle.
            type VehicleLocationType struct {
            // Heading - Heading in degrees.
            Heading *float64 `json:"heading,omitempty"`
            // ID - ID of the vehicle.
            ID *int64 `json:"id,omitempty"`
            // Latitude - Latitude in decimal degrees.
            Latitude *float64 `json:"latitude,omitempty"`
            // Location - Text representation of nearest identifiable location to (latitude, longitude) coordinates.
            Location *string `json:"location,omitempty"`
            // Longitude - Longitude in decimal degrees.
            Longitude *float64 `json:"longitude,omitempty"`
            // Name - Name of the vehicle.
            Name *string `json:"name,omitempty"`
            // OdometerMeters - The number of meters reported by the odometer.
            OdometerMeters *int64 `json:"odometerMeters,omitempty"`
            // OnTrip - Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
            OnTrip *bool `json:"onTrip,omitempty"`
            // Speed - Speed in miles per hour.
            Speed *float64 `json:"speed,omitempty"`
            // Time - The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
            Time *int32 `json:"time,omitempty"`
            // Vin - Vehicle Identification Number (VIN) of the vehicle.
            Vin *string `json:"vin,omitempty"`
            }

            // VehicleMaintenanceJ1939CheckEngineLightType j1939 check engine lights.
            type VehicleMaintenanceJ1939CheckEngineLightType struct {
            EmissionsIsOn *bool `json:"emissionsIsOn,omitempty"`
            ProtectIsOn *bool `json:"protectIsOn,omitempty"`
            StopIsOn *bool `json:"stopIsOn,omitempty"`
            WarningIsOn *bool `json:"warningIsOn,omitempty"`
            }

            // VehicleMaintenanceJ1939DiagnosticTroubleCodesItemType ...
            type VehicleMaintenanceJ1939DiagnosticTroubleCodesItemType struct {
            FmiID *int32 `json:"fmiId,omitempty"`
            FmiText *string `json:"fmiText,omitempty"`
            OccurrenceCount *int32 `json:"occurrenceCount,omitempty"`
            SpnDescription *string `json:"spnDescription,omitempty"`
            SpnID *int32 `json:"spnId,omitempty"`
            TxID *int32 `json:"txId,omitempty"`
            }

            // VehicleMaintenanceJ1939Type j1939 based data. Null if no data is available.
            type VehicleMaintenanceJ1939Type struct {
            // CheckEngineLight - J1939 check engine lights.
            CheckEngineLight *VehicleMaintenanceJ1939CheckEngineLightType `json:"checkEngineLight,omitempty"`
            // DiagnosticTroubleCodes - J1939 DTCs.
            DiagnosticTroubleCodes *[]VehicleMaintenanceJ1939DiagnosticTroubleCodesItemType `json:"diagnosticTroubleCodes,omitempty"`
            }

            // VehicleMaintenancePassengerCheckEngineLightType passenger vehicle check engine light.
            type VehicleMaintenancePassengerCheckEngineLightType struct {
            IsOn *bool `json:"isOn,omitempty"`
            }

            // VehicleMaintenancePassengerDiagnosticTroubleCodesItemType ...
            type VehicleMaintenancePassengerDiagnosticTroubleCodesItemType struct {
            DtcDescription *string `json:"dtcDescription,omitempty"`
            DtcID *int32 `json:"dtcId,omitempty"`
            DtcShortCode *string `json:"dtcShortCode,omitempty"`
            }

            // VehicleMaintenancePassengerType passenger vehicle data. Null if no data is available.
            type VehicleMaintenancePassengerType struct {
            // CheckEngineLight - Passenger vehicle check engine light.
            CheckEngineLight *VehicleMaintenancePassengerCheckEngineLightType `json:"checkEngineLight,omitempty"`
            // DiagnosticTroubleCodes - Passenger vehicle DTCs.
            DiagnosticTroubleCodes *[]VehicleMaintenancePassengerDiagnosticTroubleCodesItemType `json:"diagnosticTroubleCodes,omitempty"`
            }

            // VehicleMaintenanceType contains any J1939/Passenger engine light warnings and engine faults.
            type VehicleMaintenanceType struct {
            // ID - ID of the vehicle.
            ID *int64 `json:"id,omitempty"`
            // J1939 - J1939 based data. Null if no data is available.
            J1939 *VehicleMaintenanceJ1939Type `json:"j1939,omitempty"`
            // Passenger - Passenger vehicle data. Null if no data is available.
            Passenger *VehicleMaintenancePassengerType `json:"passenger,omitempty"`
            }

            // VehicleSafetyScoreResponseType safety score details for a vehicle
            type VehicleSafetyScoreResponseType struct {
            autorest.Response `json:"-"`
            // CrashCount - Crash event count
            CrashCount *int32 `json:"crashCount,omitempty"`
            // HarshAccelCount - Harsh acceleration event count
            HarshAccelCount *int32 `json:"harshAccelCount,omitempty"`
            // HarshBrakingCount - Harsh braking event count
            HarshBrakingCount *int32 `json:"harshBrakingCount,omitempty"`
            HarshEvents *[]SafetyReportHarshEventType `json:"harshEvents,omitempty"`
            // HarshTurningCount - Harsh turning event count
            HarshTurningCount *int32 `json:"harshTurningCount,omitempty"`
            // SafetyScore - Safety Score
            SafetyScore *int32 `json:"safetyScore,omitempty"`
            // SafetyScoreRank - Safety Score Rank
            SafetyScoreRank *string `json:"safetyScoreRank,omitempty"`
            // TimeOverSpeedLimitMs - Amount of time driven over the speed limit in milliseconds
            TimeOverSpeedLimitMs *int32 `json:"timeOverSpeedLimitMs,omitempty"`
            // TotalDistanceDrivenMeters - Total distance driven in meters
            TotalDistanceDrivenMeters *int32 `json:"totalDistanceDrivenMeters,omitempty"`
            // TotalHarshEventCount - Total harsh event count
            TotalHarshEventCount *int32 `json:"totalHarshEventCount,omitempty"`
            // TotalTimeDrivenMs - Amount of time driven in milliseconds
            TotalTimeDrivenMs *int32 `json:"totalTimeDrivenMs,omitempty"`
            // VehicleID - Vehicle ID
            VehicleID *int32 `json:"vehicleId,omitempty"`
            }

            // VehicleType a vehicle object.
            type VehicleType struct {
            // EngineHours - Total engine hours for the vehicle.
            EngineHours *int64 `json:"engineHours,omitempty"`
            // FuelLevelPercent - The fuel level of the vehicle as a percentage. (0.0 to 1.0)
            FuelLevelPercent *float64 `json:"fuelLevelPercent,omitempty"`
            // ID - ID of the vehicle.
            ID *int64 `json:"id,omitempty"`
            // Name - Name of the vehicle.
            Name *string `json:"name,omitempty"`
            Note *string `json:"note,omitempty"`
            // OdometerMeters - The number of meters reported by the odometer.
            OdometerMeters *int64 `json:"odometerMeters,omitempty"`
            // Vin - Vehicle Identification Number.
            Vin *string `json:"vin,omitempty"`
            }

            // VehicleUpdateParamType ...
            type VehicleUpdateParamType struct {
            // GroupID - Group ID to query.
            GroupID *int64 `json:"groupId,omitempty"`
            Vehicles *[]VehicleType `json:"vehicles,omitempty"`
            }

