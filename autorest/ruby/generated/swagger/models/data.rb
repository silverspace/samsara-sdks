# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Swagger
  module Models
    #
    # Model object.
    #
    #
    class Data
      # @return [Hash{String => String}]
      attr_accessor :external_ids

      # @return [Integer] Harsh Event Detection Setting
      # * 0: Passenger
      # * 1: Light Truck
      # * 2: Heavy
      # * 3: Off
      # * 4: Automatic
      attr_accessor :harsh_accel_setting

      # @return [String] Name
      attr_accessor :name


      #
      # Mapper for Data class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'data',
          type: {
            name: 'Composite',
            class_name: 'Data',
            model_properties: {
              external_ids: {
                client_side_validation: true,
                required: false,
                serialized_name: 'externalIds',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              harsh_accel_setting: {
                client_side_validation: true,
                required: false,
                serialized_name: 'harsh_accel_setting',
                type: {
                  name: 'Number'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
