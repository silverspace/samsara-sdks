# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class GetOperations(object):
    """GetOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def drivers(
            self, group_drivers_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/drivers.

        Get all the drivers for the specified group.

        :param group_drivers_param:
        :type group_drivers_param: ~swagger.models.GroupDriversParam
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DriversResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DriversResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.drivers.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(group_drivers_param, 'GroupDriversParam')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DriversResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    drivers.metadata = {'url': '/fleet/drivers'}

    def summary(
            self, drivers_summary_param, snap_to_day_bounds=None, custom_headers=None, raw=False, **operation_config):
        """/fleet/drivers/summary.

        Get the distance and time each driver in an organization has driven in
        a given time period.

        :param drivers_summary_param: Org ID and time range to query.
        :type drivers_summary_param: ~swagger.models.DriversSummaryParam
        :param snap_to_day_bounds: Snap query result to HOS day boundaries.
        :type snap_to_day_bounds: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DriversSummaryResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DriversSummaryResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.summary.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')
        if snap_to_day_bounds is not None:
            query_parameters['snap_to_day_bounds'] = self._serialize.query("snap_to_day_bounds", snap_to_day_bounds, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(drivers_summary_param, 'DriversSummaryParam')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DriversSummaryResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    summary.metadata = {'url': '/fleet/drivers/summary'}

    def logs(
            self, driver_id, hos_logs_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs.

        Get summarized daily HOS charts for a specified driver.

        :param driver_id: ID of the driver with HOS logs.
        :type driver_id: long
        :param hos_logs_param:
        :type hos_logs_param: ~swagger.models.Body
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DriverDailyLogResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DriverDailyLogResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.logs.metadata['url']
        path_format_arguments = {
            'driver_id': self._serialize.url("driver_id", driver_id, 'long')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(hos_logs_param, 'Body')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DriverDailyLogResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    logs.metadata = {'url': '/fleet/drivers/{driver_id}/hos_daily_logs'}

    def logs1(
            self, hos_authentication_logs_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/hos_authentication_logs.

        Get the HOS (hours of service) signin and signout logs for the
        specified driver. Only signout logs include location information.

        :param hos_authentication_logs_param:
        :type hos_authentication_logs_param:
         ~swagger.models.HosAuthenticationLogsParam
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HosAuthenticationLogsResponse or ClientRawResponse if
         raw=true
        :rtype: ~swagger.models.HosAuthenticationLogsResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.logs1.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(hos_authentication_logs_param, 'HosAuthenticationLogsParam')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HosAuthenticationLogsResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    logs1.metadata = {'url': '/fleet/hos_authentication_logs'}

    def logs2(
            self, hos_logs_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/hos_logs.

        Get the HOS (hours of service) logs for the specified driver. This
        method returns all the HOS statuses that the driver was in during this
        time period.

        :param hos_logs_param:
        :type hos_logs_param: ~swagger.models.Body
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HosLogsResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.HosLogsResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.logs2.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(hos_logs_param, 'Body')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HosLogsResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    logs2.metadata = {'url': '/fleet/hos_logs'}

    def summary1(
            self, hos_logs_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/hos_logs_summary.

        Get the current HOS status for all drivers in the group.

        :param hos_logs_param:
        :type hos_logs_param: ~swagger.models.HosLogsParam
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HosLogsSummaryResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.HosLogsSummaryResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.summary1.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(hos_logs_param, 'HosLogsParam')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HosLogsSummaryResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    summary1.metadata = {'url': '/fleet/hos_logs_summary'}

    def locations(
            self, group_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/locations.

        Get current location of vehicles in a group. This method returns the
        current location in latitude and longitude of all vehicles in a
        requested group.

        :param group_param: Group ID to query.
        :type group_param: ~swagger.models.BodyModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: LocationsOKResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.LocationsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.locations.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(group_param, 'BodyModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('LocationsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    locations.metadata = {'url': '/fleet/locations'}

    def dvirs(
            self, end_ms, duration_ms, group_id=None, custom_headers=None, raw=False, **operation_config):
        """/fleet/maintenance/dvirs.

        Get DVIRs for the org within provided time constraints.

        :param end_ms: time in millis until the last dvir log.
        :type end_ms: int
        :param duration_ms: time in millis which corresponds to the duration
         before the end_ms.
        :type duration_ms: int
        :param group_id: Group ID to query.
        :type group_id: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DvirListResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DvirListResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.dvirs.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')
        query_parameters['end_ms'] = self._serialize.query("end_ms", end_ms, 'int')
        query_parameters['duration_ms'] = self._serialize.query("duration_ms", duration_ms, 'int')
        if group_id is not None:
            query_parameters['group_id'] = self._serialize.query("group_id", group_id, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DvirListResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    dvirs.metadata = {'url': '/fleet/maintenance/dvirs'}

    def list_method(
            self, group_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/maintenance/list.

        Get list of the vehicles with any engine faults or check light data.

        :param group_param: Group ID to query.
        :type group_param: ~swagger.models.BodyModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ListOKResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.ListOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_method.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(group_param, 'BodyModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ListOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_method.metadata = {'url': '/fleet/maintenance/list'}

    def trips(
            self, trips_param, custom_headers=None, raw=False, **operation_config):
        """/fleet/trips.

        Get historical trips data for specified vehicle. This method returns a
        set of historical trips data for the specified vehicle in the specified
        time range.

        :param trips_param: Group ID, vehicle ID and time range to query.
        :type trips_param: ~swagger.models.TripsParam
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TripResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TripResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.trips.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(trips_param, 'TripsParam')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TripResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    trips.metadata = {'url': '/fleet/trips'}

    def history(
            self, history_param, custom_headers=None, raw=False, **operation_config):
        """/machines/history.

        Get historical data for machine objects. This method returns a set of
        historical data for all machines in a group.

        :param history_param: Group ID and time range to query for events
        :type history_param: ~swagger.models.HistoryParam
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MachineHistoryResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.MachineHistoryResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(history_param, 'HistoryParam')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MachineHistoryResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history.metadata = {'url': '/machines/history'}

    def machines(
            self, group_param, custom_headers=None, raw=False, **operation_config):
        """/machines/list.

        Get machine objects. This method returns a list of the machine objects
        in the Samsara Cloud and information about them.

        :param group_param: Group ID to query.
        :type group_param: ~swagger.models.BodyModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MachinesOKResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.MachinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.machines.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(group_param, 'BodyModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MachinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    machines.metadata = {'url': '/machines/list'}

    def cargo(
            self, sensor_param, custom_headers=None, raw=False, **operation_config):
        """/sensors/cargo.

        Get cargo monitor status (empty / full) for requested sensors.

        :param sensor_param: Group ID and list of sensor IDs to query.
        :type sensor_param: ~swagger.models.BodyModelModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CargoResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.CargoResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.cargo.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(sensor_param, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CargoResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    cargo.metadata = {'url': '/sensors/cargo'}

    def door(
            self, sensor_param, custom_headers=None, raw=False, **operation_config):
        """/sensors/door.

        Get door monitor status (closed / open) for requested sensors.

        :param sensor_param: Group ID and list of sensor IDs to query.
        :type sensor_param: ~swagger.models.BodyModelModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DoorResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DoorResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.door.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(sensor_param, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DoorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    door.metadata = {'url': '/sensors/door'}

    def history1(
            self, history_param, custom_headers=None, raw=False, **operation_config):
        """/sensors/history.

        Get historical data for specified sensors. This method returns a set of
        historical data for the specified sensors in the specified time range
        and at the specified time resolution.

        :param history_param: Group ID, time range and resolution, and list of
         sensor ID, field pairs to query.
        :type history_param: ~swagger.models.HistoryParamModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SensorHistoryResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.SensorHistoryResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history1.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(history_param, 'HistoryParamModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SensorHistoryResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history1.metadata = {'url': '/sensors/history'}

    def humidity(
            self, sensor_param, custom_headers=None, raw=False, **operation_config):
        """/sensors/humidity.

        Get humidity for requested sensors. This method returns the current
        relative humidity for the requested sensors.

        :param sensor_param: Group ID and list of sensor IDs to query.
        :type sensor_param: ~swagger.models.BodyModelModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HumidityResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.HumidityResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.humidity.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(sensor_param, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HumidityResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    humidity.metadata = {'url': '/sensors/humidity'}

    def sensors(
            self, group_param, custom_headers=None, raw=False, **operation_config):
        """/sensors/list.

        Get sensor objects. This method returns a list of the sensor objects in
        the Samsara Cloud and information about them.

        :param group_param: Group ID to query.
        :type group_param: ~swagger.models.BodyModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SensorsOKResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.SensorsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.sensors.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(group_param, 'BodyModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SensorsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    sensors.metadata = {'url': '/sensors/list'}

    def temperature(
            self, sensor_param, custom_headers=None, raw=False, **operation_config):
        """/sensors/temperature.

        Get temperature for requested sensors. This method returns the current
        ambient temperature (and probe temperature if applicable) for the
        requested sensors.

        :param sensor_param: Group ID and list of sensor IDs to query.
        :type sensor_param: ~swagger.models.BodyModelModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TemperatureResponse or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TemperatureResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.temperature.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['access_token'] = self._serialize.query("self.config.access_token", self.config.access_token, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(sensor_param, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response, 'str')

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TemperatureResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    temperature.metadata = {'url': '/sensors/temperature'}
