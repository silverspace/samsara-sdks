# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TripResponseTripsItem(Model):
    """TripResponseTripsItem.

    :param distance_meters: Length of the trip in meters.
    :type distance_meters: int
    :param driver_id: ID of the driver.
    :type driver_id: int
    :param end_address: Text representation of nearest identifiable location
     to the end (latitude, longitude) coordinates.
    :type end_address: str
    :param end_coordinates: End (latitude, longitude) in decimal degrees.
    :type end_coordinates: ~swagger.models.TripResponseTripsItemEndCoordinates
    :param end_location: Geocoded street address of start (latitude,
     longitude) coordinates.
    :type end_location: str
    :param end_ms: End of the trip in UNIX milliseconds.
    :type end_ms: int
    :param end_odometer: Odometer reading at the end of the trip.
    :type end_odometer: int
    :param fuel_consumed_ml: Amount in milliliters of fuel consumed on this
     trip.
    :type fuel_consumed_ml: int
    :param start_address: Text representation of nearest identifiable location
     to the start (latitude, longitude) coordinates.
    :type start_address: str
    :param start_coordinates: Start (latitude, longitude) in decimal degrees.
    :type start_coordinates:
     ~swagger.models.TripResponseTripsItemStartCoordinates
    :param start_location: Geocoded street address of start (latitude,
     longitude) coordinates.
    :type start_location: str
    :param start_ms: Beginning of the trip in UNIX milliseconds.
    :type start_ms: int
    :param start_odometer: Odometer reading at the beginning of the trip.
    :type start_odometer: int
    :param toll_meters: Length in meters trip spent on toll roads.
    :type toll_meters: int
    """

    _attribute_map = {
        'distance_meters': {'key': 'distanceMeters', 'type': 'int'},
        'driver_id': {'key': 'driverId', 'type': 'int'},
        'end_address': {'key': 'endAddress', 'type': 'str'},
        'end_coordinates': {'key': 'endCoordinates', 'type': 'TripResponseTripsItemEndCoordinates'},
        'end_location': {'key': 'endLocation', 'type': 'str'},
        'end_ms': {'key': 'endMs', 'type': 'int'},
        'end_odometer': {'key': 'endOdometer', 'type': 'int'},
        'fuel_consumed_ml': {'key': 'fuelConsumedMl', 'type': 'int'},
        'start_address': {'key': 'startAddress', 'type': 'str'},
        'start_coordinates': {'key': 'startCoordinates', 'type': 'TripResponseTripsItemStartCoordinates'},
        'start_location': {'key': 'startLocation', 'type': 'str'},
        'start_ms': {'key': 'startMs', 'type': 'int'},
        'start_odometer': {'key': 'startOdometer', 'type': 'int'},
        'toll_meters': {'key': 'tollMeters', 'type': 'int'},
    }

    def __init__(self, distance_meters=None, driver_id=None, end_address=None, end_coordinates=None, end_location=None, end_ms=None, end_odometer=None, fuel_consumed_ml=None, start_address=None, start_coordinates=None, start_location=None, start_ms=None, start_odometer=None, toll_meters=None):
        super(TripResponseTripsItem, self).__init__()
        self.distance_meters = distance_meters
        self.driver_id = driver_id
        self.end_address = end_address
        self.end_coordinates = end_coordinates
        self.end_location = end_location
        self.end_ms = end_ms
        self.end_odometer = end_odometer
        self.fuel_consumed_ml = fuel_consumed_ml
        self.start_address = start_address
        self.start_coordinates = start_coordinates
        self.start_location = start_location
        self.start_ms = start_ms
        self.start_odometer = start_odometer
        self.toll_meters = toll_meters
