# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class HosLogsSummaryResponseDriversItem(Model):
    """HosLogsSummaryResponseDriversItem.

    :param cycle_remaining: The amount of remaining cycle time (in ms).
    :type cycle_remaining: long
    :param cycle_tomorrow: The amount of cycle time (in ms) available
     tomorrow.
    :type cycle_tomorrow: long
    :param driver_id: ID of the driver.
    :type driver_id: long
    :param driver_name: Name of the driver.
    :type driver_name: str
    :param driving_in_violation_cycle: The amount of driving time in violation
     in this cycle (in ms).
    :type driving_in_violation_cycle: long
    :param driving_in_violation_today: The amount of driving time in violation
     today (in ms).
    :type driving_in_violation_today: long
    :param duty_status: The Hours of Service status type. One of `OFF_DUTY`,
     `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
    :type duty_status: str
    :param shift_drive_remaining: The amount of remaining shift drive time (in
     ms).
    :type shift_drive_remaining: long
    :param shift_remaining: The amount of remaining shift time (in ms).
    :type shift_remaining: long
    :param time_in_current_status: The amount of time (in ms) that the driver
     has been in the current `dutyStatus`.
    :type time_in_current_status: long
    :param time_until_break: The amount of time (in ms) remaining until the
     driver cannot drive without a rest break.
    :type time_until_break: long
    :param vehicle_name: Name of the vehicle.
    :type vehicle_name: str
    """

    _attribute_map = {
        'cycle_remaining': {'key': 'cycleRemaining', 'type': 'long'},
        'cycle_tomorrow': {'key': 'cycleTomorrow', 'type': 'long'},
        'driver_id': {'key': 'driverId', 'type': 'long'},
        'driver_name': {'key': 'driverName', 'type': 'str'},
        'driving_in_violation_cycle': {'key': 'drivingInViolationCycle', 'type': 'long'},
        'driving_in_violation_today': {'key': 'drivingInViolationToday', 'type': 'long'},
        'duty_status': {'key': 'dutyStatus', 'type': 'str'},
        'shift_drive_remaining': {'key': 'shiftDriveRemaining', 'type': 'long'},
        'shift_remaining': {'key': 'shiftRemaining', 'type': 'long'},
        'time_in_current_status': {'key': 'timeInCurrentStatus', 'type': 'long'},
        'time_until_break': {'key': 'timeUntilBreak', 'type': 'long'},
        'vehicle_name': {'key': 'vehicleName', 'type': 'str'},
    }

    def __init__(self, cycle_remaining=None, cycle_tomorrow=None, driver_id=None, driver_name=None, driving_in_violation_cycle=None, driving_in_violation_today=None, duty_status=None, shift_drive_remaining=None, shift_remaining=None, time_in_current_status=None, time_until_break=None, vehicle_name=None):
        super(HosLogsSummaryResponseDriversItem, self).__init__()
        self.cycle_remaining = cycle_remaining
        self.cycle_tomorrow = cycle_tomorrow
        self.driver_id = driver_id
        self.driver_name = driver_name
        self.driving_in_violation_cycle = driving_in_violation_cycle
        self.driving_in_violation_today = driving_in_violation_today
        self.duty_status = duty_status
        self.shift_drive_remaining = shift_drive_remaining
        self.shift_remaining = shift_remaining
        self.time_in_current_status = time_in_current_status
        self.time_until_break = time_until_break
        self.vehicle_name = vehicle_name
