# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .dispatch_job_create import DispatchJobCreate


class DispatchJob(DispatchJobCreate):
    """DispatchJob.

    :param destination_address: The address of the job destination, as it
     would be recognized if provided to maps.google.com. Optional if a valid
     destination address ID is provided.
    :type destination_address: str
    :param destination_address_id: ID of the job destination associated with
     an address book entry. Optional if valid values are provided for
     destination address or latitude/longitude. If a valid destination address
     ID is provided, address/latitude/longitude will be used from the address
     book entry. Name of the address book entry will only be used if the
     destination name is not provided.
    :type destination_address_id: long
    :param destination_lat: Latitude of the destination in decimal degrees.
     Optional if a valid destination address ID is provided.
    :type destination_lat: float
    :param destination_lng: Longitude of the destination in decimal degrees.
     Optional if a valid destination address ID is provided.
    :type destination_lng: float
    :param destination_name: The name of the job destination. If provided, it
     will take precedence over the name of the address book entry.
    :type destination_name: str
    :param notes: Notes regarding the details of this job.
    :type notes: str
    :param scheduled_arrival_time_ms: The time at which the assigned driver is
     scheduled to arrive at the job destination.
    :type scheduled_arrival_time_ms: long
    :param scheduled_departure_time_ms: The time at which the assigned driver
     is scheduled to depart from the job destination.
    :type scheduled_departure_time_ms: long
    :param arrived_at_ms: The time at which the driver arrived at the job
     destination.
    :type arrived_at_ms: long
    :param completed_at_ms: The time at which the job was marked complete
     (e.g. started driving to the next destination).
    :type completed_at_ms: long
    :param dispatch_route_id: ID of the route that this job belongs to.
    :type dispatch_route_id: long
    :param driver_id: ID of the driver assigned to the dispatch job.
    :type driver_id: long
    :param en_route_at_ms: The time at which the assigned driver started
     fulfilling the job (e.g. started driving to the destination).
    :type en_route_at_ms: long
    :param estimated_arrival_ms: The time at which the assigned driver is
     estimated to arrive at the job destination. Only valid for en-route jobs.
    :type estimated_arrival_ms: long
    :param fleet_viewer_url: Fleet viewer url of the dispatch job.
    :type fleet_viewer_url: str
    :param group_id:
    :type group_id: long
    :param id: ID of the Samsara dispatch job.
    :type id: long
    :param job_state: Possible values include: 'JobState_Unassigned',
     'JobState_Scheduled', 'JobState_EnRoute', 'JobState_Arrived',
     'JobState_Completed', 'JobState_Skipped'
    :type job_state: str or ~swagger.models.enum
    :param skipped_at_ms: The time at which the job was marked skipped.
    :type skipped_at_ms: long
    :param vehicle_id: ID of the vehicle used for the dispatch job.
    :type vehicle_id: long
    """

    _validation = {
        'scheduled_arrival_time_ms': {'required': True},
        'dispatch_route_id': {'required': True},
        'group_id': {'required': True},
        'id': {'required': True},
        'job_state': {'required': True},
    }

    _attribute_map = {
        'destination_address': {'key': 'destination_address', 'type': 'str'},
        'destination_address_id': {'key': 'destination_address_id', 'type': 'long'},
        'destination_lat': {'key': 'destination_lat', 'type': 'float'},
        'destination_lng': {'key': 'destination_lng', 'type': 'float'},
        'destination_name': {'key': 'destination_name', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'scheduled_arrival_time_ms': {'key': 'scheduled_arrival_time_ms', 'type': 'long'},
        'scheduled_departure_time_ms': {'key': 'scheduled_departure_time_ms', 'type': 'long'},
        'arrived_at_ms': {'key': 'arrived_at_ms', 'type': 'long'},
        'completed_at_ms': {'key': 'completed_at_ms', 'type': 'long'},
        'dispatch_route_id': {'key': 'dispatch_route_id', 'type': 'long'},
        'driver_id': {'key': 'driver_id', 'type': 'long'},
        'en_route_at_ms': {'key': 'en_route_at_ms', 'type': 'long'},
        'estimated_arrival_ms': {'key': 'estimated_arrival_ms', 'type': 'long'},
        'fleet_viewer_url': {'key': 'fleet_viewer_url', 'type': 'str'},
        'group_id': {'key': 'group_id', 'type': 'long'},
        'id': {'key': 'id', 'type': 'long'},
        'job_state': {'key': 'job_state', 'type': 'str'},
        'skipped_at_ms': {'key': 'skipped_at_ms', 'type': 'long'},
        'vehicle_id': {'key': 'vehicle_id', 'type': 'long'},
    }

    def __init__(self, scheduled_arrival_time_ms, dispatch_route_id, group_id, id, job_state, destination_address=None, destination_address_id=None, destination_lat=None, destination_lng=None, destination_name=None, notes=None, scheduled_departure_time_ms=None, arrived_at_ms=None, completed_at_ms=None, driver_id=None, en_route_at_ms=None, estimated_arrival_ms=None, fleet_viewer_url=None, skipped_at_ms=None, vehicle_id=None):
        super(DispatchJob, self).__init__(destination_address=destination_address, destination_address_id=destination_address_id, destination_lat=destination_lat, destination_lng=destination_lng, destination_name=destination_name, notes=notes, scheduled_arrival_time_ms=scheduled_arrival_time_ms, scheduled_departure_time_ms=scheduled_departure_time_ms)
        self.arrived_at_ms = arrived_at_ms
        self.completed_at_ms = completed_at_ms
        self.dispatch_route_id = dispatch_route_id
        self.driver_id = driver_id
        self.en_route_at_ms = en_route_at_ms
        self.estimated_arrival_ms = estimated_arrival_ms
        self.fleet_viewer_url = fleet_viewer_url
        self.group_id = group_id
        self.id = id
        self.job_state = job_state
        self.skipped_at_ms = skipped_at_ms
        self.vehicle_id = vehicle_id
