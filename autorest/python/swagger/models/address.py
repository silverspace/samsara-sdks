# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Address(Model):
    """Information about an address/geofence. Geofences are either a circle or a
    polygon.

    :param contacts:
    :type contacts: list[~swagger.models.Contact]
    :param formatted_address: The full address associated with this
     address/geofence, as it might be recognized by maps.google.com
    :type formatted_address: str
    :param geofence:
    :type geofence: ~swagger.models.AddressGeofence
    :param id: ID of the address
    :type id: long
    :param name: Name of the address or geofence
    :type name: str
    :param notes:
    :type notes: str
    :param tags:
    :type tags: list[~swagger.models.TagMetadata]
    """

    _attribute_map = {
        'contacts': {'key': 'contacts', 'type': '[Contact]'},
        'formatted_address': {'key': 'formattedAddress', 'type': 'str'},
        'geofence': {'key': 'geofence', 'type': 'AddressGeofence'},
        'id': {'key': 'id', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[TagMetadata]'},
    }

    def __init__(self, contacts=None, formatted_address=None, geofence=None, id=None, name=None, notes=None, tags=None):
        super(Address, self).__init__()
        self.contacts = contacts
        self.formatted_address = formatted_address
        self.geofence = geofence
        self.id = id
        self.name = name
        self.notes = notes
        self.tags = tags
