# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .document_field_create import DocumentFieldCreate


class DocumentField(DocumentFieldCreate):
    """DocumentField.

    :param number_value: Value of this field if this document field has
     valueType: ValueType_Number.
    :type number_value: float
    :param photo_value: Value of this field if this document field has
     valueType: ValueType_Photo. Array of photo objects where each object
     contains a URL for a photo.
    :type photo_value: list[~swagger.models.DocumentFieldCreatePhotoValueItem]
    :param string_value: Value of this field if this document field has
     valueType: ValueType_String.
    :type string_value: str
    :param value_type: Determines the type of this field and what type of
     value this field has. It should be either ValueType_Number,
     ValueType_String, or ValueType_Photo.
    :type value_type: str
    :param label: Descriptive name of this field.
    :type label: str
    :param value: DEPRECATED: Please use stringValue, numberValue, or
     photoValue instead. Value of this field. Depending on what kind of field
     it is, this may be one of the following: an array of image urls, a float,
     an integer, or a string.
    :type value: object
    """

    _validation = {
        'value_type': {'required': True},
        'label': {'required': True},
    }

    _attribute_map = {
        'number_value': {'key': 'numberValue', 'type': 'float'},
        'photo_value': {'key': 'photoValue', 'type': '[DocumentFieldCreatePhotoValueItem]'},
        'string_value': {'key': 'stringValue', 'type': 'str'},
        'value_type': {'key': 'valueType', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(self, value_type, label, number_value=None, photo_value=None, string_value=None, value=None):
        super(DocumentField, self).__init__(number_value=number_value, photo_value=photo_value, string_value=string_value, value_type=value_type)
        self.label = label
        self.value = value
