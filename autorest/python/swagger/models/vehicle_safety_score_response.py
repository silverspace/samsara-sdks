# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VehicleSafetyScoreResponse(Model):
    """Safety score details for a vehicle.

    :param crash_count: Crash event count
    :type crash_count: int
    :param harsh_accel_count: Harsh acceleration event count
    :type harsh_accel_count: int
    :param harsh_braking_count: Harsh braking event count
    :type harsh_braking_count: int
    :param harsh_events:
    :type harsh_events: list[~swagger.models.SafetyReportHarshEvent]
    :param harsh_turning_count: Harsh turning event count
    :type harsh_turning_count: int
    :param safety_score: Safety Score
    :type safety_score: int
    :param safety_score_rank: Safety Score Rank
    :type safety_score_rank: str
    :param time_over_speed_limit_ms: Amount of time driven over the speed
     limit in milliseconds
    :type time_over_speed_limit_ms: int
    :param total_distance_driven_meters: Total distance driven in meters
    :type total_distance_driven_meters: int
    :param total_harsh_event_count: Total harsh event count
    :type total_harsh_event_count: int
    :param total_time_driven_ms: Amount of time driven in milliseconds
    :type total_time_driven_ms: int
    :param vehicle_id: Vehicle ID
    :type vehicle_id: int
    """

    _attribute_map = {
        'crash_count': {'key': 'crashCount', 'type': 'int'},
        'harsh_accel_count': {'key': 'harshAccelCount', 'type': 'int'},
        'harsh_braking_count': {'key': 'harshBrakingCount', 'type': 'int'},
        'harsh_events': {'key': 'harshEvents', 'type': '[SafetyReportHarshEvent]'},
        'harsh_turning_count': {'key': 'harshTurningCount', 'type': 'int'},
        'safety_score': {'key': 'safetyScore', 'type': 'int'},
        'safety_score_rank': {'key': 'safetyScoreRank', 'type': 'str'},
        'time_over_speed_limit_ms': {'key': 'timeOverSpeedLimitMs', 'type': 'int'},
        'total_distance_driven_meters': {'key': 'totalDistanceDrivenMeters', 'type': 'int'},
        'total_harsh_event_count': {'key': 'totalHarshEventCount', 'type': 'int'},
        'total_time_driven_ms': {'key': 'totalTimeDrivenMs', 'type': 'int'},
        'vehicle_id': {'key': 'vehicleId', 'type': 'int'},
    }

    def __init__(self, crash_count=None, harsh_accel_count=None, harsh_braking_count=None, harsh_events=None, harsh_turning_count=None, safety_score=None, safety_score_rank=None, time_over_speed_limit_ms=None, total_distance_driven_meters=None, total_harsh_event_count=None, total_time_driven_ms=None, vehicle_id=None):
        super(VehicleSafetyScoreResponse, self).__init__()
        self.crash_count = crash_count
        self.harsh_accel_count = harsh_accel_count
        self.harsh_braking_count = harsh_braking_count
        self.harsh_events = harsh_events
        self.harsh_turning_count = harsh_turning_count
        self.safety_score = safety_score
        self.safety_score_rank = safety_score_rank
        self.time_over_speed_limit_ms = time_over_speed_limit_ms
        self.total_distance_driven_meters = total_distance_driven_meters
        self.total_harsh_event_count = total_harsh_event_count
        self.total_time_driven_ms = total_time_driven_ms
        self.vehicle_id = vehicle_id
