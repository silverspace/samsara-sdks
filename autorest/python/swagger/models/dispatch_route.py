# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .dispatch_route_base import DispatchRouteBase


class DispatchRoute(DispatchRouteBase):
    """DispatchRoute.

    :param actual_end_ms: The time in Unix epoch milliseconds that the route
     actually ended.
    :type actual_end_ms: long
    :param actual_start_ms: The time in Unix epoch milliseconds that the route
     actually started.
    :type actual_start_ms: long
    :param driver_id: ID of the driver assigned to the dispatch route. Note
     that driver_id and vehicle_id are mutually exclusive. If neither is
     specified, then the route is unassigned.
    :type driver_id: long
    :param group_id: ID of the group if the organization has multiple groups
     (optional).
    :type group_id: long
    :param name: Descriptive name of this route.
    :type name: str
    :param scheduled_end_ms: The time in Unix epoch milliseconds that the last
     job in the route is scheduled to end.
    :type scheduled_end_ms: long
    :param scheduled_meters: The distance expected to be traveled for this
     route in meters.
    :type scheduled_meters: long
    :param scheduled_start_ms: The time in Unix epoch milliseconds that the
     route is scheduled to start.
    :type scheduled_start_ms: long
    :param start_location_address: The address of the route's starting
     location, as it would be recognized if provided to maps.google.com.
     Optional if a valid start location address ID is provided.
    :type start_location_address: str
    :param start_location_address_id: ID of the start location associated with
     an address book entry. Optional if valid values are provided for start
     location address or latitude/longitude. If a valid start location address
     ID is provided, address/latitude/longitude will be used from the address
     book entry. Name of the address book entry will only be used if the start
     location name is not provided.
    :type start_location_address_id: long
    :param start_location_lat: Latitude of the start location in decimal
     degrees. Optional if a valid start location address ID is provided.
    :type start_location_lat: float
    :param start_location_lng: Longitude of the start location in decimal
     degrees. Optional if a valid start location address ID is provided.
    :type start_location_lng: float
    :param start_location_name: The name of the route's starting location. If
     provided, it will take precedence over the name of the address book entry.
    :type start_location_name: str
    :param trailer_id: ID of the trailer assigned to the dispatch route. Note
     that trailers can only be assigned to routes that have a Vehicle or Driver
     assigned to them.
    :type trailer_id: long
    :param vehicle_id: ID of the vehicle assigned to the dispatch route. Note
     that vehicle_id and driver_id are mutually exclusive. If neither is
     specified, then the route is unassigned.
    :type vehicle_id: long
    :param dispatch_jobs: The dispatch jobs associated with this route.
    :type dispatch_jobs: list[~swagger.models.DispatchJob]
    :param id: ID of the Samsara dispatch route.
    :type id: long
    """

    _validation = {
        'name': {'required': True},
        'scheduled_end_ms': {'required': True},
        'scheduled_start_ms': {'required': True},
        'dispatch_jobs': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'actual_end_ms': {'key': 'actual_end_ms', 'type': 'long'},
        'actual_start_ms': {'key': 'actual_start_ms', 'type': 'long'},
        'driver_id': {'key': 'driver_id', 'type': 'long'},
        'group_id': {'key': 'group_id', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
        'scheduled_end_ms': {'key': 'scheduled_end_ms', 'type': 'long'},
        'scheduled_meters': {'key': 'scheduled_meters', 'type': 'long'},
        'scheduled_start_ms': {'key': 'scheduled_start_ms', 'type': 'long'},
        'start_location_address': {'key': 'start_location_address', 'type': 'str'},
        'start_location_address_id': {'key': 'start_location_address_id', 'type': 'long'},
        'start_location_lat': {'key': 'start_location_lat', 'type': 'float'},
        'start_location_lng': {'key': 'start_location_lng', 'type': 'float'},
        'start_location_name': {'key': 'start_location_name', 'type': 'str'},
        'trailer_id': {'key': 'trailer_id', 'type': 'long'},
        'vehicle_id': {'key': 'vehicle_id', 'type': 'long'},
        'dispatch_jobs': {'key': 'dispatch_jobs', 'type': '[DispatchJob]'},
        'id': {'key': 'id', 'type': 'long'},
    }

    def __init__(self, name, scheduled_end_ms, scheduled_start_ms, dispatch_jobs, id, actual_end_ms=None, actual_start_ms=None, driver_id=None, group_id=None, scheduled_meters=None, start_location_address=None, start_location_address_id=None, start_location_lat=None, start_location_lng=None, start_location_name=None, trailer_id=None, vehicle_id=None):
        super(DispatchRoute, self).__init__(actual_end_ms=actual_end_ms, actual_start_ms=actual_start_ms, driver_id=driver_id, group_id=group_id, name=name, scheduled_end_ms=scheduled_end_ms, scheduled_meters=scheduled_meters, scheduled_start_ms=scheduled_start_ms, start_location_address=start_location_address, start_location_address_id=start_location_address_id, start_location_lat=start_location_lat, start_location_lng=start_location_lng, start_location_name=start_location_name, trailer_id=trailer_id, vehicle_id=vehicle_id)
        self.dispatch_jobs = dispatch_jobs
        self.id = id
