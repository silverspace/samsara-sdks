/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { SamsaraAPIContext } from "./samsaraAPIContext";

class SamsaraAPI extends SamsaraAPIContext {
  // Operation groups
  add: operations.Add;
  get: operations.Get;
  list: operations.List;
  create: operations.Create;
  update: operations.Update;

  /**
   * Initializes a new instance of the SamsaraAPI class.
   * @param accessToken Samsara API access token.
   * @param endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive.
   * Used in combination with startMs.
   * @param startMs Timestamp in milliseconds representing the start of the period to fetch,
   * inclusive. Used in combination with endMs.
   * @param assetId ID of the asset
   * @param dataInputId ID of the data input
   * @param driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by
   * Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
   * @param timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
   * @param endMs3 Timestamp in milliseconds representing the end of the period to fetch, inclusive.
   * Used in combination with startMs.
   * @param startMs2 Timestamp in milliseconds representing the start of the period to fetch,
   * inclusive. Used in combination with endMs.
   * @param tagId ID of the tag.
   * @param vehicleIdOrExternalId ID of the vehicle.  This must be either the numeric ID generated by
   * Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
   * @param [options] The parameter options
   */
  constructor(accessToken: string, endMs: number, startMs: number, assetId: number, dataInputId: number, driverIdOrExternalId: string, timestamp: number, endMs3: number, startMs2: number, tagId: number, vehicleIdOrExternalId: string, options?: Models.SamsaraAPIOptions) {
    super(accessToken, endMs, startMs, assetId, dataInputId, driverIdOrExternalId, timestamp, endMs3, startMs2, tagId, vehicleIdOrExternalId, options);
    this.add = new operations.Add(this);
    this.get = new operations.Get(this);
    this.list = new operations.List(this);
    this.create = new operations.Create(this);
    this.update = new operations.Update(this);
  }

  /**
   * Fetch all addresses/geofences for the organization. An address contains either a circle or
   * polygon geofence describing the address boundaries.
   * @summary /addresses
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOrganizationAddressesResponse>
   */
  getOrganizationAddresses(options?: msRest.RequestOptionsBase): Promise<Models.GetOrganizationAddressesResponse>;
  /**
   * @param callback The callback
   */
  getOrganizationAddresses(callback: msRest.ServiceCallback<Models.Address[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrganizationAddresses(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Address[]>): void;
  getOrganizationAddresses(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Address[]>, callback?: msRest.ServiceCallback<Models.Address[]>): Promise<Models.GetOrganizationAddressesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getOrganizationAddressesOperationSpec,
      callback) as Promise<Models.GetOrganizationAddressesResponse>;
  }

  /**
   * Add one or more addresses to the organization
   * @summary /addresses
   * @param addresses List of addresses/geofences to add. Geofences can be circular or a polygon.
   * For each address, only one of 'circle' or 'polygon' should be provided. If both are provided,
   * the geofence will be saved as a polygon.
   * @param [options] The optional parameters
   * @returns Promise<Models.AddOrganizationAddressesResponse>
   */
  addOrganizationAddresses(addresses: Models.Addresses, options?: msRest.RequestOptionsBase): Promise<Models.AddOrganizationAddressesResponse>;
  /**
   * @param addresses List of addresses/geofences to add. Geofences can be circular or a polygon.
   * For each address, only one of 'circle' or 'polygon' should be provided. If both are provided,
   * the geofence will be saved as a polygon.
   * @param callback The callback
   */
  addOrganizationAddresses(addresses: Models.Addresses, callback: msRest.ServiceCallback<Models.Address[]>): void;
  /**
   * @param addresses List of addresses/geofences to add. Geofences can be circular or a polygon.
   * For each address, only one of 'circle' or 'polygon' should be provided. If both are provided,
   * the geofence will be saved as a polygon.
   * @param options The optional parameters
   * @param callback The callback
   */
  addOrganizationAddresses(addresses: Models.Addresses, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Address[]>): void;
  addOrganizationAddresses(addresses: Models.Addresses, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Address[]>, callback?: msRest.ServiceCallback<Models.Address[]>): Promise<Models.AddOrganizationAddressesResponse> {
    return this.sendOperationRequest(
      {
        addresses,
        options
      },
      addOrganizationAddressesOperationSpec,
      callback) as Promise<Models.AddOrganizationAddressesResponse>;
  }

  /**
   * Fetch an address by its id.
   * @summary /addresses/{addressId}
   * @param addressId ID of the address/geofence
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOrganizationAddressResponse>
   */
  getOrganizationAddress(addressId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetOrganizationAddressResponse>;
  /**
   * @param addressId ID of the address/geofence
   * @param callback The callback
   */
  getOrganizationAddress(addressId: number, callback: msRest.ServiceCallback<Models.Address>): void;
  /**
   * @param addressId ID of the address/geofence
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrganizationAddress(addressId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Address>): void;
  getOrganizationAddress(addressId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Address>, callback?: msRest.ServiceCallback<Models.Address>): Promise<Models.GetOrganizationAddressResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        options
      },
      getOrganizationAddressOperationSpec,
      callback) as Promise<Models.GetOrganizationAddressResponse>;
  }

  /**
   * Delete an address.
   * @summary /addresses/{addressId}
   * @param addressId ID of the address/geofence
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteOrganizationAddress(addressId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param addressId ID of the address/geofence
   * @param callback The callback
   */
  deleteOrganizationAddress(addressId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param addressId ID of the address/geofence
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOrganizationAddress(addressId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteOrganizationAddress(addressId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        options
      },
      deleteOrganizationAddressOperationSpec,
      callback);
  }

  /**
   * Update the name, formatted address, geofence, notes, or tag and contact Ids for an address. The
   * set of tags or contacts associated with this address will be updated to exactly match the list
   * of IDs passed in. To remove all tags or contacts from an address, pass an empty list; to remove
   * notes, pass an empty string.
   * @summary /addresses/{addressId}
   * @param address Update parts of an address's value. If the geofence 'circle' or 'polygon' key is
   * specified, the update will change the type of geofence accordingly.
   * @param addressId ID of the address/geofence
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateOrganizationAddress(address: Models.AddressModel, addressId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param address Update parts of an address's value. If the geofence 'circle' or 'polygon' key is
   * specified, the update will change the type of geofence accordingly.
   * @param addressId ID of the address/geofence
   * @param callback The callback
   */
  updateOrganizationAddress(address: Models.AddressModel, addressId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param address Update parts of an address's value. If the geofence 'circle' or 'polygon' key is
   * specified, the update will change the type of geofence accordingly.
   * @param addressId ID of the address/geofence
   * @param options The optional parameters
   * @param callback The callback
   */
  updateOrganizationAddress(address: Models.AddressModel, addressId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateOrganizationAddress(address: Models.AddressModel, addressId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        address,
        addressId,
        options
      },
      updateOrganizationAddressOperationSpec,
      callback);
  }

  /**
   * Fetch all contacts for the organization.
   * @summary /contacts
   * @param [options] The optional parameters
   * @returns Promise<Models.ListContactsResponse>
   */
  listContacts(options?: msRest.RequestOptionsBase): Promise<Models.ListContactsResponse>;
  /**
   * @param callback The callback
   */
  listContacts(callback: msRest.ServiceCallback<Models.Contact[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listContacts(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Contact[]>): void;
  listContacts(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Contact[]>, callback?: msRest.ServiceCallback<Models.Contact[]>): Promise<Models.ListContactsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listContactsOperationSpec,
      callback) as Promise<Models.ListContactsResponse>;
  }

  /**
   * Fetch a contact by its id.
   * @summary /contacts/{contact_id}
   * @param contactId ID of the contact
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOrganizationContactResponse>
   */
  getOrganizationContact(contactId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetOrganizationContactResponse>;
  /**
   * @param contactId ID of the contact
   * @param callback The callback
   */
  getOrganizationContact(contactId: number, callback: msRest.ServiceCallback<Models.Contact>): void;
  /**
   * @param contactId ID of the contact
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrganizationContact(contactId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Contact>): void;
  getOrganizationContact(contactId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Contact>, callback?: msRest.ServiceCallback<Models.Contact>): Promise<Models.GetOrganizationContactResponse> {
    return this.sendOperationRequest(
      {
        contactId,
        options
      },
      getOrganizationContactOperationSpec,
      callback) as Promise<Models.GetOrganizationContactResponse>;
  }

  /**
   * Fetch all of the assets for the group.
   * @summary /fleet/assets
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllAssetsResponse>
   */
  getAllAssets(options?: msRest.RequestOptionsBase): Promise<Models.GetAllAssetsResponse>;
  /**
   * @param callback The callback
   */
  getAllAssets(callback: msRest.ServiceCallback<Models.GetAllAssetsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllAssets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetAllAssetsOKResponse>): void;
  getAllAssets(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetAllAssetsOKResponse>, callback?: msRest.ServiceCallback<Models.GetAllAssetsOKResponse>): Promise<Models.GetAllAssetsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllAssetsOperationSpec,
      callback) as Promise<Models.GetAllAssetsResponse>;
  }

  /**
   * Fetch current locations of all assets for the group.
   * @summary /fleet/assets/locations
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllAssetCurrentLocationsResponse>
   */
  getAllAssetCurrentLocations(options?: msRest.RequestOptionsBase): Promise<Models.GetAllAssetCurrentLocationsResponse>;
  /**
   * @param callback The callback
   */
  getAllAssetCurrentLocations(callback: msRest.ServiceCallback<Models.GetAllAssetCurrentLocationsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllAssetCurrentLocations(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetAllAssetCurrentLocationsOKResponse>): void;
  getAllAssetCurrentLocations(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetAllAssetCurrentLocationsOKResponse>, callback?: msRest.ServiceCallback<Models.GetAllAssetCurrentLocationsOKResponse>): Promise<Models.GetAllAssetCurrentLocationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllAssetCurrentLocationsOperationSpec,
      callback) as Promise<Models.GetAllAssetCurrentLocationsResponse>;
  }

  /**
   * Fetch the historical locations for the asset.
   * @summary /fleet/assets/{assetId:[0-9]+}/locations
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAssetLocationResponse>
   */
  getAssetLocation(options?: msRest.RequestOptionsBase): Promise<Models.GetAssetLocationResponse>;
  /**
   * @param callback The callback
   */
  getAssetLocation(callback: msRest.ServiceCallback<Models.AssetLocationResponseItem[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAssetLocation(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AssetLocationResponseItem[]>): void;
  getAssetLocation(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AssetLocationResponseItem[]>, callback?: msRest.ServiceCallback<Models.AssetLocationResponseItem[]>): Promise<Models.GetAssetLocationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAssetLocationOperationSpec,
      callback) as Promise<Models.GetAssetLocationResponse>;
  }

  /**
   * Fetch the reefer-specific stats of an asset.
   * @summary /fleet/assets/{assetId:[0-9]+}/reefer
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAssetReeferResponse>
   */
  getAssetReefer(options?: msRest.RequestOptionsBase): Promise<Models.GetAssetReeferResponse>;
  /**
   * @param callback The callback
   */
  getAssetReefer(callback: msRest.ServiceCallback<Models.AssetReeferResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAssetReefer(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AssetReeferResponse>): void;
  getAssetReefer(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AssetReeferResponse>, callback?: msRest.ServiceCallback<Models.AssetReeferResponse>): Promise<Models.GetAssetReeferResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAssetReeferOperationSpec,
      callback) as Promise<Models.GetAssetReeferResponse>;
  }

  /**
   * Fetch all of the dispatch routes for the group.
   * @summary /fleet/dispatch/routes
   * @param [options] The optional parameters
   * @returns Promise<Models.FetchAllDispatchRoutesResponse>
   */
  fetchAllDispatchRoutes(options?: msRest.RequestOptionsBase): Promise<Models.FetchAllDispatchRoutesResponse>;
  /**
   * @param callback The callback
   */
  fetchAllDispatchRoutes(callback: msRest.ServiceCallback<Models.DispatchRoute[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  fetchAllDispatchRoutes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute[]>): void;
  fetchAllDispatchRoutes(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute[]>, callback?: msRest.ServiceCallback<Models.DispatchRoute[]>): Promise<Models.FetchAllDispatchRoutesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      fetchAllDispatchRoutesOperationSpec,
      callback) as Promise<Models.FetchAllDispatchRoutesResponse>;
  }

  /**
   * Create a new dispatch route.
   * @summary /fleet/dispatch/routes
   * @param createDispatchRouteParams
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateDispatchRouteResponse>
   */
  createDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, options?: msRest.RequestOptionsBase): Promise<Models.CreateDispatchRouteResponse>;
  /**
   * @param createDispatchRouteParams
   * @param callback The callback
   */
  createDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  /**
   * @param createDispatchRouteParams
   * @param options The optional parameters
   * @param callback The callback
   */
  createDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  createDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute>, callback?: msRest.ServiceCallback<Models.DispatchRoute>): Promise<Models.CreateDispatchRouteResponse> {
    return this.sendOperationRequest(
      {
        createDispatchRouteParams,
        options
      },
      createDispatchRouteOperationSpec,
      callback) as Promise<Models.CreateDispatchRouteResponse>;
  }

  /**
   * Fetch all updates to a job including route data in the last 24 hours or subsequent to an
   * sequence ID
   * @summary /fleet/dispatch/routes/job_updates
   * @param [options] The optional parameters
   * @returns Promise<Models.FetchAllRouteJobUpdatesResponse>
   */
  fetchAllRouteJobUpdates(options?: msRest.RequestOptionsBase): Promise<Models.FetchAllRouteJobUpdatesResponse>;
  /**
   * @param callback The callback
   */
  fetchAllRouteJobUpdates(callback: msRest.ServiceCallback<Models.AllRouteJobUpdates>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  fetchAllRouteJobUpdates(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AllRouteJobUpdates>): void;
  fetchAllRouteJobUpdates(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AllRouteJobUpdates>, callback?: msRest.ServiceCallback<Models.AllRouteJobUpdates>): Promise<Models.FetchAllRouteJobUpdatesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      fetchAllRouteJobUpdatesOperationSpec,
      callback) as Promise<Models.FetchAllRouteJobUpdatesResponse>;
  }

  /**
   * Fetch a dispatch route by id.
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}
   * @param routeId ID of the dispatch route.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDispatchRouteByIdResponse>
   */
  getDispatchRouteById(routeId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetDispatchRouteByIdResponse>;
  /**
   * @param routeId ID of the dispatch route.
   * @param callback The callback
   */
  getDispatchRouteById(routeId: number, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  /**
   * @param routeId ID of the dispatch route.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDispatchRouteById(routeId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  getDispatchRouteById(routeId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute>, callback?: msRest.ServiceCallback<Models.DispatchRoute>): Promise<Models.GetDispatchRouteByIdResponse> {
    return this.sendOperationRequest(
      {
        routeId,
        options
      },
      getDispatchRouteByIdOperationSpec,
      callback) as Promise<Models.GetDispatchRouteByIdResponse>;
  }

  /**
   * Update a dispatch route and its associated jobs.
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/
   * @param updateDispatchRouteParams
   * @param routeId ID of the dispatch route.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateDispatchRouteByIdResponse>
   */
  updateDispatchRouteById(updateDispatchRouteParams: Models.DispatchRoute, routeId: number, options?: msRest.RequestOptionsBase): Promise<Models.UpdateDispatchRouteByIdResponse>;
  /**
   * @param updateDispatchRouteParams
   * @param routeId ID of the dispatch route.
   * @param callback The callback
   */
  updateDispatchRouteById(updateDispatchRouteParams: Models.DispatchRoute, routeId: number, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  /**
   * @param updateDispatchRouteParams
   * @param routeId ID of the dispatch route.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDispatchRouteById(updateDispatchRouteParams: Models.DispatchRoute, routeId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  updateDispatchRouteById(updateDispatchRouteParams: Models.DispatchRoute, routeId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute>, callback?: msRest.ServiceCallback<Models.DispatchRoute>): Promise<Models.UpdateDispatchRouteByIdResponse> {
    return this.sendOperationRequest(
      {
        updateDispatchRouteParams,
        routeId,
        options
      },
      updateDispatchRouteByIdOperationSpec,
      callback) as Promise<Models.UpdateDispatchRouteByIdResponse>;
  }

  /**
   * Delete a dispatch route and its associated jobs.
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/
   * @param routeId ID of the dispatch route.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDispatchRouteById(routeId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param routeId ID of the dispatch route.
   * @param callback The callback
   */
  deleteDispatchRouteById(routeId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param routeId ID of the dispatch route.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDispatchRouteById(routeId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDispatchRouteById(routeId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        routeId,
        options
      },
      deleteDispatchRouteByIdOperationSpec,
      callback);
  }

  /**
   * Fetch the history of a dispatch route.
   * @summary /fleet/dispatch/routes/{route_id:[0-9]+}/history
   * @param routeId ID of the route with history.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDispatchRouteHistoryResponse>
   */
  getDispatchRouteHistory(routeId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetDispatchRouteHistoryResponse>;
  /**
   * @param routeId ID of the route with history.
   * @param callback The callback
   */
  getDispatchRouteHistory(routeId: number, callback: msRest.ServiceCallback<Models.DispatchRouteHistory>): void;
  /**
   * @param routeId ID of the route with history.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDispatchRouteHistory(routeId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRouteHistory>): void;
  getDispatchRouteHistory(routeId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRouteHistory>, callback?: msRest.ServiceCallback<Models.DispatchRouteHistory>): Promise<Models.GetDispatchRouteHistoryResponse> {
    return this.sendOperationRequest(
      {
        routeId,
        options
      },
      getDispatchRouteHistoryOperationSpec,
      callback) as Promise<Models.GetDispatchRouteHistoryResponse>;
  }

  /**
   * Create a new driver.
   * @summary /fleet/drivers/create
   * @param createDriverParam Driver creation body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateDriverResponse>
   */
  createDriver(createDriverParam: Models.DriverForCreate, options?: msRest.RequestOptionsBase): Promise<Models.CreateDriverResponse>;
  /**
   * @param createDriverParam Driver creation body
   * @param callback The callback
   */
  createDriver(createDriverParam: Models.DriverForCreate, callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  /**
   * @param createDriverParam Driver creation body
   * @param options The optional parameters
   * @param callback The callback
   */
  createDriver(createDriverParam: Models.DriverForCreate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  createDriver(createDriverParam: Models.DriverForCreate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentDriver>, callback?: msRest.ServiceCallback<Models.CurrentDriver>): Promise<Models.CreateDriverResponse> {
    return this.sendOperationRequest(
      {
        createDriverParam,
        options
      },
      createDriverOperationSpec,
      callback) as Promise<Models.CreateDriverResponse>;
  }

  /**
   * Fetch all of the document types.
   * @summary /fleet/drivers/document_types
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDriverDocumentTypesByOrgIdResponse>
   */
  getDriverDocumentTypesByOrgId(options?: msRest.RequestOptionsBase): Promise<Models.GetDriverDocumentTypesByOrgIdResponse>;
  /**
   * @param callback The callback
   */
  getDriverDocumentTypesByOrgId(callback: msRest.ServiceCallback<Models.DocumentType[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDriverDocumentTypesByOrgId(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DocumentType[]>): void;
  getDriverDocumentTypesByOrgId(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DocumentType[]>, callback?: msRest.ServiceCallback<Models.DocumentType[]>): Promise<Models.GetDriverDocumentTypesByOrgIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDriverDocumentTypesByOrgIdOperationSpec,
      callback) as Promise<Models.GetDriverDocumentTypesByOrgIdResponse>;
  }

  /**
   * Fetch all of the documents.
   * @summary /fleet/drivers/documents
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDriverDocumentsByOrgIdResponse>
   */
  getDriverDocumentsByOrgId(options?: msRest.RequestOptionsBase): Promise<Models.GetDriverDocumentsByOrgIdResponse>;
  /**
   * @param callback The callback
   */
  getDriverDocumentsByOrgId(callback: msRest.ServiceCallback<Models.Document[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDriverDocumentsByOrgId(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Document[]>): void;
  getDriverDocumentsByOrgId(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Document[]>, callback?: msRest.ServiceCallback<Models.Document[]>): Promise<Models.GetDriverDocumentsByOrgIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDriverDocumentsByOrgIdOperationSpec,
      callback) as Promise<Models.GetDriverDocumentsByOrgIdResponse>;
  }

  /**
   * Fetch all deactivated drivers for the group.
   * @summary /fleet/drivers/inactive
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllDeactivatedDriversResponse>
   */
  getAllDeactivatedDrivers(options?: msRest.RequestOptionsBase): Promise<Models.GetAllDeactivatedDriversResponse>;
  /**
   * @param callback The callback
   */
  getAllDeactivatedDrivers(callback: msRest.ServiceCallback<Models.CurrentDriver[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllDeactivatedDrivers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentDriver[]>): void;
  getAllDeactivatedDrivers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentDriver[]>, callback?: msRest.ServiceCallback<Models.CurrentDriver[]>): Promise<Models.GetAllDeactivatedDriversResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllDeactivatedDriversOperationSpec,
      callback) as Promise<Models.GetAllDeactivatedDriversResponse>;
  }

  /**
   * Fetch deactivated driver by id.
   * @summary /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeactivatedDriverByIdResponse>
   */
  getDeactivatedDriverById(options?: msRest.RequestOptionsBase): Promise<Models.GetDeactivatedDriverByIdResponse>;
  /**
   * @param callback The callback
   */
  getDeactivatedDriverById(callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeactivatedDriverById(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  getDeactivatedDriverById(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentDriver>, callback?: msRest.ServiceCallback<Models.CurrentDriver>): Promise<Models.GetDeactivatedDriverByIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDeactivatedDriverByIdOperationSpec,
      callback) as Promise<Models.GetDeactivatedDriverByIdResponse>;
  }

  /**
   * Reactivate the inactive driver having id.
   * @summary /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   * @param reactivateDriverParam Driver reactivation body
   * @param [options] The optional parameters
   * @returns Promise<Models.ReactivateDriverByIdResponse>
   */
  reactivateDriverById(reactivateDriverParam: Models.ReactivateDriverParam, options?: msRest.RequestOptionsBase): Promise<Models.ReactivateDriverByIdResponse>;
  /**
   * @param reactivateDriverParam Driver reactivation body
   * @param callback The callback
   */
  reactivateDriverById(reactivateDriverParam: Models.ReactivateDriverParam, callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  /**
   * @param reactivateDriverParam Driver reactivation body
   * @param options The optional parameters
   * @param callback The callback
   */
  reactivateDriverById(reactivateDriverParam: Models.ReactivateDriverParam, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  reactivateDriverById(reactivateDriverParam: Models.ReactivateDriverParam, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentDriver>, callback?: msRest.ServiceCallback<Models.CurrentDriver>): Promise<Models.ReactivateDriverByIdResponse> {
    return this.sendOperationRequest(
      {
        reactivateDriverParam,
        options
      },
      reactivateDriverByIdOperationSpec,
      callback) as Promise<Models.ReactivateDriverByIdResponse>;
  }

  /**
   * Fetch the safety score for the driver.
   * @summary /fleet/drivers/{driverId:[0-9]+}/safety/score
   * @param driverId ID of the driver
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDriverSafetyScoreResponse>
   */
  getDriverSafetyScore(driverId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetDriverSafetyScoreResponse>;
  /**
   * @param driverId ID of the driver
   * @param callback The callback
   */
  getDriverSafetyScore(driverId: number, callback: msRest.ServiceCallback<Models.DriverSafetyScoreResponse>): void;
  /**
   * @param driverId ID of the driver
   * @param options The optional parameters
   * @param callback The callback
   */
  getDriverSafetyScore(driverId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DriverSafetyScoreResponse>): void;
  getDriverSafetyScore(driverId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DriverSafetyScoreResponse>, callback?: msRest.ServiceCallback<Models.DriverSafetyScoreResponse>): Promise<Models.GetDriverSafetyScoreResponse> {
    return this.sendOperationRequest(
      {
        driverId,
        options
      },
      getDriverSafetyScoreOperationSpec,
      callback) as Promise<Models.GetDriverSafetyScoreResponse>;
  }

  /**
   * Fetch driver by id.
   * @summary /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDriverByIdResponse>
   */
  getDriverById(options?: msRest.RequestOptionsBase): Promise<Models.GetDriverByIdResponse>;
  /**
   * @param callback The callback
   */
  getDriverById(callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDriverById(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentDriver>): void;
  getDriverById(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentDriver>, callback?: msRest.ServiceCallback<Models.CurrentDriver>): Promise<Models.GetDriverByIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDriverByIdOperationSpec,
      callback) as Promise<Models.GetDriverByIdResponse>;
  }

  /**
   * Deactivate a driver with the given id.
   * @summary /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deactivateDriver(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deactivateDriver(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deactivateDriver(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deactivateDriver(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deactivateDriverOperationSpec,
      callback);
  }

  /**
   * Fetch all of the dispatch routes for a given driver.
   * @summary /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
   * @param driverId ID of the driver with the associated routes.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDispatchRoutesByDriverIdResponse>
   */
  getDispatchRoutesByDriverId(driverId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetDispatchRoutesByDriverIdResponse>;
  /**
   * @param driverId ID of the driver with the associated routes.
   * @param callback The callback
   */
  getDispatchRoutesByDriverId(driverId: number, callback: msRest.ServiceCallback<Models.DispatchRoute[]>): void;
  /**
   * @param driverId ID of the driver with the associated routes.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDispatchRoutesByDriverId(driverId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute[]>): void;
  getDispatchRoutesByDriverId(driverId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute[]>, callback?: msRest.ServiceCallback<Models.DispatchRoute[]>): Promise<Models.GetDispatchRoutesByDriverIdResponse> {
    return this.sendOperationRequest(
      {
        driverId,
        options
      },
      getDispatchRoutesByDriverIdOperationSpec,
      callback) as Promise<Models.GetDispatchRoutesByDriverIdResponse>;
  }

  /**
   * Create a new dispatch route for the driver with driver_id.
   * @summary /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
   * @param createDispatchRouteParams
   * @param driverId ID of the driver with the associated routes.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateDriverDispatchRouteResponse>
   */
  createDriverDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, driverId: number, options?: msRest.RequestOptionsBase): Promise<Models.CreateDriverDispatchRouteResponse>;
  /**
   * @param createDispatchRouteParams
   * @param driverId ID of the driver with the associated routes.
   * @param callback The callback
   */
  createDriverDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, driverId: number, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  /**
   * @param createDispatchRouteParams
   * @param driverId ID of the driver with the associated routes.
   * @param options The optional parameters
   * @param callback The callback
   */
  createDriverDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, driverId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  createDriverDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, driverId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute>, callback?: msRest.ServiceCallback<Models.DispatchRoute>): Promise<Models.CreateDriverDispatchRouteResponse> {
    return this.sendOperationRequest(
      {
        createDispatchRouteParams,
        driverId,
        options
      },
      createDriverDispatchRouteOperationSpec,
      callback) as Promise<Models.CreateDriverDispatchRouteResponse>;
  }

  /**
   * Create a driver document for the given driver.
   * @summary /fleet/drivers/{driver_id:[0-9]+}/documents
   * @param createDocumentParams To create a document for a given document type, the document type's
   * uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the
   * document type’s list of field types in the correct order. In other words, a field's valueType
   * and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match
   * with the document field type’s valueType at index _i_.
   * @param driverId ID of the driver for whom the document is created.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateDriverDocumentResponse>
   */
  createDriverDocument(createDocumentParams: Models.DocumentCreate, driverId: number, options?: msRest.RequestOptionsBase): Promise<Models.CreateDriverDocumentResponse>;
  /**
   * @param createDocumentParams To create a document for a given document type, the document type's
   * uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the
   * document type’s list of field types in the correct order. In other words, a field's valueType
   * and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match
   * with the document field type’s valueType at index _i_.
   * @param driverId ID of the driver for whom the document is created.
   * @param callback The callback
   */
  createDriverDocument(createDocumentParams: Models.DocumentCreate, driverId: number, callback: msRest.ServiceCallback<Models.Document>): void;
  /**
   * @param createDocumentParams To create a document for a given document type, the document type's
   * uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the
   * document type’s list of field types in the correct order. In other words, a field's valueType
   * and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match
   * with the document field type’s valueType at index _i_.
   * @param driverId ID of the driver for whom the document is created.
   * @param options The optional parameters
   * @param callback The callback
   */
  createDriverDocument(createDocumentParams: Models.DocumentCreate, driverId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Document>): void;
  createDriverDocument(createDocumentParams: Models.DocumentCreate, driverId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Document>, callback?: msRest.ServiceCallback<Models.Document>): Promise<Models.CreateDriverDocumentResponse> {
    return this.sendOperationRequest(
      {
        createDocumentParams,
        driverId,
        options
      },
      createDriverDocumentOperationSpec,
      callback) as Promise<Models.CreateDriverDocumentResponse>;
  }

  /**
   * Fetch locations for a given vehicle between a start/end time. The maximum query duration is 30
   * minutes.
   * @summary /fleet/vehicles/locations
   * @param startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 30
   * minutes)
   * @param endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVehiclesLocationsResponse>
   */
  getVehiclesLocations(startMs: number, endMs: number, options?: msRest.RequestOptionsBase): Promise<Models.GetVehiclesLocationsResponse>;
  /**
   * @param startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 30
   * minutes)
   * @param endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
   * @param callback The callback
   */
  getVehiclesLocations(startMs: number, endMs: number, callback: msRest.ServiceCallback<Models.FleetVehiclesLocationsItem[]>): void;
  /**
   * @param startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 30
   * minutes)
   * @param endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 30 minutes)
   * @param options The optional parameters
   * @param callback The callback
   */
  getVehiclesLocations(startMs: number, endMs: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FleetVehiclesLocationsItem[]>): void;
  getVehiclesLocations(startMs: number, endMs: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FleetVehiclesLocationsItem[]>, callback?: msRest.ServiceCallback<Models.FleetVehiclesLocationsItem[]>): Promise<Models.GetVehiclesLocationsResponse> {
    return this.sendOperationRequest(
      {
        startMs,
        endMs,
        options
      },
      getVehiclesLocationsOperationSpec,
      callback) as Promise<Models.GetVehiclesLocationsResponse>;
  }

  /**
   * Fetch engine state and aux input data for all vehicles in the group between a start/end time.
   * Data returned may be affected by device connectivity and processing time.
   * @summary /fleet/vehicles/stats
   * @param startMs Time in Unix epoch milliseconds for the start of the query.
   * @param endMs Time in Unix epoch milliseconds for the end of the query.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVehicleStatsResponse>
   */
  getVehicleStats(startMs: number, endMs: number, options?: Models.SamsaraAPIGetVehicleStatsOptionalParams): Promise<Models.GetVehicleStatsResponse>;
  /**
   * @param startMs Time in Unix epoch milliseconds for the start of the query.
   * @param endMs Time in Unix epoch milliseconds for the end of the query.
   * @param callback The callback
   */
  getVehicleStats(startMs: number, endMs: number, callback: msRest.ServiceCallback<Models.GetVehicleStatsOKResponse>): void;
  /**
   * @param startMs Time in Unix epoch milliseconds for the start of the query.
   * @param endMs Time in Unix epoch milliseconds for the end of the query.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVehicleStats(startMs: number, endMs: number, options: Models.SamsaraAPIGetVehicleStatsOptionalParams, callback: msRest.ServiceCallback<Models.GetVehicleStatsOKResponse>): void;
  getVehicleStats(startMs: number, endMs: number, options?: Models.SamsaraAPIGetVehicleStatsOptionalParams | msRest.ServiceCallback<Models.GetVehicleStatsOKResponse>, callback?: msRest.ServiceCallback<Models.GetVehicleStatsOKResponse>): Promise<Models.GetVehicleStatsResponse> {
    return this.sendOperationRequest(
      {
        startMs,
        endMs,
        options
      },
      getVehicleStatsOperationSpec,
      callback) as Promise<Models.GetVehicleStatsResponse>;
  }

  /**
   * Fetch harsh event details for a vehicle.
   * @summary /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
   * @param vehicleId ID of the vehicle
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVehicleHarshEventResponse>
   */
  getVehicleHarshEvent(vehicleId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetVehicleHarshEventResponse>;
  /**
   * @param vehicleId ID of the vehicle
   * @param callback The callback
   */
  getVehicleHarshEvent(vehicleId: number, callback: msRest.ServiceCallback<Models.VehicleHarshEventResponse>): void;
  /**
   * @param vehicleId ID of the vehicle
   * @param options The optional parameters
   * @param callback The callback
   */
  getVehicleHarshEvent(vehicleId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VehicleHarshEventResponse>): void;
  getVehicleHarshEvent(vehicleId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VehicleHarshEventResponse>, callback?: msRest.ServiceCallback<Models.VehicleHarshEventResponse>): Promise<Models.GetVehicleHarshEventResponse> {
    return this.sendOperationRequest(
      {
        vehicleId,
        options
      },
      getVehicleHarshEventOperationSpec,
      callback) as Promise<Models.GetVehicleHarshEventResponse>;
  }

  /**
   * Fetch the safety score for the vehicle.
   * @summary /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
   * @param vehicleId ID of the vehicle
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVehicleSafetyScoreResponse>
   */
  getVehicleSafetyScore(vehicleId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetVehicleSafetyScoreResponse>;
  /**
   * @param vehicleId ID of the vehicle
   * @param callback The callback
   */
  getVehicleSafetyScore(vehicleId: number, callback: msRest.ServiceCallback<Models.VehicleSafetyScoreResponse>): void;
  /**
   * @param vehicleId ID of the vehicle
   * @param options The optional parameters
   * @param callback The callback
   */
  getVehicleSafetyScore(vehicleId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VehicleSafetyScoreResponse>): void;
  getVehicleSafetyScore(vehicleId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VehicleSafetyScoreResponse>, callback?: msRest.ServiceCallback<Models.VehicleSafetyScoreResponse>): Promise<Models.GetVehicleSafetyScoreResponse> {
    return this.sendOperationRequest(
      {
        vehicleId,
        options
      },
      getVehicleSafetyScoreOperationSpec,
      callback) as Promise<Models.GetVehicleSafetyScoreResponse>;
  }

  /**
   * Gets a specific vehicle.
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFleetVehicleResponse>
   */
  getFleetVehicle(options?: msRest.RequestOptionsBase): Promise<Models.GetFleetVehicleResponse>;
  /**
   * @param callback The callback
   */
  getFleetVehicle(callback: msRest.ServiceCallback<Models.FleetVehicleResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFleetVehicle(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FleetVehicleResponse>): void;
  getFleetVehicle(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FleetVehicleResponse>, callback?: msRest.ServiceCallback<Models.FleetVehicleResponse>): Promise<Models.GetFleetVehicleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFleetVehicleOperationSpec,
      callback) as Promise<Models.GetFleetVehicleResponse>;
  }

  /**
   * Updates the specified vehicle using JSON merge patch format. See IETF RFC 7396:
   * https://tools.ietf.org/html/rfc7396.
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchFleetVehicleResponse>
   */
  patchFleetVehicle(data: Models.Data, options?: msRest.RequestOptionsBase): Promise<Models.PatchFleetVehicleResponse>;
  /**
   * @param data
   * @param callback The callback
   */
  patchFleetVehicle(data: Models.Data, callback: msRest.ServiceCallback<Models.FleetVehicleResponse>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  patchFleetVehicle(data: Models.Data, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FleetVehicleResponse>): void;
  patchFleetVehicle(data: Models.Data, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FleetVehicleResponse>, callback?: msRest.ServiceCallback<Models.FleetVehicleResponse>): Promise<Models.PatchFleetVehicleResponse> {
    return this.sendOperationRequest(
      {
        data,
        options
      },
      patchFleetVehicleOperationSpec,
      callback) as Promise<Models.PatchFleetVehicleResponse>;
  }

  /**
   * Fetch all of the dispatch routes for a given vehicle.
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDispatchRoutesByVehicleIdResponse>
   */
  getDispatchRoutesByVehicleId(vehicleId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetDispatchRoutesByVehicleIdResponse>;
  /**
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param callback The callback
   */
  getDispatchRoutesByVehicleId(vehicleId: number, callback: msRest.ServiceCallback<Models.DispatchRoute[]>): void;
  /**
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDispatchRoutesByVehicleId(vehicleId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute[]>): void;
  getDispatchRoutesByVehicleId(vehicleId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute[]>, callback?: msRest.ServiceCallback<Models.DispatchRoute[]>): Promise<Models.GetDispatchRoutesByVehicleIdResponse> {
    return this.sendOperationRequest(
      {
        vehicleId,
        options
      },
      getDispatchRoutesByVehicleIdOperationSpec,
      callback) as Promise<Models.GetDispatchRoutesByVehicleIdResponse>;
  }

  /**
   * Create a new dispatch route for the vehicle with vehicle_id.
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
   * @param createDispatchRouteParams
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateVehicleDispatchRouteResponse>
   */
  createVehicleDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, vehicleId: number, options?: msRest.RequestOptionsBase): Promise<Models.CreateVehicleDispatchRouteResponse>;
  /**
   * @param createDispatchRouteParams
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param callback The callback
   */
  createVehicleDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, vehicleId: number, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  /**
   * @param createDispatchRouteParams
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param options The optional parameters
   * @param callback The callback
   */
  createVehicleDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, vehicleId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DispatchRoute>): void;
  createVehicleDispatchRoute(createDispatchRouteParams: Models.DispatchRouteCreate, vehicleId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DispatchRoute>, callback?: msRest.ServiceCallback<Models.DispatchRoute>): Promise<Models.CreateVehicleDispatchRouteResponse> {
    return this.sendOperationRequest(
      {
        createDispatchRouteParams,
        vehicleId,
        options
      },
      createVehicleDispatchRouteOperationSpec,
      callback) as Promise<Models.CreateVehicleDispatchRouteResponse>;
  }

  /**
   * Fetch locations for a given vehicle between a start/end time. The maximum query duration is one
   * hour.
   * @summary /fleet/vehicles/{vehicle_id:[0-9]+}/locations
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
   * @param endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVehicleLocationsResponse>
   */
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, options?: msRest.RequestOptionsBase): Promise<Models.GetVehicleLocationsResponse>;
  /**
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
   * @param endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
   * @param callback The callback
   */
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, callback: msRest.ServiceCallback<Models.FleetVehicleLocation[]>): void;
  /**
   * @param vehicleId ID of the vehicle with the associated routes.
   * @param startMs Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)
   * @param endMs Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)
   * @param options The optional parameters
   * @param callback The callback
   */
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FleetVehicleLocation[]>): void;
  getVehicleLocations(vehicleId: number, startMs: number, endMs: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FleetVehicleLocation[]>, callback?: msRest.ServiceCallback<Models.FleetVehicleLocation[]>): Promise<Models.GetVehicleLocationsResponse> {
    return this.sendOperationRequest(
      {
        vehicleId,
        startMs,
        endMs,
        options
      },
      getVehicleLocationsOperationSpec,
      callback) as Promise<Models.GetVehicleLocationsResponse>;
  }

  /**
   * Fetch all of the data inputs for a group.
   * @summary /industrial/data
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllDataInputsResponse>
   */
  getAllDataInputs(options?: msRest.RequestOptionsBase): Promise<Models.GetAllDataInputsResponse>;
  /**
   * @param callback The callback
   */
  getAllDataInputs(callback: msRest.ServiceCallback<Models.GetAllDataInputsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllDataInputs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetAllDataInputsOKResponse>): void;
  getAllDataInputs(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetAllDataInputsOKResponse>, callback?: msRest.ServiceCallback<Models.GetAllDataInputsOKResponse>): Promise<Models.GetAllDataInputsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllDataInputsOperationSpec,
      callback) as Promise<Models.GetAllDataInputsResponse>;
  }

  /**
   * Fetch datapoints from a given data input.
   * @summary /industrial/data/{data_input_id:[0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDataInputResponse>
   */
  getDataInput(options?: msRest.RequestOptionsBase): Promise<Models.GetDataInputResponse>;
  /**
   * @param callback The callback
   */
  getDataInput(callback: msRest.ServiceCallback<Models.DataInputHistoryResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDataInput(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataInputHistoryResponse>): void;
  getDataInput(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataInputHistoryResponse>, callback?: msRest.ServiceCallback<Models.DataInputHistoryResponse>): Promise<Models.GetDataInputResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDataInputOperationSpec,
      callback) as Promise<Models.GetDataInputResponse>;
  }

  /**
   * Fetch all of the tags for a group.
   * @summary /tags
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllTagsResponse>
   */
  getAllTags(options?: msRest.RequestOptionsBase): Promise<Models.GetAllTagsResponse>;
  /**
   * @param callback The callback
   */
  getAllTags(callback: msRest.ServiceCallback<Models.GetAllTagsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllTags(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetAllTagsOKResponse>): void;
  getAllTags(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetAllTagsOKResponse>, callback?: msRest.ServiceCallback<Models.GetAllTagsOKResponse>): Promise<Models.GetAllTagsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllTagsOperationSpec,
      callback) as Promise<Models.GetAllTagsResponse>;
  }

  /**
   * Create a new tag for the group.
   * @summary /tags
   * @param tagCreateParams
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateTagResponse>
   */
  createTag(tagCreateParams: Models.TagCreate, options?: msRest.RequestOptionsBase): Promise<Models.CreateTagResponse>;
  /**
   * @param tagCreateParams
   * @param callback The callback
   */
  createTag(tagCreateParams: Models.TagCreate, callback: msRest.ServiceCallback<Models.Tag>): void;
  /**
   * @param tagCreateParams
   * @param options The optional parameters
   * @param callback The callback
   */
  createTag(tagCreateParams: Models.TagCreate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Tag>): void;
  createTag(tagCreateParams: Models.TagCreate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.CreateTagResponse> {
    return this.sendOperationRequest(
      {
        tagCreateParams,
        options
      },
      createTagOperationSpec,
      callback) as Promise<Models.CreateTagResponse>;
  }

  /**
   * Fetch a tag by id.
   * @summary /tags/{tag_id:[0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTagByIdResponse>
   */
  getTagById(options?: msRest.RequestOptionsBase): Promise<Models.GetTagByIdResponse>;
  /**
   * @param callback The callback
   */
  getTagById(callback: msRest.ServiceCallback<Models.Tag>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTagById(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Tag>): void;
  getTagById(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.GetTagByIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getTagByIdOperationSpec,
      callback) as Promise<Models.GetTagByIdResponse>;
  }

  /**
   * Update a tag with a new name and new members. This API call would replace all old members of a
   * tag with new members specified in the request body. To modify only a few devices associated with
   * a tag use the PATCH endpoint.
   * @summary /tags/{tag_id:[0-9]+}
   * @param updateTagParams
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateTagByIdResponse>
   */
  updateTagById(updateTagParams: Models.TagUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateTagByIdResponse>;
  /**
   * @param updateTagParams
   * @param callback The callback
   */
  updateTagById(updateTagParams: Models.TagUpdate, callback: msRest.ServiceCallback<Models.Tag>): void;
  /**
   * @param updateTagParams
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTagById(updateTagParams: Models.TagUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Tag>): void;
  updateTagById(updateTagParams: Models.TagUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.UpdateTagByIdResponse> {
    return this.sendOperationRequest(
      {
        updateTagParams,
        options
      },
      updateTagByIdOperationSpec,
      callback) as Promise<Models.UpdateTagByIdResponse>;
  }

  /**
   * Permanently deletes a tag.
   * @summary /tags/{tag_id:[0-9]+}
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTagById(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteTagById(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTagById(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTagById(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteTagByIdOperationSpec,
      callback);
  }

  /**
   * Add or delete specific members from a tag, or modify the name of a tag.
   * @summary /tags/{tag_id:[0-9]+}
   * @param tagModifyParams
   * @param [options] The optional parameters
   * @returns Promise<Models.ModifyTagByIdResponse>
   */
  modifyTagById(tagModifyParams: Models.TagModify, options?: msRest.RequestOptionsBase): Promise<Models.ModifyTagByIdResponse>;
  /**
   * @param tagModifyParams
   * @param callback The callback
   */
  modifyTagById(tagModifyParams: Models.TagModify, callback: msRest.ServiceCallback<Models.Tag>): void;
  /**
   * @param tagModifyParams
   * @param options The optional parameters
   * @param callback The callback
   */
  modifyTagById(tagModifyParams: Models.TagModify, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Tag>): void;
  modifyTagById(tagModifyParams: Models.TagModify, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.ModifyTagByIdResponse> {
    return this.sendOperationRequest(
      {
        tagModifyParams,
        options
      },
      modifyTagByIdOperationSpec,
      callback) as Promise<Models.ModifyTagByIdResponse>;
  }

  /**
   * Get all roles in the organization.
   * @summary /user_roles
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUserRolesResponse>
   */
  listUserRoles(options?: msRest.RequestOptionsBase): Promise<Models.ListUserRolesResponse>;
  /**
   * @param callback The callback
   */
  listUserRoles(callback: msRest.ServiceCallback<Models.UserRole[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserRoles(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserRole[]>): void;
  listUserRoles(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserRole[]>, callback?: msRest.ServiceCallback<Models.UserRole[]>): Promise<Models.ListUserRolesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listUserRolesOperationSpec,
      callback) as Promise<Models.ListUserRolesResponse>;
  }

  /**
   * Get a user.
   * @summary /users/{userId:[0-9]+}
   * @param userId ID of the user.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserByIdResponse>
   */
  getUserById(userId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetUserByIdResponse>;
  /**
   * @param userId ID of the user.
   * @param callback The callback
   */
  getUserById(userId: number, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param userId ID of the user.
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserById(userId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  getUserById(userId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.GetUserByIdResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      getUserByIdOperationSpec,
      callback) as Promise<Models.GetUserByIdResponse>;
  }

  /**
   * Remove a user from the organization.
   * @summary /users/{userId:[0-9]+}
   * @param userId ID of the user.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteUserById(userId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId ID of the user.
   * @param callback The callback
   */
  deleteUserById(userId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId ID of the user.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserById(userId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteUserById(userId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      deleteUserByIdOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOrganizationAddressesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/addresses",
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Address"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const addOrganizationAddressesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/addresses",
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "addresses",
    mapper: {
      ...Mappers.Addresses,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Address"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getOrganizationAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Address
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const deleteOrganizationAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const updateOrganizationAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "address",
    mapper: {
      ...Mappers.AddressModel,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const listContactsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/contacts",
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Contact"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getOrganizationContactOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/contacts/{contact_id}",
  urlParameters: [
    Parameters.contactId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Contact
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAllAssetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/assets",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAllAssetsOKResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAllAssetCurrentLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/assets/locations",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAllAssetCurrentLocationsOKResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAssetLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/assets/{asset_id}/locations",
  urlParameters: [
    Parameters.assetId
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssetLocationResponseItem"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAssetReeferOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/assets/{asset_id}/reefer",
  urlParameters: [
    Parameters.assetId
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AssetReeferResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const fetchAllDispatchRoutesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/dispatch/routes",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0,
    Parameters.endTime,
    Parameters.duration
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DispatchRoute"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const createDispatchRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/fleet/dispatch/routes",
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "createDispatchRouteParams",
    mapper: {
      ...Mappers.DispatchRouteCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DispatchRoute
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const fetchAllRouteJobUpdatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/dispatch/routes/job_updates",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0,
    Parameters.sequenceId,
    Parameters.include
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AllRouteJobUpdates
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDispatchRouteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/dispatch/routes/{route_id}",
  urlParameters: [
    Parameters.routeId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DispatchRoute
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const updateDispatchRouteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/fleet/dispatch/routes/{route_id}",
  urlParameters: [
    Parameters.routeId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "updateDispatchRouteParams",
    mapper: {
      ...Mappers.DispatchRoute,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DispatchRoute
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const deleteDispatchRouteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/fleet/dispatch/routes/{route_id}",
  urlParameters: [
    Parameters.routeId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDispatchRouteHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/dispatch/routes/{route_id}/history",
  urlParameters: [
    Parameters.routeId
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startTime,
    Parameters.endTime
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DispatchRouteHistory
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const createDriverOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/fleet/drivers/create",
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "createDriverParam",
    mapper: {
      ...Mappers.DriverForCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CurrentDriver
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDriverDocumentTypesByOrgIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/document_types",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentType"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDriverDocumentsByOrgIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/documents",
  queryParameters: [
    Parameters.endMs1,
    Parameters.durationMs0,
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Document"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAllDeactivatedDriversOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/inactive",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CurrentDriver"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDeactivatedDriverByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/inactive/{driver_id_or_external_id}",
  urlParameters: [
    Parameters.driverIdOrExternalId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CurrentDriver
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const reactivateDriverByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/fleet/drivers/inactive/{driver_id_or_external_id}",
  urlParameters: [
    Parameters.driverIdOrExternalId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "reactivateDriverParam",
    mapper: {
      ...Mappers.ReactivateDriverParam,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CurrentDriver
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDriverSafetyScoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/{driverId}/safety/score",
  urlParameters: [
    Parameters.driverId0
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DriverSafetyScoreResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDriverByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/{driver_id_or_external_id}",
  urlParameters: [
    Parameters.driverIdOrExternalId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CurrentDriver
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const deactivateDriverOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/fleet/drivers/{driver_id_or_external_id}",
  urlParameters: [
    Parameters.driverIdOrExternalId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDispatchRoutesByDriverIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/drivers/{driver_id}/dispatch/routes",
  urlParameters: [
    Parameters.driverId1
  ],
  queryParameters: [
    Parameters.endTime,
    Parameters.duration,
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DispatchRoute"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const createDriverDispatchRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/fleet/drivers/{driver_id}/dispatch/routes",
  urlParameters: [
    Parameters.driverId1
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "createDispatchRouteParams",
    mapper: {
      ...Mappers.DispatchRouteCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DispatchRoute
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const createDriverDocumentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/fleet/drivers/{driver_id}/documents",
  urlParameters: [
    Parameters.driverId1
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "createDocumentParams",
    mapper: {
      ...Mappers.DocumentCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Document
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getVehiclesLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/locations",
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FleetVehiclesLocationsItem"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getVehicleStatsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/stats",
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0,
    Parameters.series,
    Parameters.tagIds,
    Parameters.startingAfter,
    Parameters.endingBefore,
    Parameters.limit
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetVehicleStatsOKResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getVehicleHarshEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/{vehicleId}/safety/harsh_event",
  urlParameters: [
    Parameters.vehicleId0
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.timestamp
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VehicleHarshEventResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getVehicleSafetyScoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/{vehicleId}/safety/score",
  urlParameters: [
    Parameters.vehicleId0
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VehicleSafetyScoreResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getFleetVehicleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/{vehicle_id_or_external_id}",
  urlParameters: [
    Parameters.vehicleIdOrExternalId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FleetVehicleResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const patchFleetVehicleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1/fleet/vehicles/{vehicle_id_or_external_id}",
  urlParameters: [
    Parameters.vehicleIdOrExternalId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Data,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FleetVehicleResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDispatchRoutesByVehicleIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/{vehicle_id}/dispatch/routes",
  urlParameters: [
    Parameters.vehicleId1
  ],
  queryParameters: [
    Parameters.endTime,
    Parameters.duration,
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DispatchRoute"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const createVehicleDispatchRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/fleet/vehicles/{vehicle_id}/dispatch/routes",
  urlParameters: [
    Parameters.vehicleId1
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "createDispatchRouteParams",
    mapper: {
      ...Mappers.DispatchRouteCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DispatchRoute
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getVehicleLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/fleet/vehicles/{vehicle_id}/locations",
  urlParameters: [
    Parameters.vehicleId1
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs0,
    Parameters.endMs0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FleetVehicleLocation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAllDataInputsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/industrial/data",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0,
    Parameters.startMs1,
    Parameters.endMs1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAllDataInputsOKResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getDataInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/industrial/data/{data_input_id}",
  urlParameters: [
    Parameters.dataInputId
  ],
  queryParameters: [
    Parameters.accessToken,
    Parameters.startMs1,
    Parameters.endMs1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataInputHistoryResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getAllTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/tags",
  queryParameters: [
    Parameters.accessToken,
    Parameters.groupId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAllTagsOKResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const createTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/tags",
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "tagCreateParams",
    mapper: {
      ...Mappers.TagCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Tag
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getTagByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/tags/{tag_id}",
  urlParameters: [
    Parameters.tagId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Tag
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const updateTagByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/tags/{tag_id}",
  urlParameters: [
    Parameters.tagId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "updateTagParams",
    mapper: {
      ...Mappers.TagUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Tag
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const deleteTagByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/tags/{tag_id}",
  urlParameters: [
    Parameters.tagId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const modifyTagByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1/tags/{tag_id}",
  urlParameters: [
    Parameters.tagId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  requestBody: {
    parameterPath: "tagModifyParams",
    mapper: {
      ...Mappers.TagModify,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Tag
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const listUserRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/user_roles",
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const getUserByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const deleteUserByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

export {
  SamsaraAPI,
  SamsaraAPIContext,
  Models as SamsaraAPIModels,
  Mappers as SamsaraAPIMappers
};
export * from "./operations";
