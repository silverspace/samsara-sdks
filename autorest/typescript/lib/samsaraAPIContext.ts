/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";

const packageName = "";
const packageVersion = "";

export class SamsaraAPIContext extends msRest.ServiceClient {
  accessToken: string;
  endMs: number;
  startMs: number;
  assetId: number;
  endMs1?: number;
  dataInputId: number;
  startMs1?: number;
  durationMs?: number;
  endMs2?: number;
  driverIdOrExternalId: string;
  groupId?: number;
  timestamp: number;
  include?: string;
  sequenceId?: string;
  endingBefore?: string;
  limit?: number;
  startingAfter?: string;
  duration?: number;
  endTime?: number;
  endTime1?: number;
  startTime?: number;
  endMs3: number;
  startMs2: number;
  tagId: number;
  vehicleIdOrExternalId: string;

  /**
   * Initializes a new instance of the SamsaraAPIContext class.
   * @param accessToken Samsara API access token.
   * @param endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive.
   * Used in combination with startMs.
   * @param startMs Timestamp in milliseconds representing the start of the period to fetch,
   * inclusive. Used in combination with endMs.
   * @param assetId ID of the asset
   * @param dataInputId ID of the data input
   * @param driverIdOrExternalId ID of the driver.  This must be either the numeric ID generated by
   * Samsara or the external ID of the driver.  External IDs are customer specified key-value pairs.
   * @param timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
   * @param endMs3 Timestamp in milliseconds representing the end of the period to fetch, inclusive.
   * Used in combination with startMs.
   * @param startMs2 Timestamp in milliseconds representing the start of the period to fetch,
   * inclusive. Used in combination with endMs.
   * @param tagId ID of the tag.
   * @param vehicleIdOrExternalId ID of the vehicle.  This must be either the numeric ID generated by
   * Samsara or the external ID of the vehicle.  External IDs are customer specified key-value pairs.
   * @param [options] The parameter options
   */
  constructor(accessToken: string, endMs: number, startMs: number, assetId: number, dataInputId: number, driverIdOrExternalId: string, timestamp: number, endMs3: number, startMs2: number, tagId: number, vehicleIdOrExternalId: string, options?: Models.SamsaraAPIOptions) {
    if (accessToken === null || accessToken === undefined) {
      throw new Error('\'accessToken\' cannot be null.');
    }
    if (endMs === null || endMs === undefined) {
      throw new Error('\'endMs\' cannot be null.');
    }
    if (startMs === null || startMs === undefined) {
      throw new Error('\'startMs\' cannot be null.');
    }
    if (assetId === null || assetId === undefined) {
      throw new Error('\'assetId\' cannot be null.');
    }
    if (dataInputId === null || dataInputId === undefined) {
      throw new Error('\'dataInputId\' cannot be null.');
    }
    if (driverIdOrExternalId === null || driverIdOrExternalId === undefined) {
      throw new Error('\'driverIdOrExternalId\' cannot be null.');
    }
    if (timestamp === null || timestamp === undefined) {
      throw new Error('\'timestamp\' cannot be null.');
    }
    if (endMs3 === null || endMs3 === undefined) {
      throw new Error('\'endMs3\' cannot be null.');
    }
    if (startMs2 === null || startMs2 === undefined) {
      throw new Error('\'startMs2\' cannot be null.');
    }
    if (tagId === null || tagId === undefined) {
      throw new Error('\'tagId\' cannot be null.');
    }
    if (vehicleIdOrExternalId === null || vehicleIdOrExternalId === undefined) {
      throw new Error('\'vehicleIdOrExternalId\' cannot be null.');
    }

    if (!options) {
      options = {};
    }
    if(!options.userAgent) {
      const defaultUserAgent = msRest.getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }

    super(undefined, options);

    this.baseUri = options.baseUri || this.baseUri || "https://api.samsara.com";
    this.requestContentType = "application/json; charset=utf-8";
    this.accessToken = accessToken;
    this.endMs = endMs;
    this.startMs = startMs;
    this.assetId = assetId;
    this.dataInputId = dataInputId;
    this.driverIdOrExternalId = driverIdOrExternalId;
    this.timestamp = timestamp;
    this.endMs3 = endMs3;
    this.startMs2 = startMs2;
    this.tagId = tagId;
    this.vehicleIdOrExternalId = vehicleIdOrExternalId;

    if(options.endMs1 !== null && options.endMs1 !== undefined) {
      this.endMs1 = options.endMs1;
    }
    if(options.startMs1 !== null && options.startMs1 !== undefined) {
      this.startMs1 = options.startMs1;
    }
    if(options.durationMs !== null && options.durationMs !== undefined) {
      this.durationMs = options.durationMs;
    }
    if(options.endMs2 !== null && options.endMs2 !== undefined) {
      this.endMs2 = options.endMs2;
    }
    if(options.groupId !== null && options.groupId !== undefined) {
      this.groupId = options.groupId;
    }
    if(options.include !== null && options.include !== undefined) {
      this.include = options.include;
    }
    if(options.sequenceId !== null && options.sequenceId !== undefined) {
      this.sequenceId = options.sequenceId;
    }
    if(options.endingBefore !== null && options.endingBefore !== undefined) {
      this.endingBefore = options.endingBefore;
    }
    if(options.limit !== null && options.limit !== undefined) {
      this.limit = options.limit;
    }
    if(options.startingAfter !== null && options.startingAfter !== undefined) {
      this.startingAfter = options.startingAfter;
    }
    if(options.duration !== null && options.duration !== undefined) {
      this.duration = options.duration;
    }
    if(options.endTime !== null && options.endTime !== undefined) {
      this.endTime = options.endTime;
    }
    if(options.endTime1 !== null && options.endTime1 !== undefined) {
      this.endTime1 = options.endTime1;
    }
    if(options.startTime !== null && options.startTime !== undefined) {
      this.startTime = options.startTime;
    }
  }
}
