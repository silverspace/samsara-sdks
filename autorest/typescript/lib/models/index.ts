/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing Contact.
 * Information about a notification contact for alerts.
 *
 */
export interface Contact {
  /**
   * @member {string} [email] Email address of the contact
   */
  email?: string;
  /**
   * @member {string} [firstName] First name of the contact
   */
  firstName?: string;
  /**
   * @member {number} [id] ID of the contact
   */
  id?: number;
  /**
   * @member {string} [lastName] Last name of the contact
   */
  lastName?: string;
  /**
   * @member {string} [phone] Phone number of the contact
   */
  phone?: string;
}

/**
 * @interface
 * An interface representing AddressGeofenceCircle.
 * Information about a circular geofence. This field is only populated if the
 * geofence is a circle.
 *
 */
export interface AddressGeofenceCircle {
  /**
   * @member {number} [latitude] The latitude of the center of the circular
   * geofence
   */
  latitude?: number;
  /**
   * @member {number} [longitude] The longitude of the center of the circular
   * geofence
   */
  longitude?: number;
  /**
   * @member {number} [radiusMeters] The radius of the circular geofence
   */
  radiusMeters?: number;
}

/**
 * @interface
 * An interface representing AddressGeofencePolygonVerticesItem.
 */
export interface AddressGeofencePolygonVerticesItem {
  /**
   * @member {number} [latitude] The longitude of a geofence vertex
   */
  latitude?: number;
  /**
   * @member {number} [longitude] The longitude of a geofence vertex
   */
  longitude?: number;
}

/**
 * @interface
 * An interface representing AddressGeofencePolygon.
 * Information about a polygon geofence. This field is only populated if the
 * geofence is a polygon.
 *
 */
export interface AddressGeofencePolygon {
  /**
   * @member {AddressGeofencePolygonVerticesItem[]} [vertices] The vertices of
   * the polygon geofence. These geofence vertices describe the perimeter of
   * the polygon, and must consist of at least 3 vertices and less than 40.
   */
  vertices?: AddressGeofencePolygonVerticesItem[];
}

/**
 * @interface
 * An interface representing AddressGeofence.
 * The geofence that defines this address and its bounds. This can either be a
 * circle, or a polygon - only one key should be provided, depending on the
 * geofence type.
 *
 */
export interface AddressGeofence {
  /**
   * @member {AddressGeofenceCircle} [circle] Information about a circular
   * geofence. This field is only populated if the geofence is a circle.
   */
  circle?: AddressGeofenceCircle;
  /**
   * @member {AddressGeofencePolygon} [polygon] Information about a polygon
   * geofence. This field is only populated if the geofence is a polygon.
   */
  polygon?: AddressGeofencePolygon;
}

/**
 * @interface
 * An interface representing TagMetadata.
 */
export interface TagMetadata {
  /**
   * @member {number} id The ID of this tag.
   */
  id: number;
  /**
   * @member {string} name Name of this tag.
   */
  name: string;
}

/**
 * @interface
 * An interface representing Address.
 * Information about an address/geofence. Geofences are either a circle or a
 * polygon.
 *
 */
export interface Address {
  /**
   * @member {Contact[]} [contacts]
   */
  contacts?: Contact[];
  /**
   * @member {string} [formattedAddress] The full address associated with this
   * address/geofence, as it might be recognized by maps.google.com
   */
  formattedAddress?: string;
  /**
   * @member {AddressGeofence} [geofence]
   */
  geofence?: AddressGeofence;
  /**
   * @member {number} [id] ID of the address
   */
  id?: number;
  /**
   * @member {string} [name] Name of the address or geofence
   */
  name?: string;
  /**
   * @member {string} [notes]
   */
  notes?: string;
  /**
   * @member {TagMetadata[]} [tags]
   */
  tags?: TagMetadata[];
}

/**
 * @interface
 * An interface representing AssetCableItem.
 */
export interface AssetCableItem {
  /**
   * @member {string} [assetType] Asset type
   */
  assetType?: string;
}

/**
 * @interface
 * An interface representing Asset.
 * Basic information of an asset
 *
 */
export interface Asset {
  /**
   * @member {string} [assetSerialNumber] Serial number of the host asset
   */
  assetSerialNumber?: string;
  /**
   * @member {AssetCableItem[]} [cable] The cable connected to the asset
   */
  cable?: AssetCableItem[];
  /**
   * @member {number} [engineHours] Engine hours
   */
  engineHours?: number;
  /**
   * @member {number} id Asset ID
   */
  id: number;
  /**
   * @member {string} [name] Asset name
   */
  name?: string;
}

/**
 * @interface
 * An interface representing AssetCurrentLocation.
 * Current location of an asset
 *
 */
export interface AssetCurrentLocation {
  /**
   * @member {number} [latitude] The latitude of the location in degrees.
   */
  latitude?: number;
  /**
   * @member {string} [location] The best effort (street,city,state) for the
   * latitude and longitude.
   */
  location?: string;
  /**
   * @member {number} [longitude] The longitude of the location in degrees.
   */
  longitude?: number;
  /**
   * @member {number} [speedMilesPerHour] The speed calculated from GPS that
   * the asset was traveling at in miles per hour.
   */
  speedMilesPerHour?: number;
  /**
   * @member {number} [timeMs] Time in Unix milliseconds since epoch when the
   * asset was at the location.
   */
  timeMs?: number;
}

/**
 * @interface
 * An interface representing AssetCurrentLocationsResponseCableItem.
 */
export interface AssetCurrentLocationsResponseCableItem {
  /**
   * @member {string} [assetType] Asset type
   */
  assetType?: string;
}

/**
 * @interface
 * An interface representing AssetCurrentLocationsResponse.
 * Basic information of an asset
 *
 */
export interface AssetCurrentLocationsResponse {
  /**
   * @member {AssetCurrentLocationsResponseCableItem[]} [cable] The cable
   * connected to the asset
   */
  cable?: AssetCurrentLocationsResponseCableItem[];
  /**
   * @member {number} [engineHours] Engine hours
   */
  engineHours?: number;
  /**
   * @member {number} id Asset ID
   */
  id: number;
  /**
   * @member {AssetCurrentLocation[]} [location] Current location of an asset
   */
  location?: AssetCurrentLocation[];
  /**
   * @member {string} [name] Asset name
   */
  name?: string;
}

/**
 * @interface
 * An interface representing AssetLocationResponseItem.
 * Asset location details.
 *
 */
export interface AssetLocationResponseItem {
  /**
   * @member {number} [latitude] The latitude of the location in degrees.
   */
  latitude?: number;
  /**
   * @member {string} [location] The best effort (street,city,state) for the
   * latitude and longitude.
   */
  location?: string;
  /**
   * @member {number} [longitude] The longitude of the location in degrees.
   */
  longitude?: number;
  /**
   * @member {number} [speedMilesPerHour] The speed calculated from GPS that
   * the asset was traveling at in miles per hour.
   */
  speedMilesPerHour?: number;
  /**
   * @member {number} [time] Time in Unix milliseconds since epoch when the
   * asset was at the location.
   */
  time?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsAlarmsItemAlarmsItem.
 */
export interface AssetReeferResponseReeferStatsAlarmsItemAlarmsItem {
  /**
   * @member {number} [alarmCode] ID of the alarm
   */
  alarmCode?: number;
  /**
   * @member {string} [description] Description of the alarm
   */
  description?: string;
  /**
   * @member {string} [operatorAction] Recommended operator action
   */
  operatorAction?: string;
  /**
   * @member {number} [severity] Severity of the alarm: 1: OK to run, 2: Check
   * as specified, 3: Take immediate action
   */
  severity?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsAlarmsItem.
 */
export interface AssetReeferResponseReeferStatsAlarmsItem {
  /**
   * @member {AssetReeferResponseReeferStatsAlarmsItemAlarmsItem[]} [alarms]
   */
  alarms?: AssetReeferResponseReeferStatsAlarmsItemAlarmsItem[];
  /**
   * @member {number} [changedAtMs] Timestamp when the alarms were reported, in
   * Unix milliseconds since epoch
   */
  changedAtMs?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsEngineHoursItem.
 */
export interface AssetReeferResponseReeferStatsEngineHoursItem {
  /**
   * @member {number} [changedAtMs] Timestamp in Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {number} [engineHours] Engine hours of the reefer.
   */
  engineHours?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsFuelPercentageItem.
 */
export interface AssetReeferResponseReeferStatsFuelPercentageItem {
  /**
   * @member {number} [changedAtMs] Timestamp in Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {number} [fuelPercentage] Fuel percentage of the reefer.
   */
  fuelPercentage?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsPowerStatusItem.
 */
export interface AssetReeferResponseReeferStatsPowerStatusItem {
  /**
   * @member {number} [changedAtMs] Timestamp in Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {string} [status] Power status of the reefer.
   */
  status?: string;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsReturnAirTempItem.
 */
export interface AssetReeferResponseReeferStatsReturnAirTempItem {
  /**
   * @member {number} [changedAtMs] Timestamp in Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {number} [tempInMilliC] Return air temperature in millidegree
   * Celsius.
   */
  tempInMilliC?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStatsSetPointItem.
 */
export interface AssetReeferResponseReeferStatsSetPointItem {
  /**
   * @member {number} [changedAtMs] Timestamp in Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {number} [tempInMilliC] Set point temperature in millidegree
   * Celsius.
   */
  tempInMilliC?: number;
}

/**
 * @interface
 * An interface representing AssetReeferResponseReeferStats.
 */
export interface AssetReeferResponseReeferStats {
  /**
   * @member {AssetReeferResponseReeferStatsAlarmsItem[]} [alarms] Reefer
   * alarms
   */
  alarms?: AssetReeferResponseReeferStatsAlarmsItem[];
  /**
   * @member {AssetReeferResponseReeferStatsEngineHoursItem[]} [engineHours]
   * Engine hours of the reefer
   */
  engineHours?: AssetReeferResponseReeferStatsEngineHoursItem[];
  /**
   * @member {AssetReeferResponseReeferStatsFuelPercentageItem[]}
   * [fuelPercentage] Fuel percentage of the reefer
   */
  fuelPercentage?: AssetReeferResponseReeferStatsFuelPercentageItem[];
  /**
   * @member {AssetReeferResponseReeferStatsPowerStatusItem[]} [powerStatus]
   * Power status of the reefer
   */
  powerStatus?: AssetReeferResponseReeferStatsPowerStatusItem[];
  /**
   * @member {AssetReeferResponseReeferStatsReturnAirTempItem[]}
   * [returnAirTemp] Return air temperature of the reefer
   */
  returnAirTemp?: AssetReeferResponseReeferStatsReturnAirTempItem[];
  /**
   * @member {AssetReeferResponseReeferStatsSetPointItem[]} [setPoint] Set
   * point temperature of the reefer
   */
  setPoint?: AssetReeferResponseReeferStatsSetPointItem[];
}

/**
 * @interface
 * An interface representing AssetReeferResponse.
 * Reefer-specific asset details
 *
 */
export interface AssetReeferResponse {
  /**
   * @member {string} [assetType] Asset type
   */
  assetType?: string;
  /**
   * @member {number} [id] Asset ID
   */
  id?: number;
  /**
   * @member {string} [name] Asset name
   */
  name?: string;
  /**
   * @member {AssetReeferResponseReeferStats} [reeferStats]
   */
  reeferStats?: AssetReeferResponseReeferStats;
}

/**
 * @interface
 * An interface representing AuxInput.
 * Digital value of an aux input.
 *
 */
export interface AuxInput {
  /**
   * @member {number} timeMs Timestamp in Unix epoch milliseconds.
   */
  timeMs: number;
  /**
   * @member {boolean} value Boolean representing the digital value of the aux
   * input.
   */
  value: boolean;
}

/**
 * @interface
 * An interface representing AuxInputSeries.
 * A list of aux input values over a timerange.
 *
 */
export interface AuxInputSeries {
  /**
   * @member {Name} name The name of the aux input. Possible values include:
   * 'Emergency Lights', 'Emergency Alarm', 'Stop Paddle', 'Power Take-Off',
   * 'Plow', 'Sweeper', 'Salter', 'Boom'
   */
  name: Name;
  /**
   * @member {AuxInput[]} values
   */
  values: AuxInput[];
}

/**
 * @interface
 * An interface representing CargoResponseSensorsItem.
 */
export interface CargoResponseSensorsItem {
  /**
   * @member {boolean} [cargoEmpty] Flag indicating whether the current cargo
   * is empty or loaded.
   */
  cargoEmpty?: boolean;
  /**
   * @member {number} [id] ID of the sensor.
   */
  id?: number;
  /**
   * @member {string} [name] Name of the sensor.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing CargoResponse.
 * Contains the current cargo status of a sensor.
 *
 */
export interface CargoResponse {
  /**
   * @member {number} [groupId]
   */
  groupId?: number;
  /**
   * @member {CargoResponseSensorsItem[]} [sensors]
   */
  sensors?: CargoResponseSensorsItem[];
}

/**
 * @interface
 * An interface representing DriverBase.
 */
export interface DriverBase {
  /**
   * @member {boolean} [eldAdverseWeatherExemptionEnabled] Flag indicating this
   * driver may use Adverse Weather exemptions in ELD logs.
   */
  eldAdverseWeatherExemptionEnabled?: boolean;
  /**
   * @member {boolean} [eldBigDayExemptionEnabled] Flag indicating this driver
   * may use Big Day excemptions in ELD logs.
   */
  eldBigDayExemptionEnabled?: boolean;
  /**
   * @member {number} [eldDayStartHour] 0 indicating midnight-to-midnight ELD
   * driving hours, 12 to indicate noon-to-noon driving hours.
   */
  eldDayStartHour?: number;
  /**
   * @member {boolean} [eldExempt] Flag indicating this driver is exempt from
   * the Electronic Logging Mandate.
   */
  eldExempt?: boolean;
  /**
   * @member {string} [eldExemptReason] Reason that this driver is exempt from
   * the Electronic Logging Mandate (see eldExempt).
   */
  eldExemptReason?: string;
  /**
   * @member {boolean} [eldPcEnabled] Flag indicating this driver may select
   * the Personal Conveyance duty status in ELD logs. Default value: false .
   */
  eldPcEnabled?: boolean;
  /**
   * @member {boolean} [eldYmEnabled] Flag indicating this driver may select
   * the Yard Move duty status in ELD logs. Default value: false .
   */
  eldYmEnabled?: boolean;
  /**
   * @member {{ [propertyName: string]: string }} [externalIds] Dictionary of
   * external IDs (string key-value pairs)
   */
  externalIds?: { [propertyName: string]: string };
  /**
   * @member {number} [groupId] ID of the group if the organization has
   * multiple groups (uncommon).
   */
  groupId?: number;
  /**
   * @member {string} [licenseNumber] Driver's state issued license number.
   */
  licenseNumber?: string;
  /**
   * @member {string} [licenseState] Abbreviation of state that issued driver's
   * license.
   */
  licenseState?: string;
  /**
   * @member {string} name Driver's name.
   */
  name: string;
  /**
   * @member {string} [notes] Notes about the driver.
   */
  notes?: string;
  /**
   * @member {string} [phone] Driver's phone number. Please include only
   * digits, ex. 4157771234
   */
  phone?: string;
  /**
   * @member {string} [username] Driver's login username into the driver app.
   */
  username?: string;
  /**
   * @member {number} [vehicleId] ID of the vehicle assigned to the driver for
   * static vehicle assignments. (uncommon).
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing CurrentDriver.
 * @extends DriverBase
 */
export interface CurrentDriver extends DriverBase {
  /**
   * @member {number} id ID of the driver.
   */
  id: number;
  /**
   * @member {boolean} [isDeactivated] True if the driver account has been
   * deactivated.
   */
  isDeactivated?: boolean;
  /**
   * @member {TagMetadata[]} [tags]
   */
  tags?: TagMetadata[];
  /**
   * @member {number} [currentVehicleId] ID of the vehicle that this driver is
   * currently assigned to. Omitted if there is no current vehicle assignment
   * for this driver.
   */
  currentVehicleId?: number;
}

/**
 * @interface
 * An interface representing DataInputHistoryResponsePointsItem.
 */
export interface DataInputHistoryResponsePointsItem {
  /**
   * @member {number} [timeMs]
   */
  timeMs?: number;
  /**
   * @member {number} [value]
   */
  value?: number;
}

/**
 * @interface
 * An interface representing DataInputHistoryResponse.
 */
export interface DataInputHistoryResponse {
  /**
   * @member {number} [id] The ID of this data input
   */
  id?: number;
  /**
   * @member {string} name Name of this data input
   */
  name: string;
  /**
   * @member {DataInputHistoryResponsePointsItem[]} [points] Data points from
   * this data input
   */
  points?: DataInputHistoryResponsePointsItem[];
}

/**
 * @interface
 * An interface representing DispatchJobCreate.
 */
export interface DispatchJobCreate {
  /**
   * @member {string} [destinationAddress] The address of the job destination,
   * as it would be recognized if provided to maps.google.com. Optional if a
   * valid destination address ID is provided.
   */
  destinationAddress?: string;
  /**
   * @member {number} [destinationAddressId] ID of the job destination
   * associated with an address book entry. Optional if valid values are
   * provided for destination address or latitude/longitude. If a valid
   * destination address ID is provided, address/latitude/longitude will be
   * used from the address book entry. Name of the address book entry will only
   * be used if the destination name is not provided.
   */
  destinationAddressId?: number;
  /**
   * @member {number} [destinationLat] Latitude of the destination in decimal
   * degrees. Optional if a valid destination address ID is provided.
   */
  destinationLat?: number;
  /**
   * @member {number} [destinationLng] Longitude of the destination in decimal
   * degrees. Optional if a valid destination address ID is provided.
   */
  destinationLng?: number;
  /**
   * @member {string} [destinationName] The name of the job destination. If
   * provided, it will take precedence over the name of the address book entry.
   */
  destinationName?: string;
  /**
   * @member {string} [notes] Notes regarding the details of this job.
   */
  notes?: string;
  /**
   * @member {number} scheduledArrivalTimeMs The time at which the assigned
   * driver is scheduled to arrive at the job destination.
   */
  scheduledArrivalTimeMs: number;
  /**
   * @member {number} [scheduledDepartureTimeMs] The time at which the assigned
   * driver is scheduled to depart from the job destination.
   */
  scheduledDepartureTimeMs?: number;
}

/**
 * @interface
 * An interface representing DispatchJob.
 * @extends DispatchJobCreate
 */
export interface DispatchJob extends DispatchJobCreate {
  /**
   * @member {number} [arrivedAtMs] The time at which the driver arrived at the
   * job destination.
   */
  arrivedAtMs?: number;
  /**
   * @member {number} [completedAtMs] The time at which the job was marked
   * complete (e.g. started driving to the next destination).
   */
  completedAtMs?: number;
  /**
   * @member {number} dispatchRouteId ID of the route that this job belongs to.
   */
  dispatchRouteId: number;
  /**
   * @member {number} [driverId] ID of the driver assigned to the dispatch job.
   */
  driverId?: number;
  /**
   * @member {number} [enRouteAtMs] The time at which the assigned driver
   * started fulfilling the job (e.g. started driving to the destination).
   */
  enRouteAtMs?: number;
  /**
   * @member {number} [estimatedArrivalMs] The time at which the assigned
   * driver is estimated to arrive at the job destination. Only valid for
   * en-route jobs.
   */
  estimatedArrivalMs?: number;
  /**
   * @member {string} [fleetViewerUrl] Fleet viewer url of the dispatch job.
   */
  fleetViewerUrl?: string;
  /**
   * @member {number} groupId
   */
  groupId: number;
  /**
   * @member {number} id ID of the Samsara dispatch job.
   */
  id: number;
  /**
   * @member {JobState} jobState Possible values include:
   * 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
   * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
   */
  jobState: JobState;
  /**
   * @member {number} [skippedAtMs] The time at which the job was marked
   * skipped.
   */
  skippedAtMs?: number;
  /**
   * @member {number} [vehicleId] ID of the vehicle used for the dispatch job.
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing DispatchRouteBase.
 */
export interface DispatchRouteBase {
  /**
   * @member {number} [actualEndMs] The time in Unix epoch milliseconds that
   * the route actually ended.
   */
  actualEndMs?: number;
  /**
   * @member {number} [actualStartMs] The time in Unix epoch milliseconds that
   * the route actually started.
   */
  actualStartMs?: number;
  /**
   * @member {number} [driverId] ID of the driver assigned to the dispatch
   * route. Note that driver_id and vehicle_id are mutually exclusive. If
   * neither is specified, then the route is unassigned.
   */
  driverId?: number;
  /**
   * @member {number} [groupId] ID of the group if the organization has
   * multiple groups (optional).
   */
  groupId?: number;
  /**
   * @member {string} name Descriptive name of this route.
   */
  name: string;
  /**
   * @member {number} scheduledEndMs The time in Unix epoch milliseconds that
   * the last job in the route is scheduled to end.
   */
  scheduledEndMs: number;
  /**
   * @member {number} [scheduledMeters] The distance expected to be traveled
   * for this route in meters.
   */
  scheduledMeters?: number;
  /**
   * @member {number} scheduledStartMs The time in Unix epoch milliseconds that
   * the route is scheduled to start.
   */
  scheduledStartMs: number;
  /**
   * @member {string} [startLocationAddress] The address of the route's
   * starting location, as it would be recognized if provided to
   * maps.google.com. Optional if a valid start location address ID is
   * provided.
   */
  startLocationAddress?: string;
  /**
   * @member {number} [startLocationAddressId] ID of the start location
   * associated with an address book entry. Optional if valid values are
   * provided for start location address or latitude/longitude. If a valid
   * start location address ID is provided, address/latitude/longitude will be
   * used from the address book entry. Name of the address book entry will only
   * be used if the start location name is not provided.
   */
  startLocationAddressId?: number;
  /**
   * @member {number} [startLocationLat] Latitude of the start location in
   * decimal degrees. Optional if a valid start location address ID is
   * provided.
   */
  startLocationLat?: number;
  /**
   * @member {number} [startLocationLng] Longitude of the start location in
   * decimal degrees. Optional if a valid start location address ID is
   * provided.
   */
  startLocationLng?: number;
  /**
   * @member {string} [startLocationName] The name of the route's starting
   * location. If provided, it will take precedence over the name of the
   * address book entry.
   */
  startLocationName?: string;
  /**
   * @member {number} [trailerId] ID of the trailer assigned to the dispatch
   * route. Note that trailers can only be assigned to routes that have a
   * Vehicle or Driver assigned to them.
   */
  trailerId?: number;
  /**
   * @member {number} [vehicleId] ID of the vehicle assigned to the dispatch
   * route. Note that vehicle_id and driver_id are mutually exclusive. If
   * neither is specified, then the route is unassigned.
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing DispatchRoute.
 * @extends DispatchRouteBase
 */
export interface DispatchRoute extends DispatchRouteBase {
  /**
   * @member {DispatchJob[]} dispatchJobs The dispatch jobs associated with
   * this route.
   */
  dispatchJobs: DispatchJob[];
  /**
   * @member {number} id ID of the Samsara dispatch route.
   */
  id: number;
}

/**
 * @interface
 * An interface representing DispatchRouteCreate.
 * @extends DispatchRouteBase
 */
export interface DispatchRouteCreate extends DispatchRouteBase {
  /**
   * @member {DispatchJobCreate[]} dispatchJobs The dispatch jobs to create for
   * this route.
   */
  dispatchJobs: DispatchJobCreate[];
}

/**
 * @interface
 * An interface representing DispatchRouteHistoricalEntry.
 */
export interface DispatchRouteHistoricalEntry {
  /**
   * @member {number} [changedAtMs] Timestamp that the route was updated,
   * represented as Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {DispatchRoute} [route]
   */
  route?: DispatchRoute;
}

/**
 * @interface
 * An interface representing DispatchRouteHistory.
 */
export interface DispatchRouteHistory {
  /**
   * @member {DispatchRouteHistoricalEntry[]} [history] History of the route's
   * state changes.
   */
  history?: DispatchRouteHistoricalEntry[];
}

/**
 * @interface
 * An interface representing DocumentFieldCreate.
 */
export interface DocumentFieldCreate {
  /**
   * @member {number} [numberValue] Value of this field if this document field
   * has valueType: ValueType_Number.
   */
  numberValue?: number;
  /**
   * @member {DocumentFieldCreatePhotoValueItem[]} [photoValue] Value of this
   * field if this document field has valueType: ValueType_Photo. Array of
   * photo objects where each object contains a URL for a photo.
   */
  photoValue?: DocumentFieldCreatePhotoValueItem[];
  /**
   * @member {string} [stringValue] Value of this field if this document field
   * has valueType: ValueType_String.
   */
  stringValue?: string;
  /**
   * @member {string} valueType Determines the type of this field and what type
   * of value this field has. It should be either ValueType_Number,
   * ValueType_String, or ValueType_Photo.
   */
  valueType: string;
}

/**
 * @interface
 * An interface representing DocumentField.
 * @extends DocumentFieldCreate
 */
export interface DocumentField extends DocumentFieldCreate {
  /**
   * @member {string} label Descriptive name of this field.
   */
  label: string;
  /**
   * @member {any} [value] DEPRECATED: Please use stringValue, numberValue, or
   * photoValue instead. Value of this field. Depending on what kind of field
   * it is, this may be one of the following: an array of image urls, a float,
   * an integer, or a string.
   */
  value?: any;
}

/**
 * @interface
 * An interface representing DocumentBase.
 */
export interface DocumentBase {
  /**
   * @member {number} [dispatchJobId] ID of the Samsara dispatch job for which
   * the document is submitted
   */
  dispatchJobId?: number;
  /**
   * @member {string} [notes] Notes submitted with this document.
   */
  notes?: string;
}

/**
 * @interface
 * An interface representing Document.
 * @extends DocumentBase
 */
export interface Document extends DocumentBase {
  /**
   * @member {string} documentType Descriptive name of this type of document.
   */
  documentType: string;
  /**
   * @member {number} driverCreatedAtMs The time in Unix epoch milliseconds
   * that the document is created.
   */
  driverCreatedAtMs: number;
  /**
   * @member {number} driverId ID of the driver for whom the document is
   * submitted
   */
  driverId: number;
  /**
   * @member {DocumentField[]} fields The fields associated with this document.
   */
  fields: DocumentField[];
  /**
   * @member {number} [vehicleId] VehicleID of the driver at document creation.
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing DocumentCreate.
 * @extends DocumentBase
 */
export interface DocumentCreate extends DocumentBase {
  /**
   * @member {string} documentTypeUuid Universally unique identifier for the
   * document type this document is being created for.
   */
  documentTypeUuid: string;
  /**
   * @member {DocumentField[]} fields List of fields should match the document
   * type’s list of field types in the correct order. In other words, a field's
   * valueType and value (i.e. only one of: stringValue, numberValue, or
   * photoValue) at index _i_ should match with the document field type’s
   * valueType at index _i_.
   */
  fields: DocumentField[];
}

/**
 * @interface
 * An interface representing DocumentFieldCreatePhotoValueItem.
 */
export interface DocumentFieldCreatePhotoValueItem {
  /**
   * @member {string} [url] Photo URL for a JPG image
   */
  url?: string;
}

/**
 * @interface
 * An interface representing DocumentFieldTypeNumberValueTypeMetadata.
 * Additional metadata information for a number field type. Only defined when a
 * field type has valueType: ValueType_Number.
 *
 */
export interface DocumentFieldTypeNumberValueTypeMetadata {
  /**
   * @member {number} [numDecimalPlaces] Number of decimal places that values
   * for this field type can have.
   */
  numDecimalPlaces?: number;
}

/**
 * @interface
 * An interface representing DocumentFieldType.
 */
export interface DocumentFieldType {
  /**
   * @member {string} label Descriptive name of this field type.
   */
  label: string;
  /**
   * @member {DocumentFieldTypeNumberValueTypeMetadata}
   * [numberValueTypeMetadata] Additional metadata information for a number
   * field type. Only defined when a field type has valueType:
   * ValueType_Number.
   */
  numberValueTypeMetadata?: DocumentFieldTypeNumberValueTypeMetadata;
  /**
   * @member {string} valueType The kind of value that can be submitted for
   * this fieldType. It should be either ValueType_Number, ValueType_String, or
   * ValueType_Photo.
   */
  valueType: string;
}

/**
 * @interface
 * An interface representing DocumentType.
 */
export interface DocumentType {
  /**
   * @member {DocumentFieldType[][]} [fieldTypes] The field types determine the
   * names of fields for this document type. They also determine the types of
   * values a document submitted for this document type can have.
   */
  fieldTypes?: DocumentFieldType[][];
  /**
   * @member {string} name Name of the document type.
   */
  name: string;
  /**
   * @member {number} orgId ID for the organization this document belongs to.
   */
  orgId: number;
  /**
   * @member {string} uuid Universally unique identifier for the document type.
   * Can be passed in as a documentTypeUuid when creating a document for this
   * document type.
   */
  uuid: string;
}

/**
 * @interface
 * An interface representing DoorResponseSensorsItem.
 */
export interface DoorResponseSensorsItem {
  /**
   * @member {boolean} [doorClosed] Flag indicating whether the current door is
   * closed or open.
   */
  doorClosed?: boolean;
  /**
   * @member {number} [id] ID of the sensor.
   */
  id?: number;
  /**
   * @member {string} [name] Name of the sensor.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing DoorResponse.
 * Contains the current door status of a sensor.
 *
 */
export interface DoorResponse {
  /**
   * @member {number} [groupId]
   */
  groupId?: number;
  /**
   * @member {DoorResponseSensorsItem[]} [sensors]
   */
  sensors?: DoorResponseSensorsItem[];
}

/**
 * @interface
 * An interface representing DriverDailyLogResponseDaysItem.
 */
export interface DriverDailyLogResponseDaysItem {
  /**
   * @member {number} [activeHours] Hours spent on duty or driving, rounded to
   * two decimal places.
   */
  activeHours?: number;
  /**
   * @member {number} [activeMs] Milliseconds spent on duty or driving.
   */
  activeMs?: number;
  /**
   * @member {boolean} [certified] Whether this HOS day chart was certified by
   * the driver.
   */
  certified?: boolean;
  /**
   * @member {number} [certifiedAtMs] Unix epoch time (in ms) of time when this
   * chart was certified. If this chart is uncertified, 0.
   */
  certifiedAtMs?: number;
  /**
   * @member {number} [distanceMiles] Distance driven in miles, rounded to two
   * decimal places.
   */
  distanceMiles?: number;
  /**
   * @member {number} [endMs] End of the HOS day, specified in milliseconds
   * UNIX time.
   */
  endMs?: number;
  /**
   * @member {number} [startMs] End of the HOS day, specified in milliseconds
   * UNIX time.
   */
  startMs?: number;
  /**
   * @member {any} [trailerIds] List of trailer ID's associated with the driver
   * for the day.
   */
  trailerIds?: any;
  /**
   * @member {any} [vehicleIds] List of vehicle ID's associated with the driver
   * for the day.
   */
  vehicleIds?: any;
}

/**
 * @interface
 * An interface representing DriverDailyLogResponse.
 */
export interface DriverDailyLogResponse {
  /**
   * @member {DriverDailyLogResponseDaysItem[]} [days]
   */
  days?: DriverDailyLogResponseDaysItem[];
}

/**
 * @interface
 * An interface representing DriverForCreate.
 * @extends DriverBase
 */
export interface DriverForCreate extends DriverBase {
  /**
   * @member {string} password Driver's password for the driver app.
   */
  password: string;
  /**
   * @member {number[]} [tagIds]
   */
  tagIds?: number[];
}

/**
 * @interface
 * An interface representing SafetyReportHarshEvent.
 * List of harsh events
 *
 */
export interface SafetyReportHarshEvent {
  /**
   * @member {string} [harshEventType] Type of the harsh event
   */
  harshEventType?: string;
  /**
   * @member {number} [timestampMs] Timestamp that the harsh event occurred in
   * Unix milliseconds since epoch
   */
  timestampMs?: number;
  /**
   * @member {number} [vehicleId] Vehicle associated with the harsh event
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing DriverSafetyScoreResponse.
 * Safety score details for a driver
 *
 */
export interface DriverSafetyScoreResponse {
  /**
   * @member {number} [crashCount] Crash event count
   */
  crashCount?: number;
  /**
   * @member {number} [driverId] Driver ID
   */
  driverId?: number;
  /**
   * @member {number} [harshAccelCount] Harsh acceleration event count
   */
  harshAccelCount?: number;
  /**
   * @member {number} [harshBrakingCount] Harsh braking event count
   */
  harshBrakingCount?: number;
  /**
   * @member {SafetyReportHarshEvent[]} [harshEvents]
   */
  harshEvents?: SafetyReportHarshEvent[];
  /**
   * @member {number} [harshTurningCount] Harsh turning event count
   */
  harshTurningCount?: number;
  /**
   * @member {number} [safetyScore] Safety Score
   */
  safetyScore?: number;
  /**
   * @member {string} [safetyScoreRank] Safety Score Rank
   */
  safetyScoreRank?: string;
  /**
   * @member {number} [timeOverSpeedLimitMs] Amount of time driven over the
   * speed limit in milliseconds
   */
  timeOverSpeedLimitMs?: number;
  /**
   * @member {number} [totalDistanceDrivenMeters] Total distance driven in
   * meters
   */
  totalDistanceDrivenMeters?: number;
  /**
   * @member {number} [totalHarshEventCount] Total harsh event count
   */
  totalHarshEventCount?: number;
  /**
   * @member {number} [totalTimeDrivenMs] Amount of time driven in milliseconds
   */
  totalTimeDrivenMs?: number;
}

/**
 * @interface
 * An interface representing DriversResponse.
 */
export interface DriversResponse {
  /**
   * @member {CurrentDriver[]} [drivers]
   */
  drivers?: CurrentDriver[];
}

/**
 * @interface
 * An interface representing DriversSummaryResponseSummariesItem.
 */
export interface DriversSummaryResponseSummariesItem {
  /**
   * @member {number} [activeMs] Duration in milliseconds that driver was on
   * duty or driving during the requested time range
   */
  activeMs?: number;
  /**
   * @member {number} [distanceMiles] Distance driven in miles, rounded to two
   * decimal places.
   */
  distanceMiles?: number;
  /**
   * @member {number} [driveMs] Duration in milliseconds that driver was
   * driving during the requested time range
   */
  driveMs?: number;
  /**
   * @member {number} [driverId] ID of the driver.
   */
  driverId?: number;
  /**
   * @member {string} [driverName] Name of the driver.
   */
  driverName?: string;
  /**
   * @member {string} [driverUsername] Username of the driver.
   */
  driverUsername?: string;
  /**
   * @member {number} [groupId] Group of the driver.
   */
  groupId?: number;
  /**
   * @member {number} [onDutyMs] Duration in milliseconds that driver was on
   * duty during the requested time range
   */
  onDutyMs?: number;
}

/**
 * @interface
 * An interface representing DriversSummaryResponse.
 */
export interface DriversSummaryResponse {
  /**
   * @member {DriversSummaryResponseSummariesItem[]} [summaries]
   */
  summaries?: DriversSummaryResponseSummariesItem[];
}

/**
 * @interface
 * An interface representing DvirBaseAuthorSignature.
 * The authors signature for the DVIR.
 *
 */
export interface DvirBaseAuthorSignature {
  /**
   * @member {number} [driverId] ID of the driver who signed the DVIR. Will not
   * be returned if mechanicUserId is returned.
   */
  driverId?: number;
  /**
   * @member {string} [email] Email of the  driver|mechanic who signed the
   * DVIR.
   */
  email?: string;
  /**
   * @member {number} [mechanicUserId] ID of the mechanic who signed the DVIR.
   * Will not be returned if driverId is returned.
   */
  mechanicUserId?: number;
  /**
   * @member {string} [name] The name of the driver or mechanic who signed the
   * DVIR.
   */
  name?: string;
  /**
   * @member {number} [signedAt] The time in millis when the DVIR was signed
   */
  signedAt?: number;
  /**
   * @member {string} [type] Type corresponds to whether the signature
   * corresponds to driver|mechanic.
   */
  type?: string;
  /**
   * @member {string} [username] Username of the  driver|mechanic who signed
   * the DVIR.
   */
  username?: string;
}

/**
 * @interface
 * An interface representing DvirBaseMechanicOrAgentSignature.
 * The mechanic's or agent's signature for the DVIR.
 *
 */
export interface DvirBaseMechanicOrAgentSignature {
  /**
   * @member {number} [driverId] ID of the driver who signed the DVIR. Will not
   * be returned if mechanicUserId is returned.
   */
  driverId?: number;
  /**
   * @member {string} [email] Email of the  agent|mechanic who signed the DVIR.
   */
  email?: string;
  /**
   * @member {number} [mechanicUserId] ID of the mechanic who signed the DVIR.
   * Will not be returned if driverId is returned.
   */
  mechanicUserId?: number;
  /**
   * @member {string} [name] The name of the agent or mechanic who signed the
   * DVIR.
   */
  name?: string;
  /**
   * @member {number} [signedAt] The time in millis when the DVIR was signed
   */
  signedAt?: number;
  /**
   * @member {string} [type] Type corresponds to whether the signature
   * corresponds to driver|mechanic.
   */
  type?: string;
  /**
   * @member {string} [username] Username of the  agent|mechanic who signed the
   * DVIR.
   */
  username?: string;
}

/**
 * @interface
 * An interface representing DvirBaseNextDriverSignature.
 * The next driver signature for the DVIR.
 *
 */
export interface DvirBaseNextDriverSignature {
  /**
   * @member {number} [driverId] ID of the driver who signed the DVIR
   */
  driverId?: number;
  /**
   * @member {string} [email] Email of the  driver who signed the next DVIR on
   * this vehicle.
   */
  email?: string;
  /**
   * @member {string} [name] The name of the driver who signed the next DVIR on
   * this vehicle.
   */
  name?: string;
  /**
   * @member {number} [signedAt] The time in millis when the next driver signed
   * the DVIR on this vehicle.
   */
  signedAt?: number;
  /**
   * @member {string} [type] Type corresponds to driver.
   */
  type?: string;
  /**
   * @member {string} [username] Username of the  driver who signed the next
   * DVIR on this vehicle.
   */
  username?: string;
}

/**
 * @interface
 * An interface representing DvirBaseTrailerDefectsItem.
 */
export interface DvirBaseTrailerDefectsItem {
  /**
   * @member {string} [comment] The comment describing the type of DVIR defect
   */
  comment?: string;
  /**
   * @member {string} [defectType] The type of DVIR defect
   */
  defectType?: string;
}

/**
 * @interface
 * An interface representing DvirBaseVehicle.
 * The vehicle on which DVIR was done.
 *
 */
export interface DvirBaseVehicle {
  /**
   * @member {number} [id] The vehicle id on which DVIR was done.
   */
  id?: number;
  /**
   * @member {string} [name] The vehicle on which DVIR was done.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing DvirBaseVehicleDefectsItem.
 */
export interface DvirBaseVehicleDefectsItem {
  /**
   * @member {string} [comment] The comment describing the type of DVIR defect
   */
  comment?: string;
  /**
   * @member {string} [defectType] The type of DVIR defect
   */
  defectType?: string;
}

/**
 * @interface
 * An interface representing DvirBase.
 */
export interface DvirBase {
  /**
   * @member {DvirBaseAuthorSignature} [authorSignature] The authors signature
   * for the DVIR.
   */
  authorSignature?: DvirBaseAuthorSignature;
  /**
   * @member {boolean} [defectsCorrected] Signifies if the defects on the
   * vehicle corrected after the DVIR is done.
   */
  defectsCorrected?: boolean;
  /**
   * @member {boolean} [defectsNeedNotBeCorrected] Signifies if the defects on
   * this vehicle can be ignored.
   */
  defectsNeedNotBeCorrected?: boolean;
  /**
   * @member {number} [id] The id of this DVIR record.
   */
  id?: number;
  /**
   * @member {string} [inspectionType] Inspection type of the DVIR.
   */
  inspectionType?: string;
  /**
   * @member {string} [mechanicNotes] The mechanics notes on the DVIR.
   */
  mechanicNotes?: string;
  /**
   * @member {DvirBaseMechanicOrAgentSignature} [mechanicOrAgentSignature] The
   * mechanic's or agent's signature for the DVIR.
   */
  mechanicOrAgentSignature?: DvirBaseMechanicOrAgentSignature;
  /**
   * @member {DvirBaseNextDriverSignature} [nextDriverSignature] The next
   * driver signature for the DVIR.
   */
  nextDriverSignature?: DvirBaseNextDriverSignature;
  /**
   * @member {number} [odometerMiles] The odometer reading in miles for the
   * vehicle when the DVIR was done.
   */
  odometerMiles?: number;
  /**
   * @member {number} [timeMs] Timestamp of this DVIR in UNIX milliseconds.
   */
  timeMs?: number;
  /**
   * @member {DvirBaseTrailerDefectsItem[]} [trailerDefects] Defects registered
   * for the trailer which was part of the DVIR.
   */
  trailerDefects?: DvirBaseTrailerDefectsItem[];
  /**
   * @member {number} [trailerId] The id of the trailer which was part of the
   * DVIR.
   */
  trailerId?: number;
  /**
   * @member {string} [trailerName] The name of the trailer which was part of
   * the DVIR.
   */
  trailerName?: string;
  /**
   * @member {DvirBaseVehicle} [vehicle] The vehicle on which DVIR was done.
   */
  vehicle?: DvirBaseVehicle;
  /**
   * @member {string} [vehicleCondition] The condition of vechile on which DVIR
   * was done.
   */
  vehicleCondition?: string;
  /**
   * @member {DvirBaseVehicleDefectsItem[]} [vehicleDefects] Defects registered
   * for the vehicle which was part of the DVIR.
   */
  vehicleDefects?: DvirBaseVehicleDefectsItem[];
}

/**
 * @interface
 * An interface representing DvirListResponse.
 */
export interface DvirListResponse {
  /**
   * @member {DvirBase[]} [dvirs]
   */
  dvirs?: DvirBase[];
}

/**
 * @interface
 * An interface representing EngineState.
 * The state of the vehicle over time. State can be Running, Off, or Idle.
 *
 */
export interface EngineState {
  /**
   * @member {number} timeMs Timestamp in Unix epoch milliseconds.
   */
  timeMs: number;
  /**
   * @member {Value} value Possible values include: 'Running', 'Off', 'Idle'
   */
  value: Value;
}

/**
 * @interface
 * An interface representing FleetVehicleLocation.
 * Contains the location and speed of a vehicle at a particular time
 *
 */
export interface FleetVehicleLocation {
  /**
   * @member {number} [latitude] The latitude of the location in degrees.
   */
  latitude?: number;
  /**
   * @member {string} [location] The best effort (street,city,state) for the
   * latitude and longitude.
   */
  location?: string;
  /**
   * @member {number} [longitude] The longitude of the location in degrees.
   */
  longitude?: number;
  /**
   * @member {number} [speedMilesPerHour] The speed calculated from GPS that
   * the asset was traveling at in miles per hour.
   */
  speedMilesPerHour?: number;
  /**
   * @member {number} [timeMs] Time in Unix milliseconds since epoch when the
   * asset was at the location.
   */
  timeMs?: number;
}

/**
 * @interface
 * An interface representing FleetVehicleResponseVehicleInfo.
 */
export interface FleetVehicleResponseVehicleInfo {
  /**
   * @member {string} [make] Make of the vehicle.
   */
  make?: string;
  /**
   * @member {string} [model] Model of the Vehicle.
   */
  model?: string;
  /**
   * @member {string} [vin] Vehicle Identification Number.
   */
  vin?: string;
  /**
   * @member {number} [year] Year of the vehicle.
   */
  year?: number;
}

/**
 * @interface
 * An interface representing FleetVehicleResponse.
 * A vehicle object as returned for fleet/vehicle
 *
 */
export interface FleetVehicleResponse {
  /**
   * @member {{ [propertyName: string]: string }} [externalIds]
   */
  externalIds?: { [propertyName: string]: string };
  /**
   * @member {string} [harshAccelSetting] Harsh event detection setting.
   */
  harshAccelSetting?: string;
  /**
   * @member {number} id ID of the vehicle.
   */
  id: number;
  /**
   * @member {string} name Name of the vehicle.
   */
  name: string;
  /**
   * @member {FleetVehicleResponseVehicleInfo} [vehicleInfo]
   */
  vehicleInfo?: FleetVehicleResponseVehicleInfo;
}

/**
 * @interface
 * An interface representing FleetVehiclesLocationsItem.
 */
export interface FleetVehiclesLocationsItem {
  /**
   * @member {number} [id] ID of the vehicle.
   */
  id?: number;
  /**
   * @member {FleetVehicleLocation[]} [locations]
   */
  locations?: FleetVehicleLocation[];
  /**
   * @member {string} [name] Name of the vehicle.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing HosAuthenticationLogsResponseAuthenticationLogsItem.
 */
export interface HosAuthenticationLogsResponseAuthenticationLogsItem {
  /**
   * @member {string} [actionType] The log type - one of 'signin' or 'signout'
   */
  actionType?: string;
  /**
   * @member {string} [address] Address at which the log was recorded, if
   * applicable.
   */
  address?: string;
  /**
   * @member {string} [addressName] Address name from the group address book at
   * which the log was recorded, if applicable.
   */
  addressName?: string;
  /**
   * @member {string} [city] City in which the log was recorded, if applicable.
   */
  city?: string;
  /**
   * @member {number} [happenedAtMs] The time at which the event was recorded
   * in UNIX milliseconds.
   */
  happenedAtMs?: number;
  /**
   * @member {string} [state] State in which the log was recorded, if
   * applicable.
   */
  state?: string;
}

/**
 * @interface
 * An interface representing HosAuthenticationLogsResponse.
 */
export interface HosAuthenticationLogsResponse {
  /**
   * @member {HosAuthenticationLogsResponseAuthenticationLogsItem[]}
   * [authenticationLogs]
   */
  authenticationLogs?: HosAuthenticationLogsResponseAuthenticationLogsItem[];
}

/**
 * @interface
 * An interface representing HosLogsResponseLogsItem.
 */
export interface HosLogsResponseLogsItem {
  /**
   * @member {number[]} [codriverIds]
   */
  codriverIds?: number[];
  /**
   * @member {number} [driverId] ID of the driver.
   */
  driverId?: number;
  /**
   * @member {number} [groupId] ID of the group.
   */
  groupId?: number;
  /**
   * @member {string} [locCity] City in which the log was recorded.
   */
  locCity?: string;
  /**
   * @member {number} [locLat] Latitude at which the log was recorded.
   */
  locLat?: number;
  /**
   * @member {number} [locLng] Longitude at which the log was recorded.
   */
  locLng?: number;
  /**
   * @member {string} [locName] Name of location at which the log was recorded.
   */
  locName?: string;
  /**
   * @member {string} [locState] State in which the log was recorded.
   */
  locState?: string;
  /**
   * @member {number} [logStartMs] The time at which the log/HOS status started
   * in UNIX milliseconds.
   */
  logStartMs?: number;
  /**
   * @member {string} [remark] Remark associated with the log entry.
   */
  remark?: string;
  /**
   * @member {string} [statusType] The Hours of Service status type. One of
   * `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
   * `PERSONAL_CONVEYANCE`.
   */
  statusType?: string;
  /**
   * @member {number} [vehicleId] ID of the vehicle.
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing HosLogsResponse.
 */
export interface HosLogsResponse {
  /**
   * @member {HosLogsResponseLogsItem[]} [logs]
   */
  logs?: HosLogsResponseLogsItem[];
}

/**
 * @interface
 * An interface representing HosLogsSummaryResponseDriversItem.
 */
export interface HosLogsSummaryResponseDriversItem {
  /**
   * @member {number} [cycleRemaining] The amount of remaining cycle time (in
   * ms).
   */
  cycleRemaining?: number;
  /**
   * @member {number} [cycleTomorrow] The amount of cycle time (in ms)
   * available tomorrow.
   */
  cycleTomorrow?: number;
  /**
   * @member {number} [driverId] ID of the driver.
   */
  driverId?: number;
  /**
   * @member {string} [driverName] Name of the driver.
   */
  driverName?: string;
  /**
   * @member {number} [drivingInViolationCycle] The amount of driving time in
   * violation in this cycle (in ms).
   */
  drivingInViolationCycle?: number;
  /**
   * @member {number} [drivingInViolationToday] The amount of driving time in
   * violation today (in ms).
   */
  drivingInViolationToday?: number;
  /**
   * @member {string} [dutyStatus] The Hours of Service status type. One of
   * `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
   * `PERSONAL_CONVEYANCE`.
   */
  dutyStatus?: string;
  /**
   * @member {number} [shiftDriveRemaining] The amount of remaining shift drive
   * time (in ms).
   */
  shiftDriveRemaining?: number;
  /**
   * @member {number} [shiftRemaining] The amount of remaining shift time (in
   * ms).
   */
  shiftRemaining?: number;
  /**
   * @member {number} [timeInCurrentStatus] The amount of time (in ms) that the
   * driver has been in the current `dutyStatus`.
   */
  timeInCurrentStatus?: number;
  /**
   * @member {number} [timeUntilBreak] The amount of time (in ms) remaining
   * until the driver cannot drive without a rest break.
   */
  timeUntilBreak?: number;
  /**
   * @member {string} [vehicleName] Name of the vehicle.
   */
  vehicleName?: string;
}

/**
 * @interface
 * An interface representing HosLogsSummaryResponse.
 */
export interface HosLogsSummaryResponse {
  /**
   * @member {HosLogsSummaryResponseDriversItem[]} [drivers]
   */
  drivers?: HosLogsSummaryResponseDriversItem[];
}

/**
 * @interface
 * An interface representing HumidityResponseSensorsItem.
 */
export interface HumidityResponseSensorsItem {
  /**
   * @member {number} [humidity] Currently reported relative humidity in
   * percent, from 0-100.
   */
  humidity?: number;
  /**
   * @member {number} [id] ID of the sensor.
   */
  id?: number;
  /**
   * @member {string} [name] Name of the sensor.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing HumidityResponse.
 * Contains the current humidity of a sensor.
 *
 */
export interface HumidityResponse {
  /**
   * @member {number} [groupId]
   */
  groupId?: number;
  /**
   * @member {HumidityResponseSensorsItem[]} [sensors]
   */
  sensors?: HumidityResponseSensorsItem[];
}

/**
 * @interface
 * An interface representing Machine.
 * Contains information about a machine.
 *
 */
export interface Machine {
  /**
   * @member {number} id ID of the machine.
   */
  id: number;
  /**
   * @member {string} [name] Name of the machine.
   */
  name?: string;
  /**
   * @member {string} [notes] Notes about the machine
   */
  notes?: string;
}

/**
 * @interface
 * An interface representing MachineHistoryResponseMachinesItemVibrationsItem.
 */
export interface MachineHistoryResponseMachinesItemVibrationsItem {
  /**
   * @member {number} [x]
   */
  x?: number;
  /**
   * @member {number} [y]
   */
  y?: number;
  /**
   * @member {number} [z]
   */
  z?: number;
  /**
   * @member {number} [time]
   */
  time?: number;
}

/**
 * @interface
 * An interface representing MachineHistoryResponseMachinesItem.
 */
export interface MachineHistoryResponseMachinesItem {
  /**
   * @member {number} [id] Machine ID
   */
  id?: number;
  /**
   * @member {string} [name] Machine name
   */
  name?: string;
  /**
   * @member {MachineHistoryResponseMachinesItemVibrationsItem[]} [vibrations]
   * List of vibration datapoints, with timestamp and vibration measurement for
   * x/y/z axis in mm/s
   */
  vibrations?: MachineHistoryResponseMachinesItemVibrationsItem[];
}

/**
 * @interface
 * An interface representing MachineHistoryResponse.
 * Contains the results for a machine history request
 *
 */
export interface MachineHistoryResponse {
  /**
   * @member {MachineHistoryResponseMachinesItem[]} [machines]
   */
  machines?: MachineHistoryResponseMachinesItem[];
}

/**
 * @interface
 * An interface representing Pagination.
 */
export interface Pagination {
  /**
   * @member {string} endCursor Cursor identifier representing the last element
   * in the response. This value should be used in conjunction with a
   * subsequent request's 'starting_after' query parameter.
   */
  endCursor: string;
  /**
   * @member {boolean} hasNextPage True if there are more pages of results
   * after this response.
   */
  hasNextPage: boolean;
  /**
   * @member {boolean} hasPrevPage True if there are more pages of results
   * before this response.
   */
  hasPrevPage: boolean;
  /**
   * @member {string} startCursor Cursor identifier representing the first
   * element in the response. This value should be used in conjunction with a
   * subsequent request's 'ending_before' query parameter.
   */
  startCursor: string;
}

/**
 * @interface
 * An interface representing Sensor.
 * Contains information about a sensor.
 *
 */
export interface Sensor {
  /**
   * @member {number} id ID of the sensor.
   */
  id: number;
  /**
   * @member {string} [macAddress] MAC address of the sensor.
   */
  macAddress?: string;
  /**
   * @member {string} [name] Name of the sensor.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing SensorHistoryResponseResultsItem.
 */
export interface SensorHistoryResponseResultsItem {
  /**
   * @member {number[]} [series] List of datapoints, one for each requested
   * (sensor, field) pair.
   */
  series?: number[];
  /**
   * @member {number} [timeMs] Timestamp in UNIX milliseconds.
   */
  timeMs?: number;
}

/**
 * @interface
 * An interface representing SensorHistoryResponse.
 * Contains the results for a sensor history request. Each result contains a
 * timestamp and datapoint for each requested (sensor, field) pair.
 *
 */
export interface SensorHistoryResponse {
  /**
   * @member {SensorHistoryResponseResultsItem[]} [results]
   */
  results?: SensorHistoryResponseResultsItem[];
}

/**
 * @interface
 * An interface representing TaggedAddressBase.
 */
export interface TaggedAddressBase {
  /**
   * @member {number} id The ID of the address being tagged.
   */
  id: number;
}

/**
 * @interface
 * An interface representing TaggedAddress.
 * @extends TaggedAddressBase
 */
export interface TaggedAddress extends TaggedAddressBase {
  /**
   * @member {string} [name] Name of the address being tagged.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing TaggedAssetBase.
 */
export interface TaggedAssetBase {
  /**
   * @member {number} id The ID of the Asset being tagged.
   */
  id: number;
}

/**
 * @interface
 * An interface representing TaggedAsset.
 * @extends TaggedAssetBase
 */
export interface TaggedAsset extends TaggedAssetBase {
  /**
   * @member {string} [name] Name of the Asset being tagged.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing TaggedDriverBase.
 */
export interface TaggedDriverBase {
  /**
   * @member {number} id The ID of the Driver being tagged.
   */
  id: number;
}

/**
 * @interface
 * An interface representing TaggedDriver.
 * @extends TaggedDriverBase
 */
export interface TaggedDriver extends TaggedDriverBase {
  /**
   * @member {string} [name] Name of the Driver being tagged.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing TaggedMachineBase.
 */
export interface TaggedMachineBase {
  /**
   * @member {number} id The ID of the Machine being tagged.
   */
  id: number;
}

/**
 * @interface
 * An interface representing TaggedMachine.
 * @extends TaggedMachineBase
 */
export interface TaggedMachine extends TaggedMachineBase {
  /**
   * @member {string} [name] Name of the Machine being tagged.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing TaggedSensorBase.
 */
export interface TaggedSensorBase {
  /**
   * @member {number} id The ID of the Sensor being tagged.
   */
  id: number;
}

/**
 * @interface
 * An interface representing TaggedSensor.
 * @extends TaggedSensorBase
 */
export interface TaggedSensor extends TaggedSensorBase {
  /**
   * @member {string} [name] Name of the Sensor being tagged.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing TaggedVehicleBase.
 */
export interface TaggedVehicleBase {
  /**
   * @member {number} id The ID of the Vehicle being tagged.
   */
  id: number;
}

/**
 * @interface
 * An interface representing TaggedVehicle.
 * @extends TaggedVehicleBase
 */
export interface TaggedVehicle extends TaggedVehicleBase {
  /**
   * @member {string} [name] Name of the Vehicle being tagged.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing Tag.
 */
export interface Tag {
  /**
   * @member {TaggedAddress[]} [addresses] The addresses that belong to this
   * tag.
   */
  addresses?: TaggedAddress[];
  /**
   * @member {TaggedAsset[]} [assets] The assets that belong to this tag.
   */
  assets?: TaggedAsset[];
  /**
   * @member {TaggedDriver[]} [drivers] The drivers that belong to this tag.
   */
  drivers?: TaggedDriver[];
  /**
   * @member {number} [groupId] The GroupID that this tag belongs to.
   */
  groupId?: number;
  /**
   * @member {number} id The ID of this tag.
   */
  id: number;
  /**
   * @member {TaggedMachine[]} [machines] The machines that belong to this tag.
   */
  machines?: TaggedMachine[];
  /**
   * @member {string} name Name of this tag.
   */
  name: string;
  /**
   * @member {number} [parentTagId] If this tag is part a hierarchical tag tree
   * as a child tag, the parentTagId is the ID of this tag's parent tag.
   */
  parentTagId?: number;
  /**
   * @member {TaggedSensor[]} [sensors] The sensors that belong to this tag.
   */
  sensors?: TaggedSensor[];
  /**
   * @member {TaggedVehicle[]} [vehicles] The vehicles that belong to this tag.
   */
  vehicles?: TaggedVehicle[];
}

/**
 * @interface
 * An interface representing TagCreate.
 */
export interface TagCreate {
  /**
   * @member {TaggedAssetBase[]} [assets] The assets that belong to this tag.
   */
  assets?: TaggedAssetBase[];
  /**
   * @member {TaggedDriverBase[]} [drivers] The drivers that belong to this
   * tag.
   */
  drivers?: TaggedDriverBase[];
  /**
   * @member {TaggedMachineBase[]} [machines] The machines that belong to this
   * tag.
   */
  machines?: TaggedMachineBase[];
  /**
   * @member {string} name Name of this tag.
   */
  name: string;
  /**
   * @member {number} [parentTagId] If this tag is part a hierarchical tag tree
   * as a child tag, the parentTagId is the ID of this tag's parent tag.
   */
  parentTagId?: number;
  /**
   * @member {TaggedSensorBase[]} [sensors] The sensors that belong to this
   * tag.
   */
  sensors?: TaggedSensorBase[];
  /**
   * @member {TaggedVehicleBase[]} [vehicles] The vehicles that belong to this
   * tag.
   */
  vehicles?: TaggedVehicleBase[];
}

/**
 * @interface
 * An interface representing TagModifyAdd.
 * Specify devices, etc. that should be added to the tag.
 *
 */
export interface TagModifyAdd {
  /**
   * @member {TaggedAssetBase[]} [assets] The assets to be added to this tag.
   */
  assets?: TaggedAssetBase[];
  /**
   * @member {TaggedDriverBase[]} [drivers] The drivers to be added to this
   * tag.
   */
  drivers?: TaggedDriverBase[];
  /**
   * @member {TaggedMachineBase[]} [machines] The machines to be added to this
   * tag.
   */
  machines?: TaggedMachineBase[];
  /**
   * @member {TaggedSensorBase[]} [sensors] The sensors to be added to this
   * tag.
   */
  sensors?: TaggedSensorBase[];
  /**
   * @member {TaggedVehicleBase[]} [vehicles] The vehicles to be added to this
   * tag.
   */
  vehicles?: TaggedVehicleBase[];
}

/**
 * @interface
 * An interface representing TagModifyDelete.
 * Specify devices, etc. that should be removed from the tag.
 *
 */
export interface TagModifyDelete {
  /**
   * @member {TaggedAssetBase[]} [assets] The assets to be removed from this
   * tag.
   */
  assets?: TaggedAssetBase[];
  /**
   * @member {TaggedDriverBase[]} [drivers] The drivers to be removed from this
   * tag.
   */
  drivers?: TaggedDriverBase[];
  /**
   * @member {TaggedMachineBase[]} [machines] The machines to be removed from
   * this tag.
   */
  machines?: TaggedMachineBase[];
  /**
   * @member {TaggedSensorBase[]} [sensors] The sensors to be removed from this
   * tag.
   */
  sensors?: TaggedSensorBase[];
  /**
   * @member {TaggedVehicleBase[]} [vehicles] The vehicles to be removed from
   * this tag.
   */
  vehicles?: TaggedVehicleBase[];
}

/**
 * @interface
 * An interface representing TagModify.
 */
export interface TagModify {
  /**
   * @member {TagModifyAdd} [add] Specify devices, etc. that should be added to
   * the tag.
   */
  add?: TagModifyAdd;
  /**
   * @member {TagModifyDelete} [deleteProperty] Specify devices, etc. that
   * should be removed from the tag.
   */
  deleteProperty?: TagModifyDelete;
  /**
   * @member {string} [name] Updated name of this tag.
   */
  name?: string;
  /**
   * @member {number} [parentTagId] If this tag is part a hierarchical tag tree
   * as a child tag, the parentTagId is the ID of this tag's parent tag.
   */
  parentTagId?: number;
}

/**
 * @interface
 * An interface representing TagUpdate.
 */
export interface TagUpdate {
  /**
   * @member {TaggedAssetBase[]} [assets] The assets that belong to this tag.
   */
  assets?: TaggedAssetBase[];
  /**
   * @member {TaggedDriverBase[]} [drivers] The drivers that belong to this
   * tag.
   */
  drivers?: TaggedDriverBase[];
  /**
   * @member {TaggedMachineBase[]} [machines] The machines that belong to this
   * tag.
   */
  machines?: TaggedMachineBase[];
  /**
   * @member {string} [name] Updated name of this tag.
   */
  name?: string;
  /**
   * @member {number} [parentTagId] If this tag is part a hierarchical tag tree
   * as a child tag, the parentTagId is the ID of this tag's parent tag.
   */
  parentTagId?: number;
  /**
   * @member {TaggedSensorBase[]} [sensors] The sensors that belong to this
   * tag.
   */
  sensors?: TaggedSensorBase[];
  /**
   * @member {TaggedVehicleBase[]} [vehicles] The vehicles that belong to this
   * tag.
   */
  vehicles?: TaggedVehicleBase[];
}

/**
 * @interface
 * An interface representing TemperatureResponseSensorsItem.
 */
export interface TemperatureResponseSensorsItem {
  /**
   * @member {number} [ambientTemperature] Currently reported ambient
   * temperature in millidegrees celsius.
   */
  ambientTemperature?: number;
  /**
   * @member {number} [id] ID of the sensor.
   */
  id?: number;
  /**
   * @member {string} [name] Name of the sensor.
   */
  name?: string;
  /**
   * @member {number} [probeTemperature] Currently reported probe temperature
   * in millidegrees celsius. If no probe is connected, this parameter will not
   * be reported.
   */
  probeTemperature?: number;
}

/**
 * @interface
 * An interface representing TemperatureResponse.
 * Contains the current temperatures of a sensor.
 *
 */
export interface TemperatureResponse {
  /**
   * @member {number} [groupId]
   */
  groupId?: number;
  /**
   * @member {TemperatureResponseSensorsItem[]} [sensors]
   */
  sensors?: TemperatureResponseSensorsItem[];
}

/**
 * @interface
 * An interface representing TripResponseTripsItemEndCoordinates.
 * End (latitude, longitude) in decimal degrees.
 *
 */
export interface TripResponseTripsItemEndCoordinates {
  /**
   * @member {number} [latitude]
   */
  latitude?: number;
  /**
   * @member {number} [longitude]
   */
  longitude?: number;
}

/**
 * @interface
 * An interface representing TripResponseTripsItemStartCoordinates.
 * Start (latitude, longitude) in decimal degrees.
 *
 */
export interface TripResponseTripsItemStartCoordinates {
  /**
   * @member {number} [latitude]
   */
  latitude?: number;
  /**
   * @member {number} [longitude]
   */
  longitude?: number;
}

/**
 * @interface
 * An interface representing TripResponseTripsItem.
 */
export interface TripResponseTripsItem {
  /**
   * @member {number} [distanceMeters] Length of the trip in meters.
   */
  distanceMeters?: number;
  /**
   * @member {number} [driverId] ID of the driver.
   */
  driverId?: number;
  /**
   * @member {string} [endAddress] Text representation of nearest identifiable
   * location to the end (latitude, longitude) coordinates.
   */
  endAddress?: string;
  /**
   * @member {TripResponseTripsItemEndCoordinates} [endCoordinates] End
   * (latitude, longitude) in decimal degrees.
   */
  endCoordinates?: TripResponseTripsItemEndCoordinates;
  /**
   * @member {string} [endLocation] Geocoded street address of start (latitude,
   * longitude) coordinates.
   */
  endLocation?: string;
  /**
   * @member {number} [endMs] End of the trip in UNIX milliseconds.
   */
  endMs?: number;
  /**
   * @member {number} [endOdometer] Odometer reading at the end of the trip.
   */
  endOdometer?: number;
  /**
   * @member {number} [fuelConsumedMl] Amount in milliliters of fuel consumed
   * on this trip.
   */
  fuelConsumedMl?: number;
  /**
   * @member {string} [startAddress] Text representation of nearest
   * identifiable location to the start (latitude, longitude) coordinates.
   */
  startAddress?: string;
  /**
   * @member {TripResponseTripsItemStartCoordinates} [startCoordinates] Start
   * (latitude, longitude) in decimal degrees.
   */
  startCoordinates?: TripResponseTripsItemStartCoordinates;
  /**
   * @member {string} [startLocation] Geocoded street address of start
   * (latitude, longitude) coordinates.
   */
  startLocation?: string;
  /**
   * @member {number} [startMs] Beginning of the trip in UNIX milliseconds.
   */
  startMs?: number;
  /**
   * @member {number} [startOdometer] Odometer reading at the beginning of the
   * trip.
   */
  startOdometer?: number;
  /**
   * @member {number} [tollMeters] Length in meters trip spent on toll roads.
   */
  tollMeters?: number;
}

/**
 * @interface
 * An interface representing TripResponse.
 * Contains the trips for the vehicle in the requested timeframe. A trip is
 * represented as an object that contains startMs, startLocation, startAddress,
 * startCoordinates, endMs, endLocation, endAddress and endCoordinates.
 *
 */
export interface TripResponse {
  /**
   * @member {TripResponseTripsItem[]} [trips]
   */
  trips?: TripResponseTripsItem[];
}

/**
 * @interface
 * An interface representing UserTagRoleTag.
 */
export interface UserTagRoleTag {
  /**
   * @member {number} id The ID of this tag.
   */
  id: number;
  /**
   * @member {string} name Name of this tag.
   */
  name: string;
  /**
   * @member {number} [parentTagId] The ID of this tag.
   */
  parentTagId?: number;
}

/**
 * @interface
 * An interface representing UserTagRole.
 */
export interface UserTagRole {
  /**
   * @member {string} [role] The name of the role the user has been granted on
   * this tag.
   */
  role?: string;
  /**
   * @member {string} roleId The id of the role the user has been granted on
   * this tag.
   */
  roleId: string;
  /**
   * @member {UserTagRoleTag} tag
   */
  tag: UserTagRoleTag;
}

/**
 * @interface
 * An interface representing UserBase.
 */
export interface UserBase {
  /**
   * @member {AuthType} authType The authentication type the user uses to
   * authenticate. To use SAML this organization must have a configured SAML
   * integration. Possible values include: 'default', 'saml'
   */
  authType: AuthType;
  /**
   * @member {string} email The email address of this user.
   */
  email: string;
  /**
   * @member {string} [name] The first and last name of the user.
   */
  name?: string;
  /**
   * @member {string} [organizationRoleId] The id of the role the user is
   * assigned to at the organization level. This will be blank for users that
   * only have access to specific tags.
   */
  organizationRoleId?: string;
}

/**
 * @interface
 * An interface representing User.
 * @extends UserBase
 */
export interface User extends UserBase {
  /**
   * @member {number} [id] The ID of the User record.
   */
  id?: number;
  /**
   * @member {string} [organizationRole] The name of the role the user is
   * assigned to at the organization level. This will be blank for users that
   * only have access to specific tags.
   */
  organizationRole?: string;
  /**
   * @member {UserTagRole[]} [tagRoles] The specific tags this user has access
   * to. This will be blank for users that have full access to the
   * organization.
   */
  tagRoles?: UserTagRole[];
}

/**
 * @interface
 * An interface representing UserRole.
 */
export interface UserRole {
  /**
   * @member {string} [id]
   */
  id?: string;
  /**
   * @member {string} [name]
   */
  name?: string;
}

/**
 * @interface
 * An interface representing Vehicle.
 * A vehicle object.
 *
 */
export interface Vehicle {
  /**
   * @member {number} [engineHours] Total engine hours for the vehicle.
   */
  engineHours?: number;
  /**
   * @member {number} [fuelLevelPercent] The fuel level of the vehicle as a
   * percentage. (0.0 to 1.0)
   */
  fuelLevelPercent?: number;
  /**
   * @member {number} id ID of the vehicle.
   */
  id: number;
  /**
   * @member {string} [name] Name of the vehicle.
   */
  name?: string;
  /**
   * @member {string} [note]
   */
  note?: string;
  /**
   * @member {number} [odometerMeters] The number of meters reported by the
   * odometer.
   */
  odometerMeters?: number;
  /**
   * @member {string} [vin] Vehicle Identification Number.
   */
  vin?: string;
}

/**
 * @interface
 * An interface representing VehicleHarshEventResponseLocation.
 */
export interface VehicleHarshEventResponseLocation {
  /**
   * @member {string} [address] Address of location where the harsh event
   * occurred
   */
  address?: string;
  /**
   * @member {string} [latitude] Latitude of location where the harsh event
   * occurred
   */
  latitude?: string;
  /**
   * @member {string} [longitude] Longitude of location where the harsh event
   * occurred
   */
  longitude?: string;
}

/**
 * @interface
 * An interface representing VehicleHarshEventResponse.
 * Harsh event details for a vehicle
 *
 */
export interface VehicleHarshEventResponse {
  /**
   * @member {string} [downloadForwardVideoUrl] URL for downloading the forward
   * facing video
   */
  downloadForwardVideoUrl?: string;
  /**
   * @member {string} [downloadInwardVideoUrl] URL for downloading the inward
   * facing video
   */
  downloadInwardVideoUrl?: string;
  /**
   * @member {string} [downloadTrackedInwardVideoUrl] URL for downloading the
   * tracked inward facing video
   */
  downloadTrackedInwardVideoUrl?: string;
  /**
   * @member {string} harshEventType Type of the harsh event. One of: [Crash,
   * Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC
   * Engine, YC Brake, Harsh Event]
   */
  harshEventType: string;
  /**
   * @member {string} incidentReportUrl URL of the associated incident report
   * page
   */
  incidentReportUrl: string;
  /**
   * @member {boolean} [isDistracted] Whether the driver was deemed distracted
   * during this harsh event
   */
  isDistracted?: boolean;
  /**
   * @member {VehicleHarshEventResponseLocation} [location]
   */
  location?: VehicleHarshEventResponseLocation;
}

/**
 * @interface
 * An interface representing VehicleLocation.
 * Contains the location, in latitude and longitude, of a vehicle.
 *
 */
export interface VehicleLocation {
  /**
   * @member {number} [heading] Heading in degrees.
   */
  heading?: number;
  /**
   * @member {number} id ID of the vehicle.
   */
  id: number;
  /**
   * @member {number} [latitude] Latitude in decimal degrees.
   */
  latitude?: number;
  /**
   * @member {string} [location] Text representation of nearest identifiable
   * location to (latitude, longitude) coordinates.
   */
  location?: string;
  /**
   * @member {number} [longitude] Longitude in decimal degrees.
   */
  longitude?: number;
  /**
   * @member {string} [name] Name of the vehicle.
   */
  name?: string;
  /**
   * @member {number} [odometerMeters] The number of meters reported by the
   * odometer.
   */
  odometerMeters?: number;
  /**
   * @member {boolean} [onTrip] Whether or not a trip is currently in progress
   * for this vehicle. More information available via /fleet/trips endpoint.
   */
  onTrip?: boolean;
  /**
   * @member {number} [speed] Speed in miles per hour.
   */
  speed?: number;
  /**
   * @member {number} [time] The time the reported location was logged,
   * reported as a UNIX timestamp in milliseconds.
   */
  time?: number;
  /**
   * @member {string} [vin] Vehicle Identification Number (VIN) of the vehicle.
   */
  vin?: string;
}

/**
 * @interface
 * An interface representing VehicleMaintenanceJ1939CheckEngineLight.
 * J1939 check engine lights.
 *
 */
export interface VehicleMaintenanceJ1939CheckEngineLight {
  /**
   * @member {boolean} [emissionsIsOn]
   */
  emissionsIsOn?: boolean;
  /**
   * @member {boolean} [protectIsOn]
   */
  protectIsOn?: boolean;
  /**
   * @member {boolean} [stopIsOn]
   */
  stopIsOn?: boolean;
  /**
   * @member {boolean} [warningIsOn]
   */
  warningIsOn?: boolean;
}

/**
 * @interface
 * An interface representing VehicleMaintenanceJ1939DiagnosticTroubleCodesItem.
 */
export interface VehicleMaintenanceJ1939DiagnosticTroubleCodesItem {
  /**
   * @member {number} [fmiId]
   */
  fmiId?: number;
  /**
   * @member {string} [fmiText]
   */
  fmiText?: string;
  /**
   * @member {number} [occurrenceCount]
   */
  occurrenceCount?: number;
  /**
   * @member {string} [spnDescription]
   */
  spnDescription?: string;
  /**
   * @member {number} [spnId]
   */
  spnId?: number;
  /**
   * @member {number} [txId]
   */
  txId?: number;
}

/**
 * @interface
 * An interface representing VehicleMaintenanceJ1939.
 * J1939 based data. Null if no data is available.
 *
 */
export interface VehicleMaintenanceJ1939 {
  /**
   * @member {VehicleMaintenanceJ1939CheckEngineLight} [checkEngineLight] J1939
   * check engine lights.
   */
  checkEngineLight?: VehicleMaintenanceJ1939CheckEngineLight;
  /**
   * @member {VehicleMaintenanceJ1939DiagnosticTroubleCodesItem[]}
   * [diagnosticTroubleCodes] J1939 DTCs.
   */
  diagnosticTroubleCodes?: VehicleMaintenanceJ1939DiagnosticTroubleCodesItem[];
}

/**
 * @interface
 * An interface representing VehicleMaintenancePassengerCheckEngineLight.
 * Passenger vehicle check engine light.
 *
 */
export interface VehicleMaintenancePassengerCheckEngineLight {
  /**
   * @member {boolean} [isOn]
   */
  isOn?: boolean;
}

/**
 * @interface
 * An interface representing VehicleMaintenancePassengerDiagnosticTroubleCodesItem.
 */
export interface VehicleMaintenancePassengerDiagnosticTroubleCodesItem {
  /**
   * @member {string} [dtcDescription]
   */
  dtcDescription?: string;
  /**
   * @member {number} [dtcId]
   */
  dtcId?: number;
  /**
   * @member {string} [dtcShortCode]
   */
  dtcShortCode?: string;
}

/**
 * @interface
 * An interface representing VehicleMaintenancePassenger.
 * Passenger vehicle data. Null if no data is available.
 *
 */
export interface VehicleMaintenancePassenger {
  /**
   * @member {VehicleMaintenancePassengerCheckEngineLight} [checkEngineLight]
   * Passenger vehicle check engine light.
   */
  checkEngineLight?: VehicleMaintenancePassengerCheckEngineLight;
  /**
   * @member {VehicleMaintenancePassengerDiagnosticTroubleCodesItem[]}
   * [diagnosticTroubleCodes] Passenger vehicle DTCs.
   */
  diagnosticTroubleCodes?: VehicleMaintenancePassengerDiagnosticTroubleCodesItem[];
}

/**
 * @interface
 * An interface representing VehicleMaintenance.
 * Contains any J1939/Passenger engine light warnings and engine faults.
 *
 */
export interface VehicleMaintenance {
  /**
   * @member {number} id ID of the vehicle.
   */
  id: number;
  /**
   * @member {VehicleMaintenanceJ1939} [j1939] J1939 based data. Null if no
   * data is available.
   */
  j1939?: VehicleMaintenanceJ1939;
  /**
   * @member {VehicleMaintenancePassenger} [passenger] Passenger vehicle data.
   * Null if no data is available.
   */
  passenger?: VehicleMaintenancePassenger;
}

/**
 * @interface
 * An interface representing VehicleSafetyScoreResponse.
 * Safety score details for a vehicle
 *
 */
export interface VehicleSafetyScoreResponse {
  /**
   * @member {number} [crashCount] Crash event count
   */
  crashCount?: number;
  /**
   * @member {number} [harshAccelCount] Harsh acceleration event count
   */
  harshAccelCount?: number;
  /**
   * @member {number} [harshBrakingCount] Harsh braking event count
   */
  harshBrakingCount?: number;
  /**
   * @member {SafetyReportHarshEvent[]} [harshEvents]
   */
  harshEvents?: SafetyReportHarshEvent[];
  /**
   * @member {number} [harshTurningCount] Harsh turning event count
   */
  harshTurningCount?: number;
  /**
   * @member {number} [safetyScore] Safety Score
   */
  safetyScore?: number;
  /**
   * @member {string} [safetyScoreRank] Safety Score Rank
   */
  safetyScoreRank?: string;
  /**
   * @member {number} [timeOverSpeedLimitMs] Amount of time driven over the
   * speed limit in milliseconds
   */
  timeOverSpeedLimitMs?: number;
  /**
   * @member {number} [totalDistanceDrivenMeters] Total distance driven in
   * meters
   */
  totalDistanceDrivenMeters?: number;
  /**
   * @member {number} [totalHarshEventCount] Total harsh event count
   */
  totalHarshEventCount?: number;
  /**
   * @member {number} [totalTimeDrivenMs] Amount of time driven in milliseconds
   */
  totalTimeDrivenMs?: number;
  /**
   * @member {number} [vehicleId] Vehicle ID
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing JobUpdateObject.
 */
export interface JobUpdateObject {
  /**
   * @member {number} [changedAtMs] Timestamp that this event was updated,
   * represented as Unix milliseconds since epoch.
   */
  changedAtMs?: number;
  /**
   * @member {number} [jobId] ID of the Samsara job.
   */
  jobId?: number;
  /**
   * @member {JobState1} [jobState] Possible values include:
   * 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
   * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
   */
  jobState?: JobState1;
  /**
   * @member {PrevJobState} [prevJobState] Possible values include:
   * 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
   * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
   */
  prevJobState?: PrevJobState;
  /**
   * @member {DispatchRoute} [route]
   */
  route?: DispatchRoute;
  /**
   * @member {number} [routeId] ID of the Samsara dispatch route.
   */
  routeId?: number;
}

/**
 * @interface
 * An interface representing AllRouteJobUpdates.
 */
export interface AllRouteJobUpdates {
  /**
   * @member {JobUpdateObject[]} [jobUpdates]
   */
  jobUpdates?: JobUpdateObject[];
  /**
   * @member {string} [sequenceId] Sequence ID of the last update returned in
   * the response
   */
  sequenceId?: string;
}

/**
 * @interface
 * An interface representing AddressesAddressesItem.
 */
export interface AddressesAddressesItem {
  /**
   * @member {number[]} [contactIds]
   */
  contactIds?: number[];
  /**
   * @member {string} formattedAddress The full address associated with this
   * address/geofence, as it might be recognized by maps.google.com
   */
  formattedAddress: string;
  /**
   * @member {AddressGeofence} geofence
   */
  geofence: AddressGeofence;
  /**
   * @member {string} name The name of this address/geofence
   */
  name: string;
  /**
   * @member {string} [notes]
   */
  notes?: string;
  /**
   * @member {number[]} [tagIds]
   */
  tagIds?: number[];
}

/**
 * @interface
 * An interface representing Addresses.
 */
export interface Addresses {
  /**
   * @member {AddressesAddressesItem[]} addresses
   */
  addresses: AddressesAddressesItem[];
}

/**
 * @interface
 * An interface representing AddressModel.
 */
export interface AddressModel {
  /**
   * @member {number[]} [contactIds]
   */
  contactIds?: number[];
  /**
   * @member {string} [formattedAddress] The full address associated with this
   * address/geofence, as it might be recognized by maps.google.com
   */
  formattedAddress?: string;
  /**
   * @member {AddressGeofence} [geofence]
   */
  geofence?: AddressGeofence;
  /**
   * @member {string} [name] The name of this address/geofence
   */
  name?: string;
  /**
   * @member {string} [notes]
   */
  notes?: string;
  /**
   * @member {number[]} [tagIds]
   */
  tagIds?: number[];
}

/**
 * @interface
 * An interface representing AddressParam.
 */
export interface AddressParam {
  /**
   * @member {string} address The address of the entry to add, as it would be
   * recognized if provided to maps.google.com.
   */
  address: string;
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {string} name Name of the location to add to the address book.
   */
  name: string;
  /**
   * @member {number} radius Radius in meters of the address (used for matching
   * vehicle trip stops to this location).
   */
  radius: number;
}

/**
 * @interface
 * An interface representing GetAllAssetsOKResponse.
 */
export interface GetAllAssetsOKResponse {
  /**
   * @member {Asset[]} [assets]
   */
  assets?: Asset[];
}

/**
 * @interface
 * An interface representing GetAllAssetCurrentLocationsOKResponse.
 */
export interface GetAllAssetCurrentLocationsOKResponse {
  /**
   * @member {AssetCurrentLocationsResponse[]} [assets]
   */
  assets?: AssetCurrentLocationsResponse[];
}

/**
 * @interface
 * An interface representing GroupDriversParam.
 */
export interface GroupDriversParam {
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
}

/**
 * @interface
 * An interface representing ReactivateDriverParam.
 */
export interface ReactivateDriverParam {
  /**
   * @member {boolean} reactivate True indicates that this driver should be
   * reactivated.
   */
  reactivate: boolean;
}

/**
 * @interface
 * An interface representing DriversSummaryParam.
 */
export interface DriversSummaryParam {
  /**
   * @member {number} endMs End time (ms) of queried time period.
   */
  endMs: number;
  /**
   * @member {number} orgId Org ID to query.
   */
  orgId: number;
  /**
   * @member {number} startMs Start time (ms) of queried time period.
   */
  startMs: number;
}

/**
 * @interface
 * An interface representing Body.
 */
export interface Body {
  /**
   * @member {number} driverId Driver ID to query.
   */
  driverId: number;
  /**
   * @member {number} endMs End of the time range, specified in milliseconds
   * UNIX time.
   */
  endMs: number;
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {number} startMs Beginning of the time range, specified in
   * milliseconds UNIX time.
   */
  startMs: number;
}

/**
 * @interface
 * An interface representing HosAuthenticationLogsParam.
 */
export interface HosAuthenticationLogsParam {
  /**
   * @member {number} driverId Driver ID to query.
   */
  driverId: number;
  /**
   * @member {number} endMs End of the time range, specified in milliseconds
   * UNIX time.
   */
  endMs: number;
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {number} startMs Beginning of the time range, specified in
   * milliseconds UNIX time.
   */
  startMs: number;
}

/**
 * @interface
 * An interface representing HosLogsParam.
 */
export interface HosLogsParam {
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
}

/**
 * @interface
 * An interface representing BodyModel.
 */
export interface BodyModel {
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
}

/**
 * @interface
 * An interface representing FleetOKResponse.
 */
export interface FleetOKResponse {
  /**
   * @member {number} [groupId] Group ID to query.
   */
  groupId?: number;
  /**
   * @member {Pagination} [pagination]
   */
  pagination?: Pagination;
  /**
   * @member {Vehicle[]} [vehicles]
   */
  vehicles?: Vehicle[];
}

/**
 * @interface
 * An interface representing LocationsOKResponse.
 */
export interface LocationsOKResponse {
  /**
   * @member {number} [groupId] Group ID to query.
   */
  groupId?: number;
  /**
   * @member {VehicleLocation[]} [vehicles]
   */
  vehicles?: VehicleLocation[];
}

/**
 * @interface
 * An interface representing CreateDvirParam.
 */
export interface CreateDvirParam {
  /**
   * @member {string} [mechanicNotes] Any notes from the mechanic.
   */
  mechanicNotes?: string;
  /**
   * @member {number} [odometerMiles] The current odometer of the vehicle.
   */
  odometerMiles?: number;
  /**
   * @member {boolean} [previousDefectsCorrected] Whether any previous defects
   * were corrected. If this vehicle or trailer was previously marked unsafe,
   * and this DVIR marks it as safe, either previousDefectsCorrected or
   * previousDefectsIgnored must be true.
   */
  previousDefectsCorrected?: boolean;
  /**
   * @member {boolean} [previousDefectsIgnored] Whether any previous defects
   * were ignored. If this vehicle or trailer was previously marked unsafe, and
   * this DVIR marks it as safe, either previousDefectsCorrected or
   * previousDefectsIgnored must be true.
   */
  previousDefectsIgnored?: boolean;
  /**
   * @member {Safe} safe Whether or not this vehicle or trailer is safe to
   * drive. Possible values include: 'safe', 'unsafe'
   */
  safe: Safe;
  /**
   * @member {number} [trailerId] Id of trailer being inspected. Either
   * vehicleId or trailerId must be provided.
   */
  trailerId?: number;
  /**
   * @member {string} userEmail The Samsara login email for the person creating
   * the DVIR. The email must correspond to a Samsara user's email.
   */
  userEmail: string;
  /**
   * @member {number} [vehicleId] Id of vehicle being inspected. Either
   * vehicleId or trailerId must be provided.
   */
  vehicleId?: number;
}

/**
 * @interface
 * An interface representing ListOKResponse.
 */
export interface ListOKResponse {
  /**
   * @member {VehicleMaintenance[]} [vehicles]
   */
  vehicles?: VehicleMaintenance[];
}

/**
 * @interface
 * An interface representing VehicleUpdateParam.
 */
export interface VehicleUpdateParam {
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {Vehicle[]} vehicles
   */
  vehicles: Vehicle[];
}

/**
 * @interface
 * An interface representing TripsParam.
 */
export interface TripsParam {
  /**
   * @member {number} endMs End of the time range, specified in milliseconds
   * UNIX time.
   */
  endMs: number;
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {number} startMs Beginning of the time range, specified in
   * milliseconds UNIX time. Limited to a 90 day window with respect to startMs
   * and endMs
   */
  startMs: number;
  /**
   * @member {number} vehicleId Vehicle ID to query.
   */
  vehicleId: number;
}

/**
 * @interface
 * An interface representing GetVehicleStatsOKResponseVehicleStatsItem.
 */
export interface GetVehicleStatsOKResponseVehicleStatsItem {
  /**
   * @member {AuxInputSeries} [auxInput1]
   */
  auxInput1?: AuxInputSeries;
  /**
   * @member {AuxInputSeries} [auxInput2]
   */
  auxInput2?: AuxInputSeries;
  /**
   * @member {EngineState[]} [engineState]
   */
  engineState?: EngineState[];
  /**
   * @member {number} vehicleId ID of the vehicle.
   */
  vehicleId: number;
}

/**
 * @interface
 * An interface representing GetVehicleStatsOKResponse.
 */
export interface GetVehicleStatsOKResponse {
  /**
   * @member {Pagination} [pagination]
   */
  pagination?: Pagination;
  /**
   * @member {GetVehicleStatsOKResponseVehicleStatsItem[]} vehicleStats
   */
  vehicleStats: GetVehicleStatsOKResponseVehicleStatsItem[];
}

/**
 * @interface
 * An interface representing Data.
 */
export interface Data {
  /**
   * @member {{ [propertyName: string]: string }} [externalIds]
   */
  externalIds?: { [propertyName: string]: string };
  /**
   * @member {number} [harshAccelSetting] Harsh Event Detection Setting
   * * 0: Passenger
   * * 1: Light Truck
   * * 2: Heavy
   * * 3: Off
   * * 4: Automatic
   */
  harshAccelSetting?: number;
  /**
   * @member {string} [name] Name
   */
  name?: string;
}

/**
 * @interface
 * An interface representing GetAllDataInputsOKResponse.
 */
export interface GetAllDataInputsOKResponse {
  /**
   * @member {DataInputHistoryResponse[]} [dataInputs]
   */
  dataInputs?: DataInputHistoryResponse[];
}

/**
 * @interface
 * An interface representing HistoryParam.
 */
export interface HistoryParam {
  /**
   * @member {number} endMs End of the time range, specified in milliseconds
   * UNIX time.
   */
  endMs: number;
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {number} startMs Beginning of the time range, specified in
   * milliseconds UNIX time.
   */
  startMs: number;
}

/**
 * @interface
 * An interface representing MachinesOKResponse.
 */
export interface MachinesOKResponse {
  /**
   * @member {Machine[]} [machines]
   */
  machines?: Machine[];
}

/**
 * @interface
 * An interface representing BodyModelModel.
 */
export interface BodyModelModel {
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {number[]} sensors List of sensor IDs to query.
   */
  sensors: number[];
}

/**
 * @interface
 * An interface representing HistoryParamSeriesItem.
 * Sensor ID and field to query.
 *
 */
export interface HistoryParamSeriesItem {
  /**
   * @member {Field} field Field to query. Possible values include:
   * 'ambientTemperature', 'probeTemperature', 'currentLoop1Raw',
   * 'currentLoop1Mapped', 'currentLoop2Raw', 'currentLoop2Mapped',
   * 'pmPowerTotal', 'pmPhase1Power', 'pmPhase2Power', 'pmPhase3Power',
   * 'pmPhase1PowerFactor', 'pmPhase2PowerFactor', 'pmPhase3PowerFactor'
   */
  field: Field;
  /**
   * @member {number} widgetId Sensor ID to query.
   */
  widgetId: number;
}

/**
 * @interface
 * An interface representing HistoryParamModel.
 */
export interface HistoryParamModel {
  /**
   * @member {number} endMs End of the time range, specified in milliseconds
   * UNIX time.
   */
  endMs: number;
  /**
   * @member {FillMissing} [fillMissing] Possible values include: 'withNull',
   * 'withPrevious'. Default value: 'withNull' .
   */
  fillMissing?: FillMissing;
  /**
   * @member {number} groupId Group ID to query.
   */
  groupId: number;
  /**
   * @member {HistoryParamSeriesItem[]} series
   */
  series: HistoryParamSeriesItem[];
  /**
   * @member {number} startMs Beginning of the time range, specified in
   * milliseconds UNIX time.
   */
  startMs: number;
  /**
   * @member {number} stepMs Time resolution for which data should be returned,
   * in milliseconds. Specifying 3600000 will return data at hour intervals.
   */
  stepMs: number;
}

/**
 * @interface
 * An interface representing SensorsOKResponse.
 */
export interface SensorsOKResponse {
  /**
   * @member {Sensor[]} [sensors]
   */
  sensors?: Sensor[];
}

/**
 * @interface
 * An interface representing GetAllTagsOKResponse.
 */
export interface GetAllTagsOKResponse {
  /**
   * @member {Tag[]} [tags]
   */
  tags?: Tag[];
}

/**
 * @interface
 * An interface representing SamsaraAPIOptions.
 * @extends ServiceClientOptions
 */
export interface SamsaraAPIOptions extends ServiceClientOptions {
  /**
   * @member {number} [endMs1] Timestamp in unix milliseconds representing the
   * end of the period to fetch, inclusive. Used in combination with startMs.
   * Defaults to nowMs.
   */
  endMs1?: number;
  /**
   * @member {number} [startMs1] Timestamp in unix milliseconds representing
   * the start of the period to fetch, inclusive. Used in combination with
   * endMs. defaults to nowMs.
   */
  startMs1?: number;
  /**
   * @member {number} [durationMs] Time in milliseconds that represents the
   * duration before endMs to query. Defaults to 24 hours.
   */
  durationMs?: number;
  /**
   * @member {number} [endMs2] Time in unix milliseconds that represents the
   * oldest documents to return. Used in combination with durationMs. Defaults
   * to now.
   */
  endMs2?: number;
  /**
   * @member {number} [groupId] Optional group ID if the organization has
   * multiple groups (uncommon).
   */
  groupId?: number;
  /**
   * @member {string} [include] Optionally set include=route to include route
   * object in response payload.
   */
  include?: string;
  /**
   * @member {string} [sequenceId] Sequence ID from the response payload of the
   * last request. Defaults to fetching updates from last 24 hours.
   */
  sequenceId?: string;
  /**
   * @member {string} [endingBefore] Pagination parameter indicating the cursor
   * position to return results before. Used in conjunction with the 'limit'
   * parameter. Mutually exclusive with 'startingAfter' parameter.
   */
  endingBefore?: string;
  /**
   * @member {number} [limit] Pagination parameter indicating the number of
   * results to return in this request. Used in conjunction with either
   * 'startingAfter' or 'endingBefore'.
   */
  limit?: number;
  /**
   * @member {string} [startingAfter] Pagination parameter indicating the
   * cursor position to continue returning results after. Used in conjunction
   * with the 'limit' parameter. Mutually exclusive with 'endingBefore'
   * parameter.
   */
  startingAfter?: string;
  /**
   * @member {number} [duration] Time in milliseconds that represents the
   * duration before end_time to query. Defaults to 24 hours.
   */
  duration?: number;
  /**
   * @member {number} [endTime] Time in unix milliseconds that represents the
   * oldest routes to return. Used in combination with duration. Defaults to
   * now.
   */
  endTime?: number;
  /**
   * @member {number} [endTime1] Timestamp representing the end of the period
   * to fetch, inclusive. Used in combination with start_time. Defaults to
   * nowMs.
   */
  endTime1?: number;
  /**
   * @member {number} [startTime] Timestamp representing the start of the
   * period to fetch, inclusive. Used in combination with end_time. Defaults to
   * 0.
   */
  startTime?: number;
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing SamsaraAPIGetVehicleStatsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SamsaraAPIGetVehicleStatsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Series} [series] Comma-separated list of stat types. Options are
   * engineState, auxInput1, and auxInput2. If this parameter is excluded, all
   * 3 stat types will be returned. Example: series=engineState,auxInput2.
   * Possible values include: 'engineState', 'auxInput1', 'auxInput2'
   */
  series?: Series;
  /**
   * @member {string} [tagIds] Comma-separated list of tag ids. Example:
   * tagIds=1,2,3
   */
  tagIds?: string;
}

/**
 * @interface
 * An interface representing GetSummaryOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface GetSummaryOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [snapToDayBounds] Snap query result to HOS day
   * boundaries.
   */
  snapToDayBounds?: boolean;
}

/**
 * @interface
 * An interface representing GetDvirsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface GetDvirsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [groupId] Group ID to query.
   */
  groupId?: number;
}

/**
 * Defines values for Name.
 * Possible values include: 'Emergency Lights', 'Emergency Alarm', 'Stop Paddle', 'Power Take-Off',
 * 'Plow', 'Sweeper', 'Salter', 'Boom'
 * @readonly
 * @enum {string}
 */
export type Name = 'Emergency Lights' | 'Emergency Alarm' | 'Stop Paddle' | 'Power Take-Off' | 'Plow' | 'Sweeper' | 'Salter' | 'Boom';

/**
 * Defines values for JobState.
 * Possible values include: 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
 * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
 * @readonly
 * @enum {string}
 */
export type JobState = 'JobState_Unassigned' | 'JobState_Scheduled' | 'JobState_EnRoute' | 'JobState_Arrived' | 'JobState_Completed' | 'JobState_Skipped';

/**
 * Defines values for Value.
 * Possible values include: 'Running', 'Off', 'Idle'
 * @readonly
 * @enum {string}
 */
export type Value = 'Running' | 'Off' | 'Idle';

/**
 * Defines values for AuthType.
 * Possible values include: 'default', 'saml'
 * @readonly
 * @enum {string}
 */
export type AuthType = 'default' | 'saml';

/**
 * Defines values for JobState1.
 * Possible values include: 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
 * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
 * @readonly
 * @enum {string}
 */
export type JobState1 = 'JobState_Unassigned' | 'JobState_Scheduled' | 'JobState_EnRoute' | 'JobState_Arrived' | 'JobState_Completed' | 'JobState_Skipped';

/**
 * Defines values for PrevJobState.
 * Possible values include: 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
 * 'JobState_Arrived', 'JobState_Completed', 'JobState_Skipped'
 * @readonly
 * @enum {string}
 */
export type PrevJobState = 'JobState_Unassigned' | 'JobState_Scheduled' | 'JobState_EnRoute' | 'JobState_Arrived' | 'JobState_Completed' | 'JobState_Skipped';

/**
 * Defines values for Safe.
 * Possible values include: 'safe', 'unsafe'
 * @readonly
 * @enum {string}
 */
export type Safe = 'safe' | 'unsafe';

/**
 * Defines values for Field.
 * Possible values include: 'ambientTemperature', 'probeTemperature', 'currentLoop1Raw',
 * 'currentLoop1Mapped', 'currentLoop2Raw', 'currentLoop2Mapped', 'pmPowerTotal', 'pmPhase1Power',
 * 'pmPhase2Power', 'pmPhase3Power', 'pmPhase1PowerFactor', 'pmPhase2PowerFactor',
 * 'pmPhase3PowerFactor'
 * @readonly
 * @enum {string}
 */
export type Field = 'ambientTemperature' | 'probeTemperature' | 'currentLoop1Raw' | 'currentLoop1Mapped' | 'currentLoop2Raw' | 'currentLoop2Mapped' | 'pmPowerTotal' | 'pmPhase1Power' | 'pmPhase2Power' | 'pmPhase3Power' | 'pmPhase1PowerFactor' | 'pmPhase2PowerFactor' | 'pmPhase3PowerFactor';

/**
 * Defines values for FillMissing.
 * Possible values include: 'withNull', 'withPrevious'
 * @readonly
 * @enum {string}
 */
export type FillMissing = 'withNull' | 'withPrevious';

/**
 * Defines values for Series.
 * Possible values include: 'engineState', 'auxInput1', 'auxInput2'
 * @readonly
 * @enum {string}
 */
export type Series = 'engineState' | 'auxInput1' | 'auxInput2';

/**
 * Contains response data for the getOrganizationAddresses operation.
 */
export type GetOrganizationAddressesResponse = Array<Address> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Address[];
    };
};

/**
 * Contains response data for the addOrganizationAddresses operation.
 */
export type AddOrganizationAddressesResponse = Array<Address> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Address[];
    };
};

/**
 * Contains response data for the getOrganizationAddress operation.
 */
export type GetOrganizationAddressResponse = Address & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Address;
    };
};

/**
 * Contains response data for the listContacts operation.
 */
export type ListContactsResponse = Array<Contact> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Contact[];
    };
};

/**
 * Contains response data for the getOrganizationContact operation.
 */
export type GetOrganizationContactResponse = Contact & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Contact;
    };
};

/**
 * Contains response data for the getAllAssets operation.
 */
export type GetAllAssetsResponse = GetAllAssetsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetAllAssetsOKResponse;
    };
};

/**
 * Contains response data for the getAllAssetCurrentLocations operation.
 */
export type GetAllAssetCurrentLocationsResponse = GetAllAssetCurrentLocationsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetAllAssetCurrentLocationsOKResponse;
    };
};

/**
 * Contains response data for the getAssetLocation operation.
 */
export type GetAssetLocationResponse = Array<AssetLocationResponseItem> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AssetLocationResponseItem[];
    };
};

/**
 * Contains response data for the getAssetReefer operation.
 */
export type GetAssetReeferResponse = AssetReeferResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AssetReeferResponse;
    };
};

/**
 * Contains response data for the fetchAllDispatchRoutes operation.
 */
export type FetchAllDispatchRoutesResponse = Array<DispatchRoute> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute[];
    };
};

/**
 * Contains response data for the createDispatchRoute operation.
 */
export type CreateDispatchRouteResponse = DispatchRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute;
    };
};

/**
 * Contains response data for the fetchAllRouteJobUpdates operation.
 */
export type FetchAllRouteJobUpdatesResponse = AllRouteJobUpdates & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AllRouteJobUpdates;
    };
};

/**
 * Contains response data for the getDispatchRouteById operation.
 */
export type GetDispatchRouteByIdResponse = DispatchRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute;
    };
};

/**
 * Contains response data for the updateDispatchRouteById operation.
 */
export type UpdateDispatchRouteByIdResponse = DispatchRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute;
    };
};

/**
 * Contains response data for the getDispatchRouteHistory operation.
 */
export type GetDispatchRouteHistoryResponse = DispatchRouteHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRouteHistory;
    };
};

/**
 * Contains response data for the createDriver operation.
 */
export type CreateDriverResponse = CurrentDriver & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CurrentDriver;
    };
};

/**
 * Contains response data for the getDriverDocumentTypesByOrgId operation.
 */
export type GetDriverDocumentTypesByOrgIdResponse = Array<DocumentType> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DocumentType[];
    };
};

/**
 * Contains response data for the getDriverDocumentsByOrgId operation.
 */
export type GetDriverDocumentsByOrgIdResponse = Array<Document> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Document[];
    };
};

/**
 * Contains response data for the getAllDeactivatedDrivers operation.
 */
export type GetAllDeactivatedDriversResponse = Array<CurrentDriver> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CurrentDriver[];
    };
};

/**
 * Contains response data for the getDeactivatedDriverById operation.
 */
export type GetDeactivatedDriverByIdResponse = CurrentDriver & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CurrentDriver;
    };
};

/**
 * Contains response data for the reactivateDriverById operation.
 */
export type ReactivateDriverByIdResponse = CurrentDriver & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CurrentDriver;
    };
};

/**
 * Contains response data for the getDriverSafetyScore operation.
 */
export type GetDriverSafetyScoreResponse = DriverSafetyScoreResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DriverSafetyScoreResponse;
    };
};

/**
 * Contains response data for the getDriverById operation.
 */
export type GetDriverByIdResponse = CurrentDriver & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CurrentDriver;
    };
};

/**
 * Contains response data for the getDispatchRoutesByDriverId operation.
 */
export type GetDispatchRoutesByDriverIdResponse = Array<DispatchRoute> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute[];
    };
};

/**
 * Contains response data for the createDriverDispatchRoute operation.
 */
export type CreateDriverDispatchRouteResponse = DispatchRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute;
    };
};

/**
 * Contains response data for the createDriverDocument operation.
 */
export type CreateDriverDocumentResponse = Document & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Document;
    };
};

/**
 * Contains response data for the getVehiclesLocations operation.
 */
export type GetVehiclesLocationsResponse = Array<FleetVehiclesLocationsItem> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FleetVehiclesLocationsItem[];
    };
};

/**
 * Contains response data for the getVehicleStats operation.
 */
export type GetVehicleStatsResponse = GetVehicleStatsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetVehicleStatsOKResponse;
    };
};

/**
 * Contains response data for the getVehicleHarshEvent operation.
 */
export type GetVehicleHarshEventResponse = VehicleHarshEventResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VehicleHarshEventResponse;
    };
};

/**
 * Contains response data for the getVehicleSafetyScore operation.
 */
export type GetVehicleSafetyScoreResponse = VehicleSafetyScoreResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VehicleSafetyScoreResponse;
    };
};

/**
 * Contains response data for the getFleetVehicle operation.
 */
export type GetFleetVehicleResponse = FleetVehicleResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FleetVehicleResponse;
    };
};

/**
 * Contains response data for the patchFleetVehicle operation.
 */
export type PatchFleetVehicleResponse = FleetVehicleResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FleetVehicleResponse;
    };
};

/**
 * Contains response data for the getDispatchRoutesByVehicleId operation.
 */
export type GetDispatchRoutesByVehicleIdResponse = Array<DispatchRoute> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute[];
    };
};

/**
 * Contains response data for the createVehicleDispatchRoute operation.
 */
export type CreateVehicleDispatchRouteResponse = DispatchRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DispatchRoute;
    };
};

/**
 * Contains response data for the getVehicleLocations operation.
 */
export type GetVehicleLocationsResponse = Array<FleetVehicleLocation> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FleetVehicleLocation[];
    };
};

/**
 * Contains response data for the getAllDataInputs operation.
 */
export type GetAllDataInputsResponse = GetAllDataInputsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetAllDataInputsOKResponse;
    };
};

/**
 * Contains response data for the getDataInput operation.
 */
export type GetDataInputResponse = DataInputHistoryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataInputHistoryResponse;
    };
};

/**
 * Contains response data for the getAllTags operation.
 */
export type GetAllTagsResponse = GetAllTagsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetAllTagsOKResponse;
    };
};

/**
 * Contains response data for the createTag operation.
 */
export type CreateTagResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};

/**
 * Contains response data for the getTagById operation.
 */
export type GetTagByIdResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};

/**
 * Contains response data for the updateTagById operation.
 */
export type UpdateTagByIdResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};

/**
 * Contains response data for the modifyTagById operation.
 */
export type ModifyTagByIdResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};

/**
 * Contains response data for the listUserRoles operation.
 */
export type ListUserRolesResponse = Array<UserRole> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserRole[];
    };
};

/**
 * Contains response data for the getUserById operation.
 */
export type GetUserByIdResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the drivers operation.
 */
export type GetDriversResponse = DriversResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DriversResponse;
    };
};

/**
 * Contains response data for the summary operation.
 */
export type GetSummaryResponse = DriversSummaryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DriversSummaryResponse;
    };
};

/**
 * Contains response data for the logs operation.
 */
export type GetLogsResponse = DriverDailyLogResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DriverDailyLogResponse;
    };
};

/**
 * Contains response data for the logs1 operation.
 */
export type GetLogs1Response = HosAuthenticationLogsResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HosAuthenticationLogsResponse;
    };
};

/**
 * Contains response data for the logs2 operation.
 */
export type GetLogs2Response = HosLogsResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HosLogsResponse;
    };
};

/**
 * Contains response data for the summary1 operation.
 */
export type GetSummary1Response = HosLogsSummaryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HosLogsSummaryResponse;
    };
};

/**
 * Contains response data for the locations operation.
 */
export type GetLocationsResponse = LocationsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocationsOKResponse;
    };
};

/**
 * Contains response data for the dvirs operation.
 */
export type GetDvirsResponse = DvirListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DvirListResponse;
    };
};

/**
 * Contains response data for the listMethod operation.
 */
export type GetListMethodResponse = ListOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListOKResponse;
    };
};

/**
 * Contains response data for the trips operation.
 */
export type GetTripsResponse = TripResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TripResponse;
    };
};

/**
 * Contains response data for the history operation.
 */
export type GetHistoryResponse = MachineHistoryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineHistoryResponse;
    };
};

/**
 * Contains response data for the machines operation.
 */
export type GetMachinesResponse = MachinesOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachinesOKResponse;
    };
};

/**
 * Contains response data for the cargo operation.
 */
export type GetCargoResponse = CargoResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CargoResponse;
    };
};

/**
 * Contains response data for the door operation.
 */
export type GetDoorResponse = DoorResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DoorResponse;
    };
};

/**
 * Contains response data for the history1 operation.
 */
export type GetHistory1Response = SensorHistoryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SensorHistoryResponse;
    };
};

/**
 * Contains response data for the humidity operation.
 */
export type GetHumidityResponse = HumidityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HumidityResponse;
    };
};

/**
 * Contains response data for the sensors operation.
 */
export type GetSensorsResponse = SensorsOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SensorsOKResponse;
    };
};

/**
 * Contains response data for the temperature operation.
 */
export type GetTemperatureResponse = TemperatureResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TemperatureResponse;
    };
};

/**
 * Contains response data for the fleet operation.
 */
export type ListFleetResponse = FleetOKResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FleetOKResponse;
    };
};

/**
 * Contains response data for the users operation.
 */
export type ListUsersResponse = Array<User> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User[];
    };
};

/**
 * Contains response data for the dvir operation.
 */
export type CreateDvirResponse = DvirBase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DvirBase;
    };
};
