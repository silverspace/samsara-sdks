/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/listMappers";
import * as Parameters from "../models/parameters";
import { SamsaraAPIContext } from "../samsaraAPIContext";

/** Class representing a List. */
export class List {
  private readonly client: SamsaraAPIContext;

  /**
   * Create a List.
   * @param {SamsaraAPIContext} client Reference to the service client.
   */
  constructor(client: SamsaraAPIContext) {
    this.client = client;
  }

  /**
   * Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and
   * information about them.
   * @summary /fleet/list
   * @param groupParam Group ID to query.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListFleetResponse>
   */
  fleet(groupParam: Models.BodyModel, options?: msRest.RequestOptionsBase): Promise<Models.ListFleetResponse>;
  /**
   * @param groupParam Group ID to query.
   * @param callback The callback
   */
  fleet(groupParam: Models.BodyModel, callback: msRest.ServiceCallback<Models.FleetOKResponse>): void;
  /**
   * @param groupParam Group ID to query.
   * @param options The optional parameters
   * @param callback The callback
   */
  fleet(groupParam: Models.BodyModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FleetOKResponse>): void;
  fleet(groupParam: Models.BodyModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FleetOKResponse>, callback?: msRest.ServiceCallback<Models.FleetOKResponse>): Promise<Models.ListFleetResponse> {
    return this.client.sendOperationRequest(
      {
        groupParam,
        options
      },
      fleetOperationSpec,
      callback) as Promise<Models.ListFleetResponse>;
  }

  /**
   * List all users in the organization.
   * @summary /users
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUsersResponse>
   */
  users(options?: msRest.RequestOptionsBase): Promise<Models.ListUsersResponse>;
  /**
   * @param callback The callback
   */
  users(callback: msRest.ServiceCallback<Models.User[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  users(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User[]>): void;
  users(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User[]>, callback?: msRest.ServiceCallback<Models.User[]>): Promise<Models.ListUsersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      usersOperationSpec,
      callback) as Promise<Models.ListUsersResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const fleetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/fleet/list",
  queryParameters: [
    Parameters.accessToken,
    Parameters.startingAfter,
    Parameters.endingBefore,
    Parameters.limit
  ],
  requestBody: {
    parameterPath: "groupParam",
    mapper: {
      ...Mappers.BodyModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FleetOKResponse
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};

const usersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/users",
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "User"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    }
  },
  serializer
};
