// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SamsaraAPI.
    /// </summary>
    public static partial class SamsaraAPIExtensions
    {
            /// <summary>
            /// /addresses
            /// </summary>
            /// <remarks>
            /// Fetch all addresses/geofences for the organization. An address contains
            /// either a circle or polygon geofence describing the address boundaries.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Address> GetOrganizationAddresses(this ISamsaraAPI operations)
            {
                return operations.GetOrganizationAddressesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /addresses
            /// </summary>
            /// <remarks>
            /// Fetch all addresses/geofences for the organization. An address contains
            /// either a circle or polygon geofence describing the address boundaries.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Address>> GetOrganizationAddressesAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationAddressesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /addresses
            /// </summary>
            /// <remarks>
            /// Add one or more addresses to the organization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addresses'>
            /// List of addresses/geofences to add. Geofences can be circular or a polygon.
            /// For each address, only one of 'circle' or 'polygon' should be provided. If
            /// both are provided, the geofence will be saved as a polygon.
            /// </param>
            public static IList<Address> AddOrganizationAddresses(this ISamsaraAPI operations, Addresses addresses)
            {
                return operations.AddOrganizationAddressesAsync(addresses).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /addresses
            /// </summary>
            /// <remarks>
            /// Add one or more addresses to the organization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addresses'>
            /// List of addresses/geofences to add. Geofences can be circular or a polygon.
            /// For each address, only one of 'circle' or 'polygon' should be provided. If
            /// both are provided, the geofence will be saved as a polygon.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Address>> AddOrganizationAddressesAsync(this ISamsaraAPI operations, Addresses addresses, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrganizationAddressesWithHttpMessagesAsync(addresses, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /addresses/{addressId}
            /// </summary>
            /// <remarks>
            /// Fetch an address by its id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressId'>
            /// ID of the address/geofence
            /// </param>
            public static Address GetOrganizationAddress(this ISamsaraAPI operations, long addressId)
            {
                return operations.GetOrganizationAddressAsync(addressId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /addresses/{addressId}
            /// </summary>
            /// <remarks>
            /// Fetch an address by its id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressId'>
            /// ID of the address/geofence
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Address> GetOrganizationAddressAsync(this ISamsaraAPI operations, long addressId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationAddressWithHttpMessagesAsync(addressId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /addresses/{addressId}
            /// </summary>
            /// <remarks>
            /// Delete an address.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressId'>
            /// ID of the address/geofence
            /// </param>
            public static void DeleteOrganizationAddress(this ISamsaraAPI operations, long addressId)
            {
                operations.DeleteOrganizationAddressAsync(addressId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /addresses/{addressId}
            /// </summary>
            /// <remarks>
            /// Delete an address.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressId'>
            /// ID of the address/geofence
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteOrganizationAddressAsync(this ISamsaraAPI operations, long addressId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteOrganizationAddressWithHttpMessagesAsync(addressId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// /addresses/{addressId}
            /// </summary>
            /// <remarks>
            /// Update the name, formatted address, geofence, notes, or tag and contact Ids
            /// for an address. The set of tags or contacts associated with this address
            /// will be updated to exactly match the list of IDs passed in. To remove all
            /// tags or contacts from an address, pass an empty list; to remove notes, pass
            /// an empty string.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// Update parts of an address's value. If the geofence 'circle' or 'polygon'
            /// key is specified, the update will change the type of geofence accordingly.
            /// </param>
            /// <param name='addressId'>
            /// ID of the address/geofence
            /// </param>
            public static void UpdateOrganizationAddress(this ISamsaraAPI operations, AddressModel address, long addressId)
            {
                operations.UpdateOrganizationAddressAsync(address, addressId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /addresses/{addressId}
            /// </summary>
            /// <remarks>
            /// Update the name, formatted address, geofence, notes, or tag and contact Ids
            /// for an address. The set of tags or contacts associated with this address
            /// will be updated to exactly match the list of IDs passed in. To remove all
            /// tags or contacts from an address, pass an empty list; to remove notes, pass
            /// an empty string.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// Update parts of an address's value. If the geofence 'circle' or 'polygon'
            /// key is specified, the update will change the type of geofence accordingly.
            /// </param>
            /// <param name='addressId'>
            /// ID of the address/geofence
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateOrganizationAddressAsync(this ISamsaraAPI operations, AddressModel address, long addressId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateOrganizationAddressWithHttpMessagesAsync(address, addressId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// /contacts
            /// </summary>
            /// <remarks>
            /// Fetch all contacts for the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Contact> ListContacts(this ISamsaraAPI operations)
            {
                return operations.ListContactsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /contacts
            /// </summary>
            /// <remarks>
            /// Fetch all contacts for the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Contact>> ListContactsAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContactsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /contacts/{contact_id}
            /// </summary>
            /// <remarks>
            /// Fetch a contact by its id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactId'>
            /// ID of the contact
            /// </param>
            public static Contact GetOrganizationContact(this ISamsaraAPI operations, long contactId)
            {
                return operations.GetOrganizationContactAsync(contactId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /contacts/{contact_id}
            /// </summary>
            /// <remarks>
            /// Fetch a contact by its id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactId'>
            /// ID of the contact
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contact> GetOrganizationContactAsync(this ISamsaraAPI operations, long contactId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationContactWithHttpMessagesAsync(contactId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/assets
            /// </summary>
            /// <remarks>
            /// Fetch all of the assets for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetAllAssetsOKResponse GetAllAssets(this ISamsaraAPI operations)
            {
                return operations.GetAllAssetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/assets
            /// </summary>
            /// <remarks>
            /// Fetch all of the assets for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetAllAssetsOKResponse> GetAllAssetsAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllAssetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/assets/locations
            /// </summary>
            /// <remarks>
            /// Fetch current locations of all assets for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetAllAssetCurrentLocationsOKResponse GetAllAssetCurrentLocations(this ISamsaraAPI operations)
            {
                return operations.GetAllAssetCurrentLocationsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/assets/locations
            /// </summary>
            /// <remarks>
            /// Fetch current locations of all assets for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetAllAssetCurrentLocationsOKResponse> GetAllAssetCurrentLocationsAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllAssetCurrentLocationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/assets/{assetId:[0-9]+}/locations
            /// </summary>
            /// <remarks>
            /// Fetch the historical locations for the asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AssetLocationResponseItem> GetAssetLocation(this ISamsaraAPI operations)
            {
                return operations.GetAssetLocationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/assets/{assetId:[0-9]+}/locations
            /// </summary>
            /// <remarks>
            /// Fetch the historical locations for the asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetLocationResponseItem>> GetAssetLocationAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetLocationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/assets/{assetId:[0-9]+}/reefer
            /// </summary>
            /// <remarks>
            /// Fetch the reefer-specific stats of an asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AssetReeferResponse GetAssetReefer(this ISamsaraAPI operations)
            {
                return operations.GetAssetReeferAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/assets/{assetId:[0-9]+}/reefer
            /// </summary>
            /// <remarks>
            /// Fetch the reefer-specific stats of an asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetReeferResponse> GetAssetReeferAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetReeferWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Fetch all of the dispatch routes for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<DispatchRoute> FetchAllDispatchRoutes(this ISamsaraAPI operations)
            {
                return operations.FetchAllDispatchRoutesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Fetch all of the dispatch routes for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DispatchRoute>> FetchAllDispatchRoutesAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchAllDispatchRoutesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Create a new dispatch route.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDispatchRouteParams'>
            /// </param>
            public static DispatchRoute CreateDispatchRoute(this ISamsaraAPI operations, DispatchRouteCreate createDispatchRouteParams)
            {
                return operations.CreateDispatchRouteAsync(createDispatchRouteParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Create a new dispatch route.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDispatchRouteParams'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchRoute> CreateDispatchRouteAsync(this ISamsaraAPI operations, DispatchRouteCreate createDispatchRouteParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDispatchRouteWithHttpMessagesAsync(createDispatchRouteParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/dispatch/routes/job_updates
            /// </summary>
            /// <remarks>
            /// Fetch all updates to a job including route data in the last 24 hours or
            /// subsequent to an sequence ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AllRouteJobUpdates FetchAllRouteJobUpdates(this ISamsaraAPI operations)
            {
                return operations.FetchAllRouteJobUpdatesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes/job_updates
            /// </summary>
            /// <remarks>
            /// Fetch all updates to a job including route data in the last 24 hours or
            /// subsequent to an sequence ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AllRouteJobUpdates> FetchAllRouteJobUpdatesAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchAllRouteJobUpdatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch a dispatch route by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// ID of the dispatch route.
            /// </param>
            public static DispatchRoute GetDispatchRouteById(this ISamsaraAPI operations, long routeId)
            {
                return operations.GetDispatchRouteByIdAsync(routeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch a dispatch route by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// ID of the dispatch route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchRoute> GetDispatchRouteByIdAsync(this ISamsaraAPI operations, long routeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDispatchRouteByIdWithHttpMessagesAsync(routeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}/
            /// </summary>
            /// <remarks>
            /// Update a dispatch route and its associated jobs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateDispatchRouteParams'>
            /// </param>
            /// <param name='routeId'>
            /// ID of the dispatch route.
            /// </param>
            public static DispatchRoute UpdateDispatchRouteById(this ISamsaraAPI operations, DispatchRoute updateDispatchRouteParams, long routeId)
            {
                return operations.UpdateDispatchRouteByIdAsync(updateDispatchRouteParams, routeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}/
            /// </summary>
            /// <remarks>
            /// Update a dispatch route and its associated jobs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateDispatchRouteParams'>
            /// </param>
            /// <param name='routeId'>
            /// ID of the dispatch route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchRoute> UpdateDispatchRouteByIdAsync(this ISamsaraAPI operations, DispatchRoute updateDispatchRouteParams, long routeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDispatchRouteByIdWithHttpMessagesAsync(updateDispatchRouteParams, routeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}/
            /// </summary>
            /// <remarks>
            /// Delete a dispatch route and its associated jobs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// ID of the dispatch route.
            /// </param>
            public static void DeleteDispatchRouteById(this ISamsaraAPI operations, long routeId)
            {
                operations.DeleteDispatchRouteByIdAsync(routeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}/
            /// </summary>
            /// <remarks>
            /// Delete a dispatch route and its associated jobs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// ID of the dispatch route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDispatchRouteByIdAsync(this ISamsaraAPI operations, long routeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDispatchRouteByIdWithHttpMessagesAsync(routeId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}/history
            /// </summary>
            /// <remarks>
            /// Fetch the history of a dispatch route.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// ID of the route with history.
            /// </param>
            public static DispatchRouteHistory GetDispatchRouteHistory(this ISamsaraAPI operations, long routeId)
            {
                return operations.GetDispatchRouteHistoryAsync(routeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/dispatch/routes/{route_id:[0-9]+}/history
            /// </summary>
            /// <remarks>
            /// Fetch the history of a dispatch route.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// ID of the route with history.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchRouteHistory> GetDispatchRouteHistoryAsync(this ISamsaraAPI operations, long routeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDispatchRouteHistoryWithHttpMessagesAsync(routeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/create
            /// </summary>
            /// <remarks>
            /// Create a new driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDriverParam'>
            /// Driver creation body
            /// </param>
            public static CurrentDriver CreateDriver(this ISamsaraAPI operations, DriverForCreate createDriverParam)
            {
                return operations.CreateDriverAsync(createDriverParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/create
            /// </summary>
            /// <remarks>
            /// Create a new driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDriverParam'>
            /// Driver creation body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentDriver> CreateDriverAsync(this ISamsaraAPI operations, DriverForCreate createDriverParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDriverWithHttpMessagesAsync(createDriverParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/document_types
            /// </summary>
            /// <remarks>
            /// Fetch all of the document types.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<DocumentType> GetDriverDocumentTypesByOrgId(this ISamsaraAPI operations)
            {
                return operations.GetDriverDocumentTypesByOrgIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/document_types
            /// </summary>
            /// <remarks>
            /// Fetch all of the document types.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DocumentType>> GetDriverDocumentTypesByOrgIdAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDriverDocumentTypesByOrgIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/documents
            /// </summary>
            /// <remarks>
            /// Fetch all of the documents.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Document> GetDriverDocumentsByOrgId(this ISamsaraAPI operations)
            {
                return operations.GetDriverDocumentsByOrgIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/documents
            /// </summary>
            /// <remarks>
            /// Fetch all of the documents.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Document>> GetDriverDocumentsByOrgIdAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDriverDocumentsByOrgIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/inactive
            /// </summary>
            /// <remarks>
            /// Fetch all deactivated drivers for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CurrentDriver> GetAllDeactivatedDrivers(this ISamsaraAPI operations)
            {
                return operations.GetAllDeactivatedDriversAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/inactive
            /// </summary>
            /// <remarks>
            /// Fetch all deactivated drivers for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CurrentDriver>> GetAllDeactivatedDriversAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDeactivatedDriversWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch deactivated driver by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CurrentDriver GetDeactivatedDriverById(this ISamsaraAPI operations)
            {
                return operations.GetDeactivatedDriverByIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch deactivated driver by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentDriver> GetDeactivatedDriverByIdAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeactivatedDriverByIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Reactivate the inactive driver having id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactivateDriverParam'>
            /// Driver reactivation body
            /// </param>
            public static CurrentDriver ReactivateDriverById(this ISamsaraAPI operations, ReactivateDriverParam reactivateDriverParam)
            {
                return operations.ReactivateDriverByIdAsync(reactivateDriverParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/inactive/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Reactivate the inactive driver having id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactivateDriverParam'>
            /// Driver reactivation body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentDriver> ReactivateDriverByIdAsync(this ISamsaraAPI operations, ReactivateDriverParam reactivateDriverParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReactivateDriverByIdWithHttpMessagesAsync(reactivateDriverParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/{driverId:[0-9]+}/safety/score
            /// </summary>
            /// <remarks>
            /// Fetch the safety score for the driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver
            /// </param>
            public static DriverSafetyScoreResponse GetDriverSafetyScore(this ISamsaraAPI operations, long driverId)
            {
                return operations.GetDriverSafetyScoreAsync(driverId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driverId:[0-9]+}/safety/score
            /// </summary>
            /// <remarks>
            /// Fetch the safety score for the driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DriverSafetyScoreResponse> GetDriverSafetyScoreAsync(this ISamsaraAPI operations, long driverId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDriverSafetyScoreWithHttpMessagesAsync(driverId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch driver by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CurrentDriver GetDriverById(this ISamsaraAPI operations)
            {
                return operations.GetDriverByIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch driver by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentDriver> GetDriverByIdAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDriverByIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Deactivate a driver with the given id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeactivateDriver(this ISamsaraAPI operations)
            {
                operations.DeactivateDriverAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Deactivate a driver with the given id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeactivateDriverAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeactivateDriverWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Fetch all of the dispatch routes for a given driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver with the associated routes.
            /// </param>
            public static IList<DispatchRoute> GetDispatchRoutesByDriverId(this ISamsaraAPI operations, long driverId)
            {
                return operations.GetDispatchRoutesByDriverIdAsync(driverId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Fetch all of the dispatch routes for a given driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver with the associated routes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DispatchRoute>> GetDispatchRoutesByDriverIdAsync(this ISamsaraAPI operations, long driverId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDispatchRoutesByDriverIdWithHttpMessagesAsync(driverId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Create a new dispatch route for the driver with driver_id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDispatchRouteParams'>
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver with the associated routes.
            /// </param>
            public static DispatchRoute CreateDriverDispatchRoute(this ISamsaraAPI operations, DispatchRouteCreate createDispatchRouteParams, long driverId)
            {
                return operations.CreateDriverDispatchRouteAsync(createDispatchRouteParams, driverId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Create a new dispatch route for the driver with driver_id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDispatchRouteParams'>
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver with the associated routes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchRoute> CreateDriverDispatchRouteAsync(this ISamsaraAPI operations, DispatchRouteCreate createDispatchRouteParams, long driverId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDriverDispatchRouteWithHttpMessagesAsync(createDispatchRouteParams, driverId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/documents
            /// </summary>
            /// <remarks>
            /// Create a driver document for the given driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDocumentParams'>
            /// To create a document for a given document type, the document type's uuid
            /// needs to be passed in to documentTypeUuid. The list of fields passed in
            /// should match the document type’s list of field types in the correct order.
            /// In other words, a field's valueType and value (i.e. only one of:
            /// stringValue, numberValue, or photoValue) at index _i_ should match with the
            /// document field type’s valueType at index _i_.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver for whom the document is created.
            /// </param>
            public static Document CreateDriverDocument(this ISamsaraAPI operations, DocumentCreate createDocumentParams, long driverId)
            {
                return operations.CreateDriverDocumentAsync(createDocumentParams, driverId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/documents
            /// </summary>
            /// <remarks>
            /// Create a driver document for the given driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDocumentParams'>
            /// To create a document for a given document type, the document type's uuid
            /// needs to be passed in to documentTypeUuid. The list of fields passed in
            /// should match the document type’s list of field types in the correct order.
            /// In other words, a field's valueType and value (i.e. only one of:
            /// stringValue, numberValue, or photoValue) at index _i_ should match with the
            /// document field type’s valueType at index _i_.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver for whom the document is created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Document> CreateDriverDocumentAsync(this ISamsaraAPI operations, DocumentCreate createDocumentParams, long driverId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDriverDocumentWithHttpMessagesAsync(createDocumentParams, driverId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/locations
            /// </summary>
            /// <remarks>
            /// Fetch locations for a given vehicle between a start/end time. The maximum
            /// query duration is 30 minutes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startMs'>
            /// Time in Unix epoch milliseconds for the start of the query (cannot exceed
            /// 30 minutes)
            /// </param>
            /// <param name='endMs'>
            /// Time in Unix epoch milliseconds for the end of the query (cannot exceed 30
            /// minutes)
            /// </param>
            public static IList<FleetVehiclesLocationsItem> GetVehiclesLocations(this ISamsaraAPI operations, int startMs, int endMs)
            {
                return operations.GetVehiclesLocationsAsync(startMs, endMs).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/locations
            /// </summary>
            /// <remarks>
            /// Fetch locations for a given vehicle between a start/end time. The maximum
            /// query duration is 30 minutes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startMs'>
            /// Time in Unix epoch milliseconds for the start of the query (cannot exceed
            /// 30 minutes)
            /// </param>
            /// <param name='endMs'>
            /// Time in Unix epoch milliseconds for the end of the query (cannot exceed 30
            /// minutes)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FleetVehiclesLocationsItem>> GetVehiclesLocationsAsync(this ISamsaraAPI operations, int startMs, int endMs, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehiclesLocationsWithHttpMessagesAsync(startMs, endMs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/stats
            /// </summary>
            /// <remarks>
            /// Fetch engine state and aux input data for all vehicles in the group between
            /// a start/end time. Data returned may be affected by device connectivity and
            /// processing time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startMs'>
            /// Time in Unix epoch milliseconds for the start of the query.
            /// </param>
            /// <param name='endMs'>
            /// Time in Unix epoch milliseconds for the end of the query.
            /// </param>
            /// <param name='series'>
            /// Comma-separated list of stat types. Options are engineState, auxInput1, and
            /// auxInput2. If this parameter is excluded, all 3 stat types will be
            /// returned. Example: series=engineState,auxInput2. Possible values include:
            /// 'engineState', 'auxInput1', 'auxInput2'
            /// </param>
            /// <param name='tagIds'>
            /// Comma-separated list of tag ids. Example: tagIds=1,2,3
            /// </param>
            public static GetVehicleStatsOKResponse GetVehicleStats(this ISamsaraAPI operations, int startMs, int endMs, string series = default(string), string tagIds = default(string))
            {
                return operations.GetVehicleStatsAsync(startMs, endMs, series, tagIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/stats
            /// </summary>
            /// <remarks>
            /// Fetch engine state and aux input data for all vehicles in the group between
            /// a start/end time. Data returned may be affected by device connectivity and
            /// processing time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startMs'>
            /// Time in Unix epoch milliseconds for the start of the query.
            /// </param>
            /// <param name='endMs'>
            /// Time in Unix epoch milliseconds for the end of the query.
            /// </param>
            /// <param name='series'>
            /// Comma-separated list of stat types. Options are engineState, auxInput1, and
            /// auxInput2. If this parameter is excluded, all 3 stat types will be
            /// returned. Example: series=engineState,auxInput2. Possible values include:
            /// 'engineState', 'auxInput1', 'auxInput2'
            /// </param>
            /// <param name='tagIds'>
            /// Comma-separated list of tag ids. Example: tagIds=1,2,3
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetVehicleStatsOKResponse> GetVehicleStatsAsync(this ISamsaraAPI operations, int startMs, int endMs, string series = default(string), string tagIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehicleStatsWithHttpMessagesAsync(startMs, endMs, series, tagIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
            /// </summary>
            /// <remarks>
            /// Fetch harsh event details for a vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle
            /// </param>
            public static VehicleHarshEventResponse GetVehicleHarshEvent(this ISamsaraAPI operations, long vehicleId)
            {
                return operations.GetVehicleHarshEventAsync(vehicleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/harsh_event
            /// </summary>
            /// <remarks>
            /// Fetch harsh event details for a vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VehicleHarshEventResponse> GetVehicleHarshEventAsync(this ISamsaraAPI operations, long vehicleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehicleHarshEventWithHttpMessagesAsync(vehicleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
            /// </summary>
            /// <remarks>
            /// Fetch the safety score for the vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle
            /// </param>
            public static VehicleSafetyScoreResponse GetVehicleSafetyScore(this ISamsaraAPI operations, long vehicleId)
            {
                return operations.GetVehicleSafetyScoreAsync(vehicleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicleId:[0-9]+}/safety/score
            /// </summary>
            /// <remarks>
            /// Fetch the safety score for the vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VehicleSafetyScoreResponse> GetVehicleSafetyScoreAsync(this ISamsaraAPI operations, long vehicleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehicleSafetyScoreWithHttpMessagesAsync(vehicleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Gets a specific vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static FleetVehicleResponse GetFleetVehicle(this ISamsaraAPI operations)
            {
                return operations.GetFleetVehicleAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Gets a specific vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetVehicleResponse> GetFleetVehicleAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFleetVehicleWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Updates the specified vehicle using JSON merge patch format. See IETF RFC
            /// 7396: https://tools.ietf.org/html/rfc7396.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// </param>
            public static FleetVehicleResponse PatchFleetVehicle(this ISamsaraAPI operations, Data data)
            {
                return operations.PatchFleetVehicleAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+ | external_id:[a-zA-Z0-9]+}
            /// </summary>
            /// <remarks>
            /// Updates the specified vehicle using JSON merge patch format. See IETF RFC
            /// 7396: https://tools.ietf.org/html/rfc7396.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetVehicleResponse> PatchFleetVehicleAsync(this ISamsaraAPI operations, Data data, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchFleetVehicleWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Fetch all of the dispatch routes for a given vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle with the associated routes.
            /// </param>
            public static IList<DispatchRoute> GetDispatchRoutesByVehicleId(this ISamsaraAPI operations, long vehicleId)
            {
                return operations.GetDispatchRoutesByVehicleIdAsync(vehicleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Fetch all of the dispatch routes for a given vehicle.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle with the associated routes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DispatchRoute>> GetDispatchRoutesByVehicleIdAsync(this ISamsaraAPI operations, long vehicleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDispatchRoutesByVehicleIdWithHttpMessagesAsync(vehicleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Create a new dispatch route for the vehicle with vehicle_id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDispatchRouteParams'>
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle with the associated routes.
            /// </param>
            public static DispatchRoute CreateVehicleDispatchRoute(this ISamsaraAPI operations, DispatchRouteCreate createDispatchRouteParams, long vehicleId)
            {
                return operations.CreateVehicleDispatchRouteAsync(createDispatchRouteParams, vehicleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+}/dispatch/routes
            /// </summary>
            /// <remarks>
            /// Create a new dispatch route for the vehicle with vehicle_id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDispatchRouteParams'>
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle with the associated routes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchRoute> CreateVehicleDispatchRouteAsync(this ISamsaraAPI operations, DispatchRouteCreate createDispatchRouteParams, long vehicleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVehicleDispatchRouteWithHttpMessagesAsync(createDispatchRouteParams, vehicleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+}/locations
            /// </summary>
            /// <remarks>
            /// Fetch locations for a given vehicle between a start/end time. The maximum
            /// query duration is one hour.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle with the associated routes.
            /// </param>
            /// <param name='startMs'>
            /// Time in Unix epoch milliseconds for the start of the query (cannot exceed 1
            /// hour)
            /// </param>
            /// <param name='endMs'>
            /// Time in Unix epoch milliseconds for the end of the query (cannot exceed 1
            /// hour)
            /// </param>
            public static IList<FleetVehicleLocation> GetVehicleLocations(this ISamsaraAPI operations, long vehicleId, long startMs, long endMs)
            {
                return operations.GetVehicleLocationsAsync(vehicleId, startMs, endMs).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/vehicles/{vehicle_id:[0-9]+}/locations
            /// </summary>
            /// <remarks>
            /// Fetch locations for a given vehicle between a start/end time. The maximum
            /// query duration is one hour.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// ID of the vehicle with the associated routes.
            /// </param>
            /// <param name='startMs'>
            /// Time in Unix epoch milliseconds for the start of the query (cannot exceed 1
            /// hour)
            /// </param>
            /// <param name='endMs'>
            /// Time in Unix epoch milliseconds for the end of the query (cannot exceed 1
            /// hour)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FleetVehicleLocation>> GetVehicleLocationsAsync(this ISamsaraAPI operations, long vehicleId, long startMs, long endMs, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehicleLocationsWithHttpMessagesAsync(vehicleId, startMs, endMs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /industrial/data
            /// </summary>
            /// <remarks>
            /// Fetch all of the data inputs for a group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetAllDataInputsOKResponse GetAllDataInputs(this ISamsaraAPI operations)
            {
                return operations.GetAllDataInputsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /industrial/data
            /// </summary>
            /// <remarks>
            /// Fetch all of the data inputs for a group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetAllDataInputsOKResponse> GetAllDataInputsAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDataInputsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /industrial/data/{data_input_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch datapoints from a given data input.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DataInputHistoryResponse GetDataInput(this ISamsaraAPI operations)
            {
                return operations.GetDataInputAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /industrial/data/{data_input_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch datapoints from a given data input.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataInputHistoryResponse> GetDataInputAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataInputWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /tags
            /// </summary>
            /// <remarks>
            /// Fetch all of the tags for a group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetAllTagsOKResponse GetAllTags(this ISamsaraAPI operations)
            {
                return operations.GetAllTagsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /tags
            /// </summary>
            /// <remarks>
            /// Fetch all of the tags for a group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetAllTagsOKResponse> GetAllTagsAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTagsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /tags
            /// </summary>
            /// <remarks>
            /// Create a new tag for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tagCreateParams'>
            /// </param>
            public static Tag CreateTag(this ISamsaraAPI operations, TagCreate tagCreateParams)
            {
                return operations.CreateTagAsync(tagCreateParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /tags
            /// </summary>
            /// <remarks>
            /// Create a new tag for the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tagCreateParams'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> CreateTagAsync(this ISamsaraAPI operations, TagCreate tagCreateParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTagWithHttpMessagesAsync(tagCreateParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch a tag by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Tag GetTagById(this ISamsaraAPI operations)
            {
                return operations.GetTagByIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Fetch a tag by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> GetTagByIdAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTagByIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Update a tag with a new name and new members. This API call would replace
            /// all old members of a tag with new members specified in the request body. To
            /// modify only a few devices associated with a tag use the PATCH endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateTagParams'>
            /// </param>
            public static Tag UpdateTagById(this ISamsaraAPI operations, TagUpdate updateTagParams)
            {
                return operations.UpdateTagByIdAsync(updateTagParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Update a tag with a new name and new members. This API call would replace
            /// all old members of a tag with new members specified in the request body. To
            /// modify only a few devices associated with a tag use the PATCH endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateTagParams'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> UpdateTagByIdAsync(this ISamsaraAPI operations, TagUpdate updateTagParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTagByIdWithHttpMessagesAsync(updateTagParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Permanently deletes a tag.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteTagById(this ISamsaraAPI operations)
            {
                operations.DeleteTagByIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Permanently deletes a tag.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTagByIdAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTagByIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Add or delete specific members from a tag, or modify the name of a tag.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tagModifyParams'>
            /// </param>
            public static Tag ModifyTagById(this ISamsaraAPI operations, TagModify tagModifyParams)
            {
                return operations.ModifyTagByIdAsync(tagModifyParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /tags/{tag_id:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Add or delete specific members from a tag, or modify the name of a tag.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tagModifyParams'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> ModifyTagByIdAsync(this ISamsaraAPI operations, TagModify tagModifyParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModifyTagByIdWithHttpMessagesAsync(tagModifyParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /user_roles
            /// </summary>
            /// <remarks>
            /// Get all roles in the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UserRole> ListUserRoles(this ISamsaraAPI operations)
            {
                return operations.ListUserRolesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /user_roles
            /// </summary>
            /// <remarks>
            /// Get all roles in the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserRole>> ListUserRolesAsync(this ISamsaraAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUserRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /users/{userId:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Get a user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// ID of the user.
            /// </param>
            public static User GetUserById(this ISamsaraAPI operations, long userId)
            {
                return operations.GetUserByIdAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /users/{userId:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Get a user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// ID of the user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetUserByIdAsync(this ISamsaraAPI operations, long userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByIdWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /users/{userId:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Remove a user from the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// ID of the user.
            /// </param>
            public static void DeleteUserById(this ISamsaraAPI operations, long userId)
            {
                operations.DeleteUserByIdAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /users/{userId:[0-9]+}
            /// </summary>
            /// <remarks>
            /// Remove a user from the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// ID of the user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserByIdAsync(this ISamsaraAPI operations, long userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserByIdWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
