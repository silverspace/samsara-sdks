// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentFieldCreate
    {
        /// <summary>
        /// Initializes a new instance of the DocumentFieldCreate class.
        /// </summary>
        public DocumentFieldCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentFieldCreate class.
        /// </summary>
        /// <param name="valueType">Determines the type of this field and what
        /// type of value this field has. It should be either ValueType_Number,
        /// ValueType_String, or ValueType_Photo.</param>
        /// <param name="numberValue">Value of this field if this document
        /// field has valueType: ValueType_Number.</param>
        /// <param name="photoValue">Value of this field if this document field
        /// has valueType: ValueType_Photo. Array of photo objects where each
        /// object contains a URL for a photo.</param>
        /// <param name="stringValue">Value of this field if this document
        /// field has valueType: ValueType_String.</param>
        public DocumentFieldCreate(string valueType, double? numberValue = default(double?), IList<DocumentFieldCreatePhotoValueItem> photoValue = default(IList<DocumentFieldCreatePhotoValueItem>), string stringValue = default(string))
        {
            NumberValue = numberValue;
            PhotoValue = photoValue;
            StringValue = stringValue;
            ValueType = valueType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets value of this field if this document field has
        /// valueType: ValueType_Number.
        /// </summary>
        [JsonProperty(PropertyName = "numberValue")]
        public double? NumberValue { get; set; }

        /// <summary>
        /// Gets or sets value of this field if this document field has
        /// valueType: ValueType_Photo. Array of photo objects where each
        /// object contains a URL for a photo.
        /// </summary>
        [JsonProperty(PropertyName = "photoValue")]
        public IList<DocumentFieldCreatePhotoValueItem> PhotoValue { get; set; }

        /// <summary>
        /// Gets or sets value of this field if this document field has
        /// valueType: ValueType_String.
        /// </summary>
        [JsonProperty(PropertyName = "stringValue")]
        public string StringValue { get; set; }

        /// <summary>
        /// Gets or sets determines the type of this field and what type of
        /// value this field has. It should be either ValueType_Number,
        /// ValueType_String, or ValueType_Photo.
        /// </summary>
        [JsonProperty(PropertyName = "valueType")]
        public string ValueType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ValueType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValueType");
            }
        }
    }
}
