// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DispatchJob : DispatchJobCreate
    {
        /// <summary>
        /// Initializes a new instance of the DispatchJob class.
        /// </summary>
        public DispatchJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DispatchJob class.
        /// </summary>
        /// <param name="scheduledArrivalTimeMs">The time at which the assigned
        /// driver is scheduled to arrive at the job destination.</param>
        /// <param name="dispatchRouteId">ID of the route that this job belongs
        /// to.</param>
        /// <param name="id">ID of the Samsara dispatch job.</param>
        /// <param name="jobState">Possible values include:
        /// 'JobState_Unassigned', 'JobState_Scheduled', 'JobState_EnRoute',
        /// 'JobState_Arrived', 'JobState_Completed',
        /// 'JobState_Skipped'</param>
        /// <param name="destinationAddress">The address of the job
        /// destination, as it would be recognized if provided to
        /// maps.google.com. Optional if a valid destination address ID is
        /// provided.</param>
        /// <param name="destinationAddressId">ID of the job destination
        /// associated with an address book entry. Optional if valid values are
        /// provided for destination address or latitude/longitude. If a valid
        /// destination address ID is provided, address/latitude/longitude will
        /// be used from the address book entry. Name of the address book entry
        /// will only be used if the destination name is not provided.</param>
        /// <param name="destinationLat">Latitude of the destination in decimal
        /// degrees. Optional if a valid destination address ID is
        /// provided.</param>
        /// <param name="destinationLng">Longitude of the destination in
        /// decimal degrees. Optional if a valid destination address ID is
        /// provided.</param>
        /// <param name="destinationName">The name of the job destination. If
        /// provided, it will take precedence over the name of the address book
        /// entry.</param>
        /// <param name="notes">Notes regarding the details of this
        /// job.</param>
        /// <param name="scheduledDepartureTimeMs">The time at which the
        /// assigned driver is scheduled to depart from the job
        /// destination.</param>
        /// <param name="arrivedAtMs">The time at which the driver arrived at
        /// the job destination.</param>
        /// <param name="completedAtMs">The time at which the job was marked
        /// complete (e.g. started driving to the next destination).</param>
        /// <param name="driverId">ID of the driver assigned to the dispatch
        /// job.</param>
        /// <param name="enRouteAtMs">The time at which the assigned driver
        /// started fulfilling the job (e.g. started driving to the
        /// destination).</param>
        /// <param name="estimatedArrivalMs">The time at which the assigned
        /// driver is estimated to arrive at the job destination. Only valid
        /// for en-route jobs.</param>
        /// <param name="fleetViewerUrl">Fleet viewer url of the dispatch
        /// job.</param>
        /// <param name="skippedAtMs">The time at which the job was marked
        /// skipped.</param>
        /// <param name="vehicleId">ID of the vehicle used for the dispatch
        /// job.</param>
        public DispatchJob(long scheduledArrivalTimeMs, long dispatchRouteId, long groupId, long id, string jobState, string destinationAddress = default(string), long? destinationAddressId = default(long?), double? destinationLat = default(double?), double? destinationLng = default(double?), string destinationName = default(string), string notes = default(string), long? scheduledDepartureTimeMs = default(long?), long? arrivedAtMs = default(long?), long? completedAtMs = default(long?), long? driverId = default(long?), long? enRouteAtMs = default(long?), long? estimatedArrivalMs = default(long?), string fleetViewerUrl = default(string), long? skippedAtMs = default(long?), long? vehicleId = default(long?))
            : base(scheduledArrivalTimeMs, destinationAddress, destinationAddressId, destinationLat, destinationLng, destinationName, notes, scheduledDepartureTimeMs)
        {
            ArrivedAtMs = arrivedAtMs;
            CompletedAtMs = completedAtMs;
            DispatchRouteId = dispatchRouteId;
            DriverId = driverId;
            EnRouteAtMs = enRouteAtMs;
            EstimatedArrivalMs = estimatedArrivalMs;
            FleetViewerUrl = fleetViewerUrl;
            GroupId = groupId;
            Id = id;
            JobState = jobState;
            SkippedAtMs = skippedAtMs;
            VehicleId = vehicleId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the time at which the driver arrived at the job
        /// destination.
        /// </summary>
        [JsonProperty(PropertyName = "arrived_at_ms")]
        public long? ArrivedAtMs { get; set; }

        /// <summary>
        /// Gets or sets the time at which the job was marked complete (e.g.
        /// started driving to the next destination).
        /// </summary>
        [JsonProperty(PropertyName = "completed_at_ms")]
        public long? CompletedAtMs { get; set; }

        /// <summary>
        /// Gets or sets ID of the route that this job belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "dispatch_route_id")]
        public long DispatchRouteId { get; set; }

        /// <summary>
        /// Gets or sets ID of the driver assigned to the dispatch job.
        /// </summary>
        [JsonProperty(PropertyName = "driver_id")]
        public long? DriverId { get; set; }

        /// <summary>
        /// Gets or sets the time at which the assigned driver started
        /// fulfilling the job (e.g. started driving to the destination).
        /// </summary>
        [JsonProperty(PropertyName = "en_route_at_ms")]
        public long? EnRouteAtMs { get; set; }

        /// <summary>
        /// Gets or sets the time at which the assigned driver is estimated to
        /// arrive at the job destination. Only valid for en-route jobs.
        /// </summary>
        [JsonProperty(PropertyName = "estimated_arrival_ms")]
        public long? EstimatedArrivalMs { get; set; }

        /// <summary>
        /// Gets or sets fleet viewer url of the dispatch job.
        /// </summary>
        [JsonProperty(PropertyName = "fleet_viewer_url")]
        public string FleetViewerUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "group_id")]
        public long GroupId { get; set; }

        /// <summary>
        /// Gets or sets ID of the Samsara dispatch job.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'JobState_Unassigned',
        /// 'JobState_Scheduled', 'JobState_EnRoute', 'JobState_Arrived',
        /// 'JobState_Completed', 'JobState_Skipped'
        /// </summary>
        [JsonProperty(PropertyName = "job_state")]
        public string JobState { get; set; }

        /// <summary>
        /// Gets or sets the time at which the job was marked skipped.
        /// </summary>
        [JsonProperty(PropertyName = "skipped_at_ms")]
        public long? SkippedAtMs { get; set; }

        /// <summary>
        /// Gets or sets ID of the vehicle used for the dispatch job.
        /// </summary>
        [JsonProperty(PropertyName = "vehicle_id")]
        public long? VehicleId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (JobState == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JobState");
            }
        }
    }
}
