// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CreateDvirParam
    {
        /// <summary>
        /// Initializes a new instance of the CreateDvirParam class.
        /// </summary>
        public CreateDvirParam()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateDvirParam class.
        /// </summary>
        /// <param name="safe">Whether or not this vehicle or trailer is safe
        /// to drive. Possible values include: 'safe', 'unsafe'</param>
        /// <param name="userEmail">The Samsara login email for the person
        /// creating the DVIR. The email must correspond to a Samsara user's
        /// email.</param>
        /// <param name="mechanicNotes">Any notes from the mechanic.</param>
        /// <param name="odometerMiles">The current odometer of the
        /// vehicle.</param>
        /// <param name="previousDefectsCorrected">Whether any previous defects
        /// were corrected. If this vehicle or trailer was previously marked
        /// unsafe, and this DVIR marks it as safe, either
        /// previousDefectsCorrected or previousDefectsIgnored must be
        /// true.</param>
        /// <param name="previousDefectsIgnored">Whether any previous defects
        /// were ignored. If this vehicle or trailer was previously marked
        /// unsafe, and this DVIR marks it as safe, either
        /// previousDefectsCorrected or previousDefectsIgnored must be
        /// true.</param>
        /// <param name="trailerId">Id of trailer being inspected. Either
        /// vehicleId or trailerId must be provided.</param>
        /// <param name="vehicleId">Id of vehicle being inspected. Either
        /// vehicleId or trailerId must be provided.</param>
        public CreateDvirParam(string safe, string userEmail, string mechanicNotes = default(string), int? odometerMiles = default(int?), bool? previousDefectsCorrected = default(bool?), bool? previousDefectsIgnored = default(bool?), int? trailerId = default(int?), int? vehicleId = default(int?))
        {
            MechanicNotes = mechanicNotes;
            OdometerMiles = odometerMiles;
            PreviousDefectsCorrected = previousDefectsCorrected;
            PreviousDefectsIgnored = previousDefectsIgnored;
            Safe = safe;
            TrailerId = trailerId;
            UserEmail = userEmail;
            VehicleId = vehicleId;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for CreateDvirParam class.
        /// </summary>
        static CreateDvirParam()
        {
            InspectionType = "mechanic";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets any notes from the mechanic.
        /// </summary>
        [JsonProperty(PropertyName = "mechanicNotes")]
        public string MechanicNotes { get; set; }

        /// <summary>
        /// Gets or sets the current odometer of the vehicle.
        /// </summary>
        [JsonProperty(PropertyName = "odometerMiles")]
        public int? OdometerMiles { get; set; }

        /// <summary>
        /// Gets or sets whether any previous defects were corrected. If this
        /// vehicle or trailer was previously marked unsafe, and this DVIR
        /// marks it as safe, either previousDefectsCorrected or
        /// previousDefectsIgnored must be true.
        /// </summary>
        [JsonProperty(PropertyName = "previousDefectsCorrected")]
        public bool? PreviousDefectsCorrected { get; set; }

        /// <summary>
        /// Gets or sets whether any previous defects were ignored. If this
        /// vehicle or trailer was previously marked unsafe, and this DVIR
        /// marks it as safe, either previousDefectsCorrected or
        /// previousDefectsIgnored must be true.
        /// </summary>
        [JsonProperty(PropertyName = "previousDefectsIgnored")]
        public bool? PreviousDefectsIgnored { get; set; }

        /// <summary>
        /// Gets or sets whether or not this vehicle or trailer is safe to
        /// drive. Possible values include: 'safe', 'unsafe'
        /// </summary>
        [JsonProperty(PropertyName = "safe")]
        public string Safe { get; set; }

        /// <summary>
        /// Gets or sets id of trailer being inspected. Either vehicleId or
        /// trailerId must be provided.
        /// </summary>
        [JsonProperty(PropertyName = "trailerId")]
        public int? TrailerId { get; set; }

        /// <summary>
        /// Gets or sets the Samsara login email for the person creating the
        /// DVIR. The email must correspond to a Samsara user's email.
        /// </summary>
        [JsonProperty(PropertyName = "userEmail")]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or sets id of vehicle being inspected. Either vehicleId or
        /// trailerId must be provided.
        /// </summary>
        [JsonProperty(PropertyName = "vehicleId")]
        public int? VehicleId { get; set; }

        /// <summary>
        /// Only type 'mechanic' is currently accepted.
        /// </summary>
        [JsonProperty(PropertyName = "inspectionType")]
        public static string InspectionType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Safe == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Safe");
            }
            if (UserEmail == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserEmail");
            }
        }
    }
}
