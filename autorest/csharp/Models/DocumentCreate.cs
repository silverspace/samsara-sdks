// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentCreate : DocumentBase
    {
        /// <summary>
        /// Initializes a new instance of the DocumentCreate class.
        /// </summary>
        public DocumentCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentCreate class.
        /// </summary>
        /// <param name="documentTypeUuid">Universally unique identifier for
        /// the document type this document is being created for.</param>
        /// <param name="fields">List of fields should match the document
        /// type’s list of field types in the correct order. In other words, a
        /// field's valueType and value (i.e. only one of: stringValue,
        /// numberValue, or photoValue) at index _i_ should match with the
        /// document field type’s valueType at index _i_.</param>
        /// <param name="dispatchJobId">ID of the Samsara dispatch job for
        /// which the document is submitted</param>
        /// <param name="notes">Notes submitted with this document.</param>
        public DocumentCreate(string documentTypeUuid, IList<DocumentField> fields, long? dispatchJobId = default(long?), string notes = default(string))
            : base(dispatchJobId, notes)
        {
            DocumentTypeUuid = documentTypeUuid;
            Fields = fields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets universally unique identifier for the document type
        /// this document is being created for.
        /// </summary>
        [JsonProperty(PropertyName = "documentTypeUuid")]
        public string DocumentTypeUuid { get; set; }

        /// <summary>
        /// Gets or sets list of fields should match the document type’s list
        /// of field types in the correct order. In other words, a field's
        /// valueType and value (i.e. only one of: stringValue, numberValue, or
        /// photoValue) at index _i_ should match with the document field
        /// type’s valueType at index _i_.
        /// </summary>
        [JsonProperty(PropertyName = "fields")]
        public IList<DocumentField> Fields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DocumentTypeUuid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DocumentTypeUuid");
            }
            if (Fields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fields");
            }
            if (Fields != null)
            {
                foreach (var element in Fields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
