// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A list of aux input values over a timerange.
    /// </summary>
    public partial class AuxInputSeries
    {
        /// <summary>
        /// Initializes a new instance of the AuxInputSeries class.
        /// </summary>
        public AuxInputSeries()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AuxInputSeries class.
        /// </summary>
        /// <param name="name">The name of the aux input. Possible values
        /// include: 'Emergency Lights', 'Emergency Alarm', 'Stop Paddle',
        /// 'Power Take-Off', 'Plow', 'Sweeper', 'Salter', 'Boom'</param>
        public AuxInputSeries(string name, IList<AuxInput> values)
        {
            Name = name;
            Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the aux input. Possible values include:
        /// 'Emergency Lights', 'Emergency Alarm', 'Stop Paddle', 'Power
        /// Take-Off', 'Plow', 'Sweeper', 'Salter', 'Boom'
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<AuxInput> Values { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Values == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Values");
            }
            if (Values != null)
            {
                foreach (var element in Values)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
