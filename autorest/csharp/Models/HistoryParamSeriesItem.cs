// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Sensor ID and field to query.
    /// </summary>
    public partial class HistoryParamSeriesItem
    {
        /// <summary>
        /// Initializes a new instance of the HistoryParamSeriesItem class.
        /// </summary>
        public HistoryParamSeriesItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HistoryParamSeriesItem class.
        /// </summary>
        /// <param name="field">Field to query. Possible values include:
        /// 'ambientTemperature', 'probeTemperature', 'currentLoop1Raw',
        /// 'currentLoop1Mapped', 'currentLoop2Raw', 'currentLoop2Mapped',
        /// 'pmPowerTotal', 'pmPhase1Power', 'pmPhase2Power', 'pmPhase3Power',
        /// 'pmPhase1PowerFactor', 'pmPhase2PowerFactor',
        /// 'pmPhase3PowerFactor'</param>
        /// <param name="widgetId">Sensor ID to query.</param>
        public HistoryParamSeriesItem(string field, long widgetId)
        {
            Field = field;
            WidgetId = widgetId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets field to query. Possible values include:
        /// 'ambientTemperature', 'probeTemperature', 'currentLoop1Raw',
        /// 'currentLoop1Mapped', 'currentLoop2Raw', 'currentLoop2Mapped',
        /// 'pmPowerTotal', 'pmPhase1Power', 'pmPhase2Power', 'pmPhase3Power',
        /// 'pmPhase1PowerFactor', 'pmPhase2PowerFactor', 'pmPhase3PowerFactor'
        /// </summary>
        [JsonProperty(PropertyName = "field")]
        public string Field { get; set; }

        /// <summary>
        /// Gets or sets sensor ID to query.
        /// </summary>
        [JsonProperty(PropertyName = "widgetId")]
        public long WidgetId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Field == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Field");
            }
        }
    }
}
