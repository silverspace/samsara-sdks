// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TripResponseTripsItem
    {
        /// <summary>
        /// Initializes a new instance of the TripResponseTripsItem class.
        /// </summary>
        public TripResponseTripsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TripResponseTripsItem class.
        /// </summary>
        /// <param name="distanceMeters">Length of the trip in meters.</param>
        /// <param name="driverId">ID of the driver.</param>
        /// <param name="endAddress">Text representation of nearest
        /// identifiable location to the end (latitude, longitude)
        /// coordinates.</param>
        /// <param name="endCoordinates">End (latitude, longitude) in decimal
        /// degrees.</param>
        /// <param name="endLocation">Geocoded street address of start
        /// (latitude, longitude) coordinates.</param>
        /// <param name="endMs">End of the trip in UNIX milliseconds.</param>
        /// <param name="endOdometer">Odometer reading at the end of the
        /// trip.</param>
        /// <param name="fuelConsumedMl">Amount in milliliters of fuel consumed
        /// on this trip.</param>
        /// <param name="startAddress">Text representation of nearest
        /// identifiable location to the start (latitude, longitude)
        /// coordinates.</param>
        /// <param name="startCoordinates">Start (latitude, longitude) in
        /// decimal degrees.</param>
        /// <param name="startLocation">Geocoded street address of start
        /// (latitude, longitude) coordinates.</param>
        /// <param name="startMs">Beginning of the trip in UNIX
        /// milliseconds.</param>
        /// <param name="startOdometer">Odometer reading at the beginning of
        /// the trip.</param>
        /// <param name="tollMeters">Length in meters trip spent on toll
        /// roads.</param>
        public TripResponseTripsItem(int? distanceMeters = default(int?), int? driverId = default(int?), string endAddress = default(string), TripResponseTripsItemEndCoordinates endCoordinates = default(TripResponseTripsItemEndCoordinates), string endLocation = default(string), int? endMs = default(int?), int? endOdometer = default(int?), int? fuelConsumedMl = default(int?), string startAddress = default(string), TripResponseTripsItemStartCoordinates startCoordinates = default(TripResponseTripsItemStartCoordinates), string startLocation = default(string), int? startMs = default(int?), int? startOdometer = default(int?), int? tollMeters = default(int?))
        {
            DistanceMeters = distanceMeters;
            DriverId = driverId;
            EndAddress = endAddress;
            EndCoordinates = endCoordinates;
            EndLocation = endLocation;
            EndMs = endMs;
            EndOdometer = endOdometer;
            FuelConsumedMl = fuelConsumedMl;
            StartAddress = startAddress;
            StartCoordinates = startCoordinates;
            StartLocation = startLocation;
            StartMs = startMs;
            StartOdometer = startOdometer;
            TollMeters = tollMeters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets length of the trip in meters.
        /// </summary>
        [JsonProperty(PropertyName = "distanceMeters")]
        public int? DistanceMeters { get; set; }

        /// <summary>
        /// Gets or sets ID of the driver.
        /// </summary>
        [JsonProperty(PropertyName = "driverId")]
        public int? DriverId { get; set; }

        /// <summary>
        /// Gets or sets text representation of nearest identifiable location
        /// to the end (latitude, longitude) coordinates.
        /// </summary>
        [JsonProperty(PropertyName = "endAddress")]
        public string EndAddress { get; set; }

        /// <summary>
        /// Gets or sets end (latitude, longitude) in decimal degrees.
        /// </summary>
        [JsonProperty(PropertyName = "endCoordinates")]
        public TripResponseTripsItemEndCoordinates EndCoordinates { get; set; }

        /// <summary>
        /// Gets or sets geocoded street address of start (latitude, longitude)
        /// coordinates.
        /// </summary>
        [JsonProperty(PropertyName = "endLocation")]
        public string EndLocation { get; set; }

        /// <summary>
        /// Gets or sets end of the trip in UNIX milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "endMs")]
        public int? EndMs { get; set; }

        /// <summary>
        /// Gets or sets odometer reading at the end of the trip.
        /// </summary>
        [JsonProperty(PropertyName = "endOdometer")]
        public int? EndOdometer { get; set; }

        /// <summary>
        /// Gets or sets amount in milliliters of fuel consumed on this trip.
        /// </summary>
        [JsonProperty(PropertyName = "fuelConsumedMl")]
        public int? FuelConsumedMl { get; set; }

        /// <summary>
        /// Gets or sets text representation of nearest identifiable location
        /// to the start (latitude, longitude) coordinates.
        /// </summary>
        [JsonProperty(PropertyName = "startAddress")]
        public string StartAddress { get; set; }

        /// <summary>
        /// Gets or sets start (latitude, longitude) in decimal degrees.
        /// </summary>
        [JsonProperty(PropertyName = "startCoordinates")]
        public TripResponseTripsItemStartCoordinates StartCoordinates { get; set; }

        /// <summary>
        /// Gets or sets geocoded street address of start (latitude, longitude)
        /// coordinates.
        /// </summary>
        [JsonProperty(PropertyName = "startLocation")]
        public string StartLocation { get; set; }

        /// <summary>
        /// Gets or sets beginning of the trip in UNIX milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "startMs")]
        public int? StartMs { get; set; }

        /// <summary>
        /// Gets or sets odometer reading at the beginning of the trip.
        /// </summary>
        [JsonProperty(PropertyName = "startOdometer")]
        public int? StartOdometer { get; set; }

        /// <summary>
        /// Gets or sets length in meters trip spent on toll roads.
        /// </summary>
        [JsonProperty(PropertyName = "tollMeters")]
        public int? TollMeters { get; set; }

    }
}
