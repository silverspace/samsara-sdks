// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A vehicle object.
    /// </summary>
    public partial class Vehicle
    {
        /// <summary>
        /// Initializes a new instance of the Vehicle class.
        /// </summary>
        public Vehicle()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Vehicle class.
        /// </summary>
        /// <param name="id">ID of the vehicle.</param>
        /// <param name="engineHours">Total engine hours for the
        /// vehicle.</param>
        /// <param name="fuelLevelPercent">The fuel level of the vehicle as a
        /// percentage. (0.0 to 1.0)</param>
        /// <param name="name">Name of the vehicle.</param>
        /// <param name="odometerMeters">The number of meters reported by the
        /// odometer.</param>
        /// <param name="vin">Vehicle Identification Number.</param>
        public Vehicle(long id, long? engineHours = default(long?), double? fuelLevelPercent = default(double?), string name = default(string), string note = default(string), long? odometerMeters = default(long?), string vin = default(string))
        {
            EngineHours = engineHours;
            FuelLevelPercent = fuelLevelPercent;
            Id = id;
            Name = name;
            Note = note;
            OdometerMeters = odometerMeters;
            Vin = vin;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets total engine hours for the vehicle.
        /// </summary>
        [JsonProperty(PropertyName = "engineHours")]
        public long? EngineHours { get; set; }

        /// <summary>
        /// Gets or sets the fuel level of the vehicle as a percentage. (0.0 to
        /// 1.0)
        /// </summary>
        [JsonProperty(PropertyName = "fuelLevelPercent")]
        public double? FuelLevelPercent { get; set; }

        /// <summary>
        /// Gets or sets ID of the vehicle.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets name of the vehicle.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets the number of meters reported by the odometer.
        /// </summary>
        [JsonProperty(PropertyName = "odometerMeters")]
        public long? OdometerMeters { get; set; }

        /// <summary>
        /// Gets or sets vehicle Identification Number.
        /// </summary>
        [JsonProperty(PropertyName = "vin")]
        public string Vin { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
