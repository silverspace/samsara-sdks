// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DispatchRouteCreate : DispatchRouteBase
    {
        /// <summary>
        /// Initializes a new instance of the DispatchRouteCreate class.
        /// </summary>
        public DispatchRouteCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DispatchRouteCreate class.
        /// </summary>
        /// <param name="name">Descriptive name of this route.</param>
        /// <param name="scheduledEndMs">The time in Unix epoch milliseconds
        /// that the last job in the route is scheduled to end.</param>
        /// <param name="scheduledStartMs">The time in Unix epoch milliseconds
        /// that the route is scheduled to start.</param>
        /// <param name="dispatchJobs">The dispatch jobs to create for this
        /// route.</param>
        /// <param name="actualEndMs">The time in Unix epoch milliseconds that
        /// the route actually ended.</param>
        /// <param name="actualStartMs">The time in Unix epoch milliseconds
        /// that the route actually started.</param>
        /// <param name="driverId">ID of the driver assigned to the dispatch
        /// route. Note that driver_id and vehicle_id are mutually exclusive.
        /// If neither is specified, then the route is unassigned.</param>
        /// <param name="groupId">ID of the group if the organization has
        /// multiple groups (optional).</param>
        /// <param name="scheduledMeters">The distance expected to be traveled
        /// for this route in meters.</param>
        /// <param name="startLocationAddress">The address of the route's
        /// starting location, as it would be recognized if provided to
        /// maps.google.com. Optional if a valid start location address ID is
        /// provided.</param>
        /// <param name="startLocationAddressId">ID of the start location
        /// associated with an address book entry. Optional if valid values are
        /// provided for start location address or latitude/longitude. If a
        /// valid start location address ID is provided,
        /// address/latitude/longitude will be used from the address book
        /// entry. Name of the address book entry will only be used if the
        /// start location name is not provided.</param>
        /// <param name="startLocationLat">Latitude of the start location in
        /// decimal degrees. Optional if a valid start location address ID is
        /// provided.</param>
        /// <param name="startLocationLng">Longitude of the start location in
        /// decimal degrees. Optional if a valid start location address ID is
        /// provided.</param>
        /// <param name="startLocationName">The name of the route's starting
        /// location. If provided, it will take precedence over the name of the
        /// address book entry.</param>
        /// <param name="trailerId">ID of the trailer assigned to the dispatch
        /// route. Note that trailers can only be assigned to routes that have
        /// a Vehicle or Driver assigned to them.</param>
        /// <param name="vehicleId">ID of the vehicle assigned to the dispatch
        /// route. Note that vehicle_id and driver_id are mutually exclusive.
        /// If neither is specified, then the route is unassigned.</param>
        public DispatchRouteCreate(string name, long scheduledEndMs, long scheduledStartMs, IList<DispatchJobCreate> dispatchJobs, long? actualEndMs = default(long?), long? actualStartMs = default(long?), long? driverId = default(long?), long? groupId = default(long?), long? scheduledMeters = default(long?), string startLocationAddress = default(string), long? startLocationAddressId = default(long?), double? startLocationLat = default(double?), double? startLocationLng = default(double?), string startLocationName = default(string), long? trailerId = default(long?), long? vehicleId = default(long?))
            : base(name, scheduledEndMs, scheduledStartMs, actualEndMs, actualStartMs, driverId, groupId, scheduledMeters, startLocationAddress, startLocationAddressId, startLocationLat, startLocationLng, startLocationName, trailerId, vehicleId)
        {
            DispatchJobs = dispatchJobs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the dispatch jobs to create for this route.
        /// </summary>
        [JsonProperty(PropertyName = "dispatch_jobs")]
        public IList<DispatchJobCreate> DispatchJobs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DispatchJobs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DispatchJobs");
            }
            if (DispatchJobs != null)
            {
                foreach (var element in DispatchJobs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
