// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class User : UserBase
    {
        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        /// <param name="authType">The authentication type the user uses to
        /// authenticate. To use SAML this organization must have a configured
        /// SAML integration. Possible values include: 'default',
        /// 'saml'</param>
        /// <param name="email">The email address of this user.</param>
        /// <param name="name">The first and last name of the user.</param>
        /// <param name="organizationRoleId">The id of the role the user is
        /// assigned to at the organization level. This will be blank for users
        /// that only have access to specific tags.</param>
        /// <param name="id">The ID of the User record.</param>
        /// <param name="organizationRole">The name of the role the user is
        /// assigned to at the organization level. This will be blank for users
        /// that only have access to specific tags.</param>
        /// <param name="tagRoles">The specific tags this user has access to.
        /// This will be blank for users that have full access to the
        /// organization.</param>
        public User(string authType, string email, string name = default(string), string organizationRoleId = default(string), long? id = default(long?), string organizationRole = default(string), IList<UserTagRole> tagRoles = default(IList<UserTagRole>))
            : base(authType, email, name, organizationRoleId)
        {
            Id = id;
            OrganizationRole = organizationRole;
            TagRoles = tagRoles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the User record.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the role the user is assigned to at the
        /// organization level. This will be blank for users that only have
        /// access to specific tags.
        /// </summary>
        [JsonProperty(PropertyName = "organizationRole")]
        public string OrganizationRole { get; set; }

        /// <summary>
        /// Gets or sets the specific tags this user has access to. This will
        /// be blank for users that have full access to the organization.
        /// </summary>
        [JsonProperty(PropertyName = "tagRoles")]
        public IList<UserTagRole> TagRoles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (TagRoles != null)
            {
                foreach (var element in TagRoles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
