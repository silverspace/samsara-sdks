// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class HosLogsSummaryResponseDriversItem
    {
        /// <summary>
        /// Initializes a new instance of the HosLogsSummaryResponseDriversItem
        /// class.
        /// </summary>
        public HosLogsSummaryResponseDriversItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HosLogsSummaryResponseDriversItem
        /// class.
        /// </summary>
        /// <param name="cycleRemaining">The amount of remaining cycle time (in
        /// ms).</param>
        /// <param name="cycleTomorrow">The amount of cycle time (in ms)
        /// available tomorrow.</param>
        /// <param name="driverId">ID of the driver.</param>
        /// <param name="driverName">Name of the driver.</param>
        /// <param name="drivingInViolationCycle">The amount of driving time in
        /// violation in this cycle (in ms).</param>
        /// <param name="drivingInViolationToday">The amount of driving time in
        /// violation today (in ms).</param>
        /// <param name="dutyStatus">The Hours of Service status type. One of
        /// `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
        /// `PERSONAL_CONVEYANCE`.</param>
        /// <param name="shiftDriveRemaining">The amount of remaining shift
        /// drive time (in ms).</param>
        /// <param name="shiftRemaining">The amount of remaining shift time (in
        /// ms).</param>
        /// <param name="timeInCurrentStatus">The amount of time (in ms) that
        /// the driver has been in the current `dutyStatus`.</param>
        /// <param name="timeUntilBreak">The amount of time (in ms) remaining
        /// until the driver cannot drive without a rest break.</param>
        /// <param name="vehicleName">Name of the vehicle.</param>
        public HosLogsSummaryResponseDriversItem(long? cycleRemaining = default(long?), long? cycleTomorrow = default(long?), long? driverId = default(long?), string driverName = default(string), long? drivingInViolationCycle = default(long?), long? drivingInViolationToday = default(long?), string dutyStatus = default(string), long? shiftDriveRemaining = default(long?), long? shiftRemaining = default(long?), long? timeInCurrentStatus = default(long?), long? timeUntilBreak = default(long?), string vehicleName = default(string))
        {
            CycleRemaining = cycleRemaining;
            CycleTomorrow = cycleTomorrow;
            DriverId = driverId;
            DriverName = driverName;
            DrivingInViolationCycle = drivingInViolationCycle;
            DrivingInViolationToday = drivingInViolationToday;
            DutyStatus = dutyStatus;
            ShiftDriveRemaining = shiftDriveRemaining;
            ShiftRemaining = shiftRemaining;
            TimeInCurrentStatus = timeInCurrentStatus;
            TimeUntilBreak = timeUntilBreak;
            VehicleName = vehicleName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the amount of remaining cycle time (in ms).
        /// </summary>
        [JsonProperty(PropertyName = "cycleRemaining")]
        public long? CycleRemaining { get; set; }

        /// <summary>
        /// Gets or sets the amount of cycle time (in ms) available tomorrow.
        /// </summary>
        [JsonProperty(PropertyName = "cycleTomorrow")]
        public long? CycleTomorrow { get; set; }

        /// <summary>
        /// Gets or sets ID of the driver.
        /// </summary>
        [JsonProperty(PropertyName = "driverId")]
        public long? DriverId { get; set; }

        /// <summary>
        /// Gets or sets name of the driver.
        /// </summary>
        [JsonProperty(PropertyName = "driverName")]
        public string DriverName { get; set; }

        /// <summary>
        /// Gets or sets the amount of driving time in violation in this cycle
        /// (in ms).
        /// </summary>
        [JsonProperty(PropertyName = "drivingInViolationCycle")]
        public long? DrivingInViolationCycle { get; set; }

        /// <summary>
        /// Gets or sets the amount of driving time in violation today (in ms).
        /// </summary>
        [JsonProperty(PropertyName = "drivingInViolationToday")]
        public long? DrivingInViolationToday { get; set; }

        /// <summary>
        /// Gets or sets the Hours of Service status type. One of `OFF_DUTY`,
        /// `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
        /// `PERSONAL_CONVEYANCE`.
        /// </summary>
        [JsonProperty(PropertyName = "dutyStatus")]
        public string DutyStatus { get; set; }

        /// <summary>
        /// Gets or sets the amount of remaining shift drive time (in ms).
        /// </summary>
        [JsonProperty(PropertyName = "shiftDriveRemaining")]
        public long? ShiftDriveRemaining { get; set; }

        /// <summary>
        /// Gets or sets the amount of remaining shift time (in ms).
        /// </summary>
        [JsonProperty(PropertyName = "shiftRemaining")]
        public long? ShiftRemaining { get; set; }

        /// <summary>
        /// Gets or sets the amount of time (in ms) that the driver has been in
        /// the current `dutyStatus`.
        /// </summary>
        [JsonProperty(PropertyName = "timeInCurrentStatus")]
        public long? TimeInCurrentStatus { get; set; }

        /// <summary>
        /// Gets or sets the amount of time (in ms) remaining until the driver
        /// cannot drive without a rest break.
        /// </summary>
        [JsonProperty(PropertyName = "timeUntilBreak")]
        public long? TimeUntilBreak { get; set; }

        /// <summary>
        /// Gets or sets name of the vehicle.
        /// </summary>
        [JsonProperty(PropertyName = "vehicleName")]
        public string VehicleName { get; set; }

    }
}
