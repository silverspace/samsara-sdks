// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DispatchJobCreate
    {
        /// <summary>
        /// Initializes a new instance of the DispatchJobCreate class.
        /// </summary>
        public DispatchJobCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DispatchJobCreate class.
        /// </summary>
        /// <param name="scheduledArrivalTimeMs">The time at which the assigned
        /// driver is scheduled to arrive at the job destination.</param>
        /// <param name="destinationAddress">The address of the job
        /// destination, as it would be recognized if provided to
        /// maps.google.com. Optional if a valid destination address ID is
        /// provided.</param>
        /// <param name="destinationAddressId">ID of the job destination
        /// associated with an address book entry. Optional if valid values are
        /// provided for destination address or latitude/longitude. If a valid
        /// destination address ID is provided, address/latitude/longitude will
        /// be used from the address book entry. Name of the address book entry
        /// will only be used if the destination name is not provided.</param>
        /// <param name="destinationLat">Latitude of the destination in decimal
        /// degrees. Optional if a valid destination address ID is
        /// provided.</param>
        /// <param name="destinationLng">Longitude of the destination in
        /// decimal degrees. Optional if a valid destination address ID is
        /// provided.</param>
        /// <param name="destinationName">The name of the job destination. If
        /// provided, it will take precedence over the name of the address book
        /// entry.</param>
        /// <param name="notes">Notes regarding the details of this
        /// job.</param>
        /// <param name="scheduledDepartureTimeMs">The time at which the
        /// assigned driver is scheduled to depart from the job
        /// destination.</param>
        public DispatchJobCreate(long scheduledArrivalTimeMs, string destinationAddress = default(string), long? destinationAddressId = default(long?), double? destinationLat = default(double?), double? destinationLng = default(double?), string destinationName = default(string), string notes = default(string), long? scheduledDepartureTimeMs = default(long?))
        {
            DestinationAddress = destinationAddress;
            DestinationAddressId = destinationAddressId;
            DestinationLat = destinationLat;
            DestinationLng = destinationLng;
            DestinationName = destinationName;
            Notes = notes;
            ScheduledArrivalTimeMs = scheduledArrivalTimeMs;
            ScheduledDepartureTimeMs = scheduledDepartureTimeMs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the address of the job destination, as it would be
        /// recognized if provided to maps.google.com. Optional if a valid
        /// destination address ID is provided.
        /// </summary>
        [JsonProperty(PropertyName = "destination_address")]
        public string DestinationAddress { get; set; }

        /// <summary>
        /// Gets or sets ID of the job destination associated with an address
        /// book entry. Optional if valid values are provided for destination
        /// address or latitude/longitude. If a valid destination address ID is
        /// provided, address/latitude/longitude will be used from the address
        /// book entry. Name of the address book entry will only be used if the
        /// destination name is not provided.
        /// </summary>
        [JsonProperty(PropertyName = "destination_address_id")]
        public long? DestinationAddressId { get; set; }

        /// <summary>
        /// Gets or sets latitude of the destination in decimal degrees.
        /// Optional if a valid destination address ID is provided.
        /// </summary>
        [JsonProperty(PropertyName = "destination_lat")]
        public double? DestinationLat { get; set; }

        /// <summary>
        /// Gets or sets longitude of the destination in decimal degrees.
        /// Optional if a valid destination address ID is provided.
        /// </summary>
        [JsonProperty(PropertyName = "destination_lng")]
        public double? DestinationLng { get; set; }

        /// <summary>
        /// Gets or sets the name of the job destination. If provided, it will
        /// take precedence over the name of the address book entry.
        /// </summary>
        [JsonProperty(PropertyName = "destination_name")]
        public string DestinationName { get; set; }

        /// <summary>
        /// Gets or sets notes regarding the details of this job.
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or sets the time at which the assigned driver is scheduled to
        /// arrive at the job destination.
        /// </summary>
        [JsonProperty(PropertyName = "scheduled_arrival_time_ms")]
        public long ScheduledArrivalTimeMs { get; set; }

        /// <summary>
        /// Gets or sets the time at which the assigned driver is scheduled to
        /// depart from the job destination.
        /// </summary>
        [JsonProperty(PropertyName = "scheduled_departure_time_ms")]
        public long? ScheduledDepartureTimeMs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
