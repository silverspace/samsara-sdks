// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentType
    {
        /// <summary>
        /// Initializes a new instance of the DocumentType class.
        /// </summary>
        public DocumentType()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentType class.
        /// </summary>
        /// <param name="name">Name of the document type.</param>
        /// <param name="orgId">ID for the organization this document belongs
        /// to.</param>
        /// <param name="uuid">Universally unique identifier for the document
        /// type. Can be passed in as a documentTypeUuid when creating a
        /// document for this document type.</param>
        /// <param name="fieldTypes">The field types determine the names of
        /// fields for this document type. They also determine the types of
        /// values a document submitted for this document type can
        /// have.</param>
        public DocumentType(string name, long orgId, string uuid, IList<IList<DocumentFieldType>> fieldTypes = default(IList<IList<DocumentFieldType>>))
        {
            FieldTypes = fieldTypes;
            Name = name;
            OrgId = orgId;
            Uuid = uuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the field types determine the names of fields for this
        /// document type. They also determine the types of values a document
        /// submitted for this document type can have.
        /// </summary>
        [JsonProperty(PropertyName = "fieldTypes")]
        public IList<IList<DocumentFieldType>> FieldTypes { get; set; }

        /// <summary>
        /// Gets or sets name of the document type.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets ID for the organization this document belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "orgId")]
        public long OrgId { get; set; }

        /// <summary>
        /// Gets or sets universally unique identifier for the document type.
        /// Can be passed in as a documentTypeUuid when creating a document for
        /// this document type.
        /// </summary>
        [JsonProperty(PropertyName = "uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Uuid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Uuid");
            }
            if (FieldTypes != null)
            {
                foreach (var element in FieldTypes)
                {
                    if (element != null)
                    {
                        foreach (var element1 in element)
                        {
                            if (element1 != null)
                            {
                                element1.Validate();
                            }
                        }
                    }
                }
            }
        }
    }
}
