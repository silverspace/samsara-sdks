// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AddressesAddressesItem
    {
        /// <summary>
        /// Initializes a new instance of the AddressesAddressesItem class.
        /// </summary>
        public AddressesAddressesItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddressesAddressesItem class.
        /// </summary>
        /// <param name="formattedAddress">The full address associated with
        /// this address/geofence, as it might be recognized by
        /// maps.google.com</param>
        /// <param name="name">The name of this address/geofence</param>
        public AddressesAddressesItem(string formattedAddress, AddressGeofence geofence, string name, IList<double?> contactIds = default(IList<double?>), string notes = default(string), IList<double?> tagIds = default(IList<double?>))
        {
            ContactIds = contactIds;
            FormattedAddress = formattedAddress;
            Geofence = geofence;
            Name = name;
            Notes = notes;
            TagIds = tagIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contactIds")]
        public IList<double?> ContactIds { get; set; }

        /// <summary>
        /// Gets or sets the full address associated with this
        /// address/geofence, as it might be recognized by maps.google.com
        /// </summary>
        [JsonProperty(PropertyName = "formattedAddress")]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geofence")]
        public AddressGeofence Geofence { get; set; }

        /// <summary>
        /// Gets or sets the name of this address/geofence
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tagIds")]
        public IList<double?> TagIds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FormattedAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FormattedAddress");
            }
            if (Geofence == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Geofence");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
