// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UserBase
    {
        /// <summary>
        /// Initializes a new instance of the UserBase class.
        /// </summary>
        public UserBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserBase class.
        /// </summary>
        /// <param name="authType">The authentication type the user uses to
        /// authenticate. To use SAML this organization must have a configured
        /// SAML integration. Possible values include: 'default',
        /// 'saml'</param>
        /// <param name="email">The email address of this user.</param>
        /// <param name="name">The first and last name of the user.</param>
        /// <param name="organizationRoleId">The id of the role the user is
        /// assigned to at the organization level. This will be blank for users
        /// that only have access to specific tags.</param>
        public UserBase(string authType, string email, string name = default(string), string organizationRoleId = default(string))
        {
            AuthType = authType;
            Email = email;
            Name = name;
            OrganizationRoleId = organizationRoleId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the authentication type the user uses to authenticate.
        /// To use SAML this organization must have a configured SAML
        /// integration. Possible values include: 'default', 'saml'
        /// </summary>
        [JsonProperty(PropertyName = "authType")]
        public string AuthType { get; set; }

        /// <summary>
        /// Gets or sets the email address of this user.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the first and last name of the user.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the id of the role the user is assigned to at the
        /// organization level. This will be blank for users that only have
        /// access to specific tags.
        /// </summary>
        [JsonProperty(PropertyName = "organizationRoleId")]
        public string OrganizationRoleId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AuthType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthType");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
        }
    }
}
