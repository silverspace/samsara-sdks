// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentField : DocumentFieldCreate
    {
        /// <summary>
        /// Initializes a new instance of the DocumentField class.
        /// </summary>
        public DocumentField()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentField class.
        /// </summary>
        /// <param name="valueType">Determines the type of this field and what
        /// type of value this field has. It should be either ValueType_Number,
        /// ValueType_String, or ValueType_Photo.</param>
        /// <param name="label">Descriptive name of this field.</param>
        /// <param name="numberValue">Value of this field if this document
        /// field has valueType: ValueType_Number.</param>
        /// <param name="photoValue">Value of this field if this document field
        /// has valueType: ValueType_Photo. Array of photo objects where each
        /// object contains a URL for a photo.</param>
        /// <param name="stringValue">Value of this field if this document
        /// field has valueType: ValueType_String.</param>
        /// <param name="value">DEPRECATED: Please use stringValue,
        /// numberValue, or photoValue instead. Value of this field. Depending
        /// on what kind of field it is, this may be one of the following: an
        /// array of image urls, a float, an integer, or a string.</param>
        public DocumentField(string valueType, string label, double? numberValue = default(double?), IList<DocumentFieldCreatePhotoValueItem> photoValue = default(IList<DocumentFieldCreatePhotoValueItem>), string stringValue = default(string), object value = default(object))
            : base(valueType, numberValue, photoValue, stringValue)
        {
            Label = label;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets descriptive name of this field.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Please use stringValue, numberValue, or
        /// photoValue instead. Value of this field. Depending on what kind of
        /// field it is, this may be one of the following: an array of image
        /// urls, a float, an integer, or a string.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Label == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Label");
            }
        }
    }
}
