// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class HosLogsResponseLogsItem
    {
        /// <summary>
        /// Initializes a new instance of the HosLogsResponseLogsItem class.
        /// </summary>
        public HosLogsResponseLogsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HosLogsResponseLogsItem class.
        /// </summary>
        /// <param name="driverId">ID of the driver.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="locCity">City in which the log was recorded.</param>
        /// <param name="locLat">Latitude at which the log was
        /// recorded.</param>
        /// <param name="locLng">Longitude at which the log was
        /// recorded.</param>
        /// <param name="locName">Name of location at which the log was
        /// recorded.</param>
        /// <param name="locState">State in which the log was recorded.</param>
        /// <param name="logStartMs">The time at which the log/HOS status
        /// started in UNIX milliseconds.</param>
        /// <param name="remark">Remark associated with the log entry.</param>
        /// <param name="statusType">The Hours of Service status type. One of
        /// `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
        /// `PERSONAL_CONVEYANCE`.</param>
        /// <param name="vehicleId">ID of the vehicle.</param>
        public HosLogsResponseLogsItem(IList<double?> codriverIds = default(IList<double?>), long? driverId = default(long?), long? groupId = default(long?), string locCity = default(string), double? locLat = default(double?), double? locLng = default(double?), string locName = default(string), string locState = default(string), long? logStartMs = default(long?), string remark = default(string), string statusType = default(string), long? vehicleId = default(long?))
        {
            CodriverIds = codriverIds;
            DriverId = driverId;
            GroupId = groupId;
            LocCity = locCity;
            LocLat = locLat;
            LocLng = locLng;
            LocName = locName;
            LocState = locState;
            LogStartMs = logStartMs;
            Remark = remark;
            StatusType = statusType;
            VehicleId = vehicleId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "codriverIds")]
        public IList<double?> CodriverIds { get; set; }

        /// <summary>
        /// Gets or sets ID of the driver.
        /// </summary>
        [JsonProperty(PropertyName = "driverId")]
        public long? DriverId { get; set; }

        /// <summary>
        /// Gets or sets ID of the group.
        /// </summary>
        [JsonProperty(PropertyName = "groupId")]
        public long? GroupId { get; set; }

        /// <summary>
        /// Gets or sets city in which the log was recorded.
        /// </summary>
        [JsonProperty(PropertyName = "locCity")]
        public string LocCity { get; set; }

        /// <summary>
        /// Gets or sets latitude at which the log was recorded.
        /// </summary>
        [JsonProperty(PropertyName = "locLat")]
        public double? LocLat { get; set; }

        /// <summary>
        /// Gets or sets longitude at which the log was recorded.
        /// </summary>
        [JsonProperty(PropertyName = "locLng")]
        public double? LocLng { get; set; }

        /// <summary>
        /// Gets or sets name of location at which the log was recorded.
        /// </summary>
        [JsonProperty(PropertyName = "locName")]
        public string LocName { get; set; }

        /// <summary>
        /// Gets or sets state in which the log was recorded.
        /// </summary>
        [JsonProperty(PropertyName = "locState")]
        public string LocState { get; set; }

        /// <summary>
        /// Gets or sets the time at which the log/HOS status started in UNIX
        /// milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "logStartMs")]
        public long? LogStartMs { get; set; }

        /// <summary>
        /// Gets or sets remark associated with the log entry.
        /// </summary>
        [JsonProperty(PropertyName = "remark")]
        public string Remark { get; set; }

        /// <summary>
        /// Gets or sets the Hours of Service status type. One of `OFF_DUTY`,
        /// `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`,
        /// `PERSONAL_CONVEYANCE`.
        /// </summary>
        [JsonProperty(PropertyName = "statusType")]
        public string StatusType { get; set; }

        /// <summary>
        /// Gets or sets ID of the vehicle.
        /// </summary>
        [JsonProperty(PropertyName = "vehicleId")]
        public long? VehicleId { get; set; }

    }
}
