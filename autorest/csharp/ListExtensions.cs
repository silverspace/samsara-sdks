// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for List.
    /// </summary>
    public static partial class ListExtensions
    {
            /// <summary>
            /// /fleet/list
            /// </summary>
            /// <remarks>
            /// Get list of the vehicles. This method returns a list of the vehicles in the
            /// Samsara Cloud and information about them.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            public static FleetOKResponse Fleet(this IList operations, BodyModel groupParam)
            {
                return operations.FleetAsync(groupParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/list
            /// </summary>
            /// <remarks>
            /// Get list of the vehicles. This method returns a list of the vehicles in the
            /// Samsara Cloud and information about them.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetOKResponse> FleetAsync(this IList operations, BodyModel groupParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FleetWithHttpMessagesAsync(groupParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /users
            /// </summary>
            /// <remarks>
            /// List all users in the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<User> Users(this IList operations)
            {
                return operations.UsersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// /users
            /// </summary>
            /// <remarks>
            /// List all users in the organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<User>> UsersAsync(this IList operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
