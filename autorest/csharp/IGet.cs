// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Get operations.
    /// </summary>
    public partial interface IGet
    {
        /// <summary>
        /// /fleet/drivers
        /// </summary>
        /// <remarks>
        /// Get all the drivers for the specified group.
        /// </remarks>
        /// <param name='groupDriversParam'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DriversResponse>> DriversWithHttpMessagesAsync(GroupDriversParam groupDriversParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/drivers/summary
        /// </summary>
        /// <remarks>
        /// Get the distance and time each driver in an organization has driven
        /// in a given time period.
        /// </remarks>
        /// <param name='driversSummaryParam'>
        /// Org ID and time range to query.
        /// </param>
        /// <param name='snapToDayBounds'>
        /// Snap query result to HOS day boundaries.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DriversSummaryResponse>> SummaryWithHttpMessagesAsync(DriversSummaryParam driversSummaryParam, bool? snapToDayBounds = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
        /// </summary>
        /// <remarks>
        /// Get summarized daily HOS charts for a specified driver.
        /// </remarks>
        /// <param name='driverId'>
        /// ID of the driver with HOS logs.
        /// </param>
        /// <param name='hosLogsParam'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DriverDailyLogResponse>> LogsWithHttpMessagesAsync(long driverId, Body hosLogsParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/hos_authentication_logs
        /// </summary>
        /// <remarks>
        /// Get the HOS (hours of service) signin and signout logs for the
        /// specified driver. Only signout logs include location information.
        /// </remarks>
        /// <param name='hosAuthenticationLogsParam'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<HosAuthenticationLogsResponse>> Logs1WithHttpMessagesAsync(HosAuthenticationLogsParam hosAuthenticationLogsParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/hos_logs
        /// </summary>
        /// <remarks>
        /// Get the HOS (hours of service) logs for the specified driver. This
        /// method returns all the HOS statuses that the driver was in during
        /// this time period.
        /// </remarks>
        /// <param name='hosLogsParam'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<HosLogsResponse>> Logs2WithHttpMessagesAsync(Body hosLogsParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/hos_logs_summary
        /// </summary>
        /// <remarks>
        /// Get the current HOS status for all drivers in the group.
        /// </remarks>
        /// <param name='hosLogsParam'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<HosLogsSummaryResponse>> Summary1WithHttpMessagesAsync(HosLogsParam hosLogsParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/locations
        /// </summary>
        /// <remarks>
        /// Get current location of vehicles in a group. This method returns
        /// the current location in latitude and longitude of all vehicles in a
        /// requested group.
        /// </remarks>
        /// <param name='groupParam'>
        /// Group ID to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LocationsOKResponse>> LocationsWithHttpMessagesAsync(BodyModel groupParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/maintenance/dvirs
        /// </summary>
        /// <remarks>
        /// Get DVIRs for the org within provided time constraints
        /// </remarks>
        /// <param name='endMs'>
        /// time in millis until the last dvir log.
        /// </param>
        /// <param name='durationMs'>
        /// time in millis which corresponds to the duration before the end_ms.
        /// </param>
        /// <param name='groupId'>
        /// Group ID to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DvirListResponse>> DvirsWithHttpMessagesAsync(int endMs, int durationMs, int? groupId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/maintenance/list
        /// </summary>
        /// <remarks>
        /// Get list of the vehicles with any engine faults or check light
        /// data.
        /// </remarks>
        /// <param name='groupParam'>
        /// Group ID to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ListOKResponse>> ListMethodWithHttpMessagesAsync(BodyModel groupParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /fleet/trips
        /// </summary>
        /// <remarks>
        /// Get historical trips data for specified vehicle. This method
        /// returns a set of historical trips data for the specified vehicle in
        /// the specified time range.
        /// </remarks>
        /// <param name='tripsParam'>
        /// Group ID, vehicle ID and time range to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TripResponse>> TripsWithHttpMessagesAsync(TripsParam tripsParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /machines/history
        /// </summary>
        /// <remarks>
        /// Get historical data for machine objects. This method returns a set
        /// of historical data for all machines in a group
        /// </remarks>
        /// <param name='historyParam'>
        /// Group ID and time range to query for events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MachineHistoryResponse>> HistoryWithHttpMessagesAsync(HistoryParam historyParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /machines/list
        /// </summary>
        /// <remarks>
        /// Get machine objects. This method returns a list of the machine
        /// objects in the Samsara Cloud and information about them.
        /// </remarks>
        /// <param name='groupParam'>
        /// Group ID to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MachinesOKResponse>> MachinesWithHttpMessagesAsync(BodyModel groupParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /sensors/cargo
        /// </summary>
        /// <remarks>
        /// Get cargo monitor status (empty / full) for requested sensors.
        /// </remarks>
        /// <param name='sensorParam'>
        /// Group ID and list of sensor IDs to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CargoResponse>> CargoWithHttpMessagesAsync(BodyModelModel sensorParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /sensors/door
        /// </summary>
        /// <remarks>
        /// Get door monitor status (closed / open) for requested sensors.
        /// </remarks>
        /// <param name='sensorParam'>
        /// Group ID and list of sensor IDs to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DoorResponse>> DoorWithHttpMessagesAsync(BodyModelModel sensorParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /sensors/history
        /// </summary>
        /// <remarks>
        /// Get historical data for specified sensors. This method returns a
        /// set of historical data for the specified sensors in the specified
        /// time range and at the specified time resolution.
        /// </remarks>
        /// <param name='historyParam'>
        /// Group ID, time range and resolution, and list of sensor ID, field
        /// pairs to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SensorHistoryResponse>> History1WithHttpMessagesAsync(HistoryParamModel historyParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /sensors/humidity
        /// </summary>
        /// <remarks>
        /// Get humidity for requested sensors. This method returns the current
        /// relative humidity for the requested sensors.
        /// </remarks>
        /// <param name='sensorParam'>
        /// Group ID and list of sensor IDs to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<HumidityResponse>> HumidityWithHttpMessagesAsync(BodyModelModel sensorParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /sensors/list
        /// </summary>
        /// <remarks>
        /// Get sensor objects. This method returns a list of the sensor
        /// objects in the Samsara Cloud and information about them.
        /// </remarks>
        /// <param name='groupParam'>
        /// Group ID to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SensorsOKResponse>> SensorsWithHttpMessagesAsync(BodyModel groupParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// /sensors/temperature
        /// </summary>
        /// <remarks>
        /// Get temperature for requested sensors. This method returns the
        /// current ambient temperature (and probe temperature if applicable)
        /// for the requested sensors.
        /// </remarks>
        /// <param name='sensorParam'>
        /// Group ID and list of sensor IDs to query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TemperatureResponse>> TemperatureWithHttpMessagesAsync(BodyModelModel sensorParam, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
