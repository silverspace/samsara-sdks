// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Get.
    /// </summary>
    public static partial class GetExtensions
    {
            /// <summary>
            /// /fleet/drivers
            /// </summary>
            /// <remarks>
            /// Get all the drivers for the specified group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupDriversParam'>
            /// </param>
            public static DriversResponse Drivers(this IGet operations, GroupDriversParam groupDriversParam)
            {
                return operations.DriversAsync(groupDriversParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers
            /// </summary>
            /// <remarks>
            /// Get all the drivers for the specified group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupDriversParam'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DriversResponse> DriversAsync(this IGet operations, GroupDriversParam groupDriversParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DriversWithHttpMessagesAsync(groupDriversParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/summary
            /// </summary>
            /// <remarks>
            /// Get the distance and time each driver in an organization has driven in a
            /// given time period.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driversSummaryParam'>
            /// Org ID and time range to query.
            /// </param>
            /// <param name='snapToDayBounds'>
            /// Snap query result to HOS day boundaries.
            /// </param>
            public static DriversSummaryResponse Summary(this IGet operations, DriversSummaryParam driversSummaryParam, bool? snapToDayBounds = default(bool?))
            {
                return operations.SummaryAsync(driversSummaryParam, snapToDayBounds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/summary
            /// </summary>
            /// <remarks>
            /// Get the distance and time each driver in an organization has driven in a
            /// given time period.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driversSummaryParam'>
            /// Org ID and time range to query.
            /// </param>
            /// <param name='snapToDayBounds'>
            /// Snap query result to HOS day boundaries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DriversSummaryResponse> SummaryAsync(this IGet operations, DriversSummaryParam driversSummaryParam, bool? snapToDayBounds = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummaryWithHttpMessagesAsync(driversSummaryParam, snapToDayBounds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
            /// </summary>
            /// <remarks>
            /// Get summarized daily HOS charts for a specified driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver with HOS logs.
            /// </param>
            /// <param name='hosLogsParam'>
            /// </param>
            public static DriverDailyLogResponse Logs(this IGet operations, long driverId, Body hosLogsParam)
            {
                return operations.LogsAsync(driverId, hosLogsParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/drivers/{driver_id:[0-9]+}/hos_daily_logs
            /// </summary>
            /// <remarks>
            /// Get summarized daily HOS charts for a specified driver.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='driverId'>
            /// ID of the driver with HOS logs.
            /// </param>
            /// <param name='hosLogsParam'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DriverDailyLogResponse> LogsAsync(this IGet operations, long driverId, Body hosLogsParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogsWithHttpMessagesAsync(driverId, hosLogsParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/hos_authentication_logs
            /// </summary>
            /// <remarks>
            /// Get the HOS (hours of service) signin and signout logs for the specified
            /// driver. Only signout logs include location information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hosAuthenticationLogsParam'>
            /// </param>
            public static HosAuthenticationLogsResponse Logs1(this IGet operations, HosAuthenticationLogsParam hosAuthenticationLogsParam)
            {
                return operations.Logs1Async(hosAuthenticationLogsParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/hos_authentication_logs
            /// </summary>
            /// <remarks>
            /// Get the HOS (hours of service) signin and signout logs for the specified
            /// driver. Only signout logs include location information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hosAuthenticationLogsParam'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HosAuthenticationLogsResponse> Logs1Async(this IGet operations, HosAuthenticationLogsParam hosAuthenticationLogsParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Logs1WithHttpMessagesAsync(hosAuthenticationLogsParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/hos_logs
            /// </summary>
            /// <remarks>
            /// Get the HOS (hours of service) logs for the specified driver. This method
            /// returns all the HOS statuses that the driver was in during this time
            /// period.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hosLogsParam'>
            /// </param>
            public static HosLogsResponse Logs2(this IGet operations, Body hosLogsParam)
            {
                return operations.Logs2Async(hosLogsParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/hos_logs
            /// </summary>
            /// <remarks>
            /// Get the HOS (hours of service) logs for the specified driver. This method
            /// returns all the HOS statuses that the driver was in during this time
            /// period.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hosLogsParam'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HosLogsResponse> Logs2Async(this IGet operations, Body hosLogsParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Logs2WithHttpMessagesAsync(hosLogsParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/hos_logs_summary
            /// </summary>
            /// <remarks>
            /// Get the current HOS status for all drivers in the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hosLogsParam'>
            /// </param>
            public static HosLogsSummaryResponse Summary1(this IGet operations, HosLogsParam hosLogsParam)
            {
                return operations.Summary1Async(hosLogsParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/hos_logs_summary
            /// </summary>
            /// <remarks>
            /// Get the current HOS status for all drivers in the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hosLogsParam'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HosLogsSummaryResponse> Summary1Async(this IGet operations, HosLogsParam hosLogsParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Summary1WithHttpMessagesAsync(hosLogsParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/locations
            /// </summary>
            /// <remarks>
            /// Get current location of vehicles in a group. This method returns the
            /// current location in latitude and longitude of all vehicles in a requested
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            public static LocationsOKResponse Locations(this IGet operations, BodyModel groupParam)
            {
                return operations.LocationsAsync(groupParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/locations
            /// </summary>
            /// <remarks>
            /// Get current location of vehicles in a group. This method returns the
            /// current location in latitude and longitude of all vehicles in a requested
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocationsOKResponse> LocationsAsync(this IGet operations, BodyModel groupParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LocationsWithHttpMessagesAsync(groupParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/maintenance/dvirs
            /// </summary>
            /// <remarks>
            /// Get DVIRs for the org within provided time constraints
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endMs'>
            /// time in millis until the last dvir log.
            /// </param>
            /// <param name='durationMs'>
            /// time in millis which corresponds to the duration before the end_ms.
            /// </param>
            /// <param name='groupId'>
            /// Group ID to query.
            /// </param>
            public static DvirListResponse Dvirs(this IGet operations, int endMs, int durationMs, int? groupId = default(int?))
            {
                return operations.DvirsAsync(endMs, durationMs, groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/maintenance/dvirs
            /// </summary>
            /// <remarks>
            /// Get DVIRs for the org within provided time constraints
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endMs'>
            /// time in millis until the last dvir log.
            /// </param>
            /// <param name='durationMs'>
            /// time in millis which corresponds to the duration before the end_ms.
            /// </param>
            /// <param name='groupId'>
            /// Group ID to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DvirListResponse> DvirsAsync(this IGet operations, int endMs, int durationMs, int? groupId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DvirsWithHttpMessagesAsync(endMs, durationMs, groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/maintenance/list
            /// </summary>
            /// <remarks>
            /// Get list of the vehicles with any engine faults or check light data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            public static ListOKResponse ListMethod(this IGet operations, BodyModel groupParam)
            {
                return operations.ListMethodAsync(groupParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/maintenance/list
            /// </summary>
            /// <remarks>
            /// Get list of the vehicles with any engine faults or check light data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponse> ListMethodAsync(this IGet operations, BodyModel groupParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMethodWithHttpMessagesAsync(groupParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /fleet/trips
            /// </summary>
            /// <remarks>
            /// Get historical trips data for specified vehicle. This method returns a set
            /// of historical trips data for the specified vehicle in the specified time
            /// range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tripsParam'>
            /// Group ID, vehicle ID and time range to query.
            /// </param>
            public static TripResponse Trips(this IGet operations, TripsParam tripsParam)
            {
                return operations.TripsAsync(tripsParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /fleet/trips
            /// </summary>
            /// <remarks>
            /// Get historical trips data for specified vehicle. This method returns a set
            /// of historical trips data for the specified vehicle in the specified time
            /// range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tripsParam'>
            /// Group ID, vehicle ID and time range to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TripResponse> TripsAsync(this IGet operations, TripsParam tripsParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TripsWithHttpMessagesAsync(tripsParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /machines/history
            /// </summary>
            /// <remarks>
            /// Get historical data for machine objects. This method returns a set of
            /// historical data for all machines in a group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='historyParam'>
            /// Group ID and time range to query for events
            /// </param>
            public static MachineHistoryResponse History(this IGet operations, HistoryParam historyParam)
            {
                return operations.HistoryAsync(historyParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /machines/history
            /// </summary>
            /// <remarks>
            /// Get historical data for machine objects. This method returns a set of
            /// historical data for all machines in a group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='historyParam'>
            /// Group ID and time range to query for events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineHistoryResponse> HistoryAsync(this IGet operations, HistoryParam historyParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HistoryWithHttpMessagesAsync(historyParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /machines/list
            /// </summary>
            /// <remarks>
            /// Get machine objects. This method returns a list of the machine objects in
            /// the Samsara Cloud and information about them.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            public static MachinesOKResponse Machines(this IGet operations, BodyModel groupParam)
            {
                return operations.MachinesAsync(groupParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /machines/list
            /// </summary>
            /// <remarks>
            /// Get machine objects. This method returns a list of the machine objects in
            /// the Samsara Cloud and information about them.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachinesOKResponse> MachinesAsync(this IGet operations, BodyModel groupParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MachinesWithHttpMessagesAsync(groupParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /sensors/cargo
            /// </summary>
            /// <remarks>
            /// Get cargo monitor status (empty / full) for requested sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            public static CargoResponse Cargo(this IGet operations, BodyModelModel sensorParam)
            {
                return operations.CargoAsync(sensorParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /sensors/cargo
            /// </summary>
            /// <remarks>
            /// Get cargo monitor status (empty / full) for requested sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CargoResponse> CargoAsync(this IGet operations, BodyModelModel sensorParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CargoWithHttpMessagesAsync(sensorParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /sensors/door
            /// </summary>
            /// <remarks>
            /// Get door monitor status (closed / open) for requested sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            public static DoorResponse Door(this IGet operations, BodyModelModel sensorParam)
            {
                return operations.DoorAsync(sensorParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /sensors/door
            /// </summary>
            /// <remarks>
            /// Get door monitor status (closed / open) for requested sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DoorResponse> DoorAsync(this IGet operations, BodyModelModel sensorParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DoorWithHttpMessagesAsync(sensorParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /sensors/history
            /// </summary>
            /// <remarks>
            /// Get historical data for specified sensors. This method returns a set of
            /// historical data for the specified sensors in the specified time range and
            /// at the specified time resolution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='historyParam'>
            /// Group ID, time range and resolution, and list of sensor ID, field pairs to
            /// query.
            /// </param>
            public static SensorHistoryResponse History1(this IGet operations, HistoryParamModel historyParam)
            {
                return operations.History1Async(historyParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /sensors/history
            /// </summary>
            /// <remarks>
            /// Get historical data for specified sensors. This method returns a set of
            /// historical data for the specified sensors in the specified time range and
            /// at the specified time resolution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='historyParam'>
            /// Group ID, time range and resolution, and list of sensor ID, field pairs to
            /// query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SensorHistoryResponse> History1Async(this IGet operations, HistoryParamModel historyParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.History1WithHttpMessagesAsync(historyParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /sensors/humidity
            /// </summary>
            /// <remarks>
            /// Get humidity for requested sensors. This method returns the current
            /// relative humidity for the requested sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            public static HumidityResponse Humidity(this IGet operations, BodyModelModel sensorParam)
            {
                return operations.HumidityAsync(sensorParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /sensors/humidity
            /// </summary>
            /// <remarks>
            /// Get humidity for requested sensors. This method returns the current
            /// relative humidity for the requested sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HumidityResponse> HumidityAsync(this IGet operations, BodyModelModel sensorParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HumidityWithHttpMessagesAsync(sensorParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /sensors/list
            /// </summary>
            /// <remarks>
            /// Get sensor objects. This method returns a list of the sensor objects in the
            /// Samsara Cloud and information about them.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            public static SensorsOKResponse Sensors(this IGet operations, BodyModel groupParam)
            {
                return operations.SensorsAsync(groupParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /sensors/list
            /// </summary>
            /// <remarks>
            /// Get sensor objects. This method returns a list of the sensor objects in the
            /// Samsara Cloud and information about them.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupParam'>
            /// Group ID to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SensorsOKResponse> SensorsAsync(this IGet operations, BodyModel groupParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SensorsWithHttpMessagesAsync(groupParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// /sensors/temperature
            /// </summary>
            /// <remarks>
            /// Get temperature for requested sensors. This method returns the current
            /// ambient temperature (and probe temperature if applicable) for the requested
            /// sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            public static TemperatureResponse Temperature(this IGet operations, BodyModelModel sensorParam)
            {
                return operations.TemperatureAsync(sensorParam).GetAwaiter().GetResult();
            }

            /// <summary>
            /// /sensors/temperature
            /// </summary>
            /// <remarks>
            /// Get temperature for requested sensors. This method returns the current
            /// ambient temperature (and probe temperature if applicable) for the requested
            /// sensors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorParam'>
            /// Group ID and list of sensor IDs to query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TemperatureResponse> TemperatureAsync(this IGet operations, BodyModelModel sensorParam, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TemperatureWithHttpMessagesAsync(sensorParam, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
